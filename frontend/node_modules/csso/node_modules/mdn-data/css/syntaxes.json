{
  "absolute-size": {
    "syntax": "xx-small | x-small | small | medium | large | x-large | xx-large | xxx-large"
  ***REMOVED***,
  "alpha-value": {
    "syntax": "<number> | <percentage>"
  ***REMOVED***,
  "angle-percentage": {
    "syntax": "<angle> | <percentage>"
  ***REMOVED***,
  "angular-color-hint": {
    "syntax": "<angle-percentage>"
  ***REMOVED***,
  "angular-color-stop": {
    "syntax": "<color> && <color-stop-angle>?"
  ***REMOVED***,
  "angular-color-stop-list": {
    "syntax": "[ <angular-color-stop> [, <angular-color-hint>]? ]# , <angular-color-stop>"
  ***REMOVED***,
  "animateable-feature": {
    "syntax": "scroll-position | contents | <custom-ident>"
  ***REMOVED***,
  "attachment": {
    "syntax": "scroll | fixed | local"
  ***REMOVED***,
  "attr()": {
    "syntax": "attr( <attr-name> <type-or-unit>? [, <attr-fallback> ]? )"
  ***REMOVED***,
  "attr-matcher": {
    "syntax": "[ '~' | '|' | '^' | '$' | '*' ]? '='"
  ***REMOVED***,
  "attr-modifier": {
    "syntax": "i | s"
  ***REMOVED***,
  "attribute-selector": {
    "syntax": "'[' <wq-name> ']' | '[' <wq-name> <attr-matcher> [ <string-token> | <ident-token> ] <attr-modifier>? ']'"
  ***REMOVED***,
  "auto-repeat": {
    "syntax": "repeat( [ auto-fill | auto-fit ] , [ <line-names>? <fixed-size> ]+ <line-names>? )"
  ***REMOVED***,
  "auto-track-list": {
    "syntax": "[ <line-names>? [ <fixed-size> | <fixed-repeat> ] ]* <line-names>? <auto-repeat>\n[ <line-names>? [ <fixed-size> | <fixed-repeat> ] ]* <line-names>?"
  ***REMOVED***,
  "baseline-position": {
    "syntax": "[ first | last ]? baseline"
  ***REMOVED***,
  "basic-shape": {
    "syntax": "<inset()> | <circle()> | <ellipse()> | <polygon()> | <path()>"
  ***REMOVED***,
  "bg-image": {
    "syntax": "none | <image>"
  ***REMOVED***,
  "bg-layer": {
    "syntax": "<bg-image> || <bg-position> [ / <bg-size> ]? || <repeat-style> || <attachment> || <box> || <box>"
  ***REMOVED***,
  "bg-position": {
    "syntax": "[ [ left | center | right | top | bottom | <length-percentage> ] | [ left | center | right | <length-percentage> ] [ top | center | bottom | <length-percentage> ] | [ center | [ left | right ] <length-percentage>? ] && [ center | [ top | bottom ] <length-percentage>? ] ]"
  ***REMOVED***,
  "bg-size": {
    "syntax": "[ <length-percentage> | auto ]{1,2***REMOVED*** | cover | contain"
  ***REMOVED***,
  "blur()": {
    "syntax": "blur( <length> )"
  ***REMOVED***,
  "blend-mode": {
    "syntax": "normal | multiply | screen | overlay | darken | lighten | color-dodge | color-burn | hard-light | soft-light | difference | exclusion | hue | saturation | color | luminosity"
  ***REMOVED***,
  "box": {
    "syntax": "border-box | padding-box | content-box"
  ***REMOVED***,
  "brightness()": {
    "syntax": "brightness( <number-percentage> )"
  ***REMOVED***,
  "calc()": {
    "syntax": "calc( <calc-sum> )"
  ***REMOVED***,
  "calc-sum": {
    "syntax": "<calc-product> [ [ '+' | '-' ] <calc-product> ]*"
  ***REMOVED***,
  "calc-product": {
    "syntax": "<calc-value> [ '*' <calc-value> | '/' <number> ]*"
  ***REMOVED***,
  "calc-value": {
    "syntax": "<number> | <dimension> | <percentage> | ( <calc-sum> )"
  ***REMOVED***,
  "cf-final-image": {
    "syntax": "<image> | <color>"
  ***REMOVED***,
  "cf-mixing-image": {
    "syntax": "<percentage>? && <image>"
  ***REMOVED***,
  "circle()": {
    "syntax": "circle( [ <shape-radius> ]? [ at <position> ]? )"
  ***REMOVED***,
  "clamp()": {
    "syntax": "clamp( <calc-sum>#{3***REMOVED*** )"
  ***REMOVED***,
  "class-selector": {
    "syntax": "'.' <ident-token>"
  ***REMOVED***,
  "clip-source": {
    "syntax": "<url>"
  ***REMOVED***,
  "color": {
    "syntax": "<rgb()> | <rgba()> | <hsl()> | <hsla()> | <hex-color> | <named-color> | currentcolor | <deprecated-system-color>"
  ***REMOVED***,
  "color-stop": {
    "syntax": "<color-stop-length> | <color-stop-angle>"
  ***REMOVED***,
  "color-stop-angle": {
    "syntax": "<angle-percentage>{1,2***REMOVED***"
  ***REMOVED***,
  "color-stop-length": {
    "syntax": "<length-percentage>{1,2***REMOVED***"
  ***REMOVED***,
  "color-stop-list": {
    "syntax": "[ <linear-color-stop> [, <linear-color-hint>]? ]# , <linear-color-stop>"
  ***REMOVED***,
  "combinator": {
    "syntax": "'>' | '+' | '~' | [ '||' ]"
  ***REMOVED***,
  "common-lig-values": {
    "syntax": "[ common-ligatures | no-common-ligatures ]"
  ***REMOVED***,
  "compat-auto": {
    "syntax": "searchfield | textarea | push-button | slider-horizontal | checkbox | radio | square-button | menulist | listbox | meter | progress-bar | button"
  ***REMOVED***,
  "composite-style": {
    "syntax": "clear | copy | source-over | source-in | source-out | source-atop | destination-over | destination-in | destination-out | destination-atop | xor"
  ***REMOVED***,
  "compositing-operator": {
    "syntax": "add | subtract | intersect | exclude"
  ***REMOVED***,
  "compound-selector": {
    "syntax": "[ <type-selector>? <subclass-selector>* [ <pseudo-element-selector> <pseudo-class-selector>* ]* ]!"
  ***REMOVED***,
  "compound-selector-list": {
    "syntax": "<compound-selector>#"
  ***REMOVED***,
  "complex-selector": {
    "syntax": "<compound-selector> [ <combinator>? <compound-selector> ]*"
  ***REMOVED***,
  "complex-selector-list": {
    "syntax": "<complex-selector>#"
  ***REMOVED***,
  "conic-gradient()": {
    "syntax": "conic-gradient( [ from <angle> ]? [ at <position> ]?, <angular-color-stop-list> )"
  ***REMOVED***,
  "contextual-alt-values": {
    "syntax": "[ contextual | no-contextual ]"
  ***REMOVED***,
  "content-distribution": {
    "syntax": "space-between | space-around | space-evenly | stretch"
  ***REMOVED***,
  "content-list": {
    "syntax": "[ <string> | contents | <image> | <quote> | <target> | <leader()> ]+"
  ***REMOVED***,
  "content-position": {
    "syntax": "center | start | end | flex-start | flex-end"
  ***REMOVED***,
  "content-replacement": {
    "syntax": "<image>"
  ***REMOVED***,
  "contrast()": {
    "syntax": "contrast( [ <number-percentage> ] )"
  ***REMOVED***,
  "counter()": {
    "syntax": "counter( <custom-ident>, <counter-style>? )"
  ***REMOVED***,
  "counter-style": {
    "syntax": "<counter-style-name> | symbols()"
  ***REMOVED***,
  "counter-style-name": {
    "syntax": "<custom-ident>"
  ***REMOVED***,
  "counters()": {
    "syntax": "counters( <custom-ident>, <string>, <counter-style>? )"
  ***REMOVED***,
  "cross-fade()": {
    "syntax": "cross-fade( <cf-mixing-image> , <cf-final-image>? )"
  ***REMOVED***,
  "cubic-bezier-timing-function": {
    "syntax": "ease | ease-in | ease-out | ease-in-out | cubic-bezier(<number [0,1]>, <number>, <number [0,1]>, <number>)"
  ***REMOVED***,
  "deprecated-system-color": {
    "syntax": "ActiveBorder | ActiveCaption | AppWorkspace | Background | ButtonFace | ButtonHighlight | ButtonShadow | ButtonText | CaptionText | GrayText | Highlight | HighlightText | InactiveBorder | InactiveCaption | InactiveCaptionText | InfoBackground | InfoText | Menu | MenuText | Scrollbar | ThreeDDarkShadow | ThreeDFace | ThreeDHighlight | ThreeDLightShadow | ThreeDShadow | Window | WindowFrame | WindowText"
  ***REMOVED***,
  "discretionary-lig-values": {
    "syntax": "[ discretionary-ligatures | no-discretionary-ligatures ]"
  ***REMOVED***,
  "display-box": {
    "syntax": "contents | none"
  ***REMOVED***,
  "display-inside": {
    "syntax": "flow | flow-root | table | flex | grid | ruby"
  ***REMOVED***,
  "display-internal": {
    "syntax": "table-row-group | table-header-group | table-footer-group | table-row | table-cell | table-column-group | table-column | table-caption | ruby-base | ruby-text | ruby-base-container | ruby-text-container"
  ***REMOVED***,
  "display-legacy": {
    "syntax": "inline-block | inline-list-item | inline-table | inline-flex | inline-grid"
  ***REMOVED***,
  "display-listitem": {
    "syntax": "<display-outside>? && [ flow | flow-root ]? && list-item"
  ***REMOVED***,
  "display-outside": {
    "syntax": "block | inline | run-in"
  ***REMOVED***,
  "drop-shadow()": {
    "syntax": "drop-shadow( <length>{2,3***REMOVED*** <color>? )"
  ***REMOVED***,
  "east-asian-variant-values": {
    "syntax": "[ jis78 | jis83 | jis90 | jis04 | simplified | traditional ]"
  ***REMOVED***,
  "east-asian-width-values": {
    "syntax": "[ full-width | proportional-width ]"
  ***REMOVED***,
  "element()": {
    "syntax": "element( <id-selector> )"
  ***REMOVED***,
  "ellipse()": {
    "syntax": "ellipse( [ <shape-radius>{2***REMOVED*** ]? [ at <position> ]? )"
  ***REMOVED***,
  "ending-shape": {
    "syntax": "circle | ellipse"
  ***REMOVED***,
  "env()": {
    "syntax": "env( <custom-ident> , <declaration-value>? )"
  ***REMOVED***,
  "explicit-track-list": {
    "syntax": "[ <line-names>? <track-size> ]+ <line-names>?"
  ***REMOVED***,
  "family-name": {
    "syntax": "<string> | <custom-ident>+"
  ***REMOVED***,
  "feature-tag-value": {
    "syntax": "<string> [ <integer> | on | off ]?"
  ***REMOVED***,
  "feature-type": {
    "syntax": "@stylistic | @historical-forms | @styleset | @character-variant | @swash | @ornaments | @annotation"
  ***REMOVED***,
  "feature-value-block": {
    "syntax": "<feature-type> '{' <feature-value-declaration-list> '***REMOVED***'"
  ***REMOVED***,
  "feature-value-block-list": {
    "syntax": "<feature-value-block>+"
  ***REMOVED***,
  "feature-value-declaration": {
    "syntax": "<custom-ident>: <integer>+;"
  ***REMOVED***,
  "feature-value-declaration-list": {
    "syntax": "<feature-value-declaration>"
  ***REMOVED***,
  "feature-value-name": {
    "syntax": "<custom-ident>"
  ***REMOVED***,
  "fill-rule": {
    "syntax": "nonzero | evenodd"
  ***REMOVED***,
  "filter-function": {
    "syntax": "<blur()> | <brightness()> | <contrast()> | <drop-shadow()> | <grayscale()> | <hue-rotate()> | <invert()> | <opacity()> | <saturate()> | <sepia()>"
  ***REMOVED***,
  "filter-function-list": {
    "syntax": "[ <filter-function> | <url> ]+"
  ***REMOVED***,
  "final-bg-layer": {
    "syntax": "<'background-color'> || <bg-image> || <bg-position> [ / <bg-size> ]? || <repeat-style> || <attachment> || <box> || <box>"
  ***REMOVED***,
  "fit-content()": {
    "syntax": "fit-content( [ <length> | <percentage> ] )"
  ***REMOVED***,
  "fixed-breadth": {
    "syntax": "<length-percentage>"
  ***REMOVED***,
  "fixed-repeat": {
    "syntax": "repeat( [ <positive-integer> ] , [ <line-names>? <fixed-size> ]+ <line-names>? )"
  ***REMOVED***,
  "fixed-size": {
    "syntax": "<fixed-breadth> | minmax( <fixed-breadth> , <track-breadth> ) | minmax( <inflexible-breadth> , <fixed-breadth> )"
  ***REMOVED***,
  "font-stretch-absolute": {
    "syntax": "normal | ultra-condensed | extra-condensed | condensed | semi-condensed | semi-expanded | expanded | extra-expanded | ultra-expanded | <percentage>"
  ***REMOVED***,
  "font-variant-css21": {
    "syntax": "[ normal | small-caps ]"
  ***REMOVED***,
  "font-weight-absolute": {
    "syntax": "normal | bold | <number [1,1000]>"
  ***REMOVED***,
  "frequency-percentage": {
    "syntax": "<frequency> | <percentage>"
  ***REMOVED***,
  "general-enclosed": {
    "syntax": "[ <function-token> <any-value> ) ] | ( <ident> <any-value> )"
  ***REMOVED***,
  "generic-family": {
    "syntax": "serif | sans-serif | cursive | fantasy | monospace"
  ***REMOVED***,
  "generic-name": {
    "syntax": "serif | sans-serif | cursive | fantasy | monospace"
  ***REMOVED***,
  "geometry-box": {
    "syntax": "<shape-box> | fill-box | stroke-box | view-box"
  ***REMOVED***,
  "gradient": {
    "syntax": "<linear-gradient()> | <repeating-linear-gradient()> | <radial-gradient()> | <repeating-radial-gradient()> | <conic-gradient()>"
  ***REMOVED***,
  "grayscale()": {
    "syntax": "grayscale( <number-percentage> )"
  ***REMOVED***,
  "grid-line": {
    "syntax": "auto | <custom-ident> | [ <integer> && <custom-ident>? ] | [ span && [ <integer> || <custom-ident> ] ]"
  ***REMOVED***,
  "historical-lig-values": {
    "syntax": "[ historical-ligatures | no-historical-ligatures ]"
  ***REMOVED***,
  "hsl()": {
    "syntax": "hsl( <hue> <percentage> <percentage> [ / <alpha-value> ]? ) | hsl( <hue>, <percentage>, <percentage>, <alpha-value>? )"
  ***REMOVED***,
  "hsla()": {
    "syntax": "hsla( <hue> <percentage> <percentage> [ / <alpha-value> ]? ) | hsla( <hue>, <percentage>, <percentage>, <alpha-value>? )"
  ***REMOVED***,
  "hue": {
    "syntax": "<number> | <angle>"
  ***REMOVED***,
  "hue-rotate()": {
    "syntax": "hue-rotate( <angle> )"
  ***REMOVED***,
  "id-selector": {
    "syntax": "<hash-token>"
  ***REMOVED***,
  "image": {
    "syntax": "<url> | <image()> | <image-set()> | <element()> | <paint()> | <cross-fade()> | <gradient>"
  ***REMOVED***,
  "image()": {
    "syntax": "image( <image-tags>? [ <image-src>? , <color>? ]! )"
  ***REMOVED***,
  "image-set()": {
    "syntax": "image-set( <image-set-option># )"
  ***REMOVED***,
  "image-set-option": {
    "syntax": "[ <image> | <string> ] <resolution>"
  ***REMOVED***,
  "image-src": {
    "syntax": "<url> | <string>"
  ***REMOVED***,
  "image-tags": {
    "syntax": "ltr | rtl"
  ***REMOVED***,
  "inflexible-breadth": {
    "syntax": "<length> | <percentage> | min-content | max-content | auto"
  ***REMOVED***,
  "inset()": {
    "syntax": "inset( <length-percentage>{1,4***REMOVED*** [ round <'border-radius'> ]? )"
  ***REMOVED***,
  "invert()": {
    "syntax": "invert( <number-percentage> )"
  ***REMOVED***,
  "keyframes-name": {
    "syntax": "<custom-ident> | <string>"
  ***REMOVED***,
  "keyframe-block": {
    "syntax": "<keyframe-selector># {\n  <declaration-list>\n***REMOVED***"
  ***REMOVED***,
  "keyframe-block-list": {
    "syntax": "<keyframe-block>+"
  ***REMOVED***,
  "keyframe-selector": {
    "syntax": "from | to | <percentage>"
  ***REMOVED***,
  "leader()": {
    "syntax": "leader( <leader-type> )"
  ***REMOVED***,
  "leader-type": {
    "syntax": "dotted | solid | space | <string>"
  ***REMOVED***,
  "length-percentage": {
    "syntax": "<length> | <percentage>"
  ***REMOVED***,
  "line-names": {
    "syntax": "'[' <custom-ident>* ']'"
  ***REMOVED***,
  "line-name-list": {
    "syntax": "[ <line-names> | <name-repeat> ]+"
  ***REMOVED***,
  "line-style": {
    "syntax": "none | hidden | dotted | dashed | solid | double | groove | ridge | inset | outset"
  ***REMOVED***,
  "line-width": {
    "syntax": "<length> | thin | medium | thick"
  ***REMOVED***,
  "linear-color-hint": {
    "syntax": "<length-percentage>"
  ***REMOVED***,
  "linear-color-stop": {
    "syntax": "<color> <color-stop-length>?"
  ***REMOVED***,
  "linear-gradient()": {
    "syntax": "linear-gradient( [ <angle> | to <side-or-corner> ]? , <color-stop-list> )"
  ***REMOVED***,
  "mask-layer": {
    "syntax": "<mask-reference> || <position> [ / <bg-size> ]? || <repeat-style> || <geometry-box> || [ <geometry-box> | no-clip ] || <compositing-operator> || <masking-mode>"
  ***REMOVED***,
  "mask-position": {
    "syntax": "[ <length-percentage> | left | center | right ] [ <length-percentage> | top | center | bottom ]?"
  ***REMOVED***,
  "mask-reference": {
    "syntax": "none | <image> | <mask-source>"
  ***REMOVED***,
  "mask-source": {
    "syntax": "<url>"
  ***REMOVED***,
  "masking-mode": {
    "syntax": "alpha | luminance | match-source"
  ***REMOVED***,
  "matrix()": {
    "syntax": "matrix( <number>#{6***REMOVED*** )"
  ***REMOVED***,
  "matrix3d()": {
    "syntax": "matrix3d( <number>#{16***REMOVED*** )"
  ***REMOVED***,
  "max()": {
    "syntax": "max( <calc-sum># )"
  ***REMOVED***,
  "media-and": {
    "syntax": "<media-in-parens> [ and <media-in-parens> ]+"
  ***REMOVED***,
  "media-condition": {
    "syntax": "<media-not> | <media-and> | <media-or> | <media-in-parens>"
  ***REMOVED***,
  "media-condition-without-or": {
    "syntax": "<media-not> | <media-and> | <media-in-parens>"
  ***REMOVED***,
  "media-feature": {
    "syntax": "( [ <mf-plain> | <mf-boolean> | <mf-range> ] )"
  ***REMOVED***,
  "media-in-parens": {
    "syntax": "( <media-condition> ) | <media-feature> | <general-enclosed>"
  ***REMOVED***,
  "media-not": {
    "syntax": "not <media-in-parens>"
  ***REMOVED***,
  "media-or": {
    "syntax": "<media-in-parens> [ or <media-in-parens> ]+"
  ***REMOVED***,
  "media-query": {
    "syntax": "<media-condition> | [ not | only ]? <media-type> [ and <media-condition-without-or> ]?"
  ***REMOVED***,
  "media-query-list": {
    "syntax": "<media-query>#"
  ***REMOVED***,
  "media-type": {
    "syntax": "<ident>"
  ***REMOVED***,
  "mf-boolean": {
    "syntax": "<mf-name>"
  ***REMOVED***,
  "mf-name": {
    "syntax": "<ident>"
  ***REMOVED***,
  "mf-plain": {
    "syntax": "<mf-name> : <mf-value>"
  ***REMOVED***,
  "mf-range": {
    "syntax": "<mf-name> [ '<' | '>' ]? '='? <mf-value>\n| <mf-value> [ '<' | '>' ]? '='? <mf-name>\n| <mf-value> '<' '='? <mf-name> '<' '='? <mf-value>\n| <mf-value> '>' '='? <mf-name> '>' '='? <mf-value>"
  ***REMOVED***,
  "mf-value": {
    "syntax": "<number> | <dimension> | <ident> | <ratio>"
  ***REMOVED***,
  "min()": {
    "syntax": "min( <calc-sum># )"
  ***REMOVED***,
  "minmax()": {
    "syntax": "minmax( [ <length> | <percentage> | min-content | max-content | auto ] , [ <length> | <percentage> | <flex> | min-content | max-content | auto ] )"
  ***REMOVED***,
  "named-color": {
    "syntax": "transparent | aliceblue | antiquewhite | aqua | aquamarine | azure | beige | bisque | black | blanchedalmond | blue | blueviolet | brown | burlywood | cadetblue | chartreuse | chocolate | coral | cornflowerblue | cornsilk | crimson | cyan | darkblue | darkcyan | darkgoldenrod | darkgray | darkgreen | darkgrey | darkkhaki | darkmagenta | darkolivegreen | darkorange | darkorchid | darkred | darksalmon | darkseagreen | darkslateblue | darkslategray | darkslategrey | darkturquoise | darkviolet | deeppink | deepskyblue | dimgray | dimgrey | dodgerblue | firebrick | floralwhite | forestgreen | fuchsia | gainsboro | ghostwhite | gold | goldenrod | gray | green | greenyellow | grey | honeydew | hotpink | indianred | indigo | ivory | khaki | lavender | lavenderblush | lawngreen | lemonchiffon | lightblue | lightcoral | lightcyan | lightgoldenrodyellow | lightgray | lightgreen | lightgrey | lightpink | lightsalmon | lightseagreen | lightskyblue | lightslategray | lightslategrey | lightsteelblue | lightyellow | lime | limegreen | linen | magenta | maroon | mediumaquamarine | mediumblue | mediumorchid | mediumpurple | mediumseagreen | mediumslateblue | mediumspringgreen | mediumturquoise | mediumvioletred | midnightblue | mintcream | mistyrose | moccasin | navajowhite | navy | oldlace | olive | olivedrab | orange | orangered | orchid | palegoldenrod | palegreen | paleturquoise | palevioletred | papayawhip | peachpuff | peru | pink | plum | powderblue | purple | rebeccapurple | red | rosybrown | royalblue | saddlebrown | salmon | sandybrown | seagreen | seashell | sienna | silver | skyblue | slateblue | slategray | slategrey | snow | springgreen | steelblue | tan | teal | thistle | tomato | turquoise | violet | wheat | white | whitesmoke | yellow | yellowgreen"
  ***REMOVED***,
  "namespace-prefix": {
    "syntax": "<ident>"
  ***REMOVED***,
  "ns-prefix": {
    "syntax": "[ <ident-token> | '*' ]? '|'"
  ***REMOVED***,
  "number-percentage": {
    "syntax": "<number> | <percentage>"
  ***REMOVED***,
  "numeric-figure-values": {
    "syntax": "[ lining-nums | oldstyle-nums ]"
  ***REMOVED***,
  "numeric-fraction-values": {
    "syntax": "[ diagonal-fractions | stacked-fractions ]"
  ***REMOVED***,
  "numeric-spacing-values": {
    "syntax": "[ proportional-nums | tabular-nums ]"
  ***REMOVED***,
  "nth": {
    "syntax": "<an-plus-b> | even | odd"
  ***REMOVED***,
  "opacity()": {
    "syntax": "opacity( [ <number-percentage> ] )"
  ***REMOVED***,
  "overflow-position": {
    "syntax": "unsafe | safe"
  ***REMOVED***,
  "outline-radius": {
    "syntax": "<length> | <percentage>"
  ***REMOVED***,
  "page-body": {
    "syntax": "<declaration>? [ ; <page-body> ]? | <page-margin-box> <page-body>"
  ***REMOVED***,
  "page-margin-box": {
    "syntax": "<page-margin-box-type> '{' <declaration-list> '***REMOVED***'"
  ***REMOVED***,
  "page-margin-box-type": {
    "syntax": "@top-left-corner | @top-left | @top-center | @top-right | @top-right-corner | @bottom-left-corner | @bottom-left | @bottom-center | @bottom-right | @bottom-right-corner | @left-top | @left-middle | @left-bottom | @right-top | @right-middle | @right-bottom"
  ***REMOVED***,
  "page-selector-list": {
    "syntax": "[ <page-selector># ]?"
  ***REMOVED***,
  "page-selector": {
    "syntax": "<pseudo-page>+ | <ident> <pseudo-page>*"
  ***REMOVED***,
  "path()": {
    "syntax": "path( [ <fill-rule>, ]? <string> )"
  ***REMOVED***,
  "paint()": {
    "syntax": "paint( <ident>, <declaration-value>? )"
  ***REMOVED***,
  "perspective()": {
    "syntax": "perspective( <length> )"
  ***REMOVED***,
  "polygon()": {
    "syntax": "polygon( <fill-rule>? , [ <length-percentage> <length-percentage> ]# )"
  ***REMOVED***,
  "position": {
    "syntax": "[ [ left | center | right ] || [ top | center | bottom ] | [ left | center | right | <length-percentage> ] [ top | center | bottom | <length-percentage> ]? | [ [ left | right ] <length-percentage> ] && [ [ top | bottom ] <length-percentage> ] ]"
  ***REMOVED***,
  "pseudo-class-selector": {
    "syntax": "':' <ident-token> | ':' <function-token> <any-value> ')'"
  ***REMOVED***,
  "pseudo-element-selector": {
    "syntax": "':' <pseudo-class-selector>"
  ***REMOVED***,
  "pseudo-page": {
    "syntax": ": [ left | right | first | blank ]"
  ***REMOVED***,
  "quote": {
    "syntax": "open-quote | close-quote | no-open-quote | no-close-quote"
  ***REMOVED***,
  "radial-gradient()": {
    "syntax": "radial-gradient( [ <ending-shape> || <size> ]? [ at <position> ]? , <color-stop-list> )"
  ***REMOVED***,
  "relative-selector": {
    "syntax": "<combinator>? <complex-selector>"
  ***REMOVED***,
  "relative-selector-list": {
    "syntax": "<relative-selector>#"
  ***REMOVED***,
  "relative-size": {
    "syntax": "larger | smaller"
  ***REMOVED***,
  "repeat-style": {
    "syntax": "repeat-x | repeat-y | [ repeat | space | round | no-repeat ]{1,2***REMOVED***"
  ***REMOVED***,
  "repeating-linear-gradient()": {
    "syntax": "repeating-linear-gradient( [ <angle> | to <side-or-corner> ]? , <color-stop-list> )"
  ***REMOVED***,
  "repeating-radial-gradient()": {
    "syntax": "repeating-radial-gradient( [ <ending-shape> || <size> ]? [ at <position> ]? , <color-stop-list> )"
  ***REMOVED***,
  "rgb()": {
    "syntax": "rgb( <percentage>{3***REMOVED*** [ / <alpha-value> ]? ) | rgb( <number>{3***REMOVED*** [ / <alpha-value> ]? ) | rgb( <percentage>#{3***REMOVED*** , <alpha-value>? ) | rgb( <number>#{3***REMOVED*** , <alpha-value>? )"
  ***REMOVED***,
  "rgba()": {
    "syntax": "rgba( <percentage>{3***REMOVED*** [ / <alpha-value> ]? ) | rgba( <number>{3***REMOVED*** [ / <alpha-value> ]? ) | rgba( <percentage>#{3***REMOVED*** , <alpha-value>? ) | rgba( <number>#{3***REMOVED*** , <alpha-value>? )"
  ***REMOVED***,
  "rotate()": {
    "syntax": "rotate( [ <angle> | <zero> ] )"
  ***REMOVED***,
  "rotate3d()": {
    "syntax": "rotate3d( <number> , <number> , <number> , [ <angle> | <zero> ] )"
  ***REMOVED***,
  "rotateX()": {
    "syntax": "rotateX( [ <angle> | <zero> ] )"
  ***REMOVED***,
  "rotateY()": {
    "syntax": "rotateY( [ <angle> | <zero> ] )"
  ***REMOVED***,
  "rotateZ()": {
    "syntax": "rotateZ( [ <angle> | <zero> ] )"
  ***REMOVED***,
  "saturate()": {
    "syntax": "saturate( <number-percentage> )"
  ***REMOVED***,
  "scale()": {
    "syntax": "scale( <number> , <number>? )"
  ***REMOVED***,
  "scale3d()": {
    "syntax": "scale3d( <number> , <number> , <number> )"
  ***REMOVED***,
  "scaleX()": {
    "syntax": "scaleX( <number> )"
  ***REMOVED***,
  "scaleY()": {
    "syntax": "scaleY( <number> )"
  ***REMOVED***,
  "scaleZ()": {
    "syntax": "scaleZ( <number> )"
  ***REMOVED***,
  "self-position": {
    "syntax": "center | start | end | self-start | self-end | flex-start | flex-end"
  ***REMOVED***,
  "shape-radius": {
    "syntax": "<length-percentage> | closest-side | farthest-side"
  ***REMOVED***,
  "skew()": {
    "syntax": "skew( [ <angle> | <zero> ] , [ <angle> | <zero> ]? )"
  ***REMOVED***,
  "skewX()": {
    "syntax": "skewX( [ <angle> | <zero> ] )"
  ***REMOVED***,
  "skewY()": {
    "syntax": "skewY( [ <angle> | <zero> ] )"
  ***REMOVED***,
  "sepia()": {
    "syntax": "sepia( <number-percentage> )"
  ***REMOVED***,
  "shadow": {
    "syntax": "inset? && <length>{2,4***REMOVED*** && <color>?"
  ***REMOVED***,
  "shadow-t": {
    "syntax": "[ <length>{2,3***REMOVED*** && <color>? ]"
  ***REMOVED***,
  "shape": {
    "syntax": "rect(<top>, <right>, <bottom>, <left>)"
  ***REMOVED***,
  "shape-box": {
    "syntax": "<box> | margin-box"
  ***REMOVED***,
  "side-or-corner": {
    "syntax": "[ left | right ] || [ top | bottom ]"
  ***REMOVED***,
  "single-animation": {
    "syntax": "<time> || <timing-function> || <time> || <single-animation-iteration-count> || <single-animation-direction> || <single-animation-fill-mode> || <single-animation-play-state> || [ none | <keyframes-name> ]"
  ***REMOVED***,
  "single-animation-direction": {
    "syntax": "normal | reverse | alternate | alternate-reverse"
  ***REMOVED***,
  "single-animation-fill-mode": {
    "syntax": "none | forwards | backwards | both"
  ***REMOVED***,
  "single-animation-iteration-count": {
    "syntax": "infinite | <number>"
  ***REMOVED***,
  "single-animation-play-state": {
    "syntax": "running | paused"
  ***REMOVED***,
  "single-transition": {
    "syntax": "[ none | <single-transition-property> ] || <time> || <timing-function> || <time>"
  ***REMOVED***,
  "single-transition-property": {
    "syntax": "all | <custom-ident>"
  ***REMOVED***,
  "size": {
    "syntax": "closest-side | farthest-side | closest-corner | farthest-corner | <length> | <length-percentage>{2***REMOVED***"
  ***REMOVED***,
  "step-position": {
    "syntax": "jump-start | jump-end | jump-none | jump-both | start | end"
  ***REMOVED***,
  "step-timing-function": {
    "syntax": "step-start | step-end | steps(<integer>[, <step-position>]?)"
  ***REMOVED***,
  "subclass-selector": {
    "syntax": "<id-selector> | <class-selector> | <attribute-selector> | <pseudo-class-selector>"
  ***REMOVED***,
  "supports-condition": {
    "syntax": "not <supports-in-parens> | <supports-in-parens> [ and <supports-in-parens> ]* | <supports-in-parens> [ or <supports-in-parens> ]*"
  ***REMOVED***,
  "supports-in-parens": {
    "syntax": "( <supports-condition> ) | <supports-feature> | <general-enclosed>"
  ***REMOVED***,
  "supports-feature": {
    "syntax": "<supports-decl> | <supports-selector-fn>"
  ***REMOVED***,
  "supports-decl": {
    "syntax": "( <declaration> )"
  ***REMOVED***,
  "supports-selector-fn": {
    "syntax": "selector( <complex-selector> )"
  ***REMOVED***,
  "symbol": {
    "syntax": "<string> | <image> | <custom-ident>"
  ***REMOVED***,
  "target": {
    "syntax": "<target-counter()> | <target-counters()> | <target-text()>"
  ***REMOVED***,
  "target-counter()": {
    "syntax": "target-counter( [ <string> | <url> ] , <custom-ident> , <counter-style>? )"
  ***REMOVED***,
  "target-counters()": {
    "syntax": "target-counters( [ <string> | <url> ] , <custom-ident> , <string> , <counter-style>? )"
  ***REMOVED***,
  "target-text()": {
    "syntax": "target-text( [ <string> | <url> ] , [ content | before | after | first-letter ]? )"
  ***REMOVED***,
  "time-percentage": {
    "syntax": "<time> | <percentage>"
  ***REMOVED***,
  "timing-function": {
    "syntax": "linear | <cubic-bezier-timing-function> | <step-timing-function>"
  ***REMOVED***,
  "track-breadth": {
    "syntax": "<length-percentage> | <flex> | min-content | max-content | auto"
  ***REMOVED***,
  "track-list": {
    "syntax": "[ <line-names>? [ <track-size> | <track-repeat> ] ]+ <line-names>?"
  ***REMOVED***,
  "track-repeat": {
    "syntax": "repeat( [ <positive-integer> ] , [ <line-names>? <track-size> ]+ <line-names>? )"
  ***REMOVED***,
  "track-size": {
    "syntax": "<track-breadth> | minmax( <inflexible-breadth> , <track-breadth> ) | fit-content( [ <length> | <percentage> ] )"
  ***REMOVED***,
  "transform-function": {
    "syntax": "<matrix()> | <translate()> | <translateX()> | <translateY()> | <scale()> | <scaleX()> | <scaleY()> | <rotate()> | <skew()> | <skewX()> | <skewY()> | <matrix3d()> | <translate3d()> | <translateZ()> | <scale3d()> | <scaleZ()> | <rotate3d()> | <rotateX()> | <rotateY()> | <rotateZ()> | <perspective()>"
  ***REMOVED***,
  "transform-list": {
    "syntax": "<transform-function>+"
  ***REMOVED***,
  "translate()": {
    "syntax": "translate( <length-percentage> , <length-percentage>? )"
  ***REMOVED***,
  "translate3d()": {
    "syntax": "translate3d( <length-percentage> , <length-percentage> , <length> )"
  ***REMOVED***,
  "translateX()": {
    "syntax": "translateX( <length-percentage> )"
  ***REMOVED***,
  "translateY()": {
    "syntax": "translateY( <length-percentage> )"
  ***REMOVED***,
  "translateZ()": {
    "syntax": "translateZ( <length> )"
  ***REMOVED***,
  "type-or-unit": {
    "syntax": "string | color | url | integer | number | length | angle | time | frequency | cap | ch | em | ex | ic | lh | rlh | rem | vb | vi | vw | vh | vmin | vmax | mm | Q | cm | in | pt | pc | px | deg | grad | rad | turn | ms | s | Hz | kHz | %"
  ***REMOVED***,
  "type-selector": {
    "syntax": "<wq-name> | <ns-prefix>? '*'"
  ***REMOVED***,
  "var()": {
    "syntax": "var( <custom-property-name> , <declaration-value>? )"
  ***REMOVED***,
  "viewport-length": {
    "syntax": "auto | <length-percentage>"
  ***REMOVED***,
  "wq-name": {
    "syntax": "<ns-prefix>? <ident-token>"
  ***REMOVED***
***REMOVED***
