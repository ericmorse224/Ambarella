/*
	MIT License http://www.opensource.org/licenses/mit-license.php
*/

"use strict";

const { DEFAULTS ***REMOVED*** = require("../config/defaults");
const createHash = require("../util/createHash");
const AggregateErrorSerializer = require("./AggregateErrorSerializer");
const ArraySerializer = require("./ArraySerializer");
const DateObjectSerializer = require("./DateObjectSerializer");
const ErrorObjectSerializer = require("./ErrorObjectSerializer");
const MapObjectSerializer = require("./MapObjectSerializer");
const NullPrototypeObjectSerializer = require("./NullPrototypeObjectSerializer");
const PlainObjectSerializer = require("./PlainObjectSerializer");
const RegExpObjectSerializer = require("./RegExpObjectSerializer");
const SerializerMiddleware = require("./SerializerMiddleware");
const SetObjectSerializer = require("./SetObjectSerializer");

/** @typedef {import("../logging/Logger").Logger***REMOVED*** Logger */
/** @typedef {typeof import("../util/Hash")***REMOVED*** Hash */
/** @typedef {import("./SerializerMiddleware").LazyOptions***REMOVED*** LazyOptions */
/** @typedef {import("./types").ComplexSerializableType***REMOVED*** ComplexSerializableType */
/** @typedef {import("./types").PrimitiveSerializableType***REMOVED*** PrimitiveSerializableType */

/** @typedef {new (...params: EXPECTED_ANY[]) => EXPECTED_ANY***REMOVED*** Constructor */

/*

Format:

File -> Section*
Section -> ObjectSection | ReferenceSection | EscapeSection | OtherSection

ObjectSection -> ESCAPE (
	number:relativeOffset (number > 0) |
	string:request (string|null):export
) Section:value* ESCAPE ESCAPE_END_OBJECT
ReferenceSection -> ESCAPE number:relativeOffset (number < 0)
EscapeSection -> ESCAPE ESCAPE_ESCAPE_VALUE (escaped value ESCAPE)
EscapeSection -> ESCAPE ESCAPE_UNDEFINED (escaped value ESCAPE)
OtherSection -> any (except ESCAPE)

Why using null as escape value?
Multiple null values can merged by the BinaryMiddleware, which makes it very efficient
Technically any value can be used.

*/

/**
 * @typedef {object***REMOVED*** ObjectSerializerSnapshot
 * @property {number***REMOVED*** length
 * @property {number***REMOVED*** cycleStackSize
 * @property {number***REMOVED*** referenceableSize
 * @property {number***REMOVED*** currentPos
 * @property {number***REMOVED*** objectTypeLookupSize
 * @property {number***REMOVED*** currentPosTypeLookup
 */
/** @typedef {TODO***REMOVED*** Value */
/** @typedef {EXPECTED_OBJECT | string***REMOVED*** ReferenceableItem */

/**
 * @typedef {object***REMOVED*** ObjectSerializerContext
 * @property {(value: Value) => void***REMOVED*** write
 * @property {(value: ReferenceableItem) => void***REMOVED*** setCircularReference
 * @property {() => ObjectSerializerSnapshot***REMOVED*** snapshot
 * @property {(snapshot: ObjectSerializerSnapshot) => void***REMOVED*** rollback
 * @property {((item: Value | (() => Value)) => void)=***REMOVED*** writeLazy
 * @property {((item: (Value | (() => Value)), obj: LazyOptions | undefined) => import("./SerializerMiddleware").LazyFunction<EXPECTED_ANY, EXPECTED_ANY, EXPECTED_ANY, LazyOptions>)=***REMOVED*** writeSeparate
 */

/**
 * @typedef {object***REMOVED*** ObjectDeserializerContext
 * @property {() => Value***REMOVED*** read
 * @property {(value: ReferenceableItem) => void***REMOVED*** setCircularReference
 */

/**
 * @typedef {object***REMOVED*** ObjectSerializer
 * @property {(value: Value, context: ObjectSerializerContext) => void***REMOVED*** serialize
 * @property {(context: ObjectDeserializerContext) => Value***REMOVED*** deserialize
 */

/**
 * @template T
 * @param {Set<T>***REMOVED*** set set
 * @param {number***REMOVED*** size count of items to keep
 */
const setSetSize = (set, size) => {
	let i = 0;
	for (const item of set) {
		if (i++ >= size) {
			set.delete(item);
		***REMOVED***
	***REMOVED***
***REMOVED***;

/**
 * @template K, X
 * @param {Map<K, X>***REMOVED*** map map
 * @param {number***REMOVED*** size count of items to keep
 */
const setMapSize = (map, size) => {
	let i = 0;
	for (const item of map.keys()) {
		if (i++ >= size) {
			map.delete(item);
		***REMOVED***
	***REMOVED***
***REMOVED***;

/**
 * @param {Buffer***REMOVED*** buffer buffer
 * @param {string | Hash***REMOVED*** hashFunction hash function to use
 * @returns {string***REMOVED*** hash
 */
const toHash = (buffer, hashFunction) => {
	const hash = createHash(hashFunction);
	hash.update(buffer);
	return /** @type {string***REMOVED*** */ (hash.digest("latin1"));
***REMOVED***;

const ESCAPE = null;
const ESCAPE_ESCAPE_VALUE = null;
const ESCAPE_END_OBJECT = true;
const ESCAPE_UNDEFINED = false;

const CURRENT_VERSION = 2;

/** @typedef {{ request?: string, name?: string | number | null, serializer?: ObjectSerializer ***REMOVED******REMOVED*** SerializerConfig */
/** @typedef {{ request?: string, name?: string | number | null, serializer: ObjectSerializer ***REMOVED******REMOVED*** SerializerConfigWithSerializer */

/** @type {Map<Constructor, SerializerConfig>***REMOVED*** */
const serializers = new Map();
/** @type {Map<string | number, ObjectSerializer>***REMOVED*** */
const serializerInversed = new Map();

/** @type {Set<string>***REMOVED*** */
const loadedRequests = new Set();

const NOT_SERIALIZABLE = {***REMOVED***;

const jsTypes = new Map();

jsTypes.set(Object, new PlainObjectSerializer());
jsTypes.set(Array, new ArraySerializer());
jsTypes.set(null, new NullPrototypeObjectSerializer());
jsTypes.set(Map, new MapObjectSerializer());
jsTypes.set(Set, new SetObjectSerializer());
jsTypes.set(Date, new DateObjectSerializer());
jsTypes.set(RegExp, new RegExpObjectSerializer());
jsTypes.set(Error, new ErrorObjectSerializer(Error));
jsTypes.set(EvalError, new ErrorObjectSerializer(EvalError));
jsTypes.set(RangeError, new ErrorObjectSerializer(RangeError));
jsTypes.set(ReferenceError, new ErrorObjectSerializer(ReferenceError));
jsTypes.set(SyntaxError, new ErrorObjectSerializer(SyntaxError));
jsTypes.set(TypeError, new ErrorObjectSerializer(TypeError));

// @ts-expect-error ES2018 doesn't `AggregateError`, but it can be used by developers
// eslint-disable-next-line n/no-unsupported-features/es-builtins, n/no-unsupported-features/es-syntax
if (typeof AggregateError !== "undefined") {
	jsTypes.set(
		// @ts-expect-error ES2018 doesn't `AggregateError`, but it can be used by developers
		// eslint-disable-next-line n/no-unsupported-features/es-builtins, n/no-unsupported-features/es-syntax
		AggregateError,
		new AggregateErrorSerializer()
	);
***REMOVED***

// If in a sandboxed environment (e.g. jest), this escapes the sandbox and registers
// real Object and Array types to. These types may occur in the wild too, e.g. when
// using Structured Clone in postMessage.
// eslint-disable-next-line n/exports-style
if (exports.constructor !== Object) {
	// eslint-disable-next-line n/exports-style
	const Obj = /** @type {ObjectConstructor***REMOVED*** */ (exports.constructor);
	const Fn = /** @type {FunctionConstructor***REMOVED*** */ (Obj.constructor);
	for (const [type, config] of Array.from(jsTypes)) {
		if (type) {
			const Type = new Fn(`return ${type.name***REMOVED***;`)();
			jsTypes.set(Type, config);
		***REMOVED***
	***REMOVED***
***REMOVED***

{
	let i = 1;
	for (const [type, serializer] of jsTypes) {
		serializers.set(type, {
			request: "",
			name: i++,
			serializer
		***REMOVED***);
	***REMOVED***
***REMOVED***

for (const { request, name, serializer ***REMOVED*** of serializers.values()) {
	serializerInversed.set(
		`${request***REMOVED***/${name***REMOVED***`,
		/** @type {ObjectSerializer***REMOVED*** */ (serializer)
	);
***REMOVED***

/** @type {Map<RegExp, (request: string) => boolean>***REMOVED*** */
const loaders = new Map();

/** @typedef {ComplexSerializableType[]***REMOVED*** DeserializedType */
/** @typedef {PrimitiveSerializableType[]***REMOVED*** SerializedType */
/** @typedef {{ logger: Logger ***REMOVED******REMOVED*** Context */

/**
 * @extends {SerializerMiddleware<DeserializedType, SerializedType, Context>***REMOVED***
 */
class ObjectMiddleware extends SerializerMiddleware {
	/**
	 * @param {(context: ObjectSerializerContext | ObjectDeserializerContext) => void***REMOVED*** extendContext context extensions
	 * @param {string | Hash***REMOVED*** hashFunction hash function to use
	 */
	constructor(extendContext, hashFunction = DEFAULTS.HASH_FUNCTION) {
		super();
		this.extendContext = extendContext;
		this._hashFunction = hashFunction;
	***REMOVED***

	/**
	 * @param {RegExp***REMOVED*** regExp RegExp for which the request is tested
	 * @param {(request: string) => boolean***REMOVED*** loader loader to load the request, returns true when successful
	 * @returns {void***REMOVED***
	 */
	static registerLoader(regExp, loader) {
		loaders.set(regExp, loader);
	***REMOVED***

	/**
	 * @param {Constructor***REMOVED*** Constructor the constructor
	 * @param {string***REMOVED*** request the request which will be required when deserializing
	 * @param {string | null***REMOVED*** name the name to make multiple serializer unique when sharing a request
	 * @param {ObjectSerializer***REMOVED*** serializer the serializer
	 * @returns {void***REMOVED***
	 */
	static register(Constructor, request, name, serializer) {
		const key = `${request***REMOVED***/${name***REMOVED***`;

		if (serializers.has(Constructor)) {
			throw new Error(
				`ObjectMiddleware.register: serializer for ${Constructor.name***REMOVED*** is already registered`
			);
		***REMOVED***

		if (serializerInversed.has(key)) {
			throw new Error(
				`ObjectMiddleware.register: serializer for ${key***REMOVED*** is already registered`
			);
		***REMOVED***

		serializers.set(Constructor, {
			request,
			name,
			serializer
		***REMOVED***);

		serializerInversed.set(key, serializer);
	***REMOVED***

	/**
	 * @param {Constructor***REMOVED*** Constructor the constructor
	 * @returns {void***REMOVED***
	 */
	static registerNotSerializable(Constructor) {
		if (serializers.has(Constructor)) {
			throw new Error(
				`ObjectMiddleware.registerNotSerializable: serializer for ${Constructor.name***REMOVED*** is already registered`
			);
		***REMOVED***

		serializers.set(Constructor, NOT_SERIALIZABLE);
	***REMOVED***

	/**
	 * @param {Constructor***REMOVED*** object for serialization
	 * @returns {SerializerConfigWithSerializer***REMOVED*** Serializer config
	 */
	static getSerializerFor(object) {
		const proto = Object.getPrototypeOf(object);
		let c;
		if (proto === null) {
			// Object created with Object.create(null)
			c = null;
		***REMOVED*** else {
			c = proto.constructor;
			if (!c) {
				throw new Error(
					"Serialization of objects with prototype without valid constructor property not possible"
				);
			***REMOVED***
		***REMOVED***
		const config = serializers.get(c);

		if (!config) throw new Error(`No serializer registered for ${c.name***REMOVED***`);
		if (config === NOT_SERIALIZABLE) throw NOT_SERIALIZABLE;

		return /** @type {SerializerConfigWithSerializer***REMOVED*** */ (config);
	***REMOVED***

	/**
	 * @param {string***REMOVED*** request request
	 * @param {string***REMOVED*** name name
	 * @returns {ObjectSerializer***REMOVED*** serializer
	 */
	static getDeserializerFor(request, name) {
		const key = `${request***REMOVED***/${name***REMOVED***`;
		const serializer = serializerInversed.get(key);

		if (serializer === undefined) {
			throw new Error(`No deserializer registered for ${key***REMOVED***`);
		***REMOVED***

		return serializer;
	***REMOVED***

	/**
	 * @param {string***REMOVED*** request request
	 * @param {string***REMOVED*** name name
	 * @returns {ObjectSerializer | undefined***REMOVED*** serializer
	 */
	static _getDeserializerForWithoutError(request, name) {
		const key = `${request***REMOVED***/${name***REMOVED***`;
		const serializer = serializerInversed.get(key);
		return serializer;
	***REMOVED***

	/**
	 * @param {DeserializedType***REMOVED*** data data
	 * @param {Context***REMOVED*** context context object
	 * @returns {SerializedType | Promise<SerializedType> | null***REMOVED*** serialized data
	 */
	serialize(data, context) {
		/** @type {Value[]***REMOVED*** */
		let result = [CURRENT_VERSION];
		let currentPos = 0;
		/** @type {Map<ReferenceableItem, number>***REMOVED*** */
		let referenceable = new Map();
		/**
		 * @param {ReferenceableItem***REMOVED*** item referenceable item
		 */
		const addReferenceable = item => {
			referenceable.set(item, currentPos++);
		***REMOVED***;
		let bufferDedupeMap = new Map();
		/**
		 * @param {Buffer***REMOVED*** buf buffer
		 * @returns {Buffer***REMOVED*** deduped buffer
		 */
		const dedupeBuffer = buf => {
			const len = buf.length;
			const entry = bufferDedupeMap.get(len);
			if (entry === undefined) {
				bufferDedupeMap.set(len, buf);
				return buf;
			***REMOVED***
			if (Buffer.isBuffer(entry)) {
				if (len < 32) {
					if (buf.equals(entry)) {
						return entry;
					***REMOVED***
					bufferDedupeMap.set(len, [entry, buf]);
					return buf;
				***REMOVED***
				const hash = toHash(entry, this._hashFunction);
				const newMap = new Map();
				newMap.set(hash, entry);
				bufferDedupeMap.set(len, newMap);
				const hashBuf = toHash(buf, this._hashFunction);
				if (hash === hashBuf) {
					return entry;
				***REMOVED***
				return buf;
			***REMOVED*** else if (Array.isArray(entry)) {
				if (entry.length < 16) {
					for (const item of entry) {
						if (buf.equals(item)) {
							return item;
						***REMOVED***
					***REMOVED***
					entry.push(buf);
					return buf;
				***REMOVED***
				const newMap = new Map();
				const hash = toHash(buf, this._hashFunction);
				let found;
				for (const item of entry) {
					const itemHash = toHash(item, this._hashFunction);
					newMap.set(itemHash, item);
					if (found === undefined && itemHash === hash) found = item;
				***REMOVED***
				bufferDedupeMap.set(len, newMap);
				if (found === undefined) {
					newMap.set(hash, buf);
					return buf;
				***REMOVED***
				return found;
			***REMOVED***
			const hash = toHash(buf, this._hashFunction);
			const item = entry.get(hash);
			if (item !== undefined) {
				return item;
			***REMOVED***
			entry.set(hash, buf);
			return buf;
		***REMOVED***;
		let currentPosTypeLookup = 0;
		let objectTypeLookup = new Map();
		const cycleStack = new Set();
		/**
		 * @param {Value***REMOVED*** item item to stack
		 * @returns {string***REMOVED*** stack
		 */
		const stackToString = item => {
			const arr = Array.from(cycleStack);
			arr.push(item);
			return arr
				.map(item => {
					if (typeof item === "string") {
						if (item.length > 100) {
							return `String ${JSON.stringify(item.slice(0, 100)).slice(
								0,
								-1
							)***REMOVED***..."`;
						***REMOVED***
						return `String ${JSON.stringify(item)***REMOVED***`;
					***REMOVED***
					try {
						const { request, name ***REMOVED*** = ObjectMiddleware.getSerializerFor(item);
						if (request) {
							return `${request***REMOVED***${name ? `.${name***REMOVED***` : ""***REMOVED***`;
						***REMOVED***
					***REMOVED*** catch (_err) {
						// ignore -> fallback
					***REMOVED***
					if (typeof item === "object" && item !== null) {
						if (item.constructor) {
							if (item.constructor === Object)
								return `Object { ${Object.keys(item).join(", ")***REMOVED*** ***REMOVED***`;
							if (item.constructor === Map) return `Map { ${item.size***REMOVED*** items ***REMOVED***`;
							if (item.constructor === Array)
								return `Array { ${item.length***REMOVED*** items ***REMOVED***`;
							if (item.constructor === Set) return `Set { ${item.size***REMOVED*** items ***REMOVED***`;
							if (item.constructor === RegExp) return item.toString();
							return `${item.constructor.name***REMOVED***`;
						***REMOVED***
						return `Object [null prototype] { ${Object.keys(item).join(
							", "
						)***REMOVED*** ***REMOVED***`;
					***REMOVED***
					if (typeof item === "bigint") {
						return `BigInt ${item***REMOVED***n`;
					***REMOVED***
					try {
						return `${item***REMOVED***`;
					***REMOVED*** catch (err) {
						return `(${/** @type {Error***REMOVED*** */ (err).message***REMOVED***)`;
					***REMOVED***
				***REMOVED***)
				.join(" -> ");
		***REMOVED***;
		/** @type {WeakSet<Error>***REMOVED*** */
		let hasDebugInfoAttached;
		/** @type {ObjectSerializerContext***REMOVED*** */
		let ctx = {
			write(value) {
				try {
					process(value);
				***REMOVED*** catch (err) {
					if (err !== NOT_SERIALIZABLE) {
						if (hasDebugInfoAttached === undefined)
							hasDebugInfoAttached = new WeakSet();
						if (!hasDebugInfoAttached.has(/** @type {Error***REMOVED*** */ (err))) {
							/** @type {Error***REMOVED*** */
							(err).message += `\nwhile serializing ${stackToString(value)***REMOVED***`;
							hasDebugInfoAttached.add(/** @type {Error***REMOVED*** */ (err));
						***REMOVED***
					***REMOVED***
					throw err;
				***REMOVED***
			***REMOVED***,
			setCircularReference(ref) {
				addReferenceable(ref);
			***REMOVED***,
			snapshot() {
				return {
					length: result.length,
					cycleStackSize: cycleStack.size,
					referenceableSize: referenceable.size,
					currentPos,
					objectTypeLookupSize: objectTypeLookup.size,
					currentPosTypeLookup
				***REMOVED***;
			***REMOVED***,
			rollback(snapshot) {
				result.length = snapshot.length;
				setSetSize(cycleStack, snapshot.cycleStackSize);
				setMapSize(referenceable, snapshot.referenceableSize);
				currentPos = snapshot.currentPos;
				setMapSize(objectTypeLookup, snapshot.objectTypeLookupSize);
				currentPosTypeLookup = snapshot.currentPosTypeLookup;
			***REMOVED***,
			...context
		***REMOVED***;
		this.extendContext(ctx);
		/**
		 * @param {Value***REMOVED*** item item to serialize
		 */
		const process = item => {
			if (Buffer.isBuffer(item)) {
				// check if we can emit a reference
				const ref = referenceable.get(item);
				if (ref !== undefined) {
					result.push(ESCAPE, ref - currentPos);
					return;
				***REMOVED***
				const alreadyUsedBuffer = dedupeBuffer(item);
				if (alreadyUsedBuffer !== item) {
					const ref = referenceable.get(alreadyUsedBuffer);
					if (ref !== undefined) {
						referenceable.set(item, ref);
						result.push(ESCAPE, ref - currentPos);
						return;
					***REMOVED***
					item = alreadyUsedBuffer;
				***REMOVED***
				addReferenceable(item);

				result.push(item);
			***REMOVED*** else if (item === ESCAPE) {
				result.push(ESCAPE, ESCAPE_ESCAPE_VALUE);
			***REMOVED*** else if (
				typeof item === "object"
				// We don't have to check for null as ESCAPE is null and this has been checked before
			) {
				// check if we can emit a reference
				const ref = referenceable.get(item);
				if (ref !== undefined) {
					result.push(ESCAPE, ref - currentPos);
					return;
				***REMOVED***

				if (cycleStack.has(item)) {
					throw new Error(
						"This is a circular references. To serialize circular references use 'setCircularReference' somewhere in the circle during serialize and deserialize."
					);
				***REMOVED***

				const { request, name, serializer ***REMOVED*** =
					ObjectMiddleware.getSerializerFor(item);
				const key = `${request***REMOVED***/${name***REMOVED***`;
				const lastIndex = objectTypeLookup.get(key);

				if (lastIndex === undefined) {
					objectTypeLookup.set(key, currentPosTypeLookup++);

					result.push(ESCAPE, request, name);
				***REMOVED*** else {
					result.push(ESCAPE, currentPosTypeLookup - lastIndex);
				***REMOVED***

				cycleStack.add(item);

				try {
					serializer.serialize(item, ctx);
				***REMOVED*** finally {
					cycleStack.delete(item);
				***REMOVED***

				result.push(ESCAPE, ESCAPE_END_OBJECT);

				addReferenceable(item);
			***REMOVED*** else if (typeof item === "string") {
				if (item.length > 1) {
					// short strings are shorter when not emitting a reference (this saves 1 byte per empty string)
					// check if we can emit a reference
					const ref = referenceable.get(item);
					if (ref !== undefined) {
						result.push(ESCAPE, ref - currentPos);
						return;
					***REMOVED***
					addReferenceable(item);
				***REMOVED***

				if (item.length > 102400 && context.logger) {
					context.logger.warn(
						`Serializing big strings (${Math.round(
							item.length / 1024
						)***REMOVED***kiB) impacts deserialization performance (consider using Buffer instead and decode when needed)`
					);
				***REMOVED***

				result.push(item);
			***REMOVED*** else if (typeof item === "function") {
				if (!SerializerMiddleware.isLazy(item))
					throw new Error(`Unexpected function ${item***REMOVED***`);

				/** @type {SerializedType | undefined***REMOVED*** */
				const serializedData =
					SerializerMiddleware.getLazySerializedValue(item);

				if (serializedData !== undefined) {
					if (typeof serializedData === "function") {
						result.push(serializedData);
					***REMOVED*** else {
						throw new Error("Not implemented");
					***REMOVED***
				***REMOVED*** else if (SerializerMiddleware.isLazy(item, this)) {
					throw new Error("Not implemented");
				***REMOVED*** else {
					const data = SerializerMiddleware.serializeLazy(item, data =>
						this.serialize([data], context)
					);
					SerializerMiddleware.setLazySerializedValue(item, data);
					result.push(data);
				***REMOVED***
			***REMOVED*** else if (item === undefined) {
				result.push(ESCAPE, ESCAPE_UNDEFINED);
			***REMOVED*** else {
				result.push(item);
			***REMOVED***
		***REMOVED***;

		try {
			for (const item of data) {
				process(item);
			***REMOVED***
			return result;
		***REMOVED*** catch (err) {
			if (err === NOT_SERIALIZABLE) return null;

			throw err;
		***REMOVED*** finally {
			// Get rid of these references to avoid leaking memory
			// This happens because the optimized code v8 generates
			// is optimized for our "ctx.write" method so it will reference
			// it from e. g. Dependency.prototype.serialize -(IC)-> ctx.write
			data =
				result =
				referenceable =
				bufferDedupeMap =
				objectTypeLookup =
				ctx =
					/** @type {EXPECTED_ANY***REMOVED*** */
					(undefined);
		***REMOVED***
	***REMOVED***

	/**
	 * @param {SerializedType***REMOVED*** data data
	 * @param {Context***REMOVED*** context context object
	 * @returns {DeserializedType | Promise<DeserializedType>***REMOVED*** deserialized data
	 */
	deserialize(data, context) {
		let currentDataPos = 0;
		const read = () => {
			if (currentDataPos >= data.length)
				throw new Error("Unexpected end of stream");

			return data[currentDataPos++];
		***REMOVED***;

		if (read() !== CURRENT_VERSION)
			throw new Error("Version mismatch, serializer changed");

		let currentPos = 0;
		/** @type {ReferenceableItem[]***REMOVED*** */
		let referenceable = [];
		/**
		 * @param {Value***REMOVED*** item referenceable item
		 */
		const addReferenceable = item => {
			referenceable.push(item);
			currentPos++;
		***REMOVED***;
		let currentPosTypeLookup = 0;
		/** @type {ObjectSerializer[]***REMOVED*** */
		let objectTypeLookup = [];
		let result = [];
		/** @type {ObjectDeserializerContext***REMOVED*** */
		let ctx = {
			read() {
				return decodeValue();
			***REMOVED***,
			setCircularReference(ref) {
				addReferenceable(ref);
			***REMOVED***,
			...context
		***REMOVED***;
		this.extendContext(ctx);
		const decodeValue = () => {
			const item = read();

			if (item === ESCAPE) {
				const nextItem = read();

				if (nextItem === ESCAPE_ESCAPE_VALUE) {
					return ESCAPE;
				***REMOVED*** else if (nextItem === ESCAPE_UNDEFINED) {
					// Nothing
				***REMOVED*** else if (nextItem === ESCAPE_END_OBJECT) {
					throw new Error(
						`Unexpected end of object at position ${currentDataPos - 1***REMOVED***`
					);
				***REMOVED*** else {
					const request = nextItem;
					let serializer;

					if (typeof request === "number") {
						if (request < 0) {
							// relative reference
							return referenceable[currentPos + request];
						***REMOVED***
						serializer = objectTypeLookup[currentPosTypeLookup - request];
					***REMOVED*** else {
						if (typeof request !== "string") {
							throw new Error(
								`Unexpected type (${typeof request***REMOVED***) of request ` +
									`at position ${currentDataPos - 1***REMOVED***`
							);
						***REMOVED***
						const name = /** @type {string***REMOVED*** */ (read());

						serializer = ObjectMiddleware._getDeserializerForWithoutError(
							request,
							name
						);

						if (serializer === undefined) {
							if (request && !loadedRequests.has(request)) {
								let loaded = false;
								for (const [regExp, loader] of loaders) {
									if (regExp.test(request) && loader(request)) {
										loaded = true;
										break;
									***REMOVED***
								***REMOVED***
								if (!loaded) {
									require(request);
								***REMOVED***

								loadedRequests.add(request);
							***REMOVED***

							serializer = ObjectMiddleware.getDeserializerFor(request, name);
						***REMOVED***

						objectTypeLookup.push(serializer);
						currentPosTypeLookup++;
					***REMOVED***
					try {
						const item = serializer.deserialize(ctx);
						const end1 = read();

						if (end1 !== ESCAPE) {
							throw new Error("Expected end of object");
						***REMOVED***

						const end2 = read();

						if (end2 !== ESCAPE_END_OBJECT) {
							throw new Error("Expected end of object");
						***REMOVED***

						addReferenceable(item);

						return item;
					***REMOVED*** catch (err) {
						// As this is only for error handling, we omit creating a Map for
						// faster access to this information, as this would affect performance
						// in the good case
						let serializerEntry;
						for (const entry of serializers) {
							if (entry[1].serializer === serializer) {
								serializerEntry = entry;
								break;
							***REMOVED***
						***REMOVED***
						const name = !serializerEntry
							? "unknown"
							: !serializerEntry[1].request
								? serializerEntry[0].name
								: serializerEntry[1].name
									? `${serializerEntry[1].request***REMOVED*** ${serializerEntry[1].name***REMOVED***`
									: serializerEntry[1].request;
						/** @type {Error***REMOVED*** */
						(err).message += `\n(during deserialization of ${name***REMOVED***)`;
						throw err;
					***REMOVED***
				***REMOVED***
			***REMOVED*** else if (typeof item === "string") {
				if (item.length > 1) {
					addReferenceable(item);
				***REMOVED***

				return item;
			***REMOVED*** else if (Buffer.isBuffer(item)) {
				addReferenceable(item);

				return item;
			***REMOVED*** else if (typeof item === "function") {
				return SerializerMiddleware.deserializeLazy(
					item,
					data =>
						/** @type {[DeserializedType]***REMOVED*** */
						(this.deserialize(data, context))[0]
				);
			***REMOVED*** else {
				return item;
			***REMOVED***
		***REMOVED***;

		try {
			while (currentDataPos < data.length) {
				result.push(decodeValue());
			***REMOVED***
			return result;
		***REMOVED*** finally {
			// Get rid of these references to avoid leaking memory
			// This happens because the optimized code v8 generates
			// is optimized for our "ctx.read" method so it will reference
			// it from e. g. Dependency.prototype.deserialize -(IC)-> ctx.read
			result =
				referenceable =
				data =
				objectTypeLookup =
				ctx =
					/** @type {EXPECTED_ANY***REMOVED*** */
					(undefined);
		***REMOVED***
	***REMOVED***
***REMOVED***

module.exports = ObjectMiddleware;
module.exports.NOT_SERIALIZABLE = NOT_SERIALIZABLE;
