{{# def.definitions ***REMOVED******REMOVED***
{{# def.errors ***REMOVED******REMOVED***
{{# def.defaults ***REMOVED******REMOVED***
{{# def.coerce ***REMOVED******REMOVED***

{{ /**
    * schema compilation (render) time:
    * it = { schema, RULES, _validate, opts ***REMOVED***
    * it.validate - this template function,
    *   it is used recursively to generate code for subschemas
    *
    * runtime:
    * "validate" is a variable name to which this function will be assigned
    * validateRef etc. are defined in the parent scope in index.js
    */ ***REMOVED******REMOVED***

{{
  var $async = it.schema.$async === true
    , $refKeywords = it.util.schemaHasRulesExcept(it.schema, it.RULES.all, '$ref')
    , $id = it.self._getId(it.schema);
***REMOVED******REMOVED***

{{
  if (it.opts.strictKeywords) {
    var $unknownKwd = it.util.schemaUnknownRules(it.schema, it.RULES.keywords);
    if ($unknownKwd) {
      var $keywordsMsg = 'unknown keyword: ' + $unknownKwd;
      if (it.opts.strictKeywords === 'log') it.logger.warn($keywordsMsg);
      else throw new Error($keywordsMsg);
    ***REMOVED***
  ***REMOVED***
***REMOVED******REMOVED***

{{? it.isTop ***REMOVED******REMOVED***
  var validate = {{?$async***REMOVED******REMOVED***{{it.async = true;***REMOVED******REMOVED***async {{?***REMOVED******REMOVED***function(data, dataPath, parentData, parentDataProperty, rootData) {
    'use strict';
    {{? $id && (it.opts.sourceCode || it.opts.processCode) ***REMOVED******REMOVED***
      {{= '/\*# sourceURL=' + $id + ' */' ***REMOVED******REMOVED***
    {{?***REMOVED******REMOVED***
{{?***REMOVED******REMOVED***

{{? typeof it.schema == 'boolean' || !($refKeywords || it.schema.$ref) ***REMOVED******REMOVED***
  {{ var $keyword = 'false schema'; ***REMOVED******REMOVED***
  {{# def.setupKeyword ***REMOVED******REMOVED***
  {{? it.schema === false***REMOVED******REMOVED***
    {{? it.isTop***REMOVED******REMOVED***
      {{ $breakOnError = true; ***REMOVED******REMOVED***
    {{??***REMOVED******REMOVED***
      var {{=$valid***REMOVED******REMOVED*** = false;
    {{?***REMOVED******REMOVED***
    {{# def.error:'false schema' ***REMOVED******REMOVED***
  {{??***REMOVED******REMOVED***
    {{? it.isTop***REMOVED******REMOVED***
      {{? $async ***REMOVED******REMOVED***
        return data;
      {{??***REMOVED******REMOVED***
        validate.errors = null;
        return true;
      {{?***REMOVED******REMOVED***
    {{??***REMOVED******REMOVED***
      var {{=$valid***REMOVED******REMOVED*** = true;
    {{?***REMOVED******REMOVED***
  {{?***REMOVED******REMOVED***

  {{? it.isTop***REMOVED******REMOVED***
    ***REMOVED***;
    return validate;
  {{?***REMOVED******REMOVED***

  {{ return out; ***REMOVED******REMOVED***
{{?***REMOVED******REMOVED***


{{? it.isTop ***REMOVED******REMOVED***
  {{
    var $top = it.isTop
      , $lvl = it.level = 0
      , $dataLvl = it.dataLevel = 0
      , $data = 'data';
    it.rootId = it.resolve.fullPath(it.self._getId(it.root.schema));
    it.baseId = it.baseId || it.rootId;
    delete it.isTop;

    it.dataPathArr = [""];

    if (it.schema.default !== undefined && it.opts.useDefaults && it.opts.strictDefaults) {
      var $defaultMsg = 'default is ignored in the schema root';
      if (it.opts.strictDefaults === 'log') it.logger.warn($defaultMsg);
      else throw new Error($defaultMsg);
    ***REMOVED***
  ***REMOVED******REMOVED***

  var vErrors = null; {{ /* don't edit, used in replace */ ***REMOVED******REMOVED***
  var errors = 0;     {{ /* don't edit, used in replace */ ***REMOVED******REMOVED***
  if (rootData === undefined) rootData = data; {{ /* don't edit, used in replace */ ***REMOVED******REMOVED***
{{??***REMOVED******REMOVED***
  {{
    var $lvl = it.level
      , $dataLvl = it.dataLevel
      , $data = 'data' + ($dataLvl || '');

    if ($id) it.baseId = it.resolve.url(it.baseId, $id);

    if ($async && !it.async) throw new Error('async schema in sync schema');
  ***REMOVED******REMOVED***

  var errs_{{=$lvl***REMOVED******REMOVED*** = errors;
{{?***REMOVED******REMOVED***

{{
  var $valid = 'valid' + $lvl
    , $breakOnError = !it.opts.allErrors
    , $closingBraces1 = ''
    , $closingBraces2 = '';

  var $errorKeyword;
  var $typeSchema = it.schema.type
    , $typeIsArray = Array.isArray($typeSchema);

  if ($typeSchema && it.opts.nullable && it.schema.nullable === true) {
    if ($typeIsArray) {
      if ($typeSchema.indexOf('null') == -1)
        $typeSchema = $typeSchema.concat('null');
    ***REMOVED*** else if ($typeSchema != 'null') {
      $typeSchema = [$typeSchema, 'null'];
      $typeIsArray = true;
    ***REMOVED***
  ***REMOVED***

  if ($typeIsArray && $typeSchema.length == 1) {
    $typeSchema = $typeSchema[0];
    $typeIsArray = false;
  ***REMOVED***
***REMOVED******REMOVED***

{{## def.checkType:
  {{
    var $schemaPath = it.schemaPath + '.type'
      , $errSchemaPath = it.errSchemaPath + '/type'
      , $method = $typeIsArray ? 'checkDataTypes' : 'checkDataType';
  ***REMOVED******REMOVED***

  if ({{= it.util[$method]($typeSchema, $data, it.opts.strictNumbers, true) ***REMOVED******REMOVED***) {
#***REMOVED******REMOVED***

{{? it.schema.$ref && $refKeywords ***REMOVED******REMOVED***
  {{? it.opts.extendRefs == 'fail' ***REMOVED******REMOVED***
    {{ throw new Error('$ref: validation keywords used in schema at path "' + it.errSchemaPath + '" (see option extendRefs)'); ***REMOVED******REMOVED***
  {{?? it.opts.extendRefs !== true ***REMOVED******REMOVED***
    {{
      $refKeywords = false;
      it.logger.warn('$ref: keywords ignored in schema at path "' + it.errSchemaPath + '"');
    ***REMOVED******REMOVED***
  {{?***REMOVED******REMOVED***
{{?***REMOVED******REMOVED***

{{? it.schema.$comment && it.opts.$comment ***REMOVED******REMOVED***
  {{= it.RULES.all.$comment.code(it, '$comment') ***REMOVED******REMOVED***
{{?***REMOVED******REMOVED***

{{? $typeSchema ***REMOVED******REMOVED***
  {{? it.opts.coerceTypes ***REMOVED******REMOVED***
    {{ var $coerceToTypes = it.util.coerceToTypes(it.opts.coerceTypes, $typeSchema); ***REMOVED******REMOVED***
  {{?***REMOVED******REMOVED***

  {{ var $rulesGroup = it.RULES.types[$typeSchema]; ***REMOVED******REMOVED***
  {{? $coerceToTypes || $typeIsArray || $rulesGroup === true ||
    ($rulesGroup && !$shouldUseGroup($rulesGroup)) ***REMOVED******REMOVED***
    {{
      var $schemaPath = it.schemaPath + '.type'
        , $errSchemaPath = it.errSchemaPath + '/type';
    ***REMOVED******REMOVED***
    {{# def.checkType ***REMOVED******REMOVED***
      {{? $coerceToTypes ***REMOVED******REMOVED***
        {{# def.coerceType ***REMOVED******REMOVED***
      {{??***REMOVED******REMOVED***
        {{# def.error:'type' ***REMOVED******REMOVED***
      {{?***REMOVED******REMOVED***
    ***REMOVED***
  {{?***REMOVED******REMOVED***
{{?***REMOVED******REMOVED***


{{? it.schema.$ref && !$refKeywords ***REMOVED******REMOVED***
  {{= it.RULES.all.$ref.code(it, '$ref') ***REMOVED******REMOVED***
  {{? $breakOnError ***REMOVED******REMOVED***
    ***REMOVED***
    if (errors === {{?$top***REMOVED******REMOVED***0{{??***REMOVED******REMOVED***errs_{{=$lvl***REMOVED******REMOVED***{{?***REMOVED******REMOVED***) {
    {{ $closingBraces2 += '***REMOVED***'; ***REMOVED******REMOVED***
  {{?***REMOVED******REMOVED***
{{??***REMOVED******REMOVED***
  {{~ it.RULES:$rulesGroup ***REMOVED******REMOVED***
    {{? $shouldUseGroup($rulesGroup) ***REMOVED******REMOVED***
      {{? $rulesGroup.type ***REMOVED******REMOVED***
        if ({{= it.util.checkDataType($rulesGroup.type, $data, it.opts.strictNumbers) ***REMOVED******REMOVED***) {
      {{?***REMOVED******REMOVED***
        {{? it.opts.useDefaults ***REMOVED******REMOVED***
          {{? $rulesGroup.type == 'object' && it.schema.properties ***REMOVED******REMOVED***
            {{# def.defaultProperties ***REMOVED******REMOVED***
          {{?? $rulesGroup.type == 'array' && Array.isArray(it.schema.items) ***REMOVED******REMOVED***
            {{# def.defaultItems ***REMOVED******REMOVED***
          {{?***REMOVED******REMOVED***
        {{?***REMOVED******REMOVED***
        {{~ $rulesGroup.rules:$rule ***REMOVED******REMOVED***
          {{? $shouldUseRule($rule) ***REMOVED******REMOVED***
            {{ var $code = $rule.code(it, $rule.keyword, $rulesGroup.type); ***REMOVED******REMOVED***
            {{? $code ***REMOVED******REMOVED***
              {{= $code ***REMOVED******REMOVED***
              {{? $breakOnError ***REMOVED******REMOVED***
                {{ $closingBraces1 += '***REMOVED***'; ***REMOVED******REMOVED***
              {{?***REMOVED******REMOVED***
            {{?***REMOVED******REMOVED***
          {{?***REMOVED******REMOVED***
        {{~***REMOVED******REMOVED***
        {{? $breakOnError ***REMOVED******REMOVED***
          {{= $closingBraces1 ***REMOVED******REMOVED***
          {{ $closingBraces1 = ''; ***REMOVED******REMOVED***
        {{?***REMOVED******REMOVED***
      {{? $rulesGroup.type ***REMOVED******REMOVED***
        ***REMOVED***
        {{? $typeSchema && $typeSchema === $rulesGroup.type && !$coerceToTypes ***REMOVED******REMOVED***
          else {
            {{
              var $schemaPath = it.schemaPath + '.type'
                , $errSchemaPath = it.errSchemaPath + '/type';
            ***REMOVED******REMOVED***
            {{# def.error:'type' ***REMOVED******REMOVED***
          ***REMOVED***
        {{?***REMOVED******REMOVED***
      {{?***REMOVED******REMOVED***

      {{? $breakOnError ***REMOVED******REMOVED***
        if (errors === {{?$top***REMOVED******REMOVED***0{{??***REMOVED******REMOVED***errs_{{=$lvl***REMOVED******REMOVED***{{?***REMOVED******REMOVED***) {
        {{ $closingBraces2 += '***REMOVED***'; ***REMOVED******REMOVED***
      {{?***REMOVED******REMOVED***
    {{?***REMOVED******REMOVED***
  {{~***REMOVED******REMOVED***
{{?***REMOVED******REMOVED***

{{? $breakOnError ***REMOVED******REMOVED*** {{= $closingBraces2 ***REMOVED******REMOVED*** {{?***REMOVED******REMOVED***

{{? $top ***REMOVED******REMOVED***
    {{? $async ***REMOVED******REMOVED***
      if (errors === 0) return data;           {{ /* don't edit, used in replace */ ***REMOVED******REMOVED***
      else throw new ValidationError(vErrors); {{ /* don't edit, used in replace */ ***REMOVED******REMOVED***
    {{??***REMOVED******REMOVED***
      validate.errors = vErrors; {{ /* don't edit, used in replace */ ***REMOVED******REMOVED***
      return errors === 0;       {{ /* don't edit, used in replace */ ***REMOVED******REMOVED***
    {{?***REMOVED******REMOVED***
  ***REMOVED***;

  return validate;
{{??***REMOVED******REMOVED***
  var {{=$valid***REMOVED******REMOVED*** = errors === errs_{{=$lvl***REMOVED******REMOVED***;
{{?***REMOVED******REMOVED***

{{
  function $shouldUseGroup($rulesGroup) {
    var rules = $rulesGroup.rules;
    for (var i=0; i < rules.length; i++)
      if ($shouldUseRule(rules[i]))
        return true;
  ***REMOVED***

  function $shouldUseRule($rule) {
    return it.schema[$rule.keyword] !== undefined ||
           ($rule.implements && $ruleImplementsSomeKeyword($rule));
  ***REMOVED***

  function $ruleImplementsSomeKeyword($rule) {
    var impl = $rule.implements;
    for (var i=0; i < impl.length; i++)
      if (it.schema[impl[i]] !== undefined)
        return true;
  ***REMOVED***
***REMOVED******REMOVED***
