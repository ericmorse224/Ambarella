/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const RequireContextDependency = require("./RequireContextDependency");

/** @typedef {import("../ContextModule").ContextMode***REMOVED*** ContextMode */
/** @typedef {import("../Dependency").DependencyLocation***REMOVED*** DependencyLocation */
/** @typedef {import("../javascript/JavascriptParser")***REMOVED*** JavascriptParser */
/** @typedef {import("../javascript/JavascriptParser").Range***REMOVED*** Range */

const PLUGIN_NAME = "RequireContextDependencyParserPlugin";

module.exports = class RequireContextDependencyParserPlugin {
	/**
	 * @param {JavascriptParser***REMOVED*** parser the parser
	 * @returns {void***REMOVED***
	 */
	apply(parser) {
		parser.hooks.call.for("require.context").tap(PLUGIN_NAME, expr => {
			let regExp = /^\.\/.*$/;
			let recursive = true;
			/** @type {ContextMode***REMOVED*** */
			let mode = "sync";
			switch (expr.arguments.length) {
				case 4: {
					const modeExpr = parser.evaluateExpression(expr.arguments[3]);
					if (!modeExpr.isString()) return;
					mode = /** @type {ContextMode***REMOVED*** */ (modeExpr.string);
				***REMOVED***
				// falls through
				case 3: {
					const regExpExpr = parser.evaluateExpression(expr.arguments[2]);
					if (!regExpExpr.isRegExp()) return;
					regExp = /** @type {RegExp***REMOVED*** */ (regExpExpr.regExp);
				***REMOVED***
				// falls through
				case 2: {
					const recursiveExpr = parser.evaluateExpression(expr.arguments[1]);
					if (!recursiveExpr.isBoolean()) return;
					recursive = /** @type {boolean***REMOVED*** */ (recursiveExpr.bool);
				***REMOVED***
				// falls through
				case 1: {
					const requestExpr = parser.evaluateExpression(expr.arguments[0]);
					if (!requestExpr.isString()) return;
					const dep = new RequireContextDependency(
						{
							request: /** @type {string***REMOVED*** */ (requestExpr.string),
							recursive,
							regExp,
							mode,
							category: "commonjs"
						***REMOVED***,
						/** @type {Range***REMOVED*** */
						(expr.range)
					);
					dep.loc = /** @type {DependencyLocation***REMOVED*** */ (expr.loc);
					dep.optional = Boolean(parser.scope.inTry);
					parser.state.current.addDependency(dep);
					return true;
				***REMOVED***
			***REMOVED***
		***REMOVED***);
	***REMOVED***
***REMOVED***;
