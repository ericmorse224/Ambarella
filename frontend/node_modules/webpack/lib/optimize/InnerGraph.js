/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Sergey Melyukov @smelukov
*/

"use strict";

const { UsageState ***REMOVED*** = require("../ExportsInfo");

/** @typedef {import("estree").Node***REMOVED*** AnyNode */
/** @typedef {import("../Dependency")***REMOVED*** Dependency */
/** @typedef {import("../Dependency").GetConditionFn***REMOVED*** GetConditionFn */
/** @typedef {import("../Module")***REMOVED*** Module */
/** @typedef {import("../ModuleGraph")***REMOVED*** ModuleGraph */
/** @typedef {import("../ModuleGraphConnection")***REMOVED*** ModuleGraphConnection */
/** @typedef {import("../ModuleGraphConnection").ConnectionState***REMOVED*** ConnectionState */
/** @typedef {import("../Parser").ParserState***REMOVED*** ParserState */
/** @typedef {import("../javascript/JavascriptParser")***REMOVED*** JavascriptParser */
/** @typedef {import("../util/runtime").RuntimeSpec***REMOVED*** RuntimeSpec */

/** @typedef {Map<TopLevelSymbol | null, Set<string | TopLevelSymbol> | true | undefined>***REMOVED*** InnerGraph */
/** @typedef {(value: boolean | Set<string> | undefined) => void***REMOVED*** UsageCallback */

/**
 * @typedef {object***REMOVED*** StateObject
 * @property {InnerGraph***REMOVED*** innerGraph
 * @property {TopLevelSymbol=***REMOVED*** currentTopLevelSymbol
 * @property {Map<TopLevelSymbol, Set<UsageCallback>>***REMOVED*** usageCallbackMap
 */

/** @typedef {false|StateObject***REMOVED*** State */

/** @type {WeakMap<ParserState, State>***REMOVED*** */
const parserStateMap = new WeakMap();
const topLevelSymbolTag = Symbol("top level symbol");

/**
 * @param {ParserState***REMOVED*** parserState parser state
 * @returns {State | undefined***REMOVED*** state
 */
function getState(parserState) {
	return parserStateMap.get(parserState);
***REMOVED***

/**
 * @param {ParserState***REMOVED*** parserState parser state
 * @returns {void***REMOVED***
 */
module.exports.bailout = parserState => {
	parserStateMap.set(parserState, false);
***REMOVED***;

/**
 * @param {ParserState***REMOVED*** parserState parser state
 * @returns {void***REMOVED***
 */
module.exports.enable = parserState => {
	const state = parserStateMap.get(parserState);
	if (state === false) {
		return;
	***REMOVED***
	parserStateMap.set(parserState, {
		innerGraph: new Map(),
		currentTopLevelSymbol: undefined,
		usageCallbackMap: new Map()
	***REMOVED***);
***REMOVED***;

/**
 * @param {ParserState***REMOVED*** parserState parser state
 * @returns {boolean***REMOVED*** true, when enabled
 */
module.exports.isEnabled = parserState => {
	const state = parserStateMap.get(parserState);
	return Boolean(state);
***REMOVED***;

/**
 * @param {ParserState***REMOVED*** state parser state
 * @param {TopLevelSymbol | null***REMOVED*** symbol the symbol, or null for all symbols
 * @param {string | TopLevelSymbol | true***REMOVED*** usage usage data
 * @returns {void***REMOVED***
 */
module.exports.addUsage = (state, symbol, usage) => {
	const innerGraphState = getState(state);

	if (innerGraphState) {
		const { innerGraph ***REMOVED*** = innerGraphState;
		const info = innerGraph.get(symbol);
		if (usage === true) {
			innerGraph.set(symbol, true);
		***REMOVED*** else if (info === undefined) {
			innerGraph.set(symbol, new Set([usage]));
		***REMOVED*** else if (info !== true) {
			info.add(usage);
		***REMOVED***
	***REMOVED***
***REMOVED***;

/**
 * @param {JavascriptParser***REMOVED*** parser the parser
 * @param {string***REMOVED*** name name of variable
 * @param {string | TopLevelSymbol | true***REMOVED*** usage usage data
 * @returns {void***REMOVED***
 */
module.exports.addVariableUsage = (parser, name, usage) => {
	const symbol =
		/** @type {TopLevelSymbol***REMOVED*** */ (
			parser.getTagData(name, topLevelSymbolTag)
		) || module.exports.tagTopLevelSymbol(parser, name);
	if (symbol) {
		module.exports.addUsage(parser.state, symbol, usage);
	***REMOVED***
***REMOVED***;

/**
 * @param {ParserState***REMOVED*** state parser state
 * @returns {void***REMOVED***
 */
module.exports.inferDependencyUsage = state => {
	const innerGraphState = getState(state);

	if (!innerGraphState) {
		return;
	***REMOVED***

	const { innerGraph, usageCallbackMap ***REMOVED*** = innerGraphState;
	const processed = new Map();
	// flatten graph to terminal nodes (string, undefined or true)
	const nonTerminal = new Set(innerGraph.keys());
	while (nonTerminal.size > 0) {
		for (const key of nonTerminal) {
			/** @type {Set<string|TopLevelSymbol> | true***REMOVED*** */
			let newSet = new Set();
			let isTerminal = true;
			const value = innerGraph.get(key);
			let alreadyProcessed = processed.get(key);
			if (alreadyProcessed === undefined) {
				alreadyProcessed = new Set();
				processed.set(key, alreadyProcessed);
			***REMOVED***
			if (value !== true && value !== undefined) {
				for (const item of value) {
					alreadyProcessed.add(item);
				***REMOVED***
				for (const item of value) {
					if (typeof item === "string") {
						newSet.add(item);
					***REMOVED*** else {
						const itemValue = innerGraph.get(item);
						if (itemValue === true) {
							newSet = true;
							break;
						***REMOVED***
						if (itemValue !== undefined) {
							for (const i of itemValue) {
								if (i === key) continue;
								if (alreadyProcessed.has(i)) continue;
								newSet.add(i);
								if (typeof i !== "string") {
									isTerminal = false;
								***REMOVED***
							***REMOVED***
						***REMOVED***
					***REMOVED***
				***REMOVED***
				if (newSet === true) {
					innerGraph.set(key, true);
				***REMOVED*** else if (newSet.size === 0) {
					innerGraph.set(key, undefined);
				***REMOVED*** else {
					innerGraph.set(key, newSet);
				***REMOVED***
			***REMOVED***
			if (isTerminal) {
				nonTerminal.delete(key);

				// For the global key, merge with all other keys
				if (key === null) {
					const globalValue = innerGraph.get(null);
					if (globalValue) {
						for (const [key, value] of innerGraph) {
							if (key !== null && value !== true) {
								if (globalValue === true) {
									innerGraph.set(key, true);
								***REMOVED*** else {
									const newSet = new Set(value);
									for (const item of globalValue) {
										newSet.add(item);
									***REMOVED***
									innerGraph.set(key, newSet);
								***REMOVED***
							***REMOVED***
						***REMOVED***
					***REMOVED***
				***REMOVED***
			***REMOVED***
		***REMOVED***
	***REMOVED***

	/** @type {Map<Dependency, true | Set<string>>***REMOVED*** */
	for (const [symbol, callbacks] of usageCallbackMap) {
		const usage = /** @type {true | Set<string> | undefined***REMOVED*** */ (
			innerGraph.get(symbol)
		);
		for (const callback of callbacks) {
			callback(usage === undefined ? false : usage);
		***REMOVED***
	***REMOVED***
***REMOVED***;

/**
 * @param {ParserState***REMOVED*** state parser state
 * @param {UsageCallback***REMOVED*** onUsageCallback on usage callback
 */
module.exports.onUsage = (state, onUsageCallback) => {
	const innerGraphState = getState(state);

	if (innerGraphState) {
		const { usageCallbackMap, currentTopLevelSymbol ***REMOVED*** = innerGraphState;
		if (currentTopLevelSymbol) {
			let callbacks = usageCallbackMap.get(currentTopLevelSymbol);

			if (callbacks === undefined) {
				callbacks = new Set();
				usageCallbackMap.set(currentTopLevelSymbol, callbacks);
			***REMOVED***

			callbacks.add(onUsageCallback);
		***REMOVED*** else {
			onUsageCallback(true);
		***REMOVED***
	***REMOVED*** else {
		onUsageCallback(undefined);
	***REMOVED***
***REMOVED***;

/**
 * @param {ParserState***REMOVED*** state parser state
 * @param {TopLevelSymbol | undefined***REMOVED*** symbol the symbol
 */
module.exports.setTopLevelSymbol = (state, symbol) => {
	const innerGraphState = getState(state);

	if (innerGraphState) {
		innerGraphState.currentTopLevelSymbol = symbol;
	***REMOVED***
***REMOVED***;

/**
 * @param {ParserState***REMOVED*** state parser state
 * @returns {TopLevelSymbol|void***REMOVED*** usage data
 */
module.exports.getTopLevelSymbol = state => {
	const innerGraphState = getState(state);

	if (innerGraphState) {
		return innerGraphState.currentTopLevelSymbol;
	***REMOVED***
***REMOVED***;

/**
 * @param {JavascriptParser***REMOVED*** parser parser
 * @param {string***REMOVED*** name name of variable
 * @returns {TopLevelSymbol | undefined***REMOVED*** symbol
 */
module.exports.tagTopLevelSymbol = (parser, name) => {
	const innerGraphState = getState(parser.state);
	if (!innerGraphState) return;

	parser.defineVariable(name);

	const existingTag = /** @type {TopLevelSymbol***REMOVED*** */ (
		parser.getTagData(name, topLevelSymbolTag)
	);
	if (existingTag) {
		return existingTag;
	***REMOVED***

	const fn = new TopLevelSymbol(name);
	parser.tagVariable(name, topLevelSymbolTag, fn);
	return fn;
***REMOVED***;

/**
 * @param {Dependency***REMOVED*** dependency the dependency
 * @param {Set<string> | boolean***REMOVED*** usedByExports usedByExports info
 * @param {ModuleGraph***REMOVED*** moduleGraph moduleGraph
 * @param {RuntimeSpec***REMOVED*** runtime runtime
 * @returns {boolean***REMOVED*** false, when unused. Otherwise true
 */
module.exports.isDependencyUsedByExports = (
	dependency,
	usedByExports,
	moduleGraph,
	runtime
) => {
	if (usedByExports === false) return false;
	if (usedByExports !== true && usedByExports !== undefined) {
		const selfModule =
			/** @type {Module***REMOVED*** */
			(moduleGraph.getParentModule(dependency));
		const exportsInfo = moduleGraph.getExportsInfo(selfModule);
		let used = false;
		for (const exportName of usedByExports) {
			if (exportsInfo.getUsed(exportName, runtime) !== UsageState.Unused)
				used = true;
		***REMOVED***
		if (!used) return false;
	***REMOVED***
	return true;
***REMOVED***;

/**
 * @param {Dependency***REMOVED*** dependency the dependency
 * @param {Set<string> | boolean | undefined***REMOVED*** usedByExports usedByExports info
 * @param {ModuleGraph***REMOVED*** moduleGraph moduleGraph
 * @returns {null | false | GetConditionFn***REMOVED*** function to determine if the connection is active
 */
module.exports.getDependencyUsedByExportsCondition = (
	dependency,
	usedByExports,
	moduleGraph
) => {
	if (usedByExports === false) return false;
	if (usedByExports !== true && usedByExports !== undefined) {
		const selfModule =
			/** @type {Module***REMOVED*** */
			(moduleGraph.getParentModule(dependency));
		const exportsInfo = moduleGraph.getExportsInfo(selfModule);
		return (connections, runtime) => {
			for (const exportName of usedByExports) {
				if (exportsInfo.getUsed(exportName, runtime) !== UsageState.Unused)
					return true;
			***REMOVED***
			return false;
		***REMOVED***;
	***REMOVED***
	return null;
***REMOVED***;

class TopLevelSymbol {
	/**
	 * @param {string***REMOVED*** name name of the variable
	 */
	constructor(name) {
		this.name = name;
	***REMOVED***
***REMOVED***

module.exports.TopLevelSymbol = TopLevelSymbol;
module.exports.topLevelSymbolTag = topLevelSymbolTag;
