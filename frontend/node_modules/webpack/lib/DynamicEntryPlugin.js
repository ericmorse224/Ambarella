/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Naoyuki Kanezawa @nkzawa
*/

"use strict";

const EntryOptionPlugin = require("./EntryOptionPlugin");
const EntryPlugin = require("./EntryPlugin");
const EntryDependency = require("./dependencies/EntryDependency");

/** @typedef {import("../declarations/WebpackOptions").EntryDescriptionNormalized***REMOVED*** EntryDescriptionNormalized */
/** @typedef {import("../declarations/WebpackOptions").EntryDynamicNormalized***REMOVED*** EntryDynamic */
/** @typedef {import("../declarations/WebpackOptions").EntryItem***REMOVED*** EntryItem */
/** @typedef {import("../declarations/WebpackOptions").EntryStaticNormalized***REMOVED*** EntryStatic */
/** @typedef {import("./Compiler")***REMOVED*** Compiler */

const PLUGIN_NAME = "DynamicEntryPlugin";

class DynamicEntryPlugin {
	/**
	 * @param {string***REMOVED*** context the context path
	 * @param {EntryDynamic***REMOVED*** entry the entry value
	 */
	constructor(context, entry) {
		this.context = context;
		this.entry = entry;
	***REMOVED***

	/**
	 * Apply the plugin
	 * @param {Compiler***REMOVED*** compiler the compiler instance
	 * @returns {void***REMOVED***
	 */
	apply(compiler) {
		compiler.hooks.compilation.tap(
			PLUGIN_NAME,
			(compilation, { normalModuleFactory ***REMOVED***) => {
				compilation.dependencyFactories.set(
					EntryDependency,
					normalModuleFactory
				);
			***REMOVED***
		);

		compiler.hooks.make.tapPromise(PLUGIN_NAME, compilation =>
			Promise.resolve(this.entry())
				.then(entry => {
					const promises = [];
					for (const name of Object.keys(entry)) {
						const desc = entry[name];
						const options = EntryOptionPlugin.entryDescriptionToOptions(
							compiler,
							name,
							desc
						);
						for (const entry of /** @type {NonNullable<EntryDescriptionNormalized["import"]>***REMOVED*** */ (
							desc.import
						)) {
							promises.push(
								new Promise(
									/**
									 * @param {(value?: undefined) => void***REMOVED*** resolve resolve
									 * @param {(reason?: Error) => void***REMOVED*** reject reject
									 */
									(resolve, reject) => {
										compilation.addEntry(
											this.context,
											EntryPlugin.createDependency(entry, options),
											options,
											err => {
												if (err) return reject(err);
												resolve();
											***REMOVED***
										);
									***REMOVED***
								)
							);
						***REMOVED***
					***REMOVED***
					return Promise.all(promises);
				***REMOVED***)
				.then(x => {***REMOVED***)
		);
	***REMOVED***
***REMOVED***

module.exports = DynamicEntryPlugin;
