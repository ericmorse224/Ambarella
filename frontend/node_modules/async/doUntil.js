'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
***REMOVED***);
exports.default = doUntil;

var _doWhilst = require('./doWhilst.js');

var _doWhilst2 = _interopRequireDefault(_doWhilst);

var _wrapAsync = require('./internal/wrapAsync.js');

var _wrapAsync2 = _interopRequireDefault(_wrapAsync);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj ***REMOVED***; ***REMOVED***

/**
 * Like ['doWhilst']{@link module:ControlFlow.doWhilst***REMOVED***, except the `test` is inverted. Note the
 * argument ordering differs from `until`.
 *
 * @name doUntil
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.doWhilst]{@link module:ControlFlow.doWhilst***REMOVED***
 * @category Control Flow
 * @param {AsyncFunction***REMOVED*** iteratee - An async function which is called each time
 * `test` fails. Invoked with (callback).
 * @param {AsyncFunction***REMOVED*** test - asynchronous truth test to perform after each
 * execution of `iteratee`. Invoked with (...args, callback), where `...args` are the
 * non-error args from the previous callback of `iteratee`
 * @param {Function***REMOVED*** [callback] - A callback which is called after the test
 * function has passed and repeated execution of `iteratee` has stopped. `callback`
 * will be passed an error and any arguments passed to the final `iteratee`'s
 * callback. Invoked with (err, [results]);
 * @returns {Promise***REMOVED*** a promise, if no callback is passed
 */
function doUntil(iteratee, test, callback) {
    const _test = (0, _wrapAsync2.default)(test);
    return (0, _doWhilst2.default)(iteratee, (...args) => {
        const cb = args.pop();
        _test(...args, (err, truth) => cb(err, !truth));
    ***REMOVED***, callback);
***REMOVED***
module.exports = exports.default;