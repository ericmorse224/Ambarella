/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Florent Cailhol @ooflorent
*/

"use strict";

const WebpackError = require("./WebpackError");

/** @typedef {import("./Compiler")***REMOVED*** Compiler */

class WarnDeprecatedOptionPlugin {
	/**
	 * Create an instance of the plugin
	 * @param {string***REMOVED*** option the target option
	 * @param {string | number***REMOVED*** value the deprecated option value
	 * @param {string***REMOVED*** suggestion the suggestion replacement
	 */
	constructor(option, value, suggestion) {
		this.option = option;
		this.value = value;
		this.suggestion = suggestion;
	***REMOVED***

	/**
	 * Apply the plugin
	 * @param {Compiler***REMOVED*** compiler the compiler instance
	 * @returns {void***REMOVED***
	 */
	apply(compiler) {
		compiler.hooks.thisCompilation.tap(
			"WarnDeprecatedOptionPlugin",
			compilation => {
				compilation.warnings.push(
					new DeprecatedOptionWarning(this.option, this.value, this.suggestion)
				);
			***REMOVED***
		);
	***REMOVED***
***REMOVED***

class DeprecatedOptionWarning extends WebpackError {
	/**
	 * Create an instance deprecated option warning
	 * @param {string***REMOVED*** option the target option
	 * @param {string | number***REMOVED*** value the deprecated option value
	 * @param {string***REMOVED*** suggestion the suggestion replacement
	 */
	constructor(option, value, suggestion) {
		super();

		this.name = "DeprecatedOptionWarning";
		this.message =
			"configuration\n" +
			`The value '${value***REMOVED***' for option '${option***REMOVED***' is deprecated. ` +
			`Use '${suggestion***REMOVED***' instead.`;
	***REMOVED***
***REMOVED***

module.exports = WarnDeprecatedOptionPlugin;
