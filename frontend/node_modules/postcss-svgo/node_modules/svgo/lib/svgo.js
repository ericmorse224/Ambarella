'use strict';

const {
  defaultPlugins,
  resolvePluginConfig,
  extendDefaultPlugins,
***REMOVED*** = require('./svgo/config.js');
const { parseSvg ***REMOVED*** = require('./parser.js');
const { stringifySvg ***REMOVED*** = require('./stringifier.js');
const { invokePlugins ***REMOVED*** = require('./svgo/plugins.js');
const JSAPI = require('./svgo/jsAPI.js');
const { encodeSVGDatauri ***REMOVED*** = require('./svgo/tools.js');

exports.extendDefaultPlugins = extendDefaultPlugins;

const optimize = (input, config) => {
  if (config == null) {
    config = {***REMOVED***;
  ***REMOVED***
  if (typeof config !== 'object') {
    throw Error('Config should be an object');
  ***REMOVED***
  const maxPassCount = config.multipass ? 10 : 1;
  let prevResultSize = Number.POSITIVE_INFINITY;
  let svgjs = null;
  const info = {***REMOVED***;
  if (config.path != null) {
    info.path = config.path;
  ***REMOVED***
  for (let i = 0; i < maxPassCount; i += 1) {
    info.multipassCount = i;
    // TODO throw this error in v3
    try {
      svgjs = parseSvg(input, config.path);
    ***REMOVED*** catch (error) {
      return { error: error.toString(), modernError: error ***REMOVED***;
    ***REMOVED***
    if (svgjs.error != null) {
      if (config.path != null) {
        svgjs.path = config.path;
      ***REMOVED***
      return svgjs;
    ***REMOVED***
    const plugins = config.plugins || defaultPlugins;
    if (Array.isArray(plugins) === false) {
      throw Error(
        "Invalid plugins list. Provided 'plugins' in config should be an array."
      );
    ***REMOVED***
    const resolvedPlugins = plugins.map(resolvePluginConfig);
    const globalOverrides = {***REMOVED***;
    if (config.floatPrecision != null) {
      globalOverrides.floatPrecision = config.floatPrecision;
    ***REMOVED***
    svgjs = invokePlugins(svgjs, info, resolvedPlugins, null, globalOverrides);
    svgjs = stringifySvg(svgjs, config.js2svg);
    if (svgjs.data.length < prevResultSize) {
      input = svgjs.data;
      prevResultSize = svgjs.data.length;
    ***REMOVED*** else {
      if (config.datauri) {
        svgjs.data = encodeSVGDatauri(svgjs.data, config.datauri);
      ***REMOVED***
      if (config.path != null) {
        svgjs.path = config.path;
      ***REMOVED***
      return svgjs;
    ***REMOVED***
  ***REMOVED***
  return svgjs;
***REMOVED***;
exports.optimize = optimize;

/**
 * The factory that creates a content item with the helper methods.
 *
 * @param {Object***REMOVED*** data which is passed to jsAPI constructor
 * @returns {JSAPI***REMOVED*** content item
 */
const createContentItem = (data) => {
  return new JSAPI(data);
***REMOVED***;
exports.createContentItem = createContentItem;
