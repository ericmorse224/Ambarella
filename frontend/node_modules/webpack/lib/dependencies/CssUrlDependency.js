/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Ivan Kopeykin @vankop
*/

"use strict";

const RawDataUrlModule = require("../asset/RawDataUrlModule");
const makeSerializable = require("../util/makeSerializable");
const memoize = require("../util/memoize");
const ModuleDependency = require("./ModuleDependency");

/** @typedef {import("webpack-sources").ReplaceSource***REMOVED*** ReplaceSource */
/** @typedef {import("../ChunkGraph")***REMOVED*** ChunkGraph */
/** @typedef {import("../CodeGenerationResults")***REMOVED*** CodeGenerationResults */
/** @typedef {import("../Dependency")***REMOVED*** Dependency */
/** @typedef {import("../Dependency").UpdateHashContext***REMOVED*** UpdateHashContext */
/** @typedef {import("../DependencyTemplate").DependencyTemplateContext***REMOVED*** DependencyTemplateContext */
/** @typedef {import("../Module")***REMOVED*** Module */
/** @typedef {import("../Module").CodeGenerationResult***REMOVED*** CodeGenerationResult */
/** @typedef {import("../ModuleGraph")***REMOVED*** ModuleGraph */
/** @typedef {import("../ModuleGraphConnection")***REMOVED*** ModuleGraphConnection */
/** @typedef {import("../ModuleGraphConnection").ConnectionState***REMOVED*** ConnectionState */
/** @typedef {import("../javascript/JavascriptParser").Range***REMOVED*** Range */
/** @typedef {import("../serialization/ObjectMiddleware").ObjectDeserializerContext***REMOVED*** ObjectDeserializerContext */
/** @typedef {import("../serialization/ObjectMiddleware").ObjectSerializerContext***REMOVED*** ObjectSerializerContext */
/** @typedef {import("../util/Hash")***REMOVED*** Hash */
/** @typedef {import("../util/runtime").RuntimeSpec***REMOVED*** RuntimeSpec */

const getIgnoredRawDataUrlModule = memoize(
	() => new RawDataUrlModule("data:,", "ignored-asset", "(ignored asset)")
);

class CssUrlDependency extends ModuleDependency {
	/**
	 * @param {string***REMOVED*** request request
	 * @param {Range***REMOVED*** range range of the argument
	 * @param {"string" | "url" | "src"***REMOVED*** urlType dependency type e.g. url() or string
	 */
	constructor(request, range, urlType) {
		super(request);
		this.range = range;
		this.urlType = urlType;
	***REMOVED***

	get type() {
		return "css url()";
	***REMOVED***

	get category() {
		return "url";
	***REMOVED***

	/**
	 * @param {string***REMOVED*** context context directory
	 * @returns {Module | null***REMOVED*** a module
	 */
	createIgnoredModule(context) {
		return getIgnoredRawDataUrlModule();
	***REMOVED***

	/**
	 * @param {ObjectSerializerContext***REMOVED*** context context
	 */
	serialize(context) {
		const { write ***REMOVED*** = context;
		write(this.urlType);
		super.serialize(context);
	***REMOVED***

	/**
	 * @param {ObjectDeserializerContext***REMOVED*** context context
	 */
	deserialize(context) {
		const { read ***REMOVED*** = context;
		this.urlType = read();
		super.deserialize(context);
	***REMOVED***
***REMOVED***

/**
 * @param {string***REMOVED*** str string
 * @returns {string***REMOVED*** string in quotes if needed
 */
const cssEscapeString = str => {
	let countWhiteOrBracket = 0;
	let countQuotation = 0;
	let countApostrophe = 0;
	for (let i = 0; i < str.length; i++) {
		const cc = str.charCodeAt(i);
		switch (cc) {
			case 9: // tab
			case 10: // nl
			case 32: // space
			case 40: // (
			case 41: // )
				countWhiteOrBracket++;
				break;
			case 34:
				countQuotation++;
				break;
			case 39:
				countApostrophe++;
				break;
		***REMOVED***
	***REMOVED***
	if (countWhiteOrBracket < 2) {
		return str.replace(/[\n\t ()'"\\]/g, m => `\\${m***REMOVED***`);
	***REMOVED*** else if (countQuotation <= countApostrophe) {
		return `"${str.replace(/[\n"\\]/g, m => `\\${m***REMOVED***`)***REMOVED***"`;
	***REMOVED***
	return `'${str.replace(/[\n'\\]/g, m => `\\${m***REMOVED***`)***REMOVED***'`;
***REMOVED***;

CssUrlDependency.Template = class CssUrlDependencyTemplate extends (
	ModuleDependency.Template
) {
	/**
	 * @param {Dependency***REMOVED*** dependency the dependency for which the template should be applied
	 * @param {ReplaceSource***REMOVED*** source the current replace source which can be modified
	 * @param {DependencyTemplateContext***REMOVED*** templateContext the context object
	 * @returns {void***REMOVED***
	 */
	apply(
		dependency,
		source,
		{ moduleGraph, runtimeTemplate, codeGenerationResults ***REMOVED***
	) {
		const dep = /** @type {CssUrlDependency***REMOVED*** */ (dependency);
		const module = /** @type {Module***REMOVED*** */ (moduleGraph.getModule(dep));

		/** @type {string | undefined***REMOVED*** */
		let newValue;

		switch (dep.urlType) {
			case "string":
				newValue = cssEscapeString(
					this.assetUrl({
						module,
						codeGenerationResults
					***REMOVED***)
				);
				break;
			case "url":
				newValue = `url(${cssEscapeString(
					this.assetUrl({
						module,
						codeGenerationResults
					***REMOVED***)
				)***REMOVED***)`;
				break;
			case "src":
				newValue = `src(${cssEscapeString(
					this.assetUrl({
						module,
						codeGenerationResults
					***REMOVED***)
				)***REMOVED***)`;
				break;
		***REMOVED***

		source.replace(
			dep.range[0],
			dep.range[1] - 1,
			/** @type {string***REMOVED*** */ (newValue)
		);
	***REMOVED***

	/**
	 * @param {object***REMOVED*** options options object
	 * @param {Module***REMOVED*** options.module the module
	 * @param {RuntimeSpec=***REMOVED*** options.runtime runtime
	 * @param {CodeGenerationResults***REMOVED*** options.codeGenerationResults the code generation results
	 * @returns {string***REMOVED*** the url of the asset
	 */
	assetUrl({ runtime, module, codeGenerationResults ***REMOVED***) {
		if (!module) {
			return "data:,";
		***REMOVED***
		const codeGen = codeGenerationResults.get(module, runtime);
		const data =
			/** @type {NonNullable<CodeGenerationResult["data"]>***REMOVED*** */
			(codeGen.data);
		if (!data) return "data:,";
		const url = data.get("url");
		if (!url || !url["css-url"]) return "data:,";
		return url["css-url"];
	***REMOVED***
***REMOVED***;

makeSerializable(CssUrlDependency, "webpack/lib/dependencies/CssUrlDependency");

CssUrlDependency.PUBLIC_PATH_AUTO = "__WEBPACK_CSS_PUBLIC_PATH_AUTO__";

module.exports = CssUrlDependency;
