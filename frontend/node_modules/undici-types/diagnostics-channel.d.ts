import { Socket ***REMOVED*** from "net";
import { URL ***REMOVED*** from "url";
import Connector from "./connector";
import Dispatcher from "./dispatcher";

declare namespace DiagnosticsChannel {
  interface Request {
    origin?: string | URL;
    completed: boolean;
    method?: Dispatcher.HttpMethod;
    path: string;
    headers: any;
  ***REMOVED***
  interface Response {
    statusCode: number;
    statusText: string;
    headers: Array<Buffer>;
  ***REMOVED***
  type Error = unknown;
  interface ConnectParams {
    host: URL["host"];
    hostname: URL["hostname"];
    protocol: URL["protocol"];
    port: URL["port"];
    servername: string | null;
  ***REMOVED***
  type Connector = Connector.connector;
  export interface RequestCreateMessage {
    request: Request;
  ***REMOVED***
  export interface RequestBodySentMessage {
    request: Request;
  ***REMOVED***
  export interface RequestHeadersMessage {
    request: Request;
    response: Response;
  ***REMOVED***
  export interface RequestTrailersMessage {
    request: Request;
    trailers: Array<Buffer>;
  ***REMOVED***
  export interface RequestErrorMessage {
    request: Request;
    error: Error;
  ***REMOVED***
  export interface ClientSendHeadersMessage {
    request: Request;
    headers: string;
    socket: Socket;
  ***REMOVED***
  export interface ClientBeforeConnectMessage {
    connectParams: ConnectParams;
    connector: Connector;
  ***REMOVED***
  export interface ClientConnectedMessage {
    socket: Socket;
    connectParams: ConnectParams;
    connector: Connector;
  ***REMOVED***
  export interface ClientConnectErrorMessage {
    error: Error;
    socket: Socket;
    connectParams: ConnectParams;
    connector: Connector;
  ***REMOVED***
***REMOVED***
