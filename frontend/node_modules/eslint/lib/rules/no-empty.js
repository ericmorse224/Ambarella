/**
 * @fileoverview Rule to flag use of an empty block statement
 * @author Nicholas C. Zakas
 */
"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const astUtils = require("./utils/ast-utils");

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

/** @type {import('../types').Rule.RuleModule***REMOVED*** */
module.exports = {
	meta: {
		hasSuggestions: true,
		type: "suggestion",

		defaultOptions: [
			{
				allowEmptyCatch: false,
			***REMOVED***,
		],

		docs: {
			description: "Disallow empty block statements",
			recommended: true,
			url: "https://eslint.org/docs/latest/rules/no-empty",
		***REMOVED***,

		schema: [
			{
				type: "object",
				properties: {
					allowEmptyCatch: {
						type: "boolean",
					***REMOVED***,
				***REMOVED***,
				additionalProperties: false,
			***REMOVED***,
		],

		messages: {
			unexpected: "Empty {{type***REMOVED******REMOVED*** statement.",
			suggestComment: "Add comment inside empty {{type***REMOVED******REMOVED*** statement.",
		***REMOVED***,
	***REMOVED***,

	create(context) {
		const [{ allowEmptyCatch ***REMOVED***] = context.options;
		const sourceCode = context.sourceCode;

		return {
			BlockStatement(node) {
				// if the body is not empty, we can just return immediately
				if (node.body.length !== 0) {
					return;
				***REMOVED***

				// a function is generally allowed to be empty
				if (astUtils.isFunction(node.parent)) {
					return;
				***REMOVED***

				if (allowEmptyCatch && node.parent.type === "CatchClause") {
					return;
				***REMOVED***

				// any other block is only allowed to be empty, if it contains a comment
				if (sourceCode.getCommentsInside(node).length > 0) {
					return;
				***REMOVED***

				context.report({
					node,
					messageId: "unexpected",
					data: { type: "block" ***REMOVED***,
					suggest: [
						{
							messageId: "suggestComment",
							data: { type: "block" ***REMOVED***,
							fix(fixer) {
								const range = [
									node.range[0] + 1,
									node.range[1] - 1,
								];

								return fixer.replaceTextRange(
									range,
									" /* empty */ ",
								);
							***REMOVED***,
						***REMOVED***,
					],
				***REMOVED***);
			***REMOVED***,

			SwitchStatement(node) {
				if (
					typeof node.cases === "undefined" ||
					node.cases.length === 0
				) {
					context.report({
						node,
						messageId: "unexpected",
						data: { type: "switch" ***REMOVED***,
					***REMOVED***);
				***REMOVED***
			***REMOVED***,
		***REMOVED***;
	***REMOVED***,
***REMOVED***;
