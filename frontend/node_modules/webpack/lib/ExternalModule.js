/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const { OriginalSource, RawSource ***REMOVED*** = require("webpack-sources");
const ConcatenationScope = require("./ConcatenationScope");
const EnvironmentNotSupportAsyncWarning = require("./EnvironmentNotSupportAsyncWarning");
const { UsageState ***REMOVED*** = require("./ExportsInfo");
const InitFragment = require("./InitFragment");
const Module = require("./Module");
const {
	JS_TYPES,
	CSS_URL_TYPES,
	CSS_IMPORT_TYPES
***REMOVED*** = require("./ModuleSourceTypesConstants");
const { JAVASCRIPT_MODULE_TYPE_DYNAMIC ***REMOVED*** = require("./ModuleTypeConstants");
const RuntimeGlobals = require("./RuntimeGlobals");
const Template = require("./Template");
const { DEFAULTS ***REMOVED*** = require("./config/defaults");
const StaticExportsDependency = require("./dependencies/StaticExportsDependency");
const createHash = require("./util/createHash");
const extractUrlAndGlobal = require("./util/extractUrlAndGlobal");
const makeSerializable = require("./util/makeSerializable");
const propertyAccess = require("./util/propertyAccess");
const { register ***REMOVED*** = require("./util/serialization");

/** @typedef {import("webpack-sources").Source***REMOVED*** Source */
/** @typedef {import("../declarations/WebpackOptions").HashFunction***REMOVED*** HashFunction */
/** @typedef {import("../declarations/WebpackOptions").WebpackOptionsNormalized***REMOVED*** WebpackOptions */
/** @typedef {import("./Chunk")***REMOVED*** Chunk */
/** @typedef {import("./ChunkGraph")***REMOVED*** ChunkGraph */
/** @typedef {import("./Compilation")***REMOVED*** Compilation */
/** @typedef {import("./Compilation").UnsafeCacheData***REMOVED*** UnsafeCacheData */
/** @typedef {import("./Dependency").UpdateHashContext***REMOVED*** UpdateHashContext */
/** @typedef {import("./DependencyTemplates")***REMOVED*** DependencyTemplates */
/** @typedef {import("./ExportsInfo")***REMOVED*** ExportsInfo */
/** @typedef {import("./Generator").GenerateContext***REMOVED*** GenerateContext */
/** @typedef {import("./Generator").SourceTypes***REMOVED*** SourceTypes */
/** @typedef {import("./Module").BuildCallback***REMOVED*** BuildCallback */
/** @typedef {import("./Module").BuildInfo***REMOVED*** BuildInfo */
/** @typedef {import("./Module").CodeGenerationContext***REMOVED*** CodeGenerationContext */
/** @typedef {import("./Module").CodeGenerationResult***REMOVED*** CodeGenerationResult */
/** @typedef {import("./Module").ConcatenationBailoutReasonContext***REMOVED*** ConcatenationBailoutReasonContext */
/** @typedef {import("./Module").LibIdentOptions***REMOVED*** LibIdentOptions */
/** @typedef {import("./Module").NeedBuildCallback***REMOVED*** NeedBuildCallback */
/** @typedef {import("./Module").NeedBuildContext***REMOVED*** NeedBuildContext */
/** @typedef {import("./Module").ReadOnlyRuntimeRequirements***REMOVED*** ReadOnlyRuntimeRequirements */
/** @typedef {import("./ModuleGraph")***REMOVED*** ModuleGraph */
/** @typedef {import("./NormalModuleFactory")***REMOVED*** NormalModuleFactory */
/** @typedef {import("./RequestShortener")***REMOVED*** RequestShortener */
/** @typedef {import("./ResolverFactory").ResolverWithOptions***REMOVED*** ResolverWithOptions */
/** @typedef {import("./RuntimeTemplate")***REMOVED*** RuntimeTemplate */
/** @typedef {import("./WebpackError")***REMOVED*** WebpackError */
/** @typedef {import("./javascript/JavascriptModulesPlugin").ChunkRenderContext***REMOVED*** ChunkRenderContext */
/** @typedef {import("./javascript/JavascriptParser").ImportAttributes***REMOVED*** ImportAttributes */
/** @typedef {import("./serialization/ObjectMiddleware").ObjectDeserializerContext***REMOVED*** ObjectDeserializerContext */
/** @typedef {import("./serialization/ObjectMiddleware").ObjectSerializerContext***REMOVED*** ObjectSerializerContext */
/** @typedef {import("./util/Hash")***REMOVED*** Hash */
/** @typedef {import("./util/fs").InputFileSystem***REMOVED*** InputFileSystem */
/** @typedef {import("./util/runtime").RuntimeSpec***REMOVED*** RuntimeSpec */

/** @typedef {{ attributes?: ImportAttributes, externalType: "import" | "module" | undefined ***REMOVED******REMOVED*** ImportDependencyMeta */
/** @typedef {{ layer?: string, supports?: string, media?: string ***REMOVED******REMOVED*** CssImportDependencyMeta */
/** @typedef {{ sourceType: "css-url" ***REMOVED******REMOVED*** AssetDependencyMeta */

/** @typedef {ImportDependencyMeta | CssImportDependencyMeta | AssetDependencyMeta***REMOVED*** DependencyMeta */

/**
 * @typedef {object***REMOVED*** SourceData
 * @property {boolean=***REMOVED*** iife
 * @property {string=***REMOVED*** init
 * @property {string***REMOVED*** expression
 * @property {InitFragment<ChunkRenderContext>[]=***REMOVED*** chunkInitFragments
 * @property {ReadOnlyRuntimeRequirements=***REMOVED*** runtimeRequirements
 */

const RUNTIME_REQUIREMENTS = new Set([RuntimeGlobals.module]);
const RUNTIME_REQUIREMENTS_FOR_SCRIPT = new Set([RuntimeGlobals.loadScript]);
const RUNTIME_REQUIREMENTS_FOR_MODULE = new Set([
	RuntimeGlobals.definePropertyGetters
]);
const EMPTY_RUNTIME_REQUIREMENTS = new Set([]);

/**
 * @param {string|string[]***REMOVED*** variableName the variable name or path
 * @param {string***REMOVED*** type the module system
 * @returns {SourceData***REMOVED*** the generated source
 */
const getSourceForGlobalVariableExternal = (variableName, type) => {
	if (!Array.isArray(variableName)) {
		// make it an array as the look up works the same basically
		variableName = [variableName];
	***REMOVED***

	// needed for e.g. window["some"]["thing"]
	const objectLookup = variableName.map(r => `[${JSON.stringify(r)***REMOVED***]`).join("");
	return {
		iife: type === "this",
		expression: `${type***REMOVED***${objectLookup***REMOVED***`
	***REMOVED***;
***REMOVED***;

/**
 * @param {string|string[]***REMOVED*** moduleAndSpecifiers the module request
 * @returns {SourceData***REMOVED*** the generated source
 */
const getSourceForCommonJsExternal = moduleAndSpecifiers => {
	if (!Array.isArray(moduleAndSpecifiers)) {
		return {
			expression: `require(${JSON.stringify(moduleAndSpecifiers)***REMOVED***)`
		***REMOVED***;
	***REMOVED***
	const moduleName = moduleAndSpecifiers[0];
	return {
		expression: `require(${JSON.stringify(moduleName)***REMOVED***)${propertyAccess(
			moduleAndSpecifiers,
			1
		)***REMOVED***`
	***REMOVED***;
***REMOVED***;

/**
 * @param {string|string[]***REMOVED*** moduleAndSpecifiers the module request
 * @param {string***REMOVED*** importMetaName import.meta name
 * @param {boolean***REMOVED*** needPrefix need to use `node:` prefix for `module` import
 * @returns {SourceData***REMOVED*** the generated source
 */
const getSourceForCommonJsExternalInNodeModule = (
	moduleAndSpecifiers,
	importMetaName,
	needPrefix
) => {
	const chunkInitFragments = [
		new InitFragment(
			`import { createRequire as __WEBPACK_EXTERNAL_createRequire ***REMOVED*** from "${
				needPrefix ? "node:" : ""
			***REMOVED***module";\n`,
			InitFragment.STAGE_HARMONY_IMPORTS,
			0,
			"external module node-commonjs"
		)
	];
	if (!Array.isArray(moduleAndSpecifiers)) {
		return {
			chunkInitFragments,
			expression: `__WEBPACK_EXTERNAL_createRequire(${importMetaName***REMOVED***.url)(${JSON.stringify(
				moduleAndSpecifiers
			)***REMOVED***)`
		***REMOVED***;
	***REMOVED***
	const moduleName = moduleAndSpecifiers[0];
	return {
		chunkInitFragments,
		expression: `__WEBPACK_EXTERNAL_createRequire(${importMetaName***REMOVED***.url)(${JSON.stringify(
			moduleName
		)***REMOVED***)${propertyAccess(moduleAndSpecifiers, 1)***REMOVED***`
	***REMOVED***;
***REMOVED***;

/**
 * @param {string|string[]***REMOVED*** moduleAndSpecifiers the module request
 * @param {RuntimeTemplate***REMOVED*** runtimeTemplate the runtime template
 * @param {ImportDependencyMeta=***REMOVED*** dependencyMeta the dependency meta
 * @returns {SourceData***REMOVED*** the generated source
 */
const getSourceForImportExternal = (
	moduleAndSpecifiers,
	runtimeTemplate,
	dependencyMeta
) => {
	const importName = runtimeTemplate.outputOptions.importFunctionName;
	if (
		!runtimeTemplate.supportsDynamicImport() &&
		(importName === "import" || importName === "module-import")
	) {
		throw new Error(
			"The target environment doesn't support 'import()' so it's not possible to use external type 'import'"
		);
	***REMOVED***
	const attributes =
		dependencyMeta && dependencyMeta.attributes
			? dependencyMeta.attributes._isLegacyAssert
				? `, { assert: ${JSON.stringify(
						dependencyMeta.attributes,
						importAssertionReplacer
					)***REMOVED*** ***REMOVED***`
				: `, { with: ${JSON.stringify(dependencyMeta.attributes)***REMOVED*** ***REMOVED***`
			: "";
	if (!Array.isArray(moduleAndSpecifiers)) {
		return {
			expression: `${importName***REMOVED***(${JSON.stringify(
				moduleAndSpecifiers
			)***REMOVED***${attributes***REMOVED***);`
		***REMOVED***;
	***REMOVED***
	if (moduleAndSpecifiers.length === 1) {
		return {
			expression: `${importName***REMOVED***(${JSON.stringify(
				moduleAndSpecifiers[0]
			)***REMOVED***${attributes***REMOVED***);`
		***REMOVED***;
	***REMOVED***
	const moduleName = moduleAndSpecifiers[0];
	return {
		expression: `${importName***REMOVED***(${JSON.stringify(
			moduleName
		)***REMOVED***${attributes***REMOVED***).then(${runtimeTemplate.returningFunction(
			`module${propertyAccess(moduleAndSpecifiers, 1)***REMOVED***`,
			"module"
		)***REMOVED***);`
	***REMOVED***;
***REMOVED***;

/**
 * @template {{ [key: string]: string ***REMOVED******REMOVED*** T
 * @param {keyof T***REMOVED*** key key
 * @param {T[keyof T]***REMOVED*** value value
 * @returns {undefined | T[keyof T]***REMOVED*** replaced value
 */
const importAssertionReplacer = (key, value) => {
	if (key === "_isLegacyAssert") {
		return;
	***REMOVED***

	return value;
***REMOVED***;

/**
 * @extends {InitFragment<ChunkRenderContext>***REMOVED***
 */
class ModuleExternalInitFragment extends InitFragment {
	/**
	 * @param {string***REMOVED*** request import source
	 * @param {string=***REMOVED*** ident recomputed ident
	 * @param {ImportDependencyMeta=***REMOVED*** dependencyMeta the dependency meta
	 * @param {HashFunction=***REMOVED*** hashFunction the hash function to use
	 */
	constructor(
		request,
		ident,
		dependencyMeta,
		hashFunction = DEFAULTS.HASH_FUNCTION
	) {
		if (ident === undefined) {
			ident = Template.toIdentifier(request);
			if (ident !== request) {
				ident += `_${createHash(hashFunction)
					.update(request)
					.digest("hex")
					.slice(0, 8)***REMOVED***`;
			***REMOVED***
		***REMOVED***
		const identifier = `__WEBPACK_EXTERNAL_MODULE_${ident***REMOVED***__`;
		super(
			`import * as ${identifier***REMOVED*** from ${JSON.stringify(request)***REMOVED***${
				dependencyMeta && dependencyMeta.attributes
					? dependencyMeta.attributes._isLegacyAssert
						? ` assert ${JSON.stringify(
								dependencyMeta.attributes,
								importAssertionReplacer
							)***REMOVED***`
						: ` with ${JSON.stringify(dependencyMeta.attributes)***REMOVED***`
					: ""
			***REMOVED***;\n`,
			InitFragment.STAGE_HARMONY_IMPORTS,
			0,
			`external module import ${ident***REMOVED***`
		);
		this._ident = ident;
		this._request = request;
		this._dependencyMeta = request;
		this._identifier = identifier;
	***REMOVED***

	getNamespaceIdentifier() {
		return this._identifier;
	***REMOVED***
***REMOVED***

register(
	ModuleExternalInitFragment,
	"webpack/lib/ExternalModule",
	"ModuleExternalInitFragment",
	{
		serialize(obj, { write ***REMOVED***) {
			write(obj._request);
			write(obj._ident);
			write(obj._dependencyMeta);
		***REMOVED***,
		deserialize({ read ***REMOVED***) {
			return new ModuleExternalInitFragment(read(), read(), read());
		***REMOVED***
	***REMOVED***
);

/**
 * @param {string***REMOVED*** input input
 * @param {ExportsInfo***REMOVED*** exportsInfo the exports info
 * @param {RuntimeSpec=***REMOVED*** runtime the runtime
 * @param {RuntimeTemplate=***REMOVED*** runtimeTemplate the runtime template
 * @returns {string | undefined***REMOVED*** the module remapping
 */
const generateModuleRemapping = (
	input,
	exportsInfo,
	runtime,
	runtimeTemplate
) => {
	if (exportsInfo.otherExportsInfo.getUsed(runtime) === UsageState.Unused) {
		const properties = [];
		for (const exportInfo of exportsInfo.orderedExports) {
			const used = exportInfo.getUsedName(exportInfo.name, runtime);
			if (!used) continue;
			const nestedInfo = exportInfo.getNestedExportsInfo();
			if (nestedInfo) {
				const nestedExpr = generateModuleRemapping(
					`${input***REMOVED***${propertyAccess([exportInfo.name])***REMOVED***`,
					nestedInfo
				);
				if (nestedExpr) {
					properties.push(`[${JSON.stringify(used)***REMOVED***]: y(${nestedExpr***REMOVED***)`);
					continue;
				***REMOVED***
			***REMOVED***
			properties.push(
				`[${JSON.stringify(used)***REMOVED***]: ${
					/** @type {RuntimeTemplate***REMOVED*** */ (runtimeTemplate).returningFunction(
						`${input***REMOVED***${propertyAccess([exportInfo.name])***REMOVED***`
					)
				***REMOVED***`
			);
		***REMOVED***
		return `x({ ${properties.join(", ")***REMOVED*** ***REMOVED***)`;
	***REMOVED***
***REMOVED***;

/**
 * @param {string|string[]***REMOVED*** moduleAndSpecifiers the module request
 * @param {ExportsInfo***REMOVED*** exportsInfo exports info of this module
 * @param {RuntimeSpec***REMOVED*** runtime the runtime
 * @param {RuntimeTemplate***REMOVED*** runtimeTemplate the runtime template
 * @param {ImportDependencyMeta***REMOVED*** dependencyMeta the dependency meta
 * @returns {SourceData***REMOVED*** the generated source
 */
const getSourceForModuleExternal = (
	moduleAndSpecifiers,
	exportsInfo,
	runtime,
	runtimeTemplate,
	dependencyMeta
) => {
	if (!Array.isArray(moduleAndSpecifiers))
		moduleAndSpecifiers = [moduleAndSpecifiers];
	const initFragment = new ModuleExternalInitFragment(
		moduleAndSpecifiers[0],
		undefined,
		dependencyMeta,
		runtimeTemplate.outputOptions.hashFunction
	);
	const baseAccess = `${initFragment.getNamespaceIdentifier()***REMOVED***${propertyAccess(
		moduleAndSpecifiers,
		1
	)***REMOVED***`;
	const moduleRemapping = generateModuleRemapping(
		baseAccess,
		exportsInfo,
		runtime,
		runtimeTemplate
	);
	const expression = moduleRemapping || baseAccess;
	return {
		expression,
		init: moduleRemapping
			? `var x = ${runtimeTemplate.basicFunction(
					"y",
					`var x = {***REMOVED***; ${RuntimeGlobals.definePropertyGetters***REMOVED***(x, y); return x`
				)***REMOVED*** \nvar y = ${runtimeTemplate.returningFunction(
					runtimeTemplate.returningFunction("x"),
					"x"
				)***REMOVED***`
			: undefined,
		runtimeRequirements: moduleRemapping
			? RUNTIME_REQUIREMENTS_FOR_MODULE
			: undefined,
		chunkInitFragments: [initFragment]
	***REMOVED***;
***REMOVED***;

/**
 * @param {string|string[]***REMOVED*** urlAndGlobal the script request
 * @param {RuntimeTemplate***REMOVED*** runtimeTemplate the runtime template
 * @returns {SourceData***REMOVED*** the generated source
 */
const getSourceForScriptExternal = (urlAndGlobal, runtimeTemplate) => {
	if (typeof urlAndGlobal === "string") {
		urlAndGlobal = extractUrlAndGlobal(urlAndGlobal);
	***REMOVED***
	const url = urlAndGlobal[0];
	const globalName = urlAndGlobal[1];
	return {
		init: "var __webpack_error__ = new Error();",
		expression: `new Promise(${runtimeTemplate.basicFunction(
			"resolve, reject",
			[
				`if(typeof ${globalName***REMOVED*** !== "undefined") return resolve();`,
				`${RuntimeGlobals.loadScript***REMOVED***(${JSON.stringify(
					url
				)***REMOVED***, ${runtimeTemplate.basicFunction("event", [
					`if(typeof ${globalName***REMOVED*** !== "undefined") return resolve();`,
					"var errorType = event && (event.type === 'load' ? 'missing' : event.type);",
					"var realSrc = event && event.target && event.target.src;",
					"__webpack_error__.message = 'Loading script failed.\\n(' + errorType + ': ' + realSrc + ')';",
					"__webpack_error__.name = 'ScriptExternalLoadError';",
					"__webpack_error__.type = errorType;",
					"__webpack_error__.request = realSrc;",
					"reject(__webpack_error__);"
				])***REMOVED***, ${JSON.stringify(globalName)***REMOVED***);`
			]
		)***REMOVED***).then(${runtimeTemplate.returningFunction(
			`${globalName***REMOVED***${propertyAccess(urlAndGlobal, 2)***REMOVED***`
		)***REMOVED***)`,
		runtimeRequirements: RUNTIME_REQUIREMENTS_FOR_SCRIPT
	***REMOVED***;
***REMOVED***;

/**
 * @param {string***REMOVED*** variableName the variable name to check
 * @param {string***REMOVED*** request the request path
 * @param {RuntimeTemplate***REMOVED*** runtimeTemplate the runtime template
 * @returns {string***REMOVED*** the generated source
 */
const checkExternalVariable = (variableName, request, runtimeTemplate) =>
	`if(typeof ${variableName***REMOVED*** === 'undefined') { ${runtimeTemplate.throwMissingModuleErrorBlock(
		{ request ***REMOVED***
	)***REMOVED*** ***REMOVED***\n`;

/**
 * @param {string|number***REMOVED*** id the module id
 * @param {boolean***REMOVED*** optional true, if the module is optional
 * @param {string|string[]***REMOVED*** request the request path
 * @param {RuntimeTemplate***REMOVED*** runtimeTemplate the runtime template
 * @returns {SourceData***REMOVED*** the generated source
 */
const getSourceForAmdOrUmdExternal = (
	id,
	optional,
	request,
	runtimeTemplate
) => {
	const externalVariable = `__WEBPACK_EXTERNAL_MODULE_${Template.toIdentifier(
		`${id***REMOVED***`
	)***REMOVED***__`;
	return {
		init: optional
			? checkExternalVariable(
					externalVariable,
					Array.isArray(request) ? request.join(".") : request,
					runtimeTemplate
				)
			: undefined,
		expression: externalVariable
	***REMOVED***;
***REMOVED***;

/**
 * @param {boolean***REMOVED*** optional true, if the module is optional
 * @param {string|string[]***REMOVED*** request the request path
 * @param {RuntimeTemplate***REMOVED*** runtimeTemplate the runtime template
 * @returns {SourceData***REMOVED*** the generated source
 */
const getSourceForDefaultCase = (optional, request, runtimeTemplate) => {
	if (!Array.isArray(request)) {
		// make it an array as the look up works the same basically
		request = [request];
	***REMOVED***

	const variableName = request[0];
	const objectLookup = propertyAccess(request, 1);
	return {
		init: optional
			? checkExternalVariable(variableName, request.join("."), runtimeTemplate)
			: undefined,
		expression: `${variableName***REMOVED***${objectLookup***REMOVED***`
	***REMOVED***;
***REMOVED***;

/** @typedef {Record<string, string | string[]>***REMOVED*** RequestRecord */

class ExternalModule extends Module {
	/**
	 * @param {string | string[] | RequestRecord***REMOVED*** request request
	 * @param {string***REMOVED*** type type
	 * @param {string***REMOVED*** userRequest user request
	 * @param {DependencyMeta=***REMOVED*** dependencyMeta dependency meta
	 */
	constructor(request, type, userRequest, dependencyMeta) {
		super(JAVASCRIPT_MODULE_TYPE_DYNAMIC, null);

		// Info from Factory
		/** @type {string | string[] | Record<string, string | string[]>***REMOVED*** */
		this.request = request;
		/** @type {string***REMOVED*** */
		this.externalType = type;
		/** @type {string***REMOVED*** */
		this.userRequest = userRequest;
		/** @type {DependencyMeta=***REMOVED*** */
		this.dependencyMeta = dependencyMeta;
	***REMOVED***

	/**
	 * @returns {SourceTypes***REMOVED*** types available (do not mutate)
	 */
	getSourceTypes() {
		if (
			this.externalType === "asset" &&
			this.dependencyMeta &&
			/** @type {AssetDependencyMeta***REMOVED*** */
			(this.dependencyMeta).sourceType === "css-url"
		) {
			return CSS_URL_TYPES;
		***REMOVED*** else if (this.externalType === "css-import") {
			return CSS_IMPORT_TYPES;
		***REMOVED***

		return JS_TYPES;
	***REMOVED***

	/**
	 * @param {LibIdentOptions***REMOVED*** options options
	 * @returns {string | null***REMOVED*** an identifier for library inclusion
	 */
	libIdent(options) {
		return this.userRequest;
	***REMOVED***

	/**
	 * @param {Chunk***REMOVED*** chunk the chunk which condition should be checked
	 * @param {Compilation***REMOVED*** compilation the compilation
	 * @returns {boolean***REMOVED*** true, if the chunk is ok for the module
	 */
	chunkCondition(chunk, { chunkGraph ***REMOVED***) {
		return this.externalType === "css-import"
			? true
			: chunkGraph.getNumberOfEntryModules(chunk) > 0;
	***REMOVED***

	/**
	 * @returns {string***REMOVED*** a unique identifier of the module
	 */
	identifier() {
		return `external ${this._resolveExternalType(this.externalType)***REMOVED*** ${JSON.stringify(this.request)***REMOVED***`;
	***REMOVED***

	/**
	 * @param {RequestShortener***REMOVED*** requestShortener the request shortener
	 * @returns {string***REMOVED*** a user readable identifier of the module
	 */
	readableIdentifier(requestShortener) {
		return `external ${JSON.stringify(this.request)***REMOVED***`;
	***REMOVED***

	/**
	 * @param {NeedBuildContext***REMOVED*** context context info
	 * @param {NeedBuildCallback***REMOVED*** callback callback function, returns true, if the module needs a rebuild
	 * @returns {void***REMOVED***
	 */
	needBuild(context, callback) {
		return callback(null, !this.buildMeta);
	***REMOVED***

	/**
	 * @param {WebpackOptions***REMOVED*** options webpack options
	 * @param {Compilation***REMOVED*** compilation the compilation
	 * @param {ResolverWithOptions***REMOVED*** resolver the resolver
	 * @param {InputFileSystem***REMOVED*** fs the file system
	 * @param {BuildCallback***REMOVED*** callback callback function
	 * @returns {void***REMOVED***
	 */
	build(options, compilation, resolver, fs, callback) {
		this.buildMeta = {
			async: false,
			exportsType: undefined
		***REMOVED***;
		this.buildInfo = {
			strict: true,
			topLevelDeclarations: new Set(),
			module: compilation.outputOptions.module
		***REMOVED***;
		const { request, externalType ***REMOVED*** = this._getRequestAndExternalType();
		this.buildMeta.exportsType = "dynamic";
		let canMangle = false;
		this.clearDependenciesAndBlocks();
		switch (externalType) {
			case "this":
				this.buildInfo.strict = false;
				break;
			case "system":
				if (!Array.isArray(request) || request.length === 1) {
					this.buildMeta.exportsType = "namespace";
					canMangle = true;
				***REMOVED***
				break;
			case "module":
				if (this.buildInfo.module) {
					if (!Array.isArray(request) || request.length === 1) {
						this.buildMeta.exportsType = "namespace";
						canMangle = true;
					***REMOVED***
				***REMOVED*** else {
					this.buildMeta.async = true;
					EnvironmentNotSupportAsyncWarning.check(
						this,
						compilation.runtimeTemplate,
						"external module"
					);
					if (!Array.isArray(request) || request.length === 1) {
						this.buildMeta.exportsType = "namespace";
						canMangle = false;
					***REMOVED***
				***REMOVED***
				break;
			case "script":
				this.buildMeta.async = true;
				EnvironmentNotSupportAsyncWarning.check(
					this,
					compilation.runtimeTemplate,
					"external script"
				);
				break;
			case "promise":
				this.buildMeta.async = true;
				EnvironmentNotSupportAsyncWarning.check(
					this,
					compilation.runtimeTemplate,
					"external promise"
				);
				break;
			case "import":
				this.buildMeta.async = true;
				EnvironmentNotSupportAsyncWarning.check(
					this,
					compilation.runtimeTemplate,
					"external import"
				);
				if (!Array.isArray(request) || request.length === 1) {
					this.buildMeta.exportsType = "namespace";
					canMangle = false;
				***REMOVED***
				break;
		***REMOVED***
		this.addDependency(new StaticExportsDependency(true, canMangle));
		callback();
	***REMOVED***

	/**
	 * restore unsafe cache data
	 * @param {UnsafeCacheData***REMOVED*** unsafeCacheData data from getUnsafeCacheData
	 * @param {NormalModuleFactory***REMOVED*** normalModuleFactory the normal module factory handling the unsafe caching
	 */
	restoreFromUnsafeCache(unsafeCacheData, normalModuleFactory) {
		this._restoreFromUnsafeCache(unsafeCacheData, normalModuleFactory);
	***REMOVED***

	/**
	 * @param {ConcatenationBailoutReasonContext***REMOVED*** context context
	 * @returns {string | undefined***REMOVED*** reason why this module can't be concatenated, undefined when it can be concatenated
	 */
	getConcatenationBailoutReason({ moduleGraph ***REMOVED***) {
		switch (this.externalType) {
			case "amd":
			case "amd-require":
			case "umd":
			case "umd2":
			case "system":
			case "jsonp":
				return `${this.externalType***REMOVED*** externals can't be concatenated`;
		***REMOVED***
		return undefined;
	***REMOVED***

	_getRequestAndExternalType() {
		let { request, externalType ***REMOVED*** = this;
		if (typeof request === "object" && !Array.isArray(request))
			request = request[externalType];
		externalType = this._resolveExternalType(externalType);
		return { request, externalType ***REMOVED***;
	***REMOVED***

	/**
	 * Resolve the detailed external type from the raw external type.
	 * e.g. resolve "module" or "import" from "module-import" type
	 * @param {string***REMOVED*** externalType raw external type
	 * @returns {string***REMOVED*** resolved external type
	 */
	_resolveExternalType(externalType) {
		if (externalType === "module-import") {
			if (
				this.dependencyMeta &&
				/** @type {ImportDependencyMeta***REMOVED*** */
				(this.dependencyMeta).externalType
			) {
				return /** @type {ImportDependencyMeta***REMOVED*** */ (this.dependencyMeta)
					.externalType;
			***REMOVED***
			return "module";
		***REMOVED*** else if (externalType === "asset") {
			if (
				this.dependencyMeta &&
				/** @type {AssetDependencyMeta***REMOVED*** */
				(this.dependencyMeta).sourceType
			) {
				return /** @type {AssetDependencyMeta***REMOVED*** */ (this.dependencyMeta)
					.sourceType;
			***REMOVED***

			return "asset";
		***REMOVED***

		return externalType;
	***REMOVED***

	/**
	 * @private
	 * @param {string | string[]***REMOVED*** request request
	 * @param {string***REMOVED*** externalType the external type
	 * @param {RuntimeTemplate***REMOVED*** runtimeTemplate the runtime template
	 * @param {ModuleGraph***REMOVED*** moduleGraph the module graph
	 * @param {ChunkGraph***REMOVED*** chunkGraph the chunk graph
	 * @param {RuntimeSpec***REMOVED*** runtime the runtime
	 * @param {DependencyMeta | undefined***REMOVED*** dependencyMeta the dependency meta
	 * @returns {SourceData***REMOVED*** the source data
	 */
	_getSourceData(
		request,
		externalType,
		runtimeTemplate,
		moduleGraph,
		chunkGraph,
		runtime,
		dependencyMeta
	) {
		switch (externalType) {
			case "this":
			case "window":
			case "self":
				return getSourceForGlobalVariableExternal(request, this.externalType);
			case "global":
				return getSourceForGlobalVariableExternal(
					request,
					runtimeTemplate.globalObject
				);
			case "commonjs":
			case "commonjs2":
			case "commonjs-module":
			case "commonjs-static":
				return getSourceForCommonJsExternal(request);
			case "node-commonjs":
				return /** @type {BuildInfo***REMOVED*** */ (this.buildInfo).module
					? getSourceForCommonJsExternalInNodeModule(
							request,
							/** @type {string***REMOVED*** */
							(runtimeTemplate.outputOptions.importMetaName),
							/** @type {boolean***REMOVED*** */
							(runtimeTemplate.supportNodePrefixForCoreModules())
						)
					: getSourceForCommonJsExternal(request);
			case "amd":
			case "amd-require":
			case "umd":
			case "umd2":
			case "system":
			case "jsonp": {
				const id = chunkGraph.getModuleId(this);
				return getSourceForAmdOrUmdExternal(
					id !== null ? id : this.identifier(),
					this.isOptional(moduleGraph),
					request,
					runtimeTemplate
				);
			***REMOVED***
			case "import":
				return getSourceForImportExternal(
					request,
					runtimeTemplate,
					/** @type {ImportDependencyMeta***REMOVED*** */ (dependencyMeta)
				);
			case "script":
				return getSourceForScriptExternal(request, runtimeTemplate);
			case "module": {
				if (!(/** @type {BuildInfo***REMOVED*** */ (this.buildInfo).module)) {
					if (!runtimeTemplate.supportsDynamicImport()) {
						throw new Error(
							`The target environment doesn't support dynamic import() syntax so it's not possible to use external type 'module' within a script${
								runtimeTemplate.supportsEcmaScriptModuleSyntax()
									? "\nDid you mean to build a EcmaScript Module ('output.module: true')?"
									: ""
							***REMOVED***`
						);
					***REMOVED***
					return getSourceForImportExternal(
						request,
						runtimeTemplate,
						/** @type {ImportDependencyMeta***REMOVED*** */ (dependencyMeta)
					);
				***REMOVED***
				if (!runtimeTemplate.supportsEcmaScriptModuleSyntax()) {
					throw new Error(
						"The target environment doesn't support EcmaScriptModule syntax so it's not possible to use external type 'module'"
					);
				***REMOVED***
				return getSourceForModuleExternal(
					request,
					moduleGraph.getExportsInfo(this),
					runtime,
					runtimeTemplate,
					/** @type {ImportDependencyMeta***REMOVED*** */ (dependencyMeta)
				);
			***REMOVED***
			case "var":
			case "promise":
			case "const":
			case "let":
			case "assign":
			default:
				return getSourceForDefaultCase(
					this.isOptional(moduleGraph),
					request,
					runtimeTemplate
				);
		***REMOVED***
	***REMOVED***

	/**
	 * @param {CodeGenerationContext***REMOVED*** context context for code generation
	 * @returns {CodeGenerationResult***REMOVED*** result
	 */
	codeGeneration({
		runtimeTemplate,
		moduleGraph,
		chunkGraph,
		runtime,
		concatenationScope
	***REMOVED***) {
		const { request, externalType ***REMOVED*** = this._getRequestAndExternalType();
		switch (externalType) {
			case "asset": {
				const sources = new Map();
				sources.set(
					"javascript",
					new RawSource(`module.exports = ${JSON.stringify(request)***REMOVED***;`)
				);
				const data = new Map();
				data.set("url", { javascript: request ***REMOVED***);
				return { sources, runtimeRequirements: RUNTIME_REQUIREMENTS, data ***REMOVED***;
			***REMOVED***
			case "css-url": {
				const sources = new Map();
				const data = new Map();
				data.set("url", { "css-url": request ***REMOVED***);
				return { sources, runtimeRequirements: RUNTIME_REQUIREMENTS, data ***REMOVED***;
			***REMOVED***
			case "css-import": {
				const sources = new Map();
				const dependencyMeta = /** @type {CssImportDependencyMeta***REMOVED*** */ (
					this.dependencyMeta
				);
				const layer =
					dependencyMeta.layer !== undefined
						? ` layer(${dependencyMeta.layer***REMOVED***)`
						: "";
				const supports = dependencyMeta.supports
					? ` supports(${dependencyMeta.supports***REMOVED***)`
					: "";
				const media = dependencyMeta.media ? ` ${dependencyMeta.media***REMOVED***` : "";
				sources.set(
					"css-import",
					new RawSource(
						`@import url(${JSON.stringify(
							request
						)***REMOVED***)${layer***REMOVED***${supports***REMOVED***${media***REMOVED***;`
					)
				);
				return {
					sources,
					runtimeRequirements: EMPTY_RUNTIME_REQUIREMENTS
				***REMOVED***;
			***REMOVED***
			default: {
				const sourceData = this._getSourceData(
					request,
					externalType,
					runtimeTemplate,
					moduleGraph,
					chunkGraph,
					runtime,
					this.dependencyMeta
				);

				let sourceString = sourceData.expression;
				if (sourceData.iife)
					sourceString = `(function() { return ${sourceString***REMOVED***; ***REMOVED***())`;
				if (concatenationScope) {
					sourceString = `${
						runtimeTemplate.supportsConst() ? "const" : "var"
					***REMOVED*** ${ConcatenationScope.NAMESPACE_OBJECT_EXPORT***REMOVED*** = ${sourceString***REMOVED***;`;
					concatenationScope.registerNamespaceExport(
						ConcatenationScope.NAMESPACE_OBJECT_EXPORT
					);
				***REMOVED*** else {
					sourceString = `module.exports = ${sourceString***REMOVED***;`;
				***REMOVED***
				if (sourceData.init)
					sourceString = `${sourceData.init***REMOVED***\n${sourceString***REMOVED***`;

				let data;
				if (sourceData.chunkInitFragments) {
					data = new Map();
					data.set("chunkInitFragments", sourceData.chunkInitFragments);
				***REMOVED***

				const sources = new Map();
				if (this.useSourceMap || this.useSimpleSourceMap) {
					sources.set(
						"javascript",
						new OriginalSource(sourceString, this.identifier())
					);
				***REMOVED*** else {
					sources.set("javascript", new RawSource(sourceString));
				***REMOVED***

				let runtimeRequirements = sourceData.runtimeRequirements;
				if (!concatenationScope) {
					if (!runtimeRequirements) {
						runtimeRequirements = RUNTIME_REQUIREMENTS;
					***REMOVED*** else {
						const set = new Set(runtimeRequirements);
						set.add(RuntimeGlobals.module);
						runtimeRequirements = set;
					***REMOVED***
				***REMOVED***

				return {
					sources,
					runtimeRequirements:
						runtimeRequirements || EMPTY_RUNTIME_REQUIREMENTS,
					data
				***REMOVED***;
			***REMOVED***
		***REMOVED***
	***REMOVED***

	/**
	 * @param {string=***REMOVED*** type the source type for which the size should be estimated
	 * @returns {number***REMOVED*** the estimated size of the module (must be non-zero)
	 */
	size(type) {
		return 42;
	***REMOVED***

	/**
	 * @param {Hash***REMOVED*** hash the hash used to track dependencies
	 * @param {UpdateHashContext***REMOVED*** context context
	 * @returns {void***REMOVED***
	 */
	updateHash(hash, context) {
		const { chunkGraph ***REMOVED*** = context;
		hash.update(
			`${this._resolveExternalType(this.externalType)***REMOVED***${JSON.stringify(this.request)***REMOVED***${this.isOptional(
				chunkGraph.moduleGraph
			)***REMOVED***`
		);
		super.updateHash(hash, context);
	***REMOVED***

	/**
	 * @param {ObjectSerializerContext***REMOVED*** context context
	 */
	serialize(context) {
		const { write ***REMOVED*** = context;

		write(this.request);
		write(this.externalType);
		write(this.userRequest);
		write(this.dependencyMeta);

		super.serialize(context);
	***REMOVED***

	/**
	 * @param {ObjectDeserializerContext***REMOVED*** context context
	 */
	deserialize(context) {
		const { read ***REMOVED*** = context;

		this.request = read();
		this.externalType = read();
		this.userRequest = read();
		this.dependencyMeta = read();

		super.deserialize(context);
	***REMOVED***
***REMOVED***

makeSerializable(ExternalModule, "webpack/lib/ExternalModule");

module.exports = ExternalModule;
