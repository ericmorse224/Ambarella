import type {CodeKeywordDefinition, ErrorObject, KeywordErrorDefinition***REMOVED*** from "../../types"
import type {KeywordCxt***REMOVED*** from "../../compile/validate"
import {_, str***REMOVED*** from "../../compile/codegen"

export type MultipleOfError = ErrorObject<
  "multipleOf",
  {multipleOf: number***REMOVED***,
  number | {$data: string***REMOVED***
>

const error: KeywordErrorDefinition = {
  message: ({schemaCode***REMOVED***) => str`must be multiple of ${schemaCode***REMOVED***`,
  params: ({schemaCode***REMOVED***) => _`{multipleOf: ${schemaCode***REMOVED******REMOVED***`,
***REMOVED***

const def: CodeKeywordDefinition = {
  keyword: "multipleOf",
  type: "number",
  schemaType: "number",
  $data: true,
  error,
  code(cxt: KeywordCxt) {
    const {gen, data, schemaCode, it***REMOVED*** = cxt
    // const bdt = bad$DataType(schemaCode, <string>def.schemaType, $data)
    const prec = it.opts.multipleOfPrecision
    const res = gen.let("res")
    const invalid = prec
      ? _`Math.abs(Math.round(${res***REMOVED***) - ${res***REMOVED***) > 1e-${prec***REMOVED***`
      : _`${res***REMOVED*** !== parseInt(${res***REMOVED***)`
    cxt.fail$data(_`(${schemaCode***REMOVED*** === 0 || (${res***REMOVED*** = ${data***REMOVED***/${schemaCode***REMOVED***, ${invalid***REMOVED***))`)
  ***REMOVED***,
***REMOVED***

export default def
