/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const makeSerializable = require("../util/makeSerializable");
const NullDependency = require("./NullDependency");

/** @typedef {import("../ChunkGraph")***REMOVED*** ChunkGraph */
/** @typedef {import("../Dependency").ExportSpec***REMOVED*** ExportSpec */
/** @typedef {import("../Dependency").ExportsSpec***REMOVED*** ExportsSpec */
/** @typedef {import("../Dependency").UpdateHashContext***REMOVED*** UpdateHashContext */
/** @typedef {import("../ModuleGraph")***REMOVED*** ModuleGraph */
/** @typedef {import("../json/JsonData")***REMOVED*** JsonData */
/** @typedef {import("../json/JsonData").JsonValue***REMOVED*** JsonValue */
/** @typedef {import("../serialization/ObjectMiddleware").ObjectDeserializerContext***REMOVED*** ObjectDeserializerContext */
/** @typedef {import("../serialization/ObjectMiddleware").ObjectSerializerContext***REMOVED*** ObjectSerializerContext */
/** @typedef {import("../util/Hash")***REMOVED*** Hash */

/**
 * @callback GetExportsFromDataFn
 * @param {JsonValue***REMOVED*** data raw json data
 * @param {number=***REMOVED*** curDepth current depth
 * @returns {ExportSpec[] | null***REMOVED*** export spec or nothing
 */

/**
 * @param {number***REMOVED*** exportsDepth exportsDepth
 * @returns {GetExportsFromDataFn***REMOVED*** value
 */
const getExportsWithDepth = exportsDepth =>
	/** @type {GetExportsFromDataFn***REMOVED*** */
	function getExportsFromData(data, curDepth = 1) {
		if (curDepth > exportsDepth) {
			return null;
		***REMOVED***

		if (data && typeof data === "object") {
			if (Array.isArray(data)) {
				return data.length < 100
					? data.map((item, idx) => ({
							name: `${idx***REMOVED***`,
							canMangle: true,
							exports: getExportsFromData(item, curDepth + 1) || undefined
						***REMOVED***))
					: null;
			***REMOVED***

			/** @type {ExportSpec[]***REMOVED*** */
			const exports = [];

			for (const key of Object.keys(data)) {
				exports.push({
					name: key,
					canMangle: true,
					exports: getExportsFromData(data[key], curDepth + 1) || undefined
				***REMOVED***);
			***REMOVED***

			return exports;
		***REMOVED***

		return null;
	***REMOVED***;

class JsonExportsDependency extends NullDependency {
	/**
	 * @param {JsonData***REMOVED*** data json data
	 * @param {number***REMOVED*** exportsDepth the depth of json exports to analyze
	 */
	constructor(data, exportsDepth) {
		super();
		this.data = data;
		this.exportsDepth = exportsDepth;
	***REMOVED***

	get type() {
		return "json exports";
	***REMOVED***

	/**
	 * Returns the exported names
	 * @param {ModuleGraph***REMOVED*** moduleGraph module graph
	 * @returns {ExportsSpec | undefined***REMOVED*** export names
	 */
	getExports(moduleGraph) {
		return {
			exports: getExportsWithDepth(this.exportsDepth)(
				this.data && /** @type {JsonValue***REMOVED*** */ (this.data.get())
			),
			dependencies: undefined
		***REMOVED***;
	***REMOVED***

	/**
	 * Update the hash
	 * @param {Hash***REMOVED*** hash hash to be updated
	 * @param {UpdateHashContext***REMOVED*** context context
	 * @returns {void***REMOVED***
	 */
	updateHash(hash, context) {
		this.data.updateHash(hash);
	***REMOVED***

	/**
	 * @param {ObjectSerializerContext***REMOVED*** context context
	 */
	serialize(context) {
		const { write ***REMOVED*** = context;
		write(this.data);
		write(this.exportsDepth);
		super.serialize(context);
	***REMOVED***

	/**
	 * @param {ObjectDeserializerContext***REMOVED*** context context
	 */
	deserialize(context) {
		const { read ***REMOVED*** = context;
		this.data = read();
		this.exportsDepth = read();
		super.deserialize(context);
	***REMOVED***
***REMOVED***

makeSerializable(
	JsonExportsDependency,
	"webpack/lib/dependencies/JsonExportsDependency"
);

module.exports = JsonExportsDependency;
