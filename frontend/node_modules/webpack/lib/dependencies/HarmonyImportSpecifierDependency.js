/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const Dependency = require("../Dependency");
const Template = require("../Template");
const {
	getDependencyUsedByExportsCondition
***REMOVED*** = require("../optimize/InnerGraph");
const { getTrimmedIdsAndRange ***REMOVED*** = require("../util/chainedImports");
const makeSerializable = require("../util/makeSerializable");
const propertyAccess = require("../util/propertyAccess");
const HarmonyImportDependency = require("./HarmonyImportDependency");

/** @typedef {import("webpack-sources").ReplaceSource***REMOVED*** ReplaceSource */
/** @typedef {import("../ChunkGraph")***REMOVED*** ChunkGraph */
/** @typedef {import("../Dependency").ExportsSpec***REMOVED*** ExportsSpec */
/** @typedef {import("../Dependency").GetConditionFn***REMOVED*** GetConditionFn */
/** @typedef {import("../Dependency").ReferencedExport***REMOVED*** ReferencedExport */
/** @typedef {import("../Dependency").UpdateHashContext***REMOVED*** UpdateHashContext */
/** @typedef {import("../DependencyTemplate").DependencyTemplateContext***REMOVED*** DependencyTemplateContext */
/** @typedef {import("../Module")***REMOVED*** Module */
/** @typedef {import("../Module").BuildMeta***REMOVED*** BuildMeta */
/** @typedef {import("../ModuleGraph")***REMOVED*** ModuleGraph */
/** @typedef {import("../ModuleGraphConnection")***REMOVED*** ModuleGraphConnection */
/** @typedef {import("../ModuleGraphConnection").ConnectionState***REMOVED*** ConnectionState */
/** @typedef {import("../WebpackError")***REMOVED*** WebpackError */
/** @typedef {import("../javascript/JavascriptParser").DestructuringAssignmentProperty***REMOVED*** DestructuringAssignmentProperty */
/** @typedef {import("../javascript/JavascriptParser").ImportAttributes***REMOVED*** ImportAttributes */
/** @typedef {import("../javascript/JavascriptParser").Range***REMOVED*** Range */
/** @typedef {import("../serialization/ObjectMiddleware").ObjectDeserializerContext***REMOVED*** ObjectDeserializerContext */
/** @typedef {import("../serialization/ObjectMiddleware").ObjectSerializerContext***REMOVED*** ObjectSerializerContext */
/** @typedef {import("../util/Hash")***REMOVED*** Hash */
/** @typedef {import("../util/runtime").RuntimeSpec***REMOVED*** RuntimeSpec */
/** @typedef {import("./HarmonyImportDependency").ExportPresenceMode***REMOVED*** ExportPresenceMode */

const idsSymbol = Symbol("HarmonyImportSpecifierDependency.ids");

const { ExportPresenceModes ***REMOVED*** = HarmonyImportDependency;

class HarmonyImportSpecifierDependency extends HarmonyImportDependency {
	/**
	 * @param {string***REMOVED*** request request
	 * @param {number***REMOVED*** sourceOrder source order
	 * @param {string[]***REMOVED*** ids ids
	 * @param {string***REMOVED*** name name
	 * @param {Range***REMOVED*** range range
	 * @param {ExportPresenceMode***REMOVED*** exportPresenceMode export presence mode
	 * @param {ImportAttributes | undefined***REMOVED*** attributes import attributes
	 * @param {Range[] | undefined***REMOVED*** idRanges ranges for members of ids; the two arrays are right-aligned
	 */
	constructor(
		request,
		sourceOrder,
		ids,
		name,
		range,
		exportPresenceMode,
		attributes,
		idRanges // TODO webpack 6 make this non-optional. It must always be set to properly trim ids.
	) {
		super(request, sourceOrder, attributes);
		this.ids = ids;
		this.name = name;
		this.range = range;
		this.idRanges = idRanges;
		this.exportPresenceMode = exportPresenceMode;
		this.namespaceObjectAsContext = false;
		this.call = undefined;
		this.directImport = undefined;
		this.shorthand = undefined;
		this.asiSafe = undefined;
		/** @type {Set<string> | boolean | undefined***REMOVED*** */
		this.usedByExports = undefined;
		/** @type {Set<DestructuringAssignmentProperty> | undefined***REMOVED*** */
		this.referencedPropertiesInDestructuring = undefined;
	***REMOVED***

	// TODO webpack 6 remove
	get id() {
		throw new Error("id was renamed to ids and type changed to string[]");
	***REMOVED***

	// TODO webpack 6 remove
	getId() {
		throw new Error("id was renamed to ids and type changed to string[]");
	***REMOVED***

	// TODO webpack 6 remove
	setId() {
		throw new Error("id was renamed to ids and type changed to string[]");
	***REMOVED***

	get type() {
		return "harmony import specifier";
	***REMOVED***

	/**
	 * @param {ModuleGraph***REMOVED*** moduleGraph the module graph
	 * @returns {string[]***REMOVED*** the imported ids
	 */
	getIds(moduleGraph) {
		const meta = moduleGraph.getMetaIfExisting(this);
		if (meta === undefined) return this.ids;
		const ids = meta[idsSymbol];
		return ids !== undefined ? ids : this.ids;
	***REMOVED***

	/**
	 * @param {ModuleGraph***REMOVED*** moduleGraph the module graph
	 * @param {string[]***REMOVED*** ids the imported ids
	 * @returns {void***REMOVED***
	 */
	setIds(moduleGraph, ids) {
		moduleGraph.getMeta(this)[idsSymbol] = ids;
	***REMOVED***

	/**
	 * @param {ModuleGraph***REMOVED*** moduleGraph module graph
	 * @returns {null | false | GetConditionFn***REMOVED*** function to determine if the connection is active
	 */
	getCondition(moduleGraph) {
		return getDependencyUsedByExportsCondition(
			this,
			this.usedByExports,
			moduleGraph
		);
	***REMOVED***

	/**
	 * @param {ModuleGraph***REMOVED*** moduleGraph the module graph
	 * @returns {ConnectionState***REMOVED*** how this dependency connects the module to referencing modules
	 */
	getModuleEvaluationSideEffectsState(moduleGraph) {
		return false;
	***REMOVED***

	/**
	 * Returns list of exports referenced by this dependency
	 * @param {ModuleGraph***REMOVED*** moduleGraph module graph
	 * @param {RuntimeSpec***REMOVED*** runtime the runtime for which the module is analysed
	 * @returns {(string[] | ReferencedExport)[]***REMOVED*** referenced exports
	 */
	getReferencedExports(moduleGraph, runtime) {
		let ids = this.getIds(moduleGraph);
		if (ids.length === 0) return this._getReferencedExportsInDestructuring();
		let namespaceObjectAsContext = this.namespaceObjectAsContext;
		if (ids[0] === "default") {
			const selfModule =
				/** @type {Module***REMOVED*** */
				(moduleGraph.getParentModule(this));
			const importedModule =
				/** @type {Module***REMOVED*** */
				(moduleGraph.getModule(this));
			switch (
				importedModule.getExportsType(
					moduleGraph,
					/** @type {BuildMeta***REMOVED*** */
					(selfModule.buildMeta).strictHarmonyModule
				)
			) {
				case "default-only":
				case "default-with-named":
					if (ids.length === 1)
						return this._getReferencedExportsInDestructuring();
					ids = ids.slice(1);
					namespaceObjectAsContext = true;
					break;
				case "dynamic":
					return Dependency.EXPORTS_OBJECT_REFERENCED;
			***REMOVED***
		***REMOVED***

		if (
			this.call &&
			!this.directImport &&
			(namespaceObjectAsContext || ids.length > 1)
		) {
			if (ids.length === 1) return Dependency.EXPORTS_OBJECT_REFERENCED;
			ids = ids.slice(0, -1);
		***REMOVED***

		return this._getReferencedExportsInDestructuring(ids);
	***REMOVED***

	/**
	 * @param {string[]=***REMOVED*** ids ids
	 * @returns {string[][]***REMOVED*** referenced exports
	 */
	_getReferencedExportsInDestructuring(ids) {
		if (this.referencedPropertiesInDestructuring) {
			/** @type {string[][]***REMOVED*** */
			const refs = [];
			for (const { id ***REMOVED*** of this.referencedPropertiesInDestructuring) {
				refs.push(ids ? ids.concat([id]) : [id]);
			***REMOVED***
			return refs;
		***REMOVED***
		return ids ? [ids] : Dependency.EXPORTS_OBJECT_REFERENCED;
	***REMOVED***

	/**
	 * @param {ModuleGraph***REMOVED*** moduleGraph module graph
	 * @returns {ExportPresenceMode***REMOVED*** effective mode
	 */
	_getEffectiveExportPresenceLevel(moduleGraph) {
		if (this.exportPresenceMode !== ExportPresenceModes.AUTO)
			return this.exportPresenceMode;
		const buildMeta =
			/** @type {BuildMeta***REMOVED*** */
			(
				/** @type {Module***REMOVED*** */
				(moduleGraph.getParentModule(this)).buildMeta
			);
		return buildMeta.strictHarmonyModule
			? ExportPresenceModes.ERROR
			: ExportPresenceModes.WARN;
	***REMOVED***

	/**
	 * Returns warnings
	 * @param {ModuleGraph***REMOVED*** moduleGraph module graph
	 * @returns {WebpackError[] | null | undefined***REMOVED*** warnings
	 */
	getWarnings(moduleGraph) {
		const exportsPresence = this._getEffectiveExportPresenceLevel(moduleGraph);
		if (exportsPresence === ExportPresenceModes.WARN) {
			return this._getErrors(moduleGraph);
		***REMOVED***
		return null;
	***REMOVED***

	/**
	 * Returns errors
	 * @param {ModuleGraph***REMOVED*** moduleGraph module graph
	 * @returns {WebpackError[] | null | undefined***REMOVED*** errors
	 */
	getErrors(moduleGraph) {
		const exportsPresence = this._getEffectiveExportPresenceLevel(moduleGraph);
		if (exportsPresence === ExportPresenceModes.ERROR) {
			return this._getErrors(moduleGraph);
		***REMOVED***
		return null;
	***REMOVED***

	/**
	 * @param {ModuleGraph***REMOVED*** moduleGraph module graph
	 * @returns {WebpackError[] | undefined***REMOVED*** errors
	 */
	_getErrors(moduleGraph) {
		const ids = this.getIds(moduleGraph);
		return this.getLinkingErrors(
			moduleGraph,
			ids,
			`(imported as '${this.name***REMOVED***')`
		);
	***REMOVED***

	/**
	 * implement this method to allow the occurrence order plugin to count correctly
	 * @returns {number***REMOVED*** count how often the id is used in this dependency
	 */
	getNumberOfIdOccurrences() {
		return 0;
	***REMOVED***

	/**
	 * @param {ObjectSerializerContext***REMOVED*** context context
	 */
	serialize(context) {
		const { write ***REMOVED*** = context;
		write(this.ids);
		write(this.name);
		write(this.range);
		write(this.idRanges);
		write(this.exportPresenceMode);
		write(this.namespaceObjectAsContext);
		write(this.call);
		write(this.directImport);
		write(this.shorthand);
		write(this.asiSafe);
		write(this.usedByExports);
		write(this.referencedPropertiesInDestructuring);
		super.serialize(context);
	***REMOVED***

	/**
	 * @param {ObjectDeserializerContext***REMOVED*** context context
	 */
	deserialize(context) {
		const { read ***REMOVED*** = context;
		this.ids = read();
		this.name = read();
		this.range = read();
		this.idRanges = read();
		this.exportPresenceMode = read();
		this.namespaceObjectAsContext = read();
		this.call = read();
		this.directImport = read();
		this.shorthand = read();
		this.asiSafe = read();
		this.usedByExports = read();
		this.referencedPropertiesInDestructuring = read();
		super.deserialize(context);
	***REMOVED***
***REMOVED***

makeSerializable(
	HarmonyImportSpecifierDependency,
	"webpack/lib/dependencies/HarmonyImportSpecifierDependency"
);

HarmonyImportSpecifierDependency.Template = class HarmonyImportSpecifierDependencyTemplate extends (
	HarmonyImportDependency.Template
) {
	/**
	 * @param {Dependency***REMOVED*** dependency the dependency for which the template should be applied
	 * @param {ReplaceSource***REMOVED*** source the current replace source which can be modified
	 * @param {DependencyTemplateContext***REMOVED*** templateContext the context object
	 * @returns {void***REMOVED***
	 */
	apply(dependency, source, templateContext) {
		const dep = /** @type {HarmonyImportSpecifierDependency***REMOVED*** */ (dependency);
		const { moduleGraph, runtime ***REMOVED*** = templateContext;
		const connection = moduleGraph.getConnection(dep);
		// Skip rendering depending when dependency is conditional
		if (connection && !connection.isTargetActive(runtime)) return;

		const ids = dep.getIds(moduleGraph);
		const {
			trimmedRange: [trimmedRangeStart, trimmedRangeEnd],
			trimmedIds
		***REMOVED*** = getTrimmedIdsAndRange(ids, dep.range, dep.idRanges, moduleGraph, dep);

		const exportExpr = this._getCodeForIds(
			dep,
			source,
			templateContext,
			trimmedIds
		);
		if (dep.shorthand) {
			source.insert(trimmedRangeEnd, `: ${exportExpr***REMOVED***`);
		***REMOVED*** else {
			source.replace(trimmedRangeStart, trimmedRangeEnd - 1, exportExpr);
		***REMOVED***

		if (dep.referencedPropertiesInDestructuring) {
			let prefixedIds = ids;

			if (ids[0] === "default") {
				const selfModule =
					/** @type {Module***REMOVED*** */
					(moduleGraph.getParentModule(dep));
				const importedModule =
					/** @type {Module***REMOVED*** */
					(moduleGraph.getModule(dep));
				const exportsType = importedModule.getExportsType(
					moduleGraph,
					/** @type {BuildMeta***REMOVED*** */
					(selfModule.buildMeta).strictHarmonyModule
				);
				if (
					(exportsType === "default-only" ||
						exportsType === "default-with-named") &&
					ids.length >= 1
				) {
					prefixedIds = ids.slice(1);
				***REMOVED***
			***REMOVED***

			for (const {
				id,
				shorthand,
				range
			***REMOVED*** of dep.referencedPropertiesInDestructuring) {
				const concatedIds = prefixedIds.concat([id]);
				const module = /** @type {Module***REMOVED*** */ (moduleGraph.getModule(dep));
				const used = moduleGraph
					.getExportsInfo(module)
					.getUsedName(concatedIds, runtime);
				if (!used) return;
				const newName = used[used.length - 1];
				const name = concatedIds[concatedIds.length - 1];
				if (newName === name) continue;

				const comment = `${Template.toNormalComment(name)***REMOVED*** `;
				const key = comment + JSON.stringify(newName);
				source.replace(
					/** @type {Range***REMOVED*** */
					(range)[0],
					/** @type {Range***REMOVED*** */
					(range)[1] - 1,
					shorthand ? `${key***REMOVED***: ${name***REMOVED***` : `${key***REMOVED***`
				);
			***REMOVED***
		***REMOVED***
	***REMOVED***

	/**
	 * @param {HarmonyImportSpecifierDependency***REMOVED*** dep dependency
	 * @param {ReplaceSource***REMOVED*** source source
	 * @param {DependencyTemplateContext***REMOVED*** templateContext context
	 * @param {string[]***REMOVED*** ids ids
	 * @returns {string***REMOVED*** generated code
	 */
	_getCodeForIds(dep, source, templateContext, ids) {
		const { moduleGraph, module, runtime, concatenationScope ***REMOVED*** =
			templateContext;
		const connection = moduleGraph.getConnection(dep);
		let exportExpr;
		if (
			connection &&
			concatenationScope &&
			concatenationScope.isModuleInScope(connection.module)
		) {
			if (ids.length === 0) {
				exportExpr = concatenationScope.createModuleReference(
					connection.module,
					{
						asiSafe: dep.asiSafe
					***REMOVED***
				);
			***REMOVED*** else if (dep.namespaceObjectAsContext && ids.length === 1) {
				exportExpr =
					concatenationScope.createModuleReference(connection.module, {
						asiSafe: dep.asiSafe
					***REMOVED***) + propertyAccess(ids);
			***REMOVED*** else {
				exportExpr = concatenationScope.createModuleReference(
					connection.module,
					{
						ids,
						call: dep.call,
						directImport: dep.directImport,
						asiSafe: dep.asiSafe
					***REMOVED***
				);
			***REMOVED***
		***REMOVED*** else {
			super.apply(dep, source, templateContext);

			const { runtimeTemplate, initFragments, runtimeRequirements ***REMOVED*** =
				templateContext;

			exportExpr = runtimeTemplate.exportFromImport({
				moduleGraph,
				module: /** @type {Module***REMOVED*** */ (moduleGraph.getModule(dep)),
				request: dep.request,
				exportName: ids,
				originModule: module,
				asiSafe: dep.shorthand ? true : dep.asiSafe,
				isCall: dep.call,
				callContext: !dep.directImport,
				defaultInterop: true,
				importVar: dep.getImportVar(moduleGraph),
				initFragments,
				runtime,
				runtimeRequirements
			***REMOVED***);
		***REMOVED***
		return exportExpr;
	***REMOVED***
***REMOVED***;

module.exports = HarmonyImportSpecifierDependency;
