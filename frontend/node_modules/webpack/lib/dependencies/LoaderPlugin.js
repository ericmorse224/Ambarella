/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const NormalModule = require("../NormalModule");
const LazySet = require("../util/LazySet");
const LoaderDependency = require("./LoaderDependency");
const LoaderImportDependency = require("./LoaderImportDependency");

/** @typedef {import("../../declarations/LoaderContext").LoaderPluginLoaderContext***REMOVED*** LoaderPluginLoaderContext */
/** @typedef {import("../Compilation").DepConstructor***REMOVED*** DepConstructor */
/** @typedef {import("../Compilation").ExecuteModuleExports***REMOVED*** ExecuteModuleExports */
/** @typedef {import("../Compilation").ExecuteModuleResult***REMOVED*** ExecuteModuleResult */
/** @typedef {import("../Compiler")***REMOVED*** Compiler */
/** @typedef {import("../Module")***REMOVED*** Module */
/** @typedef {import("../Module").BuildInfo***REMOVED*** BuildInfo */

/**
 * @callback ImportModuleCallback
 * @param {(Error | null)=***REMOVED*** err error object
 * @param {ExecuteModuleExports=***REMOVED*** exports exports of the evaluated module
 */

/**
 * @typedef {object***REMOVED*** ImportModuleOptions
 * @property {string=***REMOVED*** layer the target layer
 * @property {string=***REMOVED*** publicPath the target public path
 * @property {string=***REMOVED*** baseUri target base uri
 */

const PLUGIN_NAME = "LoaderPlugin";

class LoaderPlugin {
	/**
	 * Apply the plugin
	 * @param {Compiler***REMOVED*** compiler the compiler instance
	 * @returns {void***REMOVED***
	 */
	apply(compiler) {
		compiler.hooks.compilation.tap(
			PLUGIN_NAME,
			(compilation, { normalModuleFactory ***REMOVED***) => {
				compilation.dependencyFactories.set(
					LoaderDependency,
					normalModuleFactory
				);
				compilation.dependencyFactories.set(
					LoaderImportDependency,
					normalModuleFactory
				);
			***REMOVED***
		);

		compiler.hooks.compilation.tap(PLUGIN_NAME, compilation => {
			const moduleGraph = compilation.moduleGraph;
			NormalModule.getCompilationHooks(compilation).loader.tap(
				PLUGIN_NAME,
				loaderContext => {
					loaderContext.loadModule = (request, callback) => {
						const dep = new LoaderDependency(request);
						dep.loc = {
							name: request
						***REMOVED***;
						const factory = compilation.dependencyFactories.get(
							/** @type {DepConstructor***REMOVED*** */ (dep.constructor)
						);
						if (factory === undefined) {
							return callback(
								new Error(
									`No module factory available for dependency type: ${dep.constructor.name***REMOVED***`
								)
							);
						***REMOVED***
						const oldFactorizeQueueContext =
							compilation.factorizeQueue.getContext();
						compilation.factorizeQueue.setContext("load-module");
						const oldAddModuleQueueContext =
							compilation.addModuleQueue.getContext();
						compilation.addModuleQueue.setContext("load-module");
						compilation.buildQueue.increaseParallelism();
						compilation.handleModuleCreation(
							{
								factory,
								dependencies: [dep],
								originModule:
									/** @type {NormalModule***REMOVED*** */
									(loaderContext._module),
								context: loaderContext.context,
								recursive: false
							***REMOVED***,
							err => {
								compilation.factorizeQueue.setContext(oldFactorizeQueueContext);
								compilation.addModuleQueue.setContext(oldAddModuleQueueContext);
								compilation.buildQueue.decreaseParallelism();
								if (err) {
									return callback(err);
								***REMOVED***
								const referencedModule = moduleGraph.getModule(dep);
								if (!referencedModule) {
									return callback(new Error("Cannot load the module"));
								***REMOVED***
								if (referencedModule.getNumberOfErrors() > 0) {
									return callback(
										new Error("The loaded module contains errors")
									);
								***REMOVED***
								const moduleSource = referencedModule.originalSource();
								if (!moduleSource) {
									return callback(
										new Error(
											"The module created for a LoaderDependency must have an original source"
										)
									);
								***REMOVED***
								let map;
								let source;
								if (moduleSource.sourceAndMap) {
									const sourceAndMap = moduleSource.sourceAndMap();
									map = sourceAndMap.map;
									source = sourceAndMap.source;
								***REMOVED*** else {
									map = moduleSource.map();
									source = moduleSource.source();
								***REMOVED***
								const fileDependencies = new LazySet();
								const contextDependencies = new LazySet();
								const missingDependencies = new LazySet();
								const buildDependencies = new LazySet();
								referencedModule.addCacheDependencies(
									fileDependencies,
									contextDependencies,
									missingDependencies,
									buildDependencies
								);

								for (const d of fileDependencies) {
									loaderContext.addDependency(d);
								***REMOVED***
								for (const d of contextDependencies) {
									loaderContext.addContextDependency(d);
								***REMOVED***
								for (const d of missingDependencies) {
									loaderContext.addMissingDependency(d);
								***REMOVED***
								for (const d of buildDependencies) {
									loaderContext.addBuildDependency(d);
								***REMOVED***
								return callback(null, source, map, referencedModule);
							***REMOVED***
						);
					***REMOVED***;

					/**
					 * @param {string***REMOVED*** request the request string to load the module from
					 * @param {ImportModuleOptions***REMOVED*** options options
					 * @param {ImportModuleCallback***REMOVED*** callback callback returning the exports
					 * @returns {void***REMOVED***
					 */
					const importModule = (request, options, callback) => {
						const dep = new LoaderImportDependency(request);
						dep.loc = {
							name: request
						***REMOVED***;
						const factory = compilation.dependencyFactories.get(
							/** @type {DepConstructor***REMOVED*** */ (dep.constructor)
						);
						if (factory === undefined) {
							return callback(
								new Error(
									`No module factory available for dependency type: ${dep.constructor.name***REMOVED***`
								)
							);
						***REMOVED***

						const oldFactorizeQueueContext =
							compilation.factorizeQueue.getContext();
						compilation.factorizeQueue.setContext("import-module");
						const oldAddModuleQueueContext =
							compilation.addModuleQueue.getContext();
						compilation.addModuleQueue.setContext("import-module");
						compilation.buildQueue.increaseParallelism();
						compilation.handleModuleCreation(
							{
								factory,
								dependencies: [dep],
								originModule:
									/** @type {NormalModule***REMOVED*** */
									(loaderContext._module),
								contextInfo: {
									issuerLayer: options.layer
								***REMOVED***,
								context: loaderContext.context,
								connectOrigin: false,
								checkCycle: true
							***REMOVED***,
							err => {
								compilation.factorizeQueue.setContext(oldFactorizeQueueContext);
								compilation.addModuleQueue.setContext(oldAddModuleQueueContext);
								compilation.buildQueue.decreaseParallelism();
								if (err) {
									return callback(err);
								***REMOVED***
								const referencedModule = moduleGraph.getModule(dep);
								if (!referencedModule) {
									return callback(new Error("Cannot load the module"));
								***REMOVED***
								compilation.buildQueue.increaseParallelism();
								compilation.executeModule(
									referencedModule,
									{
										entryOptions: {
											baseUri: options.baseUri,
											publicPath: options.publicPath
										***REMOVED***
									***REMOVED***,
									(err, result) => {
										compilation.buildQueue.decreaseParallelism();
										if (err) return callback(err);
										const {
											fileDependencies,
											contextDependencies,
											missingDependencies,
											buildDependencies,
											cacheable,
											assets,
											exports
										***REMOVED*** = /** @type {ExecuteModuleResult***REMOVED*** */ (result);
										for (const d of fileDependencies) {
											loaderContext.addDependency(d);
										***REMOVED***
										for (const d of contextDependencies) {
											loaderContext.addContextDependency(d);
										***REMOVED***
										for (const d of missingDependencies) {
											loaderContext.addMissingDependency(d);
										***REMOVED***
										for (const d of buildDependencies) {
											loaderContext.addBuildDependency(d);
										***REMOVED***
										if (cacheable === false) loaderContext.cacheable(false);
										for (const [name, { source, info ***REMOVED***] of assets) {
											const buildInfo =
												/** @type {BuildInfo***REMOVED*** */
												(
													/** @type {NormalModule***REMOVED*** */ (loaderContext._module)
														.buildInfo
												);
											if (!buildInfo.assets) {
												buildInfo.assets = Object.create(null);
												buildInfo.assetsInfo = new Map();
											***REMOVED***
											/** @type {NonNullable<BuildInfo["assets"]>***REMOVED*** */
											(buildInfo.assets)[name] = source;
											/** @type {NonNullable<BuildInfo["assetsInfo"]>***REMOVED*** */
											(buildInfo.assetsInfo).set(name, info);
										***REMOVED***
										callback(null, exports);
									***REMOVED***
								);
							***REMOVED***
						);
					***REMOVED***;

					// @ts-expect-error overloading doesn't work
					loaderContext.importModule = (request, options, callback) => {
						if (!callback) {
							return new Promise((resolve, reject) => {
								importModule(request, options || {***REMOVED***, (err, result) => {
									if (err) reject(err);
									else resolve(result);
								***REMOVED***);
							***REMOVED***);
						***REMOVED***
						return importModule(request, options || {***REMOVED***, callback);
					***REMOVED***;
				***REMOVED***
			);
		***REMOVED***);
	***REMOVED***
***REMOVED***
module.exports = LoaderPlugin;
