"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
***REMOVED***);
exports.buildDecoratedClass = buildDecoratedClass;
var _core = require("@babel/core");
var _helperReplaceSupers = require("@babel/helper-replace-supers");
;
function prop(key, value) {
  if (!value) return null;
  return _core.types.objectProperty(_core.types.identifier(key), value);
***REMOVED***
function method(key, body) {
  return _core.types.objectMethod("method", _core.types.identifier(key), [], _core.types.blockStatement(body));
***REMOVED***
function takeDecorators(node) {
  let result;
  if (node.decorators && node.decorators.length > 0) {
    result = _core.types.arrayExpression(node.decorators.map(decorator => decorator.expression));
  ***REMOVED***
  node.decorators = undefined;
  return result;
***REMOVED***
function getKey(node) {
  if (node.computed) {
    return node.key;
  ***REMOVED*** else if (_core.types.isIdentifier(node.key)) {
    return _core.types.stringLiteral(node.key.name);
  ***REMOVED*** else {
    return _core.types.stringLiteral(String(node.key.value));
  ***REMOVED***
***REMOVED***
function extractElementDescriptor(file, classRef, superRef, path) {
  const isMethod = path.isClassMethod();
  if (path.isPrivate()) {
    throw path.buildCodeFrameError(`Private ${isMethod ? "methods" : "fields"***REMOVED*** in decorated classes are not supported yet.`);
  ***REMOVED***
  if (path.node.type === "ClassAccessorProperty") {
    throw path.buildCodeFrameError(`Accessor properties are not supported in 2018-09 decorator transform, please specify { "version": "2021-12" ***REMOVED*** instead.`);
  ***REMOVED***
  if (path.node.type === "StaticBlock") {
    throw path.buildCodeFrameError(`Static blocks are not supported in 2018-09 decorator transform, please specify { "version": "2021-12" ***REMOVED*** instead.`);
  ***REMOVED***
  const {
    node,
    scope
  ***REMOVED*** = path;
  if (!path.isTSDeclareMethod()) {
    new _helperReplaceSupers.default({
      methodPath: path,
      objectRef: classRef,
      superRef,
      file,
      refToPreserve: classRef
    ***REMOVED***).replace();
  ***REMOVED***
  const properties = [prop("kind", _core.types.stringLiteral(_core.types.isClassMethod(node) ? node.kind : "field")), prop("decorators", takeDecorators(node)), prop("static", node.static && _core.types.booleanLiteral(true)), prop("key", getKey(node))].filter(Boolean);
  if (isMethod) {
    {
      var _path$ensureFunctionN;
      (_path$ensureFunctionN = path.ensureFunctionName) != null ? _path$ensureFunctionN : path.ensureFunctionName = require("@babel/traverse").NodePath.prototype.ensureFunctionName;
    ***REMOVED***
    path.ensureFunctionName(false);
    properties.push(prop("value", _core.types.toExpression(path.node)));
  ***REMOVED*** else if (_core.types.isClassProperty(node) && node.value) {
    properties.push(method("value", _core.template.statements.ast`return ${node.value***REMOVED***`));
  ***REMOVED*** else {
    properties.push(prop("value", scope.buildUndefinedNode()));
  ***REMOVED***
  path.remove();
  return _core.types.objectExpression(properties);
***REMOVED***
function addDecorateHelper(file) {
  return file.addHelper("decorate");
***REMOVED***
function buildDecoratedClass(ref, path, elements, file) {
  const {
    node,
    scope
  ***REMOVED*** = path;
  const initializeId = scope.generateUidIdentifier("initialize");
  const isDeclaration = node.id && path.isDeclaration();
  const isStrict = path.isInStrictMode();
  const {
    superClass
  ***REMOVED*** = node;
  node.type = "ClassDeclaration";
  if (!node.id) node.id = _core.types.cloneNode(ref);
  let superId;
  if (superClass) {
    superId = scope.generateUidIdentifierBasedOnNode(node.superClass, "super");
    node.superClass = superId;
  ***REMOVED***
  const classDecorators = takeDecorators(node);
  const definitions = _core.types.arrayExpression(elements.filter(element => !element.node.abstract && element.node.type !== "TSIndexSignature").map(path => extractElementDescriptor(file, node.id, superId, path)));
  const wrapperCall = _core.template.expression.ast`
    ${addDecorateHelper(file)***REMOVED***(
      ${classDecorators || _core.types.nullLiteral()***REMOVED***,
      function (${initializeId***REMOVED***, ${superClass ? _core.types.cloneNode(superId) : null***REMOVED***) {
        ${node***REMOVED***
        return { F: ${_core.types.cloneNode(node.id)***REMOVED***, d: ${definitions***REMOVED*** ***REMOVED***;
      ***REMOVED***,
      ${superClass***REMOVED***
    )
  `;
  if (!isStrict) {
    wrapperCall.arguments[1].body.directives.push(_core.types.directive(_core.types.directiveLiteral("use strict")));
  ***REMOVED***
  let replacement = wrapperCall;
  let classPathDesc = "arguments.1.body.body.0";
  if (isDeclaration) {
    replacement = _core.template.statement.ast`let ${ref***REMOVED*** = ${wrapperCall***REMOVED***`;
    classPathDesc = "declarations.0.init." + classPathDesc;
  ***REMOVED***
  return {
    instanceNodes: [_core.template.statement.ast`
        ${_core.types.cloneNode(initializeId)***REMOVED***(this)
      `],
    wrapClass(path) {
      path.replaceWith(replacement);
      return path.get(classPathDesc);
    ***REMOVED***
  ***REMOVED***;
***REMOVED***

//# sourceMappingURL=decorators-2018-09.js.map
