/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const { ConcatSource, RawSource, CachedSource ***REMOVED*** = require("webpack-sources");
const { UsageState ***REMOVED*** = require("./ExportsInfo");
const Template = require("./Template");
const CssModulesPlugin = require("./css/CssModulesPlugin");
const JavascriptModulesPlugin = require("./javascript/JavascriptModulesPlugin");

/** @typedef {import("webpack-sources").Source***REMOVED*** Source */
/** @typedef {import("./Compiler")***REMOVED*** Compiler */
/** @typedef {import("./ExportsInfo")***REMOVED*** ExportsInfo */
/** @typedef {import("./ExportsInfo").ExportInfo***REMOVED*** ExportInfo */
/** @typedef {import("./Module")***REMOVED*** Module */
/** @typedef {import("./Module").BuildMeta***REMOVED*** BuildMeta */
/** @typedef {import("./ModuleGraph")***REMOVED*** ModuleGraph */
/** @typedef {import("./ModuleTemplate")***REMOVED*** ModuleTemplate */
/** @typedef {import("./RequestShortener")***REMOVED*** RequestShortener */

/**
 * @template T
 * @param {Iterable<T>***REMOVED*** iterable iterable
 * @returns {string***REMOVED*** joined with comma
 */
const joinIterableWithComma = iterable => {
	// This is more performant than Array.from().join(", ")
	// as it doesn't create an array
	let str = "";
	let first = true;
	for (const item of iterable) {
		if (first) {
			first = false;
		***REMOVED*** else {
			str += ", ";
		***REMOVED***
		str += item;
	***REMOVED***
	return str;
***REMOVED***;

/**
 * @param {ConcatSource***REMOVED*** source output
 * @param {string***REMOVED*** indent spacing
 * @param {ExportsInfo***REMOVED*** exportsInfo data
 * @param {ModuleGraph***REMOVED*** moduleGraph moduleGraph
 * @param {RequestShortener***REMOVED*** requestShortener requestShortener
 * @param {Set<ExportInfo>***REMOVED*** alreadyPrinted deduplication set
 * @returns {void***REMOVED***
 */
const printExportsInfoToSource = (
	source,
	indent,
	exportsInfo,
	moduleGraph,
	requestShortener,
	alreadyPrinted = new Set()
) => {
	const otherExportsInfo = exportsInfo.otherExportsInfo;

	let alreadyPrintedExports = 0;

	// determine exports to print
	const printedExports = [];
	for (const exportInfo of exportsInfo.orderedExports) {
		if (!alreadyPrinted.has(exportInfo)) {
			alreadyPrinted.add(exportInfo);
			printedExports.push(exportInfo);
		***REMOVED*** else {
			alreadyPrintedExports++;
		***REMOVED***
	***REMOVED***
	let showOtherExports = false;
	if (!alreadyPrinted.has(otherExportsInfo)) {
		alreadyPrinted.add(otherExportsInfo);
		showOtherExports = true;
	***REMOVED*** else {
		alreadyPrintedExports++;
	***REMOVED***

	// print the exports
	for (const exportInfo of printedExports) {
		const target = exportInfo.getTarget(moduleGraph);
		source.add(
			`${Template.toComment(
				`${indent***REMOVED***export ${JSON.stringify(exportInfo.name).slice(
					1,
					-1
				)***REMOVED*** [${exportInfo.getProvidedInfo()***REMOVED***] [${exportInfo.getUsedInfo()***REMOVED***] [${exportInfo.getRenameInfo()***REMOVED***]${
					target
						? ` -> ${target.module.readableIdentifier(requestShortener)***REMOVED***${
								target.export
									? ` .${target.export
											.map(e => JSON.stringify(e).slice(1, -1))
											.join(".")***REMOVED***`
									: ""
							***REMOVED***`
						: ""
				***REMOVED***`
			)***REMOVED***\n`
		);
		if (exportInfo.exportsInfo) {
			printExportsInfoToSource(
				source,
				`${indent***REMOVED***  `,
				exportInfo.exportsInfo,
				moduleGraph,
				requestShortener,
				alreadyPrinted
			);
		***REMOVED***
	***REMOVED***

	if (alreadyPrintedExports) {
		source.add(
			`${Template.toComment(
				`${indent***REMOVED***... (${alreadyPrintedExports***REMOVED*** already listed exports)`
			)***REMOVED***\n`
		);
	***REMOVED***

	if (showOtherExports) {
		const target = otherExportsInfo.getTarget(moduleGraph);
		if (
			target ||
			otherExportsInfo.provided !== false ||
			otherExportsInfo.getUsed(undefined) !== UsageState.Unused
		) {
			const title =
				printedExports.length > 0 || alreadyPrintedExports > 0
					? "other exports"
					: "exports";
			source.add(
				`${Template.toComment(
					`${indent***REMOVED***${title***REMOVED*** [${otherExportsInfo.getProvidedInfo()***REMOVED***] [${otherExportsInfo.getUsedInfo()***REMOVED***]${
						target
							? ` -> ${target.module.readableIdentifier(requestShortener)***REMOVED***`
							: ""
					***REMOVED***`
				)***REMOVED***\n`
			);
		***REMOVED***
	***REMOVED***
***REMOVED***;

/** @type {WeakMap<RequestShortener, WeakMap<Module, { header: RawSource | undefined, full: WeakMap<Source, CachedSource> ***REMOVED***>>***REMOVED*** */
const caches = new WeakMap();

const PLUGIN_NAME = "ModuleInfoHeaderPlugin";

class ModuleInfoHeaderPlugin {
	/**
	 * @param {boolean=***REMOVED*** verbose add more information like exports, runtime requirements and bailouts
	 */
	constructor(verbose = true) {
		this._verbose = verbose;
	***REMOVED***

	/**
	 * @param {Compiler***REMOVED*** compiler the compiler
	 * @returns {void***REMOVED***
	 */
	apply(compiler) {
		const { _verbose: verbose ***REMOVED*** = this;
		compiler.hooks.compilation.tap(PLUGIN_NAME, compilation => {
			const javascriptHooks =
				JavascriptModulesPlugin.getCompilationHooks(compilation);
			javascriptHooks.renderModulePackage.tap(
				PLUGIN_NAME,
				(
					moduleSource,
					module,
					{ chunk, chunkGraph, moduleGraph, runtimeTemplate ***REMOVED***
				) => {
					const { requestShortener ***REMOVED*** = runtimeTemplate;
					let cacheEntry;
					let cache = caches.get(requestShortener);
					if (cache === undefined) {
						caches.set(requestShortener, (cache = new WeakMap()));
						cache.set(
							module,
							(cacheEntry = { header: undefined, full: new WeakMap() ***REMOVED***)
						);
					***REMOVED*** else {
						cacheEntry = cache.get(module);
						if (cacheEntry === undefined) {
							cache.set(
								module,
								(cacheEntry = { header: undefined, full: new WeakMap() ***REMOVED***)
							);
						***REMOVED*** else if (!verbose) {
							const cachedSource = cacheEntry.full.get(moduleSource);
							if (cachedSource !== undefined) return cachedSource;
						***REMOVED***
					***REMOVED***
					const source = new ConcatSource();
					let header = cacheEntry.header;
					if (header === undefined) {
						header = this.generateHeader(module, requestShortener);
						cacheEntry.header = header;
					***REMOVED***
					source.add(header);
					if (verbose) {
						const exportsType = /** @type {BuildMeta***REMOVED*** */ (module.buildMeta)
							.exportsType;
						source.add(
							`${Template.toComment(
								exportsType
									? `${exportsType***REMOVED*** exports`
									: "unknown exports (runtime-defined)"
							)***REMOVED***\n`
						);
						if (exportsType) {
							const exportsInfo = moduleGraph.getExportsInfo(module);
							printExportsInfoToSource(
								source,
								"",
								exportsInfo,
								moduleGraph,
								requestShortener
							);
						***REMOVED***
						source.add(
							`${Template.toComment(
								`runtime requirements: ${joinIterableWithComma(
									chunkGraph.getModuleRuntimeRequirements(module, chunk.runtime)
								)***REMOVED***`
							)***REMOVED***\n`
						);
						const optimizationBailout =
							moduleGraph.getOptimizationBailout(module);
						if (optimizationBailout) {
							for (const text of optimizationBailout) {
								const code =
									typeof text === "function" ? text(requestShortener) : text;
								source.add(`${Template.toComment(`${code***REMOVED***`)***REMOVED***\n`);
							***REMOVED***
						***REMOVED***
						source.add(moduleSource);
						return source;
					***REMOVED***
					source.add(moduleSource);
					const cachedSource = new CachedSource(source);
					cacheEntry.full.set(moduleSource, cachedSource);
					return cachedSource;
				***REMOVED***
			);
			javascriptHooks.chunkHash.tap(PLUGIN_NAME, (_chunk, hash) => {
				hash.update(PLUGIN_NAME);
				hash.update("1");
			***REMOVED***);
			const cssHooks = CssModulesPlugin.getCompilationHooks(compilation);
			cssHooks.renderModulePackage.tap(
				PLUGIN_NAME,
				(moduleSource, module, { runtimeTemplate ***REMOVED***) => {
					const { requestShortener ***REMOVED*** = runtimeTemplate;
					let cacheEntry;
					let cache = caches.get(requestShortener);
					if (cache === undefined) {
						caches.set(requestShortener, (cache = new WeakMap()));
						cache.set(
							module,
							(cacheEntry = { header: undefined, full: new WeakMap() ***REMOVED***)
						);
					***REMOVED*** else {
						cacheEntry = cache.get(module);
						if (cacheEntry === undefined) {
							cache.set(
								module,
								(cacheEntry = { header: undefined, full: new WeakMap() ***REMOVED***)
							);
						***REMOVED*** else if (!verbose) {
							const cachedSource = cacheEntry.full.get(moduleSource);
							if (cachedSource !== undefined) return cachedSource;
						***REMOVED***
					***REMOVED***
					const source = new ConcatSource();
					let header = cacheEntry.header;
					if (header === undefined) {
						header = this.generateHeader(module, requestShortener);
						cacheEntry.header = header;
					***REMOVED***
					source.add(header);
					source.add(moduleSource);
					const cachedSource = new CachedSource(source);
					cacheEntry.full.set(moduleSource, cachedSource);
					return cachedSource;
				***REMOVED***
			);
			cssHooks.chunkHash.tap(PLUGIN_NAME, (_chunk, hash) => {
				hash.update(PLUGIN_NAME);
				hash.update("1");
			***REMOVED***);
		***REMOVED***);
	***REMOVED***

	/**
	 * @param {Module***REMOVED*** module the module
	 * @param {RequestShortener***REMOVED*** requestShortener request shortener
	 * @returns {RawSource***REMOVED*** the header
	 */
	generateHeader(module, requestShortener) {
		const req = module.readableIdentifier(requestShortener);
		const reqStr = req.replace(/\*\//g, "*_/");
		const reqStrStar = "*".repeat(reqStr.length);
		const headerStr = `/*!****${reqStrStar***REMOVED*******!*\\\n  !*** ${reqStr***REMOVED*** ***!\n  \\****${reqStrStar***REMOVED*******/\n`;
		return new RawSource(headerStr);
	***REMOVED***
***REMOVED***
module.exports = ModuleInfoHeaderPlugin;
