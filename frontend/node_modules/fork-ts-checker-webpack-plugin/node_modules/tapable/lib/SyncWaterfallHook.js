/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

const Hook = require("./Hook");
const HookCodeFactory = require("./HookCodeFactory");

class SyncWaterfallHookCodeFactory extends HookCodeFactory {
	content({ onError, onResult, resultReturns, rethrowIfPossible ***REMOVED***) {
		return this.callTapsSeries({
			onError: (i, err) => onError(err),
			onResult: (i, result, next) => {
				let code = "";
				code += `if(${result***REMOVED*** !== undefined) {\n`;
				code += `${this._args[0]***REMOVED*** = ${result***REMOVED***;\n`;
				code += `***REMOVED***\n`;
				code += next();
				return code;
			***REMOVED***,
			onDone: () => onResult(this._args[0]),
			doneReturns: resultReturns,
			rethrowIfPossible
		***REMOVED***);
	***REMOVED***
***REMOVED***

const factory = new SyncWaterfallHookCodeFactory();

class SyncWaterfallHook extends Hook {
	constructor(args) {
		super(args);
		if (args.length < 1)
			throw new Error("Waterfall hooks must have at least one argument");
	***REMOVED***

	tapAsync() {
		throw new Error("tapAsync is not supported on a SyncWaterfallHook");
	***REMOVED***

	tapPromise() {
		throw new Error("tapPromise is not supported on a SyncWaterfallHook");
	***REMOVED***

	compile(options) {
		factory.setup(this, options);
		return factory.create(options);
	***REMOVED***
***REMOVED***

module.exports = SyncWaterfallHook;
