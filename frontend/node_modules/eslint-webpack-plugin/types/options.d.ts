export type ESLintOptions = import('eslint').ESLint.Options;
export type LintResult = import('eslint').ESLint.LintResult;
export type LintResultData = import('eslint').ESLint.LintResultData;
export type FormatterFunction = (
  results: LintResult[],
  data?: LintResultData | undefined
) => string;
export type OutputReport = {
  filePath?: string | undefined;
  formatter?: (string | FormatterFunction) | undefined;
***REMOVED***;
export type PluginOptions = {
  context?: string | undefined;
  emitError?: boolean | undefined;
  emitWarning?: boolean | undefined;
  eslintPath?: string | undefined;
  exclude?: (string | string[]) | undefined;
  extensions?: (string | string[]) | undefined;
  failOnError?: boolean | undefined;
  failOnWarning?: boolean | undefined;
  files?: (string | string[]) | undefined;
  fix?: boolean | undefined;
  formatter?: (string | FormatterFunction) | undefined;
  lintDirtyModulesOnly?: boolean | undefined;
  quiet?: boolean | undefined;
  outputReport?: OutputReport | undefined;
  threads?: (number | boolean) | undefined;
  resourceQueryExclude?: (RegExp | RegExp[]) | undefined;
***REMOVED***;
export type Options = PluginOptions & ESLintOptions;
/** @typedef {import("eslint").ESLint.Options***REMOVED*** ESLintOptions */
/** @typedef {import('eslint').ESLint.LintResult***REMOVED*** LintResult */
/** @typedef {import('eslint').ESLint.LintResultData***REMOVED*** LintResultData */
/**
 * @callback FormatterFunction
 * @param {LintResult[]***REMOVED*** results
 * @param {LintResultData=***REMOVED*** data
 * @returns {string***REMOVED***
 */
/**
 * @typedef {Object***REMOVED*** OutputReport
 * @property {string=***REMOVED*** filePath
 * @property {string|FormatterFunction=***REMOVED*** formatter
 */
/**
 * @typedef {Object***REMOVED*** PluginOptions
 * @property {string=***REMOVED*** context
 * @property {boolean=***REMOVED*** emitError
 * @property {boolean=***REMOVED*** emitWarning
 * @property {string=***REMOVED*** eslintPath
 * @property {string|string[]=***REMOVED*** exclude
 * @property {string|string[]=***REMOVED*** extensions
 * @property {boolean=***REMOVED*** failOnError
 * @property {boolean=***REMOVED*** failOnWarning
 * @property {string|string[]=***REMOVED*** files
 * @property {boolean=***REMOVED*** fix
 * @property {string|FormatterFunction=***REMOVED*** formatter
 * @property {boolean=***REMOVED*** lintDirtyModulesOnly
 * @property {boolean=***REMOVED*** quiet
 * @property {OutputReport=***REMOVED*** outputReport
 * @property {number|boolean=***REMOVED*** threads
 * @property {RegExp|RegExp[]=***REMOVED*** resourceQueryExclude
 */
/** @typedef {PluginOptions & ESLintOptions***REMOVED*** Options */
/**
 * @param {Options***REMOVED*** pluginOptions
 * @returns {PluginOptions***REMOVED***
 */
export function getOptions(pluginOptions: Options): PluginOptions;
/**
 * @param {Options***REMOVED*** loaderOptions
 * @returns {ESLintOptions***REMOVED***
 */
export function getESLintOptions(loaderOptions: Options): ESLintOptions;
