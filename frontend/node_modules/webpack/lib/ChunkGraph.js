/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const util = require("util");
const Entrypoint = require("./Entrypoint");
const ModuleGraphConnection = require("./ModuleGraphConnection");
const { DEFAULTS ***REMOVED*** = require("./config/defaults");
const { first ***REMOVED*** = require("./util/SetHelpers");
const SortableSet = require("./util/SortableSet");
const {
	compareModulesById,
	compareIterables,
	compareModulesByIdentifier,
	concatComparators,
	compareSelect,
	compareIds
***REMOVED*** = require("./util/comparators");
const createHash = require("./util/createHash");
const findGraphRoots = require("./util/findGraphRoots");
const {
	RuntimeSpecMap,
	RuntimeSpecSet,
	runtimeToString,
	mergeRuntime,
	forEachRuntime
***REMOVED*** = require("./util/runtime");

/** @typedef {import("./AsyncDependenciesBlock")***REMOVED*** AsyncDependenciesBlock */
/** @typedef {import("./Chunk")***REMOVED*** Chunk */
/** @typedef {import("./Chunk").ChunkId***REMOVED*** ChunkId */
/** @typedef {import("./ChunkGroup")***REMOVED*** ChunkGroup */
/** @typedef {import("./Generator").SourceTypes***REMOVED*** SourceTypes */
/** @typedef {import("./Module")***REMOVED*** Module */
/** @typedef {import("./Module").ReadOnlyRuntimeRequirements***REMOVED*** ReadOnlyRuntimeRequirements */
/** @typedef {import("./Module").RuntimeRequirements***REMOVED*** RuntimeRequirements */
/** @typedef {import("./ModuleGraph")***REMOVED*** ModuleGraph */
/** @typedef {import("./ModuleGraphConnection").ConnectionState***REMOVED*** ConnectionState */
/** @typedef {import("./RuntimeModule")***REMOVED*** RuntimeModule */
/** @typedef {typeof import("./util/Hash")***REMOVED*** Hash */
/** @typedef {import("./util/runtime").RuntimeSpec***REMOVED*** RuntimeSpec */

/** @type {ReadonlySet<string>***REMOVED*** */
const EMPTY_SET = new Set();

const ZERO_BIG_INT = BigInt(0);

const compareModuleIterables = compareIterables(compareModulesByIdentifier);

/** @typedef {(c: Chunk, chunkGraph: ChunkGraph) => boolean***REMOVED*** ChunkFilterPredicate */
/** @typedef {(m: Module) => boolean***REMOVED*** ModuleFilterPredicate */
/** @typedef {[Module, Entrypoint | undefined]***REMOVED*** EntryModuleWithChunkGroup */

/**
 * @typedef {object***REMOVED*** ChunkSizeOptions
 * @property {number=***REMOVED*** chunkOverhead constant overhead for a chunk
 * @property {number=***REMOVED*** entryChunkMultiplicator multiplicator for initial chunks
 */

class ModuleHashInfo {
	/**
	 * @param {string***REMOVED*** hash hash
	 * @param {string***REMOVED*** renderedHash rendered hash
	 */
	constructor(hash, renderedHash) {
		this.hash = hash;
		this.renderedHash = renderedHash;
	***REMOVED***
***REMOVED***

/**
 * @template T
 * @param {SortableSet<T>***REMOVED*** set the set
 * @returns {T[]***REMOVED*** set as array
 */
const getArray = set => Array.from(set);

/**
 * @param {SortableSet<Chunk>***REMOVED*** chunks the chunks
 * @returns {RuntimeSpecSet***REMOVED*** runtimes
 */
const getModuleRuntimes = chunks => {
	const runtimes = new RuntimeSpecSet();
	for (const chunk of chunks) {
		runtimes.add(chunk.runtime);
	***REMOVED***
	return runtimes;
***REMOVED***;

/**
 * @param {WeakMap<Module, Set<string>> | undefined***REMOVED*** sourceTypesByModule sourceTypesByModule
 * @returns {(set: SortableSet<Module>) => Map<string, SortableSet<Module>>***REMOVED*** modules by source type
 */
const modulesBySourceType = sourceTypesByModule => set => {
	/** @type {Map<string, SortableSet<Module>>***REMOVED*** */
	const map = new Map();
	for (const module of set) {
		const sourceTypes =
			(sourceTypesByModule && sourceTypesByModule.get(module)) ||
			module.getSourceTypes();
		for (const sourceType of sourceTypes) {
			let innerSet = map.get(sourceType);
			if (innerSet === undefined) {
				innerSet = new SortableSet();
				map.set(sourceType, innerSet);
			***REMOVED***
			innerSet.add(module);
		***REMOVED***
	***REMOVED***
	for (const [key, innerSet] of map) {
		// When all modules have the source type, we reuse the original SortableSet
		// to benefit from the shared cache (especially for sorting)
		if (innerSet.size === set.size) {
			map.set(key, set);
		***REMOVED***
	***REMOVED***
	return map;
***REMOVED***;
const defaultModulesBySourceType = modulesBySourceType(undefined);

/**
 * @typedef {(set: SortableSet<Module>) => Module[]***REMOVED*** ModuleSetToArrayFunction
 */

/**
 * @template T
 * @type {WeakMap<ModuleComparator, ModuleSetToArrayFunction>***REMOVED***
 */
const createOrderedArrayFunctionMap = new WeakMap();

/**
 * @template T
 * @param {ModuleComparator***REMOVED*** comparator comparator function
 * @returns {ModuleSetToArrayFunction***REMOVED*** set as ordered array
 */
const createOrderedArrayFunction = comparator => {
	let fn = createOrderedArrayFunctionMap.get(comparator);
	if (fn !== undefined) return fn;
	fn = set => {
		set.sortWith(comparator);
		return Array.from(set);
	***REMOVED***;
	createOrderedArrayFunctionMap.set(comparator, fn);
	return fn;
***REMOVED***;

/**
 * @param {Iterable<Module>***REMOVED*** modules the modules to get the count/size of
 * @returns {number***REMOVED*** the size of the modules
 */
const getModulesSize = modules => {
	let size = 0;
	for (const module of modules) {
		for (const type of module.getSourceTypes()) {
			size += module.size(type);
		***REMOVED***
	***REMOVED***
	return size;
***REMOVED***;

/**
 * @param {Iterable<Module>***REMOVED*** modules the sortable Set to get the size of
 * @returns {Record<string, number>***REMOVED*** the sizes of the modules
 */
const getModulesSizes = modules => {
	const sizes = Object.create(null);
	for (const module of modules) {
		for (const type of module.getSourceTypes()) {
			sizes[type] = (sizes[type] || 0) + module.size(type);
		***REMOVED***
	***REMOVED***
	return sizes;
***REMOVED***;

/**
 * @param {Chunk***REMOVED*** a chunk
 * @param {Chunk***REMOVED*** b chunk
 * @returns {boolean***REMOVED*** true, if a is always a parent of b
 */
const isAvailableChunk = (a, b) => {
	const queue = new Set(b.groupsIterable);
	for (const chunkGroup of queue) {
		if (a.isInGroup(chunkGroup)) continue;
		if (chunkGroup.isInitial()) return false;
		for (const parent of chunkGroup.parentsIterable) {
			queue.add(parent);
		***REMOVED***
	***REMOVED***
	return true;
***REMOVED***;

/** @typedef {Set<Chunk>***REMOVED*** EntryInChunks */
/** @typedef {Set<Chunk>***REMOVED*** RuntimeInChunks */
/** @typedef {string | number***REMOVED*** ModuleId */

class ChunkGraphModule {
	constructor() {
		/** @type {SortableSet<Chunk>***REMOVED*** */
		this.chunks = new SortableSet();
		/** @type {EntryInChunks | undefined***REMOVED*** */
		this.entryInChunks = undefined;
		/** @type {RuntimeInChunks | undefined***REMOVED*** */
		this.runtimeInChunks = undefined;
		/** @type {RuntimeSpecMap<ModuleHashInfo> | undefined***REMOVED*** */
		this.hashes = undefined;
		/** @type {ModuleId | null***REMOVED*** */
		this.id = null;
		/** @type {RuntimeSpecMap<Set<string>, RuntimeRequirements> | undefined***REMOVED*** */
		this.runtimeRequirements = undefined;
		/** @type {RuntimeSpecMap<string, bigint> | undefined***REMOVED*** */
		this.graphHashes = undefined;
		/** @type {RuntimeSpecMap<string, string> | undefined***REMOVED*** */
		this.graphHashesWithConnections = undefined;
	***REMOVED***
***REMOVED***

class ChunkGraphChunk {
	constructor() {
		/** @type {SortableSet<Module>***REMOVED*** */
		this.modules = new SortableSet();
		/** @type {WeakMap<Module, Set<string>> | undefined***REMOVED*** */
		this.sourceTypesByModule = undefined;
		/** @type {Map<Module, Entrypoint>***REMOVED*** */
		this.entryModules = new Map();
		/** @type {SortableSet<RuntimeModule>***REMOVED*** */
		this.runtimeModules = new SortableSet();
		/** @type {Set<RuntimeModule> | undefined***REMOVED*** */
		this.fullHashModules = undefined;
		/** @type {Set<RuntimeModule> | undefined***REMOVED*** */
		this.dependentHashModules = undefined;
		/** @type {Set<string> | undefined***REMOVED*** */
		this.runtimeRequirements = undefined;
		/** @type {Set<string>***REMOVED*** */
		this.runtimeRequirementsInTree = new Set();

		this._modulesBySourceType = defaultModulesBySourceType;
	***REMOVED***
***REMOVED***

/** @typedef {(a: Module, b: Module) => -1 | 0 | 1***REMOVED*** ModuleComparator */

class ChunkGraph {
	/**
	 * @param {ModuleGraph***REMOVED*** moduleGraph the module graph
	 * @param {string | Hash***REMOVED*** hashFunction the hash function to use
	 */
	constructor(moduleGraph, hashFunction = DEFAULTS.HASH_FUNCTION) {
		/**
		 * @private
		 * @type {WeakMap<Module, ChunkGraphModule>***REMOVED***
		 */
		this._modules = new WeakMap();
		/**
		 * @private
		 * @type {WeakMap<Chunk, ChunkGraphChunk>***REMOVED***
		 */
		this._chunks = new WeakMap();
		/**
		 * @private
		 * @type {WeakMap<AsyncDependenciesBlock, ChunkGroup>***REMOVED***
		 */
		this._blockChunkGroups = new WeakMap();
		/**
		 * @private
		 * @type {Map<string, string | number>***REMOVED***
		 */
		this._runtimeIds = new Map();
		/** @type {ModuleGraph***REMOVED*** */
		this.moduleGraph = moduleGraph;

		this._hashFunction = hashFunction;

		this._getGraphRoots = this._getGraphRoots.bind(this);
	***REMOVED***

	/**
	 * @private
	 * @param {Module***REMOVED*** module the module
	 * @returns {ChunkGraphModule***REMOVED*** internal module
	 */
	_getChunkGraphModule(module) {
		let cgm = this._modules.get(module);
		if (cgm === undefined) {
			cgm = new ChunkGraphModule();
			this._modules.set(module, cgm);
		***REMOVED***
		return cgm;
	***REMOVED***

	/**
	 * @private
	 * @param {Chunk***REMOVED*** chunk the chunk
	 * @returns {ChunkGraphChunk***REMOVED*** internal chunk
	 */
	_getChunkGraphChunk(chunk) {
		let cgc = this._chunks.get(chunk);
		if (cgc === undefined) {
			cgc = new ChunkGraphChunk();
			this._chunks.set(chunk, cgc);
		***REMOVED***
		return cgc;
	***REMOVED***

	/**
	 * @param {SortableSet<Module>***REMOVED*** set the sortable Set to get the roots of
	 * @returns {Module[]***REMOVED*** the graph roots
	 */
	_getGraphRoots(set) {
		const { moduleGraph ***REMOVED*** = this;
		return Array.from(
			findGraphRoots(set, module => {
				/** @type {Set<Module>***REMOVED*** */
				const set = new Set();
				/**
				 * @param {Module***REMOVED*** module module
				 */
				const addDependencies = module => {
					for (const connection of moduleGraph.getOutgoingConnections(module)) {
						if (!connection.module) continue;
						const activeState = connection.getActiveState(undefined);
						if (activeState === false) continue;
						if (activeState === ModuleGraphConnection.TRANSITIVE_ONLY) {
							addDependencies(connection.module);
							continue;
						***REMOVED***
						set.add(connection.module);
					***REMOVED***
				***REMOVED***;
				addDependencies(module);
				return set;
			***REMOVED***)
		).sort(compareModulesByIdentifier);
	***REMOVED***

	/**
	 * @param {Chunk***REMOVED*** chunk the new chunk
	 * @param {Module***REMOVED*** module the module
	 * @returns {void***REMOVED***
	 */
	connectChunkAndModule(chunk, module) {
		const cgm = this._getChunkGraphModule(module);
		const cgc = this._getChunkGraphChunk(chunk);
		cgm.chunks.add(chunk);
		cgc.modules.add(module);
	***REMOVED***

	/**
	 * @param {Chunk***REMOVED*** chunk the chunk
	 * @param {Module***REMOVED*** module the module
	 * @returns {void***REMOVED***
	 */
	disconnectChunkAndModule(chunk, module) {
		const cgm = this._getChunkGraphModule(module);
		const cgc = this._getChunkGraphChunk(chunk);
		cgc.modules.delete(module);
		// No need to invalidate cgc._modulesBySourceType because we modified cgc.modules anyway
		if (cgc.sourceTypesByModule) cgc.sourceTypesByModule.delete(module);
		cgm.chunks.delete(chunk);
	***REMOVED***

	/**
	 * @param {Chunk***REMOVED*** chunk the chunk which will be disconnected
	 * @returns {void***REMOVED***
	 */
	disconnectChunk(chunk) {
		const cgc = this._getChunkGraphChunk(chunk);
		for (const module of cgc.modules) {
			const cgm = this._getChunkGraphModule(module);
			cgm.chunks.delete(chunk);
		***REMOVED***
		cgc.modules.clear();
		chunk.disconnectFromGroups();
		ChunkGraph.clearChunkGraphForChunk(chunk);
	***REMOVED***

	/**
	 * @param {Chunk***REMOVED*** chunk the chunk
	 * @param {Iterable<Module>***REMOVED*** modules the modules
	 * @returns {void***REMOVED***
	 */
	attachModules(chunk, modules) {
		const cgc = this._getChunkGraphChunk(chunk);
		for (const module of modules) {
			cgc.modules.add(module);
		***REMOVED***
	***REMOVED***

	/**
	 * @param {Chunk***REMOVED*** chunk the chunk
	 * @param {Iterable<RuntimeModule>***REMOVED*** modules the runtime modules
	 * @returns {void***REMOVED***
	 */
	attachRuntimeModules(chunk, modules) {
		const cgc = this._getChunkGraphChunk(chunk);
		for (const module of modules) {
			cgc.runtimeModules.add(module);
		***REMOVED***
	***REMOVED***

	/**
	 * @param {Chunk***REMOVED*** chunk the chunk
	 * @param {Iterable<RuntimeModule>***REMOVED*** modules the modules that require a full hash
	 * @returns {void***REMOVED***
	 */
	attachFullHashModules(chunk, modules) {
		const cgc = this._getChunkGraphChunk(chunk);
		if (cgc.fullHashModules === undefined) cgc.fullHashModules = new Set();
		for (const module of modules) {
			cgc.fullHashModules.add(module);
		***REMOVED***
	***REMOVED***

	/**
	 * @param {Chunk***REMOVED*** chunk the chunk
	 * @param {Iterable<RuntimeModule>***REMOVED*** modules the modules that require a full hash
	 * @returns {void***REMOVED***
	 */
	attachDependentHashModules(chunk, modules) {
		const cgc = this._getChunkGraphChunk(chunk);
		if (cgc.dependentHashModules === undefined)
			cgc.dependentHashModules = new Set();
		for (const module of modules) {
			cgc.dependentHashModules.add(module);
		***REMOVED***
	***REMOVED***

	/**
	 * @param {Module***REMOVED*** oldModule the replaced module
	 * @param {Module***REMOVED*** newModule the replacing module
	 * @returns {void***REMOVED***
	 */
	replaceModule(oldModule, newModule) {
		const oldCgm = this._getChunkGraphModule(oldModule);
		const newCgm = this._getChunkGraphModule(newModule);

		for (const chunk of oldCgm.chunks) {
			const cgc = this._getChunkGraphChunk(chunk);
			cgc.modules.delete(oldModule);
			cgc.modules.add(newModule);
			newCgm.chunks.add(chunk);
		***REMOVED***
		oldCgm.chunks.clear();

		if (oldCgm.entryInChunks !== undefined) {
			if (newCgm.entryInChunks === undefined) {
				newCgm.entryInChunks = new Set();
			***REMOVED***
			for (const chunk of oldCgm.entryInChunks) {
				const cgc = this._getChunkGraphChunk(chunk);
				const old = /** @type {Entrypoint***REMOVED*** */ (cgc.entryModules.get(oldModule));
				/** @type {Map<Module, Entrypoint>***REMOVED*** */
				const newEntryModules = new Map();
				for (const [m, cg] of cgc.entryModules) {
					if (m === oldModule) {
						newEntryModules.set(newModule, old);
					***REMOVED*** else {
						newEntryModules.set(m, cg);
					***REMOVED***
				***REMOVED***
				cgc.entryModules = newEntryModules;
				newCgm.entryInChunks.add(chunk);
			***REMOVED***
			oldCgm.entryInChunks = undefined;
		***REMOVED***

		if (oldCgm.runtimeInChunks !== undefined) {
			if (newCgm.runtimeInChunks === undefined) {
				newCgm.runtimeInChunks = new Set();
			***REMOVED***
			for (const chunk of oldCgm.runtimeInChunks) {
				const cgc = this._getChunkGraphChunk(chunk);
				cgc.runtimeModules.delete(/** @type {RuntimeModule***REMOVED*** */ (oldModule));
				cgc.runtimeModules.add(/** @type {RuntimeModule***REMOVED*** */ (newModule));
				newCgm.runtimeInChunks.add(chunk);
				if (
					cgc.fullHashModules !== undefined &&
					cgc.fullHashModules.has(/** @type {RuntimeModule***REMOVED*** */ (oldModule))
				) {
					cgc.fullHashModules.delete(/** @type {RuntimeModule***REMOVED*** */ (oldModule));
					cgc.fullHashModules.add(/** @type {RuntimeModule***REMOVED*** */ (newModule));
				***REMOVED***
				if (
					cgc.dependentHashModules !== undefined &&
					cgc.dependentHashModules.has(/** @type {RuntimeModule***REMOVED*** */ (oldModule))
				) {
					cgc.dependentHashModules.delete(
						/** @type {RuntimeModule***REMOVED*** */ (oldModule)
					);
					cgc.dependentHashModules.add(
						/** @type {RuntimeModule***REMOVED*** */ (newModule)
					);
				***REMOVED***
			***REMOVED***
			oldCgm.runtimeInChunks = undefined;
		***REMOVED***
	***REMOVED***

	/**
	 * @param {Module***REMOVED*** module the checked module
	 * @param {Chunk***REMOVED*** chunk the checked chunk
	 * @returns {boolean***REMOVED*** true, if the chunk contains the module
	 */
	isModuleInChunk(module, chunk) {
		const cgc = this._getChunkGraphChunk(chunk);
		return cgc.modules.has(module);
	***REMOVED***

	/**
	 * @param {Module***REMOVED*** module the checked module
	 * @param {ChunkGroup***REMOVED*** chunkGroup the checked chunk group
	 * @returns {boolean***REMOVED*** true, if the chunk contains the module
	 */
	isModuleInChunkGroup(module, chunkGroup) {
		for (const chunk of chunkGroup.chunks) {
			if (this.isModuleInChunk(module, chunk)) return true;
		***REMOVED***
		return false;
	***REMOVED***

	/**
	 * @param {Module***REMOVED*** module the checked module
	 * @returns {boolean***REMOVED*** true, if the module is entry of any chunk
	 */
	isEntryModule(module) {
		const cgm = this._getChunkGraphModule(module);
		return cgm.entryInChunks !== undefined;
	***REMOVED***

	/**
	 * @param {Module***REMOVED*** module the module
	 * @returns {Iterable<Chunk>***REMOVED*** iterable of chunks (do not modify)
	 */
	getModuleChunksIterable(module) {
		const cgm = this._getChunkGraphModule(module);
		return cgm.chunks;
	***REMOVED***

	/**
	 * @param {Module***REMOVED*** module the module
	 * @param {(a: Chunk, b: Chunk) => -1 | 0 | 1***REMOVED*** sortFn sort function
	 * @returns {Iterable<Chunk>***REMOVED*** iterable of chunks (do not modify)
	 */
	getOrderedModuleChunksIterable(module, sortFn) {
		const cgm = this._getChunkGraphModule(module);
		cgm.chunks.sortWith(sortFn);
		return cgm.chunks;
	***REMOVED***

	/**
	 * @param {Module***REMOVED*** module the module
	 * @returns {Chunk[]***REMOVED*** array of chunks (cached, do not modify)
	 */
	getModuleChunks(module) {
		const cgm = this._getChunkGraphModule(module);
		return cgm.chunks.getFromCache(getArray);
	***REMOVED***

	/**
	 * @param {Module***REMOVED*** module the module
	 * @returns {number***REMOVED*** the number of chunk which contain the module
	 */
	getNumberOfModuleChunks(module) {
		const cgm = this._getChunkGraphModule(module);
		return cgm.chunks.size;
	***REMOVED***

	/**
	 * @param {Module***REMOVED*** module the module
	 * @returns {RuntimeSpecSet***REMOVED*** runtimes
	 */
	getModuleRuntimes(module) {
		const cgm = this._getChunkGraphModule(module);
		return cgm.chunks.getFromUnorderedCache(getModuleRuntimes);
	***REMOVED***

	/**
	 * @param {Chunk***REMOVED*** chunk the chunk
	 * @returns {number***REMOVED*** the number of modules which are contained in this chunk
	 */
	getNumberOfChunkModules(chunk) {
		const cgc = this._getChunkGraphChunk(chunk);
		return cgc.modules.size;
	***REMOVED***

	/**
	 * @param {Chunk***REMOVED*** chunk the chunk
	 * @returns {number***REMOVED*** the number of full hash modules which are contained in this chunk
	 */
	getNumberOfChunkFullHashModules(chunk) {
		const cgc = this._getChunkGraphChunk(chunk);
		return cgc.fullHashModules === undefined ? 0 : cgc.fullHashModules.size;
	***REMOVED***

	/**
	 * @param {Chunk***REMOVED*** chunk the chunk
	 * @returns {Iterable<Module>***REMOVED*** return the modules for this chunk
	 */
	getChunkModulesIterable(chunk) {
		const cgc = this._getChunkGraphChunk(chunk);
		return cgc.modules;
	***REMOVED***

	/**
	 * @param {Chunk***REMOVED*** chunk the chunk
	 * @param {string***REMOVED*** sourceType source type
	 * @returns {Iterable<Module> | undefined***REMOVED*** return the modules for this chunk
	 */
	getChunkModulesIterableBySourceType(chunk, sourceType) {
		const cgc = this._getChunkGraphChunk(chunk);
		const modulesWithSourceType = cgc.modules
			.getFromUnorderedCache(cgc._modulesBySourceType)
			.get(sourceType);
		return modulesWithSourceType;
	***REMOVED***

	/**
	 * @param {Chunk***REMOVED*** chunk chunk
	 * @param {Module***REMOVED*** module chunk module
	 * @param {Set<string>***REMOVED*** sourceTypes source types
	 */
	setChunkModuleSourceTypes(chunk, module, sourceTypes) {
		const cgc = this._getChunkGraphChunk(chunk);
		if (cgc.sourceTypesByModule === undefined) {
			cgc.sourceTypesByModule = new WeakMap();
		***REMOVED***
		cgc.sourceTypesByModule.set(module, sourceTypes);
		// Update cgc._modulesBySourceType to invalidate the cache
		cgc._modulesBySourceType = modulesBySourceType(cgc.sourceTypesByModule);
	***REMOVED***

	/**
	 * @param {Chunk***REMOVED*** chunk chunk
	 * @param {Module***REMOVED*** module chunk module
	 * @returns {SourceTypes***REMOVED*** source types
	 */
	getChunkModuleSourceTypes(chunk, module) {
		const cgc = this._getChunkGraphChunk(chunk);
		if (cgc.sourceTypesByModule === undefined) {
			return module.getSourceTypes();
		***REMOVED***
		return cgc.sourceTypesByModule.get(module) || module.getSourceTypes();
	***REMOVED***

	/**
	 * @param {Module***REMOVED*** module module
	 * @returns {SourceTypes***REMOVED*** source types
	 */
	getModuleSourceTypes(module) {
		return (
			this._getOverwrittenModuleSourceTypes(module) || module.getSourceTypes()
		);
	***REMOVED***

	/**
	 * @param {Module***REMOVED*** module module
	 * @returns {Set<string> | undefined***REMOVED*** source types
	 */
	_getOverwrittenModuleSourceTypes(module) {
		let newSet = false;
		let sourceTypes;
		for (const chunk of this.getModuleChunksIterable(module)) {
			const cgc = this._getChunkGraphChunk(chunk);
			if (cgc.sourceTypesByModule === undefined) return;
			const st = cgc.sourceTypesByModule.get(module);
			if (st === undefined) return;
			if (!sourceTypes) {
				sourceTypes = st;
				continue;
			***REMOVED*** else if (!newSet) {
				for (const type of st) {
					if (!newSet) {
						if (!sourceTypes.has(type)) {
							newSet = true;
							sourceTypes = new Set(sourceTypes);
							sourceTypes.add(type);
						***REMOVED***
					***REMOVED*** else {
						sourceTypes.add(type);
					***REMOVED***
				***REMOVED***
			***REMOVED*** else {
				for (const type of st) sourceTypes.add(type);
			***REMOVED***
		***REMOVED***

		return sourceTypes;
	***REMOVED***

	/**
	 * @param {Chunk***REMOVED*** chunk the chunk
	 * @param {ModuleComparator***REMOVED*** comparator comparator function
	 * @returns {Iterable<Module>***REMOVED*** return the modules for this chunk
	 */
	getOrderedChunkModulesIterable(chunk, comparator) {
		const cgc = this._getChunkGraphChunk(chunk);
		cgc.modules.sortWith(comparator);
		return cgc.modules;
	***REMOVED***

	/**
	 * @param {Chunk***REMOVED*** chunk the chunk
	 * @param {string***REMOVED*** sourceType source type
	 * @param {ModuleComparator***REMOVED*** comparator comparator function
	 * @returns {Iterable<Module> | undefined***REMOVED*** return the modules for this chunk
	 */
	getOrderedChunkModulesIterableBySourceType(chunk, sourceType, comparator) {
		const cgc = this._getChunkGraphChunk(chunk);
		const modulesWithSourceType = cgc.modules
			.getFromUnorderedCache(cgc._modulesBySourceType)
			.get(sourceType);
		if (modulesWithSourceType === undefined) return;
		modulesWithSourceType.sortWith(comparator);
		return modulesWithSourceType;
	***REMOVED***

	/**
	 * @param {Chunk***REMOVED*** chunk the chunk
	 * @returns {Module[]***REMOVED*** return the modules for this chunk (cached, do not modify)
	 */
	getChunkModules(chunk) {
		const cgc = this._getChunkGraphChunk(chunk);
		return cgc.modules.getFromUnorderedCache(getArray);
	***REMOVED***

	/**
	 * @param {Chunk***REMOVED*** chunk the chunk
	 * @param {ModuleComparator***REMOVED*** comparator comparator function
	 * @returns {Module[]***REMOVED*** return the modules for this chunk (cached, do not modify)
	 */
	getOrderedChunkModules(chunk, comparator) {
		const cgc = this._getChunkGraphChunk(chunk);
		const arrayFunction = createOrderedArrayFunction(comparator);
		return cgc.modules.getFromUnorderedCache(arrayFunction);
	***REMOVED***

	/**
	 * @param {Chunk***REMOVED*** chunk the chunk
	 * @param {ModuleFilterPredicate***REMOVED*** filterFn function used to filter modules
	 * @param {boolean***REMOVED*** includeAllChunks all chunks or only async chunks
	 * @returns {Record<string|number, (string|number)[]>***REMOVED*** chunk to module ids object
	 */
	getChunkModuleIdMap(chunk, filterFn, includeAllChunks = false) {
		/** @type {Record<string|number, (string|number)[]>***REMOVED*** */
		const chunkModuleIdMap = Object.create(null);

		for (const asyncChunk of includeAllChunks
			? chunk.getAllReferencedChunks()
			: chunk.getAllAsyncChunks()) {
			/** @type {(string | number)[] | undefined***REMOVED*** */
			let array;
			for (const module of this.getOrderedChunkModulesIterable(
				asyncChunk,
				compareModulesById(this)
			)) {
				if (filterFn(module)) {
					if (array === undefined) {
						array = [];
						chunkModuleIdMap[/** @type {ChunkId***REMOVED*** */ (asyncChunk.id)] = array;
					***REMOVED***
					const moduleId = /** @type {ModuleId***REMOVED*** */ (this.getModuleId(module));
					array.push(moduleId);
				***REMOVED***
			***REMOVED***
		***REMOVED***

		return chunkModuleIdMap;
	***REMOVED***

	/**
	 * @param {Chunk***REMOVED*** chunk the chunk
	 * @param {ModuleFilterPredicate***REMOVED*** filterFn function used to filter modules
	 * @param {number***REMOVED*** hashLength length of the hash
	 * @param {boolean***REMOVED*** includeAllChunks all chunks or only async chunks
	 * @returns {Record<string|number, Record<string|number, string>>***REMOVED*** chunk to module id to module hash object
	 */
	getChunkModuleRenderedHashMap(
		chunk,
		filterFn,
		hashLength = 0,
		includeAllChunks = false
	) {
		/** @type {Record<ChunkId, Record<string|number, string>>***REMOVED*** */
		const chunkModuleHashMap = Object.create(null);

		/** @typedef {Record<string|number, string>***REMOVED*** IdToHashMap  */

		for (const asyncChunk of includeAllChunks
			? chunk.getAllReferencedChunks()
			: chunk.getAllAsyncChunks()) {
			/** @type {IdToHashMap | undefined***REMOVED*** */
			let idToHashMap;
			for (const module of this.getOrderedChunkModulesIterable(
				asyncChunk,
				compareModulesById(this)
			)) {
				if (filterFn(module)) {
					if (idToHashMap === undefined) {
						idToHashMap = Object.create(null);
						chunkModuleHashMap[/** @type {ChunkId***REMOVED*** */ (asyncChunk.id)] =
							/** @type {IdToHashMap***REMOVED*** */ (idToHashMap);
					***REMOVED***
					const moduleId = this.getModuleId(module);
					const hash = this.getRenderedModuleHash(module, asyncChunk.runtime);
					/** @type {IdToHashMap***REMOVED*** */
					(idToHashMap)[/** @type {ModuleId***REMOVED*** */ (moduleId)] = hashLength
						? hash.slice(0, hashLength)
						: hash;
				***REMOVED***
			***REMOVED***
		***REMOVED***

		return chunkModuleHashMap;
	***REMOVED***

	/**
	 * @param {Chunk***REMOVED*** chunk the chunk
	 * @param {ChunkFilterPredicate***REMOVED*** filterFn function used to filter chunks
	 * @returns {Record<string|number, boolean>***REMOVED*** chunk map
	 */
	getChunkConditionMap(chunk, filterFn) {
		const map = Object.create(null);
		for (const c of chunk.getAllReferencedChunks()) {
			map[/** @type {ChunkId***REMOVED*** */ (c.id)] = filterFn(c, this);
		***REMOVED***
		return map;
	***REMOVED***

	/**
	 * @param {Chunk***REMOVED*** chunk the chunk
	 * @param {ModuleFilterPredicate***REMOVED*** filterFn predicate function used to filter modules
	 * @param {ChunkFilterPredicate=***REMOVED*** filterChunkFn predicate function used to filter chunks
	 * @returns {boolean***REMOVED*** return true if module exists in graph
	 */
	hasModuleInGraph(chunk, filterFn, filterChunkFn) {
		const queue = new Set(chunk.groupsIterable);
		const chunksProcessed = new Set();

		for (const chunkGroup of queue) {
			for (const innerChunk of chunkGroup.chunks) {
				if (!chunksProcessed.has(innerChunk)) {
					chunksProcessed.add(innerChunk);
					if (!filterChunkFn || filterChunkFn(innerChunk, this)) {
						for (const module of this.getChunkModulesIterable(innerChunk)) {
							if (filterFn(module)) {
								return true;
							***REMOVED***
						***REMOVED***
					***REMOVED***
				***REMOVED***
			***REMOVED***
			for (const child of chunkGroup.childrenIterable) {
				queue.add(child);
			***REMOVED***
		***REMOVED***
		return false;
	***REMOVED***

	/**
	 * @param {Chunk***REMOVED*** chunkA first chunk
	 * @param {Chunk***REMOVED*** chunkB second chunk
	 * @returns {-1|0|1***REMOVED*** this is a comparator function like sort and returns -1, 0, or 1 based on sort order
	 */
	compareChunks(chunkA, chunkB) {
		const cgcA = this._getChunkGraphChunk(chunkA);
		const cgcB = this._getChunkGraphChunk(chunkB);
		if (cgcA.modules.size > cgcB.modules.size) return -1;
		if (cgcA.modules.size < cgcB.modules.size) return 1;
		cgcA.modules.sortWith(compareModulesByIdentifier);
		cgcB.modules.sortWith(compareModulesByIdentifier);
		return compareModuleIterables(cgcA.modules, cgcB.modules);
	***REMOVED***

	/**
	 * @param {Chunk***REMOVED*** chunk the chunk
	 * @returns {number***REMOVED*** total size of all modules in the chunk
	 */
	getChunkModulesSize(chunk) {
		const cgc = this._getChunkGraphChunk(chunk);
		return cgc.modules.getFromUnorderedCache(getModulesSize);
	***REMOVED***

	/**
	 * @param {Chunk***REMOVED*** chunk the chunk
	 * @returns {Record<string, number>***REMOVED*** total sizes of all modules in the chunk by source type
	 */
	getChunkModulesSizes(chunk) {
		const cgc = this._getChunkGraphChunk(chunk);
		return cgc.modules.getFromUnorderedCache(getModulesSizes);
	***REMOVED***

	/**
	 * @param {Chunk***REMOVED*** chunk the chunk
	 * @returns {Module[]***REMOVED*** root modules of the chunks (ordered by identifier)
	 */
	getChunkRootModules(chunk) {
		const cgc = this._getChunkGraphChunk(chunk);
		return cgc.modules.getFromUnorderedCache(this._getGraphRoots);
	***REMOVED***

	/**
	 * @param {Chunk***REMOVED*** chunk the chunk
	 * @param {ChunkSizeOptions***REMOVED*** options options object
	 * @returns {number***REMOVED*** total size of the chunk
	 */
	getChunkSize(chunk, options = {***REMOVED***) {
		const cgc = this._getChunkGraphChunk(chunk);
		const modulesSize = cgc.modules.getFromUnorderedCache(getModulesSize);
		const chunkOverhead =
			typeof options.chunkOverhead === "number" ? options.chunkOverhead : 10000;
		const entryChunkMultiplicator =
			typeof options.entryChunkMultiplicator === "number"
				? options.entryChunkMultiplicator
				: 10;
		return (
			chunkOverhead +
			modulesSize * (chunk.canBeInitial() ? entryChunkMultiplicator : 1)
		);
	***REMOVED***

	/**
	 * @param {Chunk***REMOVED*** chunkA chunk
	 * @param {Chunk***REMOVED*** chunkB chunk
	 * @param {ChunkSizeOptions***REMOVED*** options options object
	 * @returns {number***REMOVED*** total size of the chunk or false if chunks can't be integrated
	 */
	getIntegratedChunksSize(chunkA, chunkB, options = {***REMOVED***) {
		const cgcA = this._getChunkGraphChunk(chunkA);
		const cgcB = this._getChunkGraphChunk(chunkB);
		const allModules = new Set(cgcA.modules);
		for (const m of cgcB.modules) allModules.add(m);
		const modulesSize = getModulesSize(allModules);
		const chunkOverhead =
			typeof options.chunkOverhead === "number" ? options.chunkOverhead : 10000;
		const entryChunkMultiplicator =
			typeof options.entryChunkMultiplicator === "number"
				? options.entryChunkMultiplicator
				: 10;
		return (
			chunkOverhead +
			modulesSize *
				(chunkA.canBeInitial() || chunkB.canBeInitial()
					? entryChunkMultiplicator
					: 1)
		);
	***REMOVED***

	/**
	 * @param {Chunk***REMOVED*** chunkA chunk
	 * @param {Chunk***REMOVED*** chunkB chunk
	 * @returns {boolean***REMOVED*** true, if chunks could be integrated
	 */
	canChunksBeIntegrated(chunkA, chunkB) {
		if (chunkA.preventIntegration || chunkB.preventIntegration) {
			return false;
		***REMOVED***

		const hasRuntimeA = chunkA.hasRuntime();
		const hasRuntimeB = chunkB.hasRuntime();

		if (hasRuntimeA !== hasRuntimeB) {
			if (hasRuntimeA) {
				return isAvailableChunk(chunkA, chunkB);
			***REMOVED*** else if (hasRuntimeB) {
				return isAvailableChunk(chunkB, chunkA);
			***REMOVED***

			return false;
		***REMOVED***

		if (
			this.getNumberOfEntryModules(chunkA) > 0 ||
			this.getNumberOfEntryModules(chunkB) > 0
		) {
			return false;
		***REMOVED***

		return true;
	***REMOVED***

	/**
	 * @param {Chunk***REMOVED*** chunkA the target chunk
	 * @param {Chunk***REMOVED*** chunkB the chunk to integrate
	 * @returns {void***REMOVED***
	 */
	integrateChunks(chunkA, chunkB) {
		// Decide for one name (deterministic)
		if (chunkA.name && chunkB.name) {
			if (
				this.getNumberOfEntryModules(chunkA) > 0 ===
				this.getNumberOfEntryModules(chunkB) > 0
			) {
				// When both chunks have entry modules or none have one, use
				// shortest name
				if (chunkA.name.length !== chunkB.name.length) {
					chunkA.name =
						chunkA.name.length < chunkB.name.length ? chunkA.name : chunkB.name;
				***REMOVED*** else {
					chunkA.name = chunkA.name < chunkB.name ? chunkA.name : chunkB.name;
				***REMOVED***
			***REMOVED*** else if (this.getNumberOfEntryModules(chunkB) > 0) {
				// Pick the name of the chunk with the entry module
				chunkA.name = chunkB.name;
			***REMOVED***
		***REMOVED*** else if (chunkB.name) {
			chunkA.name = chunkB.name;
		***REMOVED***

		// Merge id name hints
		for (const hint of chunkB.idNameHints) {
			chunkA.idNameHints.add(hint);
		***REMOVED***

		// Merge runtime
		chunkA.runtime = mergeRuntime(chunkA.runtime, chunkB.runtime);

		// getChunkModules is used here to create a clone, because disconnectChunkAndModule modifies
		for (const module of this.getChunkModules(chunkB)) {
			this.disconnectChunkAndModule(chunkB, module);
			this.connectChunkAndModule(chunkA, module);
		***REMOVED***

		for (const [module, chunkGroup] of Array.from(
			this.getChunkEntryModulesWithChunkGroupIterable(chunkB)
		)) {
			this.disconnectChunkAndEntryModule(chunkB, module);
			this.connectChunkAndEntryModule(
				chunkA,
				module,
				/** @type {Entrypoint***REMOVED*** */
				(chunkGroup)
			);
		***REMOVED***

		for (const chunkGroup of chunkB.groupsIterable) {
			chunkGroup.replaceChunk(chunkB, chunkA);
			chunkA.addGroup(chunkGroup);
			chunkB.removeGroup(chunkGroup);
		***REMOVED***
		ChunkGraph.clearChunkGraphForChunk(chunkB);
	***REMOVED***

	/**
	 * @param {Chunk***REMOVED*** chunk the chunk to upgrade
	 * @returns {void***REMOVED***
	 */
	upgradeDependentToFullHashModules(chunk) {
		const cgc = this._getChunkGraphChunk(chunk);
		if (cgc.dependentHashModules === undefined) return;
		if (cgc.fullHashModules === undefined) {
			cgc.fullHashModules = cgc.dependentHashModules;
		***REMOVED*** else {
			for (const m of cgc.dependentHashModules) {
				cgc.fullHashModules.add(m);
			***REMOVED***
			cgc.dependentHashModules = undefined;
		***REMOVED***
	***REMOVED***

	/**
	 * @param {Module***REMOVED*** module the checked module
	 * @param {Chunk***REMOVED*** chunk the checked chunk
	 * @returns {boolean***REMOVED*** true, if the chunk contains the module as entry
	 */
	isEntryModuleInChunk(module, chunk) {
		const cgc = this._getChunkGraphChunk(chunk);
		return cgc.entryModules.has(module);
	***REMOVED***

	/**
	 * @param {Chunk***REMOVED*** chunk the new chunk
	 * @param {Module***REMOVED*** module the entry module
	 * @param {Entrypoint***REMOVED*** entrypoint the chunk group which must be loaded before the module is executed
	 * @returns {void***REMOVED***
	 */
	connectChunkAndEntryModule(chunk, module, entrypoint) {
		const cgm = this._getChunkGraphModule(module);
		const cgc = this._getChunkGraphChunk(chunk);
		if (cgm.entryInChunks === undefined) {
			cgm.entryInChunks = new Set();
		***REMOVED***
		cgm.entryInChunks.add(chunk);
		cgc.entryModules.set(module, entrypoint);
	***REMOVED***

	/**
	 * @param {Chunk***REMOVED*** chunk the new chunk
	 * @param {RuntimeModule***REMOVED*** module the runtime module
	 * @returns {void***REMOVED***
	 */
	connectChunkAndRuntimeModule(chunk, module) {
		const cgm = this._getChunkGraphModule(module);
		const cgc = this._getChunkGraphChunk(chunk);
		if (cgm.runtimeInChunks === undefined) {
			cgm.runtimeInChunks = new Set();
		***REMOVED***
		cgm.runtimeInChunks.add(chunk);
		cgc.runtimeModules.add(module);
	***REMOVED***

	/**
	 * @param {Chunk***REMOVED*** chunk the new chunk
	 * @param {RuntimeModule***REMOVED*** module the module that require a full hash
	 * @returns {void***REMOVED***
	 */
	addFullHashModuleToChunk(chunk, module) {
		const cgc = this._getChunkGraphChunk(chunk);
		if (cgc.fullHashModules === undefined) cgc.fullHashModules = new Set();
		cgc.fullHashModules.add(module);
	***REMOVED***

	/**
	 * @param {Chunk***REMOVED*** chunk the new chunk
	 * @param {RuntimeModule***REMOVED*** module the module that require a full hash
	 * @returns {void***REMOVED***
	 */
	addDependentHashModuleToChunk(chunk, module) {
		const cgc = this._getChunkGraphChunk(chunk);
		if (cgc.dependentHashModules === undefined)
			cgc.dependentHashModules = new Set();
		cgc.dependentHashModules.add(module);
	***REMOVED***

	/**
	 * @param {Chunk***REMOVED*** chunk the new chunk
	 * @param {Module***REMOVED*** module the entry module
	 * @returns {void***REMOVED***
	 */
	disconnectChunkAndEntryModule(chunk, module) {
		const cgm = this._getChunkGraphModule(module);
		const cgc = this._getChunkGraphChunk(chunk);
		/** @type {EntryInChunks***REMOVED*** */
		(cgm.entryInChunks).delete(chunk);
		if (/** @type {EntryInChunks***REMOVED*** */ (cgm.entryInChunks).size === 0) {
			cgm.entryInChunks = undefined;
		***REMOVED***
		cgc.entryModules.delete(module);
	***REMOVED***

	/**
	 * @param {Chunk***REMOVED*** chunk the new chunk
	 * @param {RuntimeModule***REMOVED*** module the runtime module
	 * @returns {void***REMOVED***
	 */
	disconnectChunkAndRuntimeModule(chunk, module) {
		const cgm = this._getChunkGraphModule(module);
		const cgc = this._getChunkGraphChunk(chunk);
		/** @type {RuntimeInChunks***REMOVED*** */
		(cgm.runtimeInChunks).delete(chunk);
		if (/** @type {RuntimeInChunks***REMOVED*** */ (cgm.runtimeInChunks).size === 0) {
			cgm.runtimeInChunks = undefined;
		***REMOVED***
		cgc.runtimeModules.delete(module);
	***REMOVED***

	/**
	 * @param {Module***REMOVED*** module the entry module, it will no longer be entry
	 * @returns {void***REMOVED***
	 */
	disconnectEntryModule(module) {
		const cgm = this._getChunkGraphModule(module);
		for (const chunk of /** @type {EntryInChunks***REMOVED*** */ (cgm.entryInChunks)) {
			const cgc = this._getChunkGraphChunk(chunk);
			cgc.entryModules.delete(module);
		***REMOVED***
		cgm.entryInChunks = undefined;
	***REMOVED***

	/**
	 * @param {Chunk***REMOVED*** chunk the chunk, for which all entries will be removed
	 * @returns {void***REMOVED***
	 */
	disconnectEntries(chunk) {
		const cgc = this._getChunkGraphChunk(chunk);
		for (const module of cgc.entryModules.keys()) {
			const cgm = this._getChunkGraphModule(module);
			/** @type {EntryInChunks***REMOVED*** */
			(cgm.entryInChunks).delete(chunk);
			if (/** @type {EntryInChunks***REMOVED*** */ (cgm.entryInChunks).size === 0) {
				cgm.entryInChunks = undefined;
			***REMOVED***
		***REMOVED***
		cgc.entryModules.clear();
	***REMOVED***

	/**
	 * @param {Chunk***REMOVED*** chunk the chunk
	 * @returns {number***REMOVED*** the amount of entry modules in chunk
	 */
	getNumberOfEntryModules(chunk) {
		const cgc = this._getChunkGraphChunk(chunk);
		return cgc.entryModules.size;
	***REMOVED***

	/**
	 * @param {Chunk***REMOVED*** chunk the chunk
	 * @returns {number***REMOVED*** the amount of entry modules in chunk
	 */
	getNumberOfRuntimeModules(chunk) {
		const cgc = this._getChunkGraphChunk(chunk);
		return cgc.runtimeModules.size;
	***REMOVED***

	/**
	 * @param {Chunk***REMOVED*** chunk the chunk
	 * @returns {Iterable<Module>***REMOVED*** iterable of modules (do not modify)
	 */
	getChunkEntryModulesIterable(chunk) {
		const cgc = this._getChunkGraphChunk(chunk);
		return cgc.entryModules.keys();
	***REMOVED***

	/**
	 * @param {Chunk***REMOVED*** chunk the chunk
	 * @returns {Iterable<Chunk>***REMOVED*** iterable of chunks
	 */
	getChunkEntryDependentChunksIterable(chunk) {
		/** @type {Set<Chunk>***REMOVED*** */
		const set = new Set();
		for (const chunkGroup of chunk.groupsIterable) {
			if (chunkGroup instanceof Entrypoint) {
				const entrypointChunk = chunkGroup.getEntrypointChunk();
				const cgc = this._getChunkGraphChunk(entrypointChunk);
				for (const chunkGroup of cgc.entryModules.values()) {
					for (const c of chunkGroup.chunks) {
						if (c !== chunk && c !== entrypointChunk && !c.hasRuntime()) {
							set.add(c);
						***REMOVED***
					***REMOVED***
				***REMOVED***
			***REMOVED***
		***REMOVED***

		return set;
	***REMOVED***

	/**
	 * @param {Chunk***REMOVED*** chunk the chunk
	 * @returns {boolean***REMOVED*** true, when it has dependent chunks
	 */
	hasChunkEntryDependentChunks(chunk) {
		const cgc = this._getChunkGraphChunk(chunk);
		for (const chunkGroup of cgc.entryModules.values()) {
			for (const c of chunkGroup.chunks) {
				if (c !== chunk) {
					return true;
				***REMOVED***
			***REMOVED***
		***REMOVED***
		return false;
	***REMOVED***

	/**
	 * @param {Chunk***REMOVED*** chunk the chunk
	 * @returns {Iterable<RuntimeModule>***REMOVED*** iterable of modules (do not modify)
	 */
	getChunkRuntimeModulesIterable(chunk) {
		const cgc = this._getChunkGraphChunk(chunk);
		return cgc.runtimeModules;
	***REMOVED***

	/**
	 * @param {Chunk***REMOVED*** chunk the chunk
	 * @returns {RuntimeModule[]***REMOVED*** array of modules in order of execution
	 */
	getChunkRuntimeModulesInOrder(chunk) {
		const cgc = this._getChunkGraphChunk(chunk);
		const array = Array.from(cgc.runtimeModules);
		array.sort(
			concatComparators(
				compareSelect(r => /** @type {RuntimeModule***REMOVED*** */ (r).stage, compareIds),
				compareModulesByIdentifier
			)
		);
		return array;
	***REMOVED***

	/**
	 * @param {Chunk***REMOVED*** chunk the chunk
	 * @returns {Iterable<RuntimeModule> | undefined***REMOVED*** iterable of modules (do not modify)
	 */
	getChunkFullHashModulesIterable(chunk) {
		const cgc = this._getChunkGraphChunk(chunk);
		return cgc.fullHashModules;
	***REMOVED***

	/**
	 * @param {Chunk***REMOVED*** chunk the chunk
	 * @returns {ReadonlySet<RuntimeModule> | undefined***REMOVED*** set of modules (do not modify)
	 */
	getChunkFullHashModulesSet(chunk) {
		const cgc = this._getChunkGraphChunk(chunk);
		return cgc.fullHashModules;
	***REMOVED***

	/**
	 * @param {Chunk***REMOVED*** chunk the chunk
	 * @returns {Iterable<RuntimeModule> | undefined***REMOVED*** iterable of modules (do not modify)
	 */
	getChunkDependentHashModulesIterable(chunk) {
		const cgc = this._getChunkGraphChunk(chunk);
		return cgc.dependentHashModules;
	***REMOVED***

	/**
	 * @param {Chunk***REMOVED*** chunk the chunk
	 * @returns {Iterable<EntryModuleWithChunkGroup>***REMOVED*** iterable of modules (do not modify)
	 */
	getChunkEntryModulesWithChunkGroupIterable(chunk) {
		const cgc = this._getChunkGraphChunk(chunk);
		return cgc.entryModules;
	***REMOVED***

	/**
	 * @param {AsyncDependenciesBlock***REMOVED*** depBlock the async block
	 * @returns {ChunkGroup | undefined***REMOVED*** the chunk group
	 */
	getBlockChunkGroup(depBlock) {
		return this._blockChunkGroups.get(depBlock);
	***REMOVED***

	/**
	 * @param {AsyncDependenciesBlock***REMOVED*** depBlock the async block
	 * @param {ChunkGroup***REMOVED*** chunkGroup the chunk group
	 * @returns {void***REMOVED***
	 */
	connectBlockAndChunkGroup(depBlock, chunkGroup) {
		this._blockChunkGroups.set(depBlock, chunkGroup);
		chunkGroup.addBlock(depBlock);
	***REMOVED***

	/**
	 * @param {ChunkGroup***REMOVED*** chunkGroup the chunk group
	 * @returns {void***REMOVED***
	 */
	disconnectChunkGroup(chunkGroup) {
		for (const block of chunkGroup.blocksIterable) {
			this._blockChunkGroups.delete(block);
		***REMOVED***
		// TODO refactor by moving blocks list into ChunkGraph
		chunkGroup._blocks.clear();
	***REMOVED***

	/**
	 * @param {Module***REMOVED*** module the module
	 * @returns {ModuleId | null***REMOVED*** the id of the module
	 */
	getModuleId(module) {
		const cgm = this._getChunkGraphModule(module);
		return cgm.id;
	***REMOVED***

	/**
	 * @param {Module***REMOVED*** module the module
	 * @param {ModuleId***REMOVED*** id the id of the module
	 * @returns {void***REMOVED***
	 */
	setModuleId(module, id) {
		const cgm = this._getChunkGraphModule(module);
		cgm.id = id;
	***REMOVED***

	/**
	 * @param {string***REMOVED*** runtime runtime
	 * @returns {string | number***REMOVED*** the id of the runtime
	 */
	getRuntimeId(runtime) {
		return /** @type {string | number***REMOVED*** */ (this._runtimeIds.get(runtime));
	***REMOVED***

	/**
	 * @param {string***REMOVED*** runtime runtime
	 * @param {string | number***REMOVED*** id the id of the runtime
	 * @returns {void***REMOVED***
	 */
	setRuntimeId(runtime, id) {
		this._runtimeIds.set(runtime, id);
	***REMOVED***

	/**
	 * @template T
	 * @param {Module***REMOVED*** module the module
	 * @param {RuntimeSpecMap<T>***REMOVED*** hashes hashes data
	 * @param {RuntimeSpec***REMOVED*** runtime the runtime
	 * @returns {T***REMOVED*** hash
	 */
	_getModuleHashInfo(module, hashes, runtime) {
		if (!hashes) {
			throw new Error(
				`Module ${module.identifier()***REMOVED*** has no hash info for runtime ${runtimeToString(
					runtime
				)***REMOVED*** (hashes not set at all)`
			);
		***REMOVED*** else if (runtime === undefined) {
			const hashInfoItems = new Set(hashes.values());
			if (hashInfoItems.size !== 1) {
				throw new Error(
					`No unique hash info entry for unspecified runtime for ${module.identifier()***REMOVED*** (existing runtimes: ${Array.from(
						hashes.keys(),
						r => runtimeToString(r)
					).join(", ")***REMOVED***).
Caller might not support runtime-dependent code generation (opt-out via optimization.usedExports: "global").`
				);
			***REMOVED***
			return /** @type {T***REMOVED*** */ (first(hashInfoItems));
		***REMOVED*** else {
			const hashInfo = hashes.get(runtime);
			if (!hashInfo) {
				throw new Error(
					`Module ${module.identifier()***REMOVED*** has no hash info for runtime ${runtimeToString(
						runtime
					)***REMOVED*** (available runtimes ${Array.from(
						hashes.keys(),
						runtimeToString
					).join(", ")***REMOVED***)`
				);
			***REMOVED***
			return hashInfo;
		***REMOVED***
	***REMOVED***

	/**
	 * @param {Module***REMOVED*** module the module
	 * @param {RuntimeSpec***REMOVED*** runtime the runtime
	 * @returns {boolean***REMOVED*** true, if the module has hashes for this runtime
	 */
	hasModuleHashes(module, runtime) {
		const cgm = this._getChunkGraphModule(module);
		const hashes = /** @type {RuntimeSpecMap<ModuleHashInfo>***REMOVED*** */ (cgm.hashes);
		return hashes && hashes.has(runtime);
	***REMOVED***

	/**
	 * @param {Module***REMOVED*** module the module
	 * @param {RuntimeSpec***REMOVED*** runtime the runtime
	 * @returns {string***REMOVED*** hash
	 */
	getModuleHash(module, runtime) {
		const cgm = this._getChunkGraphModule(module);
		const hashes = /** @type {RuntimeSpecMap<ModuleHashInfo>***REMOVED*** */ (cgm.hashes);
		return this._getModuleHashInfo(module, hashes, runtime).hash;
	***REMOVED***

	/**
	 * @param {Module***REMOVED*** module the module
	 * @param {RuntimeSpec***REMOVED*** runtime the runtime
	 * @returns {string***REMOVED*** hash
	 */
	getRenderedModuleHash(module, runtime) {
		const cgm = this._getChunkGraphModule(module);
		const hashes = /** @type {RuntimeSpecMap<ModuleHashInfo>***REMOVED*** */ (cgm.hashes);
		return this._getModuleHashInfo(module, hashes, runtime).renderedHash;
	***REMOVED***

	/**
	 * @param {Module***REMOVED*** module the module
	 * @param {RuntimeSpec***REMOVED*** runtime the runtime
	 * @param {string***REMOVED*** hash the full hash
	 * @param {string***REMOVED*** renderedHash the shortened hash for rendering
	 * @returns {void***REMOVED***
	 */
	setModuleHashes(module, runtime, hash, renderedHash) {
		const cgm = this._getChunkGraphModule(module);
		if (cgm.hashes === undefined) {
			cgm.hashes = new RuntimeSpecMap();
		***REMOVED***
		cgm.hashes.set(runtime, new ModuleHashInfo(hash, renderedHash));
	***REMOVED***

	/**
	 * @param {Module***REMOVED*** module the module
	 * @param {RuntimeSpec***REMOVED*** runtime the runtime
	 * @param {Set<string>***REMOVED*** items runtime requirements to be added (ownership of this Set is given to ChunkGraph when transferOwnership not false)
	 * @param {boolean***REMOVED*** transferOwnership true: transfer ownership of the items object, false: items is immutable and shared and won't be modified
	 * @returns {void***REMOVED***
	 */
	addModuleRuntimeRequirements(
		module,
		runtime,
		items,
		transferOwnership = true
	) {
		const cgm = this._getChunkGraphModule(module);
		const runtimeRequirementsMap = cgm.runtimeRequirements;
		if (runtimeRequirementsMap === undefined) {
			const map = new RuntimeSpecMap();
			// TODO avoid cloning item and track ownership instead
			map.set(runtime, transferOwnership ? items : new Set(items));
			cgm.runtimeRequirements = map;
			return;
		***REMOVED***
		runtimeRequirementsMap.update(runtime, runtimeRequirements => {
			if (runtimeRequirements === undefined) {
				return transferOwnership ? items : new Set(items);
			***REMOVED*** else if (!transferOwnership || runtimeRequirements.size >= items.size) {
				for (const item of items) runtimeRequirements.add(item);
				return runtimeRequirements;
			***REMOVED***

			for (const item of runtimeRequirements) items.add(item);
			return items;
		***REMOVED***);
	***REMOVED***

	/**
	 * @param {Chunk***REMOVED*** chunk the chunk
	 * @param {Set<string>***REMOVED*** items runtime requirements to be added (ownership of this Set is given to ChunkGraph)
	 * @returns {void***REMOVED***
	 */
	addChunkRuntimeRequirements(chunk, items) {
		const cgc = this._getChunkGraphChunk(chunk);
		const runtimeRequirements = cgc.runtimeRequirements;
		if (runtimeRequirements === undefined) {
			cgc.runtimeRequirements = items;
		***REMOVED*** else if (runtimeRequirements.size >= items.size) {
			for (const item of items) runtimeRequirements.add(item);
		***REMOVED*** else {
			for (const item of runtimeRequirements) items.add(item);
			cgc.runtimeRequirements = items;
		***REMOVED***
	***REMOVED***

	/**
	 * @param {Chunk***REMOVED*** chunk the chunk
	 * @param {Iterable<string>***REMOVED*** items runtime requirements to be added
	 * @returns {void***REMOVED***
	 */
	addTreeRuntimeRequirements(chunk, items) {
		const cgc = this._getChunkGraphChunk(chunk);
		const runtimeRequirements = cgc.runtimeRequirementsInTree;
		for (const item of items) runtimeRequirements.add(item);
	***REMOVED***

	/**
	 * @param {Module***REMOVED*** module the module
	 * @param {RuntimeSpec***REMOVED*** runtime the runtime
	 * @returns {ReadOnlyRuntimeRequirements***REMOVED*** runtime requirements
	 */
	getModuleRuntimeRequirements(module, runtime) {
		const cgm = this._getChunkGraphModule(module);
		const runtimeRequirements =
			cgm.runtimeRequirements && cgm.runtimeRequirements.get(runtime);
		return runtimeRequirements === undefined ? EMPTY_SET : runtimeRequirements;
	***REMOVED***

	/**
	 * @param {Chunk***REMOVED*** chunk the chunk
	 * @returns {ReadOnlyRuntimeRequirements***REMOVED*** runtime requirements
	 */
	getChunkRuntimeRequirements(chunk) {
		const cgc = this._getChunkGraphChunk(chunk);
		const runtimeRequirements = cgc.runtimeRequirements;
		return runtimeRequirements === undefined ? EMPTY_SET : runtimeRequirements;
	***REMOVED***

	/**
	 * @param {Module***REMOVED*** module the module
	 * @param {RuntimeSpec***REMOVED*** runtime the runtime
	 * @param {boolean***REMOVED*** withConnections include connections
	 * @returns {string***REMOVED*** hash
	 */
	getModuleGraphHash(module, runtime, withConnections = true) {
		const cgm = this._getChunkGraphModule(module);
		return withConnections
			? this._getModuleGraphHashWithConnections(cgm, module, runtime)
			: this._getModuleGraphHashBigInt(cgm, module, runtime).toString(16);
	***REMOVED***

	/**
	 * @param {Module***REMOVED*** module the module
	 * @param {RuntimeSpec***REMOVED*** runtime the runtime
	 * @param {boolean***REMOVED*** withConnections include connections
	 * @returns {bigint***REMOVED*** hash
	 */
	getModuleGraphHashBigInt(module, runtime, withConnections = true) {
		const cgm = this._getChunkGraphModule(module);
		return withConnections
			? BigInt(
					`0x${this._getModuleGraphHashWithConnections(cgm, module, runtime)***REMOVED***`
				)
			: this._getModuleGraphHashBigInt(cgm, module, runtime);
	***REMOVED***

	/**
	 * @param {ChunkGraphModule***REMOVED*** cgm the ChunkGraphModule
	 * @param {Module***REMOVED*** module the module
	 * @param {RuntimeSpec***REMOVED*** runtime the runtime
	 * @returns {bigint***REMOVED*** hash as big int
	 */
	_getModuleGraphHashBigInt(cgm, module, runtime) {
		if (cgm.graphHashes === undefined) {
			cgm.graphHashes = new RuntimeSpecMap();
		***REMOVED***
		const graphHash = cgm.graphHashes.provide(runtime, () => {
			const hash = createHash(this._hashFunction);
			hash.update(`${cgm.id***REMOVED***${this.moduleGraph.isAsync(module)***REMOVED***`);
			const sourceTypes = this._getOverwrittenModuleSourceTypes(module);
			if (sourceTypes !== undefined) {
				for (const type of sourceTypes) hash.update(type);
			***REMOVED***
			this.moduleGraph.getExportsInfo(module).updateHash(hash, runtime);
			return BigInt(`0x${/** @type {string***REMOVED*** */ (hash.digest("hex"))***REMOVED***`);
		***REMOVED***);
		return graphHash;
	***REMOVED***

	/**
	 * @param {ChunkGraphModule***REMOVED*** cgm the ChunkGraphModule
	 * @param {Module***REMOVED*** module the module
	 * @param {RuntimeSpec***REMOVED*** runtime the runtime
	 * @returns {string***REMOVED*** hash
	 */
	_getModuleGraphHashWithConnections(cgm, module, runtime) {
		if (cgm.graphHashesWithConnections === undefined) {
			cgm.graphHashesWithConnections = new RuntimeSpecMap();
		***REMOVED***

		/**
		 * @param {ConnectionState***REMOVED*** state state
		 * @returns {"F" | "T" | "O"***REMOVED*** result
		 */
		const activeStateToString = state => {
			if (state === false) return "F";
			if (state === true) return "T";
			if (state === ModuleGraphConnection.TRANSITIVE_ONLY) return "O";
			throw new Error("Not implemented active state");
		***REMOVED***;
		const strict = module.buildMeta && module.buildMeta.strictHarmonyModule;
		return cgm.graphHashesWithConnections.provide(runtime, () => {
			const graphHash = this._getModuleGraphHashBigInt(
				cgm,
				module,
				runtime
			).toString(16);
			const connections = this.moduleGraph.getOutgoingConnections(module);
			/** @type {Set<Module>***REMOVED*** */
			const activeNamespaceModules = new Set();
			/** @type {Map<string, Module | Set<Module>>***REMOVED*** */
			const connectedModules = new Map();
			/**
			 * @param {ModuleGraphConnection***REMOVED*** connection connection
			 * @param {string***REMOVED*** stateInfo state info
			 */
			const processConnection = (connection, stateInfo) => {
				const module = connection.module;
				stateInfo += module.getExportsType(this.moduleGraph, strict);
				// cspell:word Tnamespace
				if (stateInfo === "Tnamespace") activeNamespaceModules.add(module);
				else {
					const oldModule = connectedModules.get(stateInfo);
					if (oldModule === undefined) {
						connectedModules.set(stateInfo, module);
					***REMOVED*** else if (oldModule instanceof Set) {
						oldModule.add(module);
					***REMOVED*** else if (oldModule !== module) {
						connectedModules.set(stateInfo, new Set([oldModule, module]));
					***REMOVED***
				***REMOVED***
			***REMOVED***;
			if (runtime === undefined || typeof runtime === "string") {
				for (const connection of connections) {
					const state = connection.getActiveState(runtime);
					if (state === false) continue;
					processConnection(connection, state === true ? "T" : "O");
				***REMOVED***
			***REMOVED*** else {
				// cspell:word Tnamespace
				for (const connection of connections) {
					const states = new Set();
					let stateInfo = "";
					forEachRuntime(
						runtime,
						runtime => {
							const state = connection.getActiveState(runtime);
							states.add(state);
							stateInfo += activeStateToString(state) + runtime;
						***REMOVED***,
						true
					);
					if (states.size === 1) {
						const state = first(states);
						if (state === false) continue;
						stateInfo = activeStateToString(state);
					***REMOVED***
					processConnection(connection, stateInfo);
				***REMOVED***
			***REMOVED***
			// cspell:word Tnamespace
			if (activeNamespaceModules.size === 0 && connectedModules.size === 0)
				return graphHash;
			const connectedModulesInOrder =
				connectedModules.size > 1
					? Array.from(connectedModules).sort(([a], [b]) => (a < b ? -1 : 1))
					: connectedModules;
			const hash = createHash(this._hashFunction);
			/**
			 * @param {Module***REMOVED*** module module
			 */
			const addModuleToHash = module => {
				hash.update(
					this._getModuleGraphHashBigInt(
						this._getChunkGraphModule(module),
						module,
						runtime
					).toString(16)
				);
			***REMOVED***;
			/**
			 * @param {Set<Module>***REMOVED*** modules modules
			 */
			const addModulesToHash = modules => {
				let xor = ZERO_BIG_INT;
				for (const m of modules) {
					xor =
						xor ^
						this._getModuleGraphHashBigInt(
							this._getChunkGraphModule(m),
							m,
							runtime
						);
				***REMOVED***
				hash.update(xor.toString(16));
			***REMOVED***;
			if (activeNamespaceModules.size === 1)
				addModuleToHash(
					/** @type {Module***REMOVED*** */ (activeNamespaceModules.values().next().value)
				);
			else if (activeNamespaceModules.size > 1)
				addModulesToHash(activeNamespaceModules);
			for (const [stateInfo, modules] of connectedModulesInOrder) {
				hash.update(stateInfo);
				if (modules instanceof Set) {
					addModulesToHash(modules);
				***REMOVED*** else {
					addModuleToHash(modules);
				***REMOVED***
			***REMOVED***
			hash.update(graphHash);
			return /** @type {string***REMOVED*** */ (hash.digest("hex"));
		***REMOVED***);
	***REMOVED***

	/**
	 * @param {Chunk***REMOVED*** chunk the chunk
	 * @returns {ReadOnlyRuntimeRequirements***REMOVED*** runtime requirements
	 */
	getTreeRuntimeRequirements(chunk) {
		const cgc = this._getChunkGraphChunk(chunk);
		return cgc.runtimeRequirementsInTree;
	***REMOVED***

	// TODO remove in webpack 6
	/**
	 * @param {Module***REMOVED*** module the module
	 * @param {string***REMOVED*** deprecateMessage message for the deprecation message
	 * @param {string***REMOVED*** deprecationCode code for the deprecation
	 * @returns {ChunkGraph***REMOVED*** the chunk graph
	 */
	static getChunkGraphForModule(module, deprecateMessage, deprecationCode) {
		const fn = deprecateGetChunkGraphForModuleMap.get(deprecateMessage);
		if (fn) return fn(module);
		const newFn = util.deprecate(
			/**
			 * @param {Module***REMOVED*** module the module
			 * @returns {ChunkGraph***REMOVED*** the chunk graph
			 */
			module => {
				const chunkGraph = chunkGraphForModuleMap.get(module);
				if (!chunkGraph)
					throw new Error(
						`${
							deprecateMessage
						***REMOVED***: There was no ChunkGraph assigned to the Module for backward-compat (Use the new API)`
					);
				return chunkGraph;
			***REMOVED***,
			`${deprecateMessage***REMOVED***: Use new ChunkGraph API`,
			deprecationCode
		);
		deprecateGetChunkGraphForModuleMap.set(deprecateMessage, newFn);
		return newFn(module);
	***REMOVED***

	// TODO remove in webpack 6
	/**
	 * @param {Module***REMOVED*** module the module
	 * @param {ChunkGraph***REMOVED*** chunkGraph the chunk graph
	 * @returns {void***REMOVED***
	 */
	static setChunkGraphForModule(module, chunkGraph) {
		chunkGraphForModuleMap.set(module, chunkGraph);
	***REMOVED***

	// TODO remove in webpack 6
	/**
	 * @param {Module***REMOVED*** module the module
	 * @returns {void***REMOVED***
	 */
	static clearChunkGraphForModule(module) {
		chunkGraphForModuleMap.delete(module);
	***REMOVED***

	// TODO remove in webpack 6
	/**
	 * @param {Chunk***REMOVED*** chunk the chunk
	 * @param {string***REMOVED*** deprecateMessage message for the deprecation message
	 * @param {string***REMOVED*** deprecationCode code for the deprecation
	 * @returns {ChunkGraph***REMOVED*** the chunk graph
	 */
	static getChunkGraphForChunk(chunk, deprecateMessage, deprecationCode) {
		const fn = deprecateGetChunkGraphForChunkMap.get(deprecateMessage);
		if (fn) return fn(chunk);
		const newFn = util.deprecate(
			/**
			 * @param {Chunk***REMOVED*** chunk the chunk
			 * @returns {ChunkGraph***REMOVED*** the chunk graph
			 */
			chunk => {
				const chunkGraph = chunkGraphForChunkMap.get(chunk);
				if (!chunkGraph)
					throw new Error(
						`${
							deprecateMessage
						***REMOVED***There was no ChunkGraph assigned to the Chunk for backward-compat (Use the new API)`
					);
				return chunkGraph;
			***REMOVED***,
			`${deprecateMessage***REMOVED***: Use new ChunkGraph API`,
			deprecationCode
		);
		deprecateGetChunkGraphForChunkMap.set(deprecateMessage, newFn);
		return newFn(chunk);
	***REMOVED***

	// TODO remove in webpack 6
	/**
	 * @param {Chunk***REMOVED*** chunk the chunk
	 * @param {ChunkGraph***REMOVED*** chunkGraph the chunk graph
	 * @returns {void***REMOVED***
	 */
	static setChunkGraphForChunk(chunk, chunkGraph) {
		chunkGraphForChunkMap.set(chunk, chunkGraph);
	***REMOVED***

	// TODO remove in webpack 6
	/**
	 * @param {Chunk***REMOVED*** chunk the chunk
	 * @returns {void***REMOVED***
	 */
	static clearChunkGraphForChunk(chunk) {
		chunkGraphForChunkMap.delete(chunk);
	***REMOVED***
***REMOVED***

// TODO remove in webpack 6
/** @type {WeakMap<Module, ChunkGraph>***REMOVED*** */
const chunkGraphForModuleMap = new WeakMap();

// TODO remove in webpack 6
/** @type {WeakMap<Chunk, ChunkGraph>***REMOVED*** */
const chunkGraphForChunkMap = new WeakMap();

// TODO remove in webpack 6
/** @type {Map<string, (module: Module) => ChunkGraph>***REMOVED*** */
const deprecateGetChunkGraphForModuleMap = new Map();

// TODO remove in webpack 6
/** @type {Map<string, (chunk: Chunk) => ChunkGraph>***REMOVED*** */
const deprecateGetChunkGraphForChunkMap = new Map();

module.exports = ChunkGraph;
