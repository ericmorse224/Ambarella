/**
 * @callback EventCallback
 * @param {string | Error | null***REMOVED*** context
 * @returns {void***REMOVED***
 */
/**
 * @callback EventHandler
 * @param {Event***REMOVED*** event
 * @returns {void***REMOVED***
 */

/**
 * A function that creates an event handler for the `error` event.
 * @param {EventCallback***REMOVED*** callback A function called to handle the error context.
 * @returns {EventHandler***REMOVED*** A handler for the `error` event.
 */
function createErrorHandler(callback) {
  return function errorHandler(event) {
    if (!event || !event.error) {
      return callback(null);
    ***REMOVED***
    if (event.error instanceof Error) {
      return callback(event.error);
    ***REMOVED***
    // A non-error was thrown, we don't have a trace. :(
    // Look in your browser's devtools for more information
    return callback(new Error(event.error));
  ***REMOVED***;
***REMOVED***

/**
 * A function that creates an event handler for the `unhandledrejection` event.
 * @param {EventCallback***REMOVED*** callback A function called to handle the error context.
 * @returns {EventHandler***REMOVED*** A handler for the `unhandledrejection` event.
 */
function createRejectionHandler(callback) {
  return function rejectionHandler(event) {
    if (!event || !event.reason) {
      return callback(new Error('Unknown'));
    ***REMOVED***
    if (event.reason instanceof Error) {
      return callback(event.reason);
    ***REMOVED***
    // A non-error was rejected, we don't have a trace :(
    // Look in your browser's devtools for more information
    return callback(new Error(event.reason));
  ***REMOVED***;
***REMOVED***

/**
 * Creates a handler that registers an EventListener on window for a valid type
 * and calls a callback when the event fires.
 * @param {string***REMOVED*** eventType A valid DOM event type.
 * @param {function(EventCallback): EventHandler***REMOVED*** createHandler A function that creates an event handler.
 * @returns {register***REMOVED*** A function that registers the EventListener given a callback.
 */
function createWindowEventHandler(eventType, createHandler) {
  /**
   * @type {EventHandler | null***REMOVED*** A cached event handler function.
   */
  let eventHandler = null;

  /**
   * Unregisters an EventListener if it has been registered.
   * @returns {void***REMOVED***
   */
  function unregister() {
    if (eventHandler === null) {
      return;
    ***REMOVED***
    window.removeEventListener(eventType, eventHandler);
    eventHandler = null;
  ***REMOVED***

  /**
   * Registers an EventListener if it hasn't been registered.
   * @param {EventCallback***REMOVED*** callback A function called after the event handler to handle its context.
   * @returns {unregister | void***REMOVED*** A function to unregister the registered EventListener if registration is performed.
   */
  function register(callback) {
    if (eventHandler !== null) {
      return;
    ***REMOVED***
    eventHandler = createHandler(callback);
    window.addEventListener(eventType, eventHandler);

    return unregister;
  ***REMOVED***

  return register;
***REMOVED***

const handleError = createWindowEventHandler('error', createErrorHandler);
const handleUnhandledRejection = createWindowEventHandler(
  'unhandledrejection',
  createRejectionHandler
);

module.exports = {
  handleError: handleError,
  handleUnhandledRejection: handleUnhandledRejection,
***REMOVED***;
