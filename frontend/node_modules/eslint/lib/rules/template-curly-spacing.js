/**
 * @fileoverview Rule to enforce spacing around embedded expressions of template strings
 * @author Toru Nagashima
 */

"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const astUtils = require("./utils/ast-utils");

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = {
    meta: {
        type: "layout",

        docs: {
            description: "require or disallow spacing around embedded expressions of template strings",
            category: "ECMAScript 6",
            recommended: false,
            url: "https://eslint.org/docs/rules/template-curly-spacing"
        ***REMOVED***,

        fixable: "whitespace",

        schema: [
            { enum: ["always", "never"] ***REMOVED***
        ],
        messages: {
            expectedBefore: "Expected space(s) before '***REMOVED***'.",
            expectedAfter: "Expected space(s) after '${'.",
            unexpectedBefore: "Unexpected space(s) before '***REMOVED***'.",
            unexpectedAfter: "Unexpected space(s) after '${'."
        ***REMOVED***
    ***REMOVED***,

    create(context) {
        const sourceCode = context.getSourceCode();
        const always = context.options[0] === "always";

        /**
         * Checks spacing before `***REMOVED***` of a given token.
         * @param {Token***REMOVED*** token A token to check. This is a Template token.
         * @returns {void***REMOVED***
         */
        function checkSpacingBefore(token) {
            if (!token.value.startsWith("***REMOVED***")) {
                return; // starts with a backtick, this is the first template element in the template literal
            ***REMOVED***

            const prevToken = sourceCode.getTokenBefore(token, { includeComments: true ***REMOVED***),
                hasSpace = sourceCode.isSpaceBetween(prevToken, token);

            if (!astUtils.isTokenOnSameLine(prevToken, token)) {
                return;
            ***REMOVED***

            if (always && !hasSpace) {
                context.report({
                    loc: {
                        start: token.loc.start,
                        end: {
                            line: token.loc.start.line,
                            column: token.loc.start.column + 1
                        ***REMOVED***
                    ***REMOVED***,
                    messageId: "expectedBefore",
                    fix: fixer => fixer.insertTextBefore(token, " ")
                ***REMOVED***);
            ***REMOVED***

            if (!always && hasSpace) {
                context.report({
                    loc: {
                        start: prevToken.loc.end,
                        end: token.loc.start
                    ***REMOVED***,
                    messageId: "unexpectedBefore",
                    fix: fixer => fixer.removeRange([prevToken.range[1], token.range[0]])
                ***REMOVED***);
            ***REMOVED***
        ***REMOVED***

        /**
         * Checks spacing after `${` of a given token.
         * @param {Token***REMOVED*** token A token to check. This is a Template token.
         * @returns {void***REMOVED***
         */
        function checkSpacingAfter(token) {
            if (!token.value.endsWith("${")) {
                return; // ends with a backtick, this is the last template element in the template literal
            ***REMOVED***

            const nextToken = sourceCode.getTokenAfter(token, { includeComments: true ***REMOVED***),
                hasSpace = sourceCode.isSpaceBetween(token, nextToken);

            if (!astUtils.isTokenOnSameLine(token, nextToken)) {
                return;
            ***REMOVED***

            if (always && !hasSpace) {
                context.report({
                    loc: {
                        start: {
                            line: token.loc.end.line,
                            column: token.loc.end.column - 2
                        ***REMOVED***,
                        end: token.loc.end
                    ***REMOVED***,
                    messageId: "expectedAfter",
                    fix: fixer => fixer.insertTextAfter(token, " ")
                ***REMOVED***);
            ***REMOVED***

            if (!always && hasSpace) {
                context.report({
                    loc: {
                        start: token.loc.end,
                        end: nextToken.loc.start
                    ***REMOVED***,
                    messageId: "unexpectedAfter",
                    fix: fixer => fixer.removeRange([token.range[1], nextToken.range[0]])
                ***REMOVED***);
            ***REMOVED***
        ***REMOVED***

        return {
            TemplateElement(node) {
                const token = sourceCode.getFirstToken(node);

                checkSpacingBefore(token);
                checkSpacingAfter(token);
            ***REMOVED***
        ***REMOVED***;
    ***REMOVED***
***REMOVED***;
