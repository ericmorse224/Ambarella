const querystring = require('querystring');

/**
 * @typedef {Object***REMOVED*** AdditionalEntries
 * @property {string[]***REMOVED*** prependEntries
 * @property {string[]***REMOVED*** overlayEntries
 */

/**
 * Creates an object that contains two entry arrays: the prependEntries and overlayEntries
 * @param {Object***REMOVED*** optionsContainer This is the container for the options to this function
 * @param {import('../types').NormalizedPluginOptions***REMOVED*** optionsContainer.options Configuration options for this plugin.
 * @param {import('webpack').Compiler["options"]["devServer"]***REMOVED*** [optionsContainer.devServer] The webpack devServer config
 * @returns {AdditionalEntries***REMOVED*** An object that contains the Webpack entries for prepending and the overlay feature
 */
function getAdditionalEntries({ devServer, options ***REMOVED***) {
  /** @type {Record<string, string | number>***REMOVED*** */
  let resourceQuery = {***REMOVED***;

  if (devServer) {
    const { client, https, http2, sockHost, sockPath, sockPort ***REMOVED*** = devServer;
    let { host, path, port ***REMOVED*** = devServer;

    let protocol = https || http2 ? 'https' : 'http';
    if (sockHost) host = sockHost;
    if (sockPath) path = sockPath;
    if (sockPort) port = sockPort;

    if (client && client.webSocketURL != null) {
      let parsedUrl = client.webSocketURL;
      if (typeof parsedUrl === 'string') parsedUrl = new URL(parsedUrl);

      let auth;
      if (parsedUrl.username) {
        auth = parsedUrl.username;
        if (parsedUrl.password) {
          auth += ':' + parsedUrl.password;
        ***REMOVED***
      ***REMOVED***

      if (parsedUrl.hostname != null) {
        host = [auth != null && auth, parsedUrl.hostname].filter(Boolean).join('@');
      ***REMOVED***
      if (parsedUrl.pathname != null) {
        path = parsedUrl.pathname;
      ***REMOVED***
      if (parsedUrl.port != null) {
        port = !['0', 'auto'].includes(String(parsedUrl.port)) ? parsedUrl.port : undefined;
      ***REMOVED***
      if (parsedUrl.protocol != null) {
        protocol = parsedUrl.protocol !== 'auto' ? parsedUrl.protocol.replace(':', '') : 'ws';
      ***REMOVED***
    ***REMOVED***

    if (host) resourceQuery.sockHost = host;
    if (path) resourceQuery.sockPath = path;
    if (port) resourceQuery.sockPort = port;
    resourceQuery.sockProtocol = protocol;
  ***REMOVED***

  if (options.overlay) {
    const { sockHost, sockPath, sockPort, sockProtocol ***REMOVED*** = options.overlay;
    if (sockHost) resourceQuery.sockHost = sockHost;
    if (sockPath) resourceQuery.sockPath = sockPath;
    if (sockPort) resourceQuery.sockPort = sockPort;
    if (sockProtocol) resourceQuery.sockProtocol = sockProtocol;
  ***REMOVED***

  // We don't need to URI encode the resourceQuery as it will be parsed by Webpack
  const queryString = querystring.stringify(resourceQuery, undefined, undefined, {
    /**
     * @param {string***REMOVED*** string
     * @returns {string***REMOVED***
     */
    encodeURIComponent(string) {
      return string;
    ***REMOVED***,
  ***REMOVED***);

  const prependEntries = [
    // React-refresh runtime
    require.resolve('../../client/ReactRefreshEntry'),
  ];

  const overlayEntries = [
    // Error overlay runtime
    options.overlay &&
      options.overlay.entry &&
      `${require.resolve(options.overlay.entry)***REMOVED***${queryString ? `?${queryString***REMOVED***` : ''***REMOVED***`,
  ].filter(Boolean);

  return { prependEntries, overlayEntries ***REMOVED***;
***REMOVED***

module.exports = getAdditionalEntries;
