/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const util = require("util");

/** @type {Map<string, () => void>***REMOVED*** */
const deprecationCache = new Map();

/**
 * @typedef {object***REMOVED*** FakeHookMarker
 * @property {true***REMOVED*** _fakeHook it's a fake hook
 */

/**
 * @template T
 * @typedef {T & FakeHookMarker***REMOVED*** FakeHook<T>
 */

/**
 * @param {string***REMOVED*** message deprecation message
 * @param {string***REMOVED*** code deprecation code
 * @returns {() => void***REMOVED*** function to trigger deprecation
 */
const createDeprecation = (message, code) => {
	const cached = deprecationCache.get(message);
	if (cached !== undefined) return cached;
	const fn = util.deprecate(
		() => {***REMOVED***,
		message,
		`DEP_WEBPACK_DEPRECATION_${code***REMOVED***`
	);
	deprecationCache.set(message, fn);
	return fn;
***REMOVED***;

/** @typedef {"concat" | "entry" | "filter" | "find" | "findIndex" | "includes" | "indexOf" | "join" | "lastIndexOf" | "map" | "reduce" | "reduceRight" | "slice" | "some"***REMOVED*** COPY_METHODS_NAMES */

/** @type {COPY_METHODS_NAMES[]***REMOVED*** */
const COPY_METHODS = [
	"concat",
	"entry",
	"filter",
	"find",
	"findIndex",
	"includes",
	"indexOf",
	"join",
	"lastIndexOf",
	"map",
	"reduce",
	"reduceRight",
	"slice",
	"some"
];

/** @typedef {"copyWithin" | "entries" | "fill" | "keys" | "pop" | "reverse" | "shift" | "splice" | "sort" | "unshift"***REMOVED*** DISABLED_METHODS_NAMES */

/** @type {DISABLED_METHODS_NAMES[]***REMOVED*** */
const DISABLED_METHODS = [
	"copyWithin",
	"entries",
	"fill",
	"keys",
	"pop",
	"reverse",
	"shift",
	"splice",
	"sort",
	"unshift"
];

/**
 * @template T
 * @typedef {Set<T> & {[Symbol.isConcatSpreadable]?: boolean***REMOVED*** & { push?: (...items: T[]) => void ***REMOVED*** & { [P in DISABLED_METHODS_NAMES]?: () => void ***REMOVED*** & { [P in COPY_METHODS_NAMES]?: () => TODO ***REMOVED******REMOVED*** SetWithDeprecatedArrayMethods
 */

/**
 * @template T
 * @param {SetWithDeprecatedArrayMethods<T>***REMOVED*** set new set
 * @param {string***REMOVED*** name property name
 * @returns {void***REMOVED***
 */
module.exports.arrayToSetDeprecation = (set, name) => {
	for (const method of COPY_METHODS) {
		if (set[method]) continue;
		const d = createDeprecation(
			`${name***REMOVED*** was changed from Array to Set (using Array method '${method***REMOVED***' is deprecated)`,
			"ARRAY_TO_SET"
		);
		/**
		 * @deprecated
		 * @this {Set<T>***REMOVED***
		 * @returns {number***REMOVED*** count
		 */
		set[method] = function () {
			d();
			const array = Array.from(this);
			return Array.prototype[/** @type {keyof COPY_METHODS***REMOVED*** */ (method)].apply(
				array,
				// eslint-disable-next-line prefer-rest-params
				arguments
			);
		***REMOVED***;
	***REMOVED***
	const dPush = createDeprecation(
		`${name***REMOVED*** was changed from Array to Set (using Array method 'push' is deprecated)`,
		"ARRAY_TO_SET_PUSH"
	);
	const dLength = createDeprecation(
		`${name***REMOVED*** was changed from Array to Set (using Array property 'length' is deprecated)`,
		"ARRAY_TO_SET_LENGTH"
	);
	const dIndexer = createDeprecation(
		`${name***REMOVED*** was changed from Array to Set (indexing Array is deprecated)`,
		"ARRAY_TO_SET_INDEXER"
	);
	/**
	 * @deprecated
	 * @this {Set<T>***REMOVED***
	 * @returns {number***REMOVED*** count
	 */
	set.push = function () {
		dPush();
		// eslint-disable-next-line prefer-rest-params
		for (const item of Array.from(arguments)) {
			this.add(item);
		***REMOVED***
		return this.size;
	***REMOVED***;
	for (const method of DISABLED_METHODS) {
		if (set[method]) continue;

		set[method] = () => {
			throw new Error(
				`${name***REMOVED*** was changed from Array to Set (using Array method '${method***REMOVED***' is not possible)`
			);
		***REMOVED***;
	***REMOVED***
	/**
	 * @param {number***REMOVED*** index index
	 * @returns {() => T | undefined***REMOVED*** value
	 */
	const createIndexGetter = index => {
		/**
		 * @this {Set<T>***REMOVED*** a Set
		 * @returns {T | undefined***REMOVED*** the value at this location
		 */
		// eslint-disable-next-line func-style
		const fn = function () {
			dIndexer();
			let i = 0;
			for (const item of this) {
				if (i++ === index) return item;
			***REMOVED***
		***REMOVED***;
		return fn;
	***REMOVED***;
	/**
	 * @param {number***REMOVED*** index index
	 */
	const defineIndexGetter = index => {
		Object.defineProperty(set, index, {
			get: createIndexGetter(index),
			set(value) {
				throw new Error(
					`${name***REMOVED*** was changed from Array to Set (indexing Array with write is not possible)`
				);
			***REMOVED***
		***REMOVED***);
	***REMOVED***;
	defineIndexGetter(0);
	let indexerDefined = 1;
	Object.defineProperty(set, "length", {
		get() {
			dLength();
			const length = this.size;
			for (indexerDefined; indexerDefined < length + 1; indexerDefined++) {
				defineIndexGetter(indexerDefined);
			***REMOVED***
			return length;
		***REMOVED***,
		set(value) {
			throw new Error(
				`${name***REMOVED*** was changed from Array to Set (writing to Array property 'length' is not possible)`
			);
		***REMOVED***
	***REMOVED***);
	set[Symbol.isConcatSpreadable] = true;
***REMOVED***;

/**
 * @template T
 * @param {string***REMOVED*** name name
 * @returns {{ new <T = any>(values?: readonly T[] | null): SetDeprecatedArray<T> ***REMOVED******REMOVED*** SetDeprecatedArray
 */
module.exports.createArrayToSetDeprecationSet = name => {
	let initialized = false;

	/**
	 * @template T
	 */
	class SetDeprecatedArray extends Set {
		/**
		 * @param {readonly T[] | null=***REMOVED*** items items
		 */
		constructor(items) {
			super(items);
			if (!initialized) {
				initialized = true;
				module.exports.arrayToSetDeprecation(
					SetDeprecatedArray.prototype,
					name
				);
			***REMOVED***
		***REMOVED***
	***REMOVED***
	return SetDeprecatedArray;
***REMOVED***;

/**
 * @template {object***REMOVED*** T
 * @param {T***REMOVED*** obj object
 * @param {string***REMOVED*** name property name
 * @param {string***REMOVED*** code deprecation code
 * @param {string***REMOVED*** note additional note
 * @returns {T***REMOVED*** frozen object with deprecation when modifying
 */
module.exports.soonFrozenObjectDeprecation = (obj, name, code, note = "") => {
	const message = `${name***REMOVED*** will be frozen in future, all modifications are deprecated.${
		note && `\n${note***REMOVED***`
	***REMOVED***`;
	return /** @type {T***REMOVED*** */ (
		new Proxy(obj, {
			set: util.deprecate(
				/**
				 * @param {object***REMOVED*** target target
				 * @param {string | symbol***REMOVED*** property property
				 * @param {EXPECTED_ANY***REMOVED*** value value
				 * @param {EXPECTED_ANY***REMOVED*** receiver receiver
				 * @returns {boolean***REMOVED*** result
				 */
				(target, property, value, receiver) =>
					Reflect.set(target, property, value, receiver),
				message,
				code
			),
			defineProperty: util.deprecate(
				/**
				 * @param {object***REMOVED*** target target
				 * @param {string | symbol***REMOVED*** property property
				 * @param {PropertyDescriptor***REMOVED*** descriptor descriptor
				 * @returns {boolean***REMOVED*** result
				 */
				(target, property, descriptor) =>
					Reflect.defineProperty(target, property, descriptor),
				message,
				code
			),
			deleteProperty: util.deprecate(
				/**
				 * @param {object***REMOVED*** target target
				 * @param {string | symbol***REMOVED*** property property
				 * @returns {boolean***REMOVED*** result
				 */
				(target, property) => Reflect.deleteProperty(target, property),
				message,
				code
			),
			setPrototypeOf: util.deprecate(
				/**
				 * @param {object***REMOVED*** target target
				 * @param {EXPECTED_OBJECT | null***REMOVED*** proto proto
				 * @returns {boolean***REMOVED*** result
				 */
				(target, proto) => Reflect.setPrototypeOf(target, proto),
				message,
				code
			)
		***REMOVED***)
	);
***REMOVED***;

/**
 * @template T
 * @param {T***REMOVED*** obj object
 * @param {string***REMOVED*** message deprecation message
 * @param {string***REMOVED*** code deprecation code
 * @returns {T***REMOVED*** object with property access deprecated
 */
const deprecateAllProperties = (obj, message, code) => {
	const newObj = {***REMOVED***;
	const descriptors = Object.getOwnPropertyDescriptors(obj);
	for (const name of Object.keys(descriptors)) {
		const descriptor = descriptors[name];
		if (typeof descriptor.value === "function") {
			Object.defineProperty(newObj, name, {
				...descriptor,
				value: util.deprecate(descriptor.value, message, code)
			***REMOVED***);
		***REMOVED*** else if (descriptor.get || descriptor.set) {
			Object.defineProperty(newObj, name, {
				...descriptor,
				get: descriptor.get && util.deprecate(descriptor.get, message, code),
				set: descriptor.set && util.deprecate(descriptor.set, message, code)
			***REMOVED***);
		***REMOVED*** else {
			let value = descriptor.value;
			Object.defineProperty(newObj, name, {
				configurable: descriptor.configurable,
				enumerable: descriptor.enumerable,
				get: util.deprecate(() => value, message, code),
				set: descriptor.writable
					? util.deprecate(
							/**
							 * @template T
							 * @param {T***REMOVED*** v value
							 * @returns {T***REMOVED*** result
							 */
							v => (value = v),
							message,
							code
						)
					: undefined
			***REMOVED***);
		***REMOVED***
	***REMOVED***
	return /** @type {T***REMOVED*** */ (newObj);
***REMOVED***;
module.exports.deprecateAllProperties = deprecateAllProperties;

/**
 * @template {object***REMOVED*** T
 * @param {T***REMOVED*** fakeHook fake hook implementation
 * @param {string=***REMOVED*** message deprecation message (not deprecated when unset)
 * @param {string=***REMOVED*** code deprecation code (not deprecated when unset)
 * @returns {FakeHook<T>***REMOVED*** fake hook which redirects
 */
module.exports.createFakeHook = (fakeHook, message, code) => {
	if (message && code) {
		fakeHook = deprecateAllProperties(fakeHook, message, code);
	***REMOVED***
	return Object.freeze(
		Object.assign(fakeHook, { _fakeHook: /** @type {true***REMOVED*** */ (true) ***REMOVED***)
	);
***REMOVED***;
