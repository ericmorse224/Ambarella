/**
 * @fileoverview Enforce all aria-* properties are valid.
 * @author Ethan Cohen
 */

// -----------------------------------------------------------------------------
// Requirements
// -----------------------------------------------------------------------------

import { aria ***REMOVED*** from 'aria-query';
import { RuleTester ***REMOVED*** from 'eslint';
import parserOptionsMapper from '../../__util__/parserOptionsMapper';
import parsers from '../../__util__/helpers/parsers';
import rule from '../../../src/rules/aria-props';
import getSuggestion from '../../../src/util/getSuggestion';

// -----------------------------------------------------------------------------
// Tests
// -----------------------------------------------------------------------------

const ruleTester = new RuleTester();
const ariaAttributes = aria.keys();

const errorMessage = (name) => {
  const suggestions = getSuggestion(name, ariaAttributes);
  const message = `${name***REMOVED***: This attribute is an invalid ARIA attribute.`;

  if (suggestions.length > 0) {
    return {
      type: 'JSXAttribute',
      message: `${message***REMOVED*** Did you mean to use ${suggestions***REMOVED***?`,
    ***REMOVED***;
  ***REMOVED***

  return {
    type: 'JSXAttribute',
    message,
  ***REMOVED***;
***REMOVED***;

// Create basic test cases using all valid role types.
const basicValidityTests = ariaAttributes.map((prop) => ({
  code: `<div ${prop.toLowerCase()***REMOVED***="foobar" />`,
***REMOVED***));

ruleTester.run('aria-props', rule, {
  valid: parsers.all([].concat(
    // Variables should pass, as we are only testing literals.
    { code: '<div />' ***REMOVED***,
    { code: '<div></div>' ***REMOVED***,
    { code: '<div aria="wee"></div>' ***REMOVED***, // Needs aria-*
    { code: '<div abcARIAdef="true"></div>' ***REMOVED***,
    { code: '<div fooaria-foobar="true"></div>' ***REMOVED***,
    { code: '<div fooaria-hidden="true"></div>' ***REMOVED***,
    { code: '<Bar baz />' ***REMOVED***,
    { code: '<input type="text" aria-errormessage="foobar" />' ***REMOVED***,
  )).concat(basicValidityTests).map(parserOptionsMapper),
  invalid: parsers.all([].concat(
    { code: '<div aria-="foobar" />', errors: [errorMessage('aria-')] ***REMOVED***,
    {
      code: '<div aria-labeledby="foobar" />',
      errors: [errorMessage('aria-labeledby')],
    ***REMOVED***,
    {
      code: '<div aria-skldjfaria-klajsd="foobar" />',
      errors: [errorMessage('aria-skldjfaria-klajsd')],
    ***REMOVED***,
  )).map(parserOptionsMapper),
***REMOVED***);
