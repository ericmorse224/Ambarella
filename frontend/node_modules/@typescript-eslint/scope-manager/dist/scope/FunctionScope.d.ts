import type { TSESTree ***REMOVED*** from '@typescript-eslint/types';
import type { Reference ***REMOVED*** from '../referencer/Reference';
import type { ScopeManager ***REMOVED*** from '../ScopeManager';
import type { Variable ***REMOVED*** from '../variable';
import type { Scope ***REMOVED*** from './Scope';
import { ScopeBase ***REMOVED*** from './ScopeBase';
import { ScopeType ***REMOVED*** from './ScopeType';
declare class FunctionScope extends ScopeBase<ScopeType.function, TSESTree.ArrowFunctionExpression | TSESTree.FunctionDeclaration | TSESTree.FunctionExpression | TSESTree.TSDeclareFunction | TSESTree.TSEmptyBodyFunctionExpression | TSESTree.Program, Scope> {
    constructor(scopeManager: ScopeManager, upperScope: FunctionScope['upper'], block: FunctionScope['block'], isMethodDefinition: boolean);
    protected isValidResolution(ref: Reference, variable: Variable): boolean;
***REMOVED***
export { FunctionScope ***REMOVED***;
//# sourceMappingURL=FunctionScope.d.ts.map