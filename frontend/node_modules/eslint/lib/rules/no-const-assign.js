/**
 * @fileoverview A rule to disallow modifying variables that are declared using `const`
 * @author Toru Nagashima
 */

"use strict";

const astUtils = require("./utils/ast-utils");

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

/** @type {import('../types').Rule.RuleModule***REMOVED*** */
module.exports = {
	meta: {
		type: "problem",

		docs: {
			description: "Disallow reassigning `const` variables",
			recommended: true,
			url: "https://eslint.org/docs/latest/rules/no-const-assign",
		***REMOVED***,

		schema: [],

		messages: {
			const: "'{{name***REMOVED******REMOVED***' is constant.",
		***REMOVED***,
	***REMOVED***,

	create(context) {
		const sourceCode = context.sourceCode;

		/**
		 * Finds and reports references that are non initializer and writable.
		 * @param {Variable***REMOVED*** variable A variable to check.
		 * @returns {void***REMOVED***
		 */
		function checkVariable(variable) {
			astUtils
				.getModifyingReferences(variable.references)
				.forEach(reference => {
					context.report({
						node: reference.identifier,
						messageId: "const",
						data: { name: reference.identifier.name ***REMOVED***,
					***REMOVED***);
				***REMOVED***);
		***REMOVED***

		return {
			VariableDeclaration(node) {
				if (node.kind === "const") {
					sourceCode
						.getDeclaredVariables(node)
						.forEach(checkVariable);
				***REMOVED***
			***REMOVED***,
		***REMOVED***;
	***REMOVED***,
***REMOVED***;
