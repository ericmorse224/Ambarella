{{# def.definitions ***REMOVED******REMOVED***

{{## def._error:_rule:
  {{ 'istanbul ignore else'; ***REMOVED******REMOVED***
  {{? it.createErrors !== false ***REMOVED******REMOVED***
    {
      keyword: '{{= $errorKeyword || _rule ***REMOVED******REMOVED***'
      , dataPath: (dataPath || '') + {{= it.errorPath ***REMOVED******REMOVED***
      , schemaPath: {{=it.util.toQuotedString($errSchemaPath)***REMOVED******REMOVED***
      , params: {{# def._errorParams[_rule] ***REMOVED******REMOVED***
      {{? it.opts.messages !== false ***REMOVED******REMOVED***
        , message: {{# def._errorMessages[_rule] ***REMOVED******REMOVED***
      {{?***REMOVED******REMOVED***
      {{? it.opts.verbose ***REMOVED******REMOVED***
        , schema: {{# def._errorSchemas[_rule] ***REMOVED******REMOVED***
        , parentSchema: validate.schema{{=it.schemaPath***REMOVED******REMOVED***
        , data: {{=$data***REMOVED******REMOVED***
      {{?***REMOVED******REMOVED***
    ***REMOVED***
  {{??***REMOVED******REMOVED***
    {***REMOVED***
  {{?***REMOVED******REMOVED***
#***REMOVED******REMOVED***


{{## def._addError:_rule:
  if (vErrors === null) vErrors = [err];
  else vErrors.push(err);
  errors++;
#***REMOVED******REMOVED***


{{## def.addError:_rule:
  var err = {{# def._error:_rule ***REMOVED******REMOVED***;
  {{# def._addError:_rule ***REMOVED******REMOVED***
#***REMOVED******REMOVED***


{{## def.error:_rule:
  {{# def.beginDefOut***REMOVED******REMOVED***
    {{# def._error:_rule ***REMOVED******REMOVED***
  {{# def.storeDefOut:__err ***REMOVED******REMOVED***

  {{? !it.compositeRule && $breakOnError ***REMOVED******REMOVED***
    {{ 'istanbul ignore if'; ***REMOVED******REMOVED***
    {{? it.async ***REMOVED******REMOVED***
      throw new ValidationError([{{=__err***REMOVED******REMOVED***]);
    {{??***REMOVED******REMOVED***
      validate.errors = [{{=__err***REMOVED******REMOVED***];
      return false;
    {{?***REMOVED******REMOVED***
  {{??***REMOVED******REMOVED***
    var err = {{=__err***REMOVED******REMOVED***;
    {{# def._addError:_rule ***REMOVED******REMOVED***
  {{?***REMOVED******REMOVED***
#***REMOVED******REMOVED***


{{## def.extraError:_rule:
  {{# def.addError:_rule***REMOVED******REMOVED***
  {{? !it.compositeRule && $breakOnError ***REMOVED******REMOVED***
    {{ 'istanbul ignore if'; ***REMOVED******REMOVED***
    {{? it.async ***REMOVED******REMOVED***
      throw new ValidationError(vErrors);
    {{??***REMOVED******REMOVED***
      validate.errors = vErrors;
      return false;
    {{?***REMOVED******REMOVED***
  {{?***REMOVED******REMOVED***
#***REMOVED******REMOVED***


{{## def.checkError:_rule:
  if (!{{=$valid***REMOVED******REMOVED***) {
    {{# def.error:_rule ***REMOVED******REMOVED***
  ***REMOVED***
#***REMOVED******REMOVED***


{{## def.resetErrors:
  errors = {{=$errs***REMOVED******REMOVED***;
  if (vErrors !== null) {
    if ({{=$errs***REMOVED******REMOVED***) vErrors.length = {{=$errs***REMOVED******REMOVED***;
    else vErrors = null;
  ***REMOVED***
#***REMOVED******REMOVED***


{{## def.concatSchema:{{?$isData***REMOVED******REMOVED***' + {{=$schemaValue***REMOVED******REMOVED*** + '{{??***REMOVED******REMOVED***{{=$schema***REMOVED******REMOVED***{{?***REMOVED******REMOVED***#***REMOVED******REMOVED***
{{## def.appendSchema:{{?$isData***REMOVED******REMOVED***' + {{=$schemaValue***REMOVED******REMOVED***{{??***REMOVED******REMOVED***{{=$schemaValue***REMOVED******REMOVED***'{{?***REMOVED******REMOVED***#***REMOVED******REMOVED***
{{## def.concatSchemaEQ:{{?$isData***REMOVED******REMOVED***' + {{=$schemaValue***REMOVED******REMOVED*** + '{{??***REMOVED******REMOVED***{{=it.util.escapeQuotes($schema)***REMOVED******REMOVED***{{?***REMOVED******REMOVED***#***REMOVED******REMOVED***

{{## def._errorMessages = {
  'false schema':  "'boolean schema is false'",
  $ref:            "'can\\\'t resolve reference {{=it.util.escapeQuotes($schema)***REMOVED******REMOVED***'",
  additionalItems: "'should NOT have more than {{=$schema.length***REMOVED******REMOVED*** items'",
  additionalProperties: "'{{? it.opts._errorDataPathProperty ***REMOVED******REMOVED***is an invalid additional property{{??***REMOVED******REMOVED***should NOT have additional properties{{?***REMOVED******REMOVED***'",
  anyOf:           "'should match some schema in anyOf'",
  const:           "'should be equal to constant'",
  contains:        "'should contain a valid item'",
  dependencies:    "'should have {{? $deps.length == 1 ***REMOVED******REMOVED***property {{= it.util.escapeQuotes($deps[0]) ***REMOVED******REMOVED***{{??***REMOVED******REMOVED***properties {{= it.util.escapeQuotes($deps.join(\", \")) ***REMOVED******REMOVED***{{?***REMOVED******REMOVED*** when property {{= it.util.escapeQuotes($property) ***REMOVED******REMOVED*** is present'",
  'enum':          "'should be equal to one of the allowed values'",
  format:          "'should match format \"{{#def.concatSchemaEQ***REMOVED******REMOVED***\"'",
  'if':            "'should match \"' + {{=$ifClause***REMOVED******REMOVED*** + '\" schema'",
  _limit:          "'should be {{=$opStr***REMOVED******REMOVED*** {{#def.appendSchema***REMOVED******REMOVED***",
  _exclusiveLimit: "'{{=$exclusiveKeyword***REMOVED******REMOVED*** should be boolean'",
  _limitItems:     "'should NOT have {{?$keyword=='maxItems'***REMOVED******REMOVED***more{{??***REMOVED******REMOVED***fewer{{?***REMOVED******REMOVED*** than {{#def.concatSchema***REMOVED******REMOVED*** items'",
  _limitLength:    "'should NOT be {{?$keyword=='maxLength'***REMOVED******REMOVED***longer{{??***REMOVED******REMOVED***shorter{{?***REMOVED******REMOVED*** than {{#def.concatSchema***REMOVED******REMOVED*** characters'",
  _limitProperties:"'should NOT have {{?$keyword=='maxProperties'***REMOVED******REMOVED***more{{??***REMOVED******REMOVED***fewer{{?***REMOVED******REMOVED*** than {{#def.concatSchema***REMOVED******REMOVED*** properties'",
  multipleOf:      "'should be multiple of {{#def.appendSchema***REMOVED******REMOVED***",
  not:             "'should NOT be valid'",
  oneOf:           "'should match exactly one schema in oneOf'",
  pattern:         "'should match pattern \"{{#def.concatSchemaEQ***REMOVED******REMOVED***\"'",
  propertyNames:   "'property name \\'{{=$invalidName***REMOVED******REMOVED***\\' is invalid'",
  required:        "'{{? it.opts._errorDataPathProperty ***REMOVED******REMOVED***is a required property{{??***REMOVED******REMOVED***should have required property \\'{{=$missingProperty***REMOVED******REMOVED***\\'{{?***REMOVED******REMOVED***'",
  type:            "'should be {{? $typeIsArray ***REMOVED******REMOVED***{{= $typeSchema.join(\",\") ***REMOVED******REMOVED***{{??***REMOVED******REMOVED***{{=$typeSchema***REMOVED******REMOVED***{{?***REMOVED******REMOVED***'",
  uniqueItems:     "'should NOT have duplicate items (items ## ' + j + ' and ' + i + ' are identical)'",
  custom:          "'should pass \"{{=$rule.keyword***REMOVED******REMOVED***\" keyword validation'",
  patternRequired: "'should have property matching pattern \\'{{=$missingPattern***REMOVED******REMOVED***\\''",
  switch:          "'should pass \"switch\" keyword validation'",
  _formatLimit:    "'should be {{=$opStr***REMOVED******REMOVED*** \"{{#def.concatSchemaEQ***REMOVED******REMOVED***\"'",
  _formatExclusiveLimit: "'{{=$exclusiveKeyword***REMOVED******REMOVED*** should be boolean'"
***REMOVED*** #***REMOVED******REMOVED***


{{## def.schemaRefOrVal: {{?$isData***REMOVED******REMOVED***validate.schema{{=$schemaPath***REMOVED******REMOVED***{{??***REMOVED******REMOVED***{{=$schema***REMOVED******REMOVED***{{?***REMOVED******REMOVED*** #***REMOVED******REMOVED***
{{## def.schemaRefOrQS: {{?$isData***REMOVED******REMOVED***validate.schema{{=$schemaPath***REMOVED******REMOVED***{{??***REMOVED******REMOVED***{{=it.util.toQuotedString($schema)***REMOVED******REMOVED***{{?***REMOVED******REMOVED*** #***REMOVED******REMOVED***

{{## def._errorSchemas = {
  'false schema':  "false",
  $ref:            "{{=it.util.toQuotedString($schema)***REMOVED******REMOVED***",
  additionalItems: "false",
  additionalProperties: "false",
  anyOf:           "validate.schema{{=$schemaPath***REMOVED******REMOVED***",
  const:           "validate.schema{{=$schemaPath***REMOVED******REMOVED***",
  contains:        "validate.schema{{=$schemaPath***REMOVED******REMOVED***",
  dependencies:    "validate.schema{{=$schemaPath***REMOVED******REMOVED***",
  'enum':          "validate.schema{{=$schemaPath***REMOVED******REMOVED***",
  format:          "{{#def.schemaRefOrQS***REMOVED******REMOVED***",
  'if':            "validate.schema{{=$schemaPath***REMOVED******REMOVED***",
  _limit:          "{{#def.schemaRefOrVal***REMOVED******REMOVED***",
  _exclusiveLimit: "validate.schema{{=$schemaPath***REMOVED******REMOVED***",
  _limitItems:     "{{#def.schemaRefOrVal***REMOVED******REMOVED***",
  _limitLength:    "{{#def.schemaRefOrVal***REMOVED******REMOVED***",
  _limitProperties:"{{#def.schemaRefOrVal***REMOVED******REMOVED***",
  multipleOf:      "{{#def.schemaRefOrVal***REMOVED******REMOVED***",
  not:             "validate.schema{{=$schemaPath***REMOVED******REMOVED***",
  oneOf:           "validate.schema{{=$schemaPath***REMOVED******REMOVED***",
  pattern:         "{{#def.schemaRefOrQS***REMOVED******REMOVED***",
  propertyNames:   "validate.schema{{=$schemaPath***REMOVED******REMOVED***",
  required:        "validate.schema{{=$schemaPath***REMOVED******REMOVED***",
  type:            "validate.schema{{=$schemaPath***REMOVED******REMOVED***",
  uniqueItems:     "{{#def.schemaRefOrVal***REMOVED******REMOVED***",
  custom:          "validate.schema{{=$schemaPath***REMOVED******REMOVED***",
  patternRequired: "validate.schema{{=$schemaPath***REMOVED******REMOVED***",
  switch:          "validate.schema{{=$schemaPath***REMOVED******REMOVED***",
  _formatLimit:    "{{#def.schemaRefOrQS***REMOVED******REMOVED***",
  _formatExclusiveLimit: "validate.schema{{=$schemaPath***REMOVED******REMOVED***"
***REMOVED*** #***REMOVED******REMOVED***


{{## def.schemaValueQS: {{?$isData***REMOVED******REMOVED***{{=$schemaValue***REMOVED******REMOVED***{{??***REMOVED******REMOVED***{{=it.util.toQuotedString($schema)***REMOVED******REMOVED***{{?***REMOVED******REMOVED*** #***REMOVED******REMOVED***

{{## def._errorParams = {
  'false schema':  "{***REMOVED***",
  $ref:            "{ ref: '{{=it.util.escapeQuotes($schema)***REMOVED******REMOVED***' ***REMOVED***",
  additionalItems: "{ limit: {{=$schema.length***REMOVED******REMOVED*** ***REMOVED***",
  additionalProperties: "{ additionalProperty: '{{=$additionalProperty***REMOVED******REMOVED***' ***REMOVED***",
  anyOf:           "{***REMOVED***",
  const:           "{ allowedValue: schema{{=$lvl***REMOVED******REMOVED*** ***REMOVED***",
  contains:        "{***REMOVED***",
  dependencies:    "{ property: '{{= it.util.escapeQuotes($property) ***REMOVED******REMOVED***', missingProperty: '{{=$missingProperty***REMOVED******REMOVED***', depsCount: {{=$deps.length***REMOVED******REMOVED***, deps: '{{= it.util.escapeQuotes($deps.length==1 ? $deps[0] : $deps.join(\", \")) ***REMOVED******REMOVED***' ***REMOVED***",
  'enum':          "{ allowedValues: schema{{=$lvl***REMOVED******REMOVED*** ***REMOVED***",
  format:          "{ format: {{#def.schemaValueQS***REMOVED******REMOVED*** ***REMOVED***",
  'if':            "{ failingKeyword: {{=$ifClause***REMOVED******REMOVED*** ***REMOVED***",
  _limit:          "{ comparison: {{=$opExpr***REMOVED******REMOVED***, limit: {{=$schemaValue***REMOVED******REMOVED***, exclusive: {{=$exclusive***REMOVED******REMOVED*** ***REMOVED***",
  _exclusiveLimit: "{***REMOVED***",
  _limitItems:     "{ limit: {{=$schemaValue***REMOVED******REMOVED*** ***REMOVED***",
  _limitLength:    "{ limit: {{=$schemaValue***REMOVED******REMOVED*** ***REMOVED***",
  _limitProperties:"{ limit: {{=$schemaValue***REMOVED******REMOVED*** ***REMOVED***",
  multipleOf:      "{ multipleOf: {{=$schemaValue***REMOVED******REMOVED*** ***REMOVED***",
  not:             "{***REMOVED***",
  oneOf:           "{ passingSchemas: {{=$passingSchemas***REMOVED******REMOVED*** ***REMOVED***",
  pattern:         "{ pattern: {{#def.schemaValueQS***REMOVED******REMOVED*** ***REMOVED***",
  propertyNames:   "{ propertyName: '{{=$invalidName***REMOVED******REMOVED***' ***REMOVED***",
  required:        "{ missingProperty: '{{=$missingProperty***REMOVED******REMOVED***' ***REMOVED***",
  type:            "{ type: '{{? $typeIsArray ***REMOVED******REMOVED***{{= $typeSchema.join(\",\") ***REMOVED******REMOVED***{{??***REMOVED******REMOVED***{{=$typeSchema***REMOVED******REMOVED***{{?***REMOVED******REMOVED***' ***REMOVED***",
  uniqueItems:     "{ i: i, j: j ***REMOVED***",
  custom:          "{ keyword: '{{=$rule.keyword***REMOVED******REMOVED***' ***REMOVED***",
  patternRequired: "{ missingPattern: '{{=$missingPattern***REMOVED******REMOVED***' ***REMOVED***",
  switch:          "{ caseIndex: {{=$caseIndex***REMOVED******REMOVED*** ***REMOVED***",
  _formatLimit:    "{ comparison: {{=$opExpr***REMOVED******REMOVED***, limit: {{#def.schemaValueQS***REMOVED******REMOVED***, exclusive: {{=$exclusive***REMOVED******REMOVED*** ***REMOVED***",
  _formatExclusiveLimit: "{***REMOVED***"
***REMOVED*** #***REMOVED******REMOVED***
