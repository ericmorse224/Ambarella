/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const Dependency = require("../Dependency");
const makeSerializable = require("../util/makeSerializable");
const ModuleDependency = require("./ModuleDependency");

/** @typedef {import("../Dependency").ReferencedExport***REMOVED*** ReferencedExport */
/** @typedef {import("../Dependency").TRANSITIVE***REMOVED*** TRANSITIVE */
/** @typedef {import("../ModuleGraph")***REMOVED*** ModuleGraph */
/** @typedef {import("../serialization/ObjectMiddleware").ObjectDeserializerContext***REMOVED*** ObjectDeserializerContext */
/** @typedef {import("../serialization/ObjectMiddleware").ObjectSerializerContext***REMOVED*** ObjectSerializerContext */
/** @typedef {import("../util/runtime").RuntimeSpec***REMOVED*** RuntimeSpec */

class WebAssemblyExportImportedDependency extends ModuleDependency {
	/**
	 * @param {string***REMOVED*** exportName export name
	 * @param {string***REMOVED*** request request
	 * @param {string***REMOVED*** name name
	 * @param {string***REMOVED*** valueType value type
	 */
	constructor(exportName, request, name, valueType) {
		super(request);
		/** @type {string***REMOVED*** */
		this.exportName = exportName;
		/** @type {string***REMOVED*** */
		this.name = name;
		/** @type {string***REMOVED*** */
		this.valueType = valueType;
	***REMOVED***

	/**
	 * @returns {boolean | TRANSITIVE***REMOVED*** true, when changes to the referenced module could affect the referencing module; TRANSITIVE, when changes to the referenced module could affect referencing modules of the referencing module
	 */
	couldAffectReferencingModule() {
		return Dependency.TRANSITIVE;
	***REMOVED***

	/**
	 * Returns list of exports referenced by this dependency
	 * @param {ModuleGraph***REMOVED*** moduleGraph module graph
	 * @param {RuntimeSpec***REMOVED*** runtime the runtime for which the module is analysed
	 * @returns {(string[] | ReferencedExport)[]***REMOVED*** referenced exports
	 */
	getReferencedExports(moduleGraph, runtime) {
		return [[this.name]];
	***REMOVED***

	get type() {
		return "wasm export import";
	***REMOVED***

	get category() {
		return "wasm";
	***REMOVED***

	/**
	 * @param {ObjectSerializerContext***REMOVED*** context context
	 */
	serialize(context) {
		const { write ***REMOVED*** = context;

		write(this.exportName);
		write(this.name);
		write(this.valueType);

		super.serialize(context);
	***REMOVED***

	/**
	 * @param {ObjectDeserializerContext***REMOVED*** context context
	 */
	deserialize(context) {
		const { read ***REMOVED*** = context;

		this.exportName = read();
		this.name = read();
		this.valueType = read();

		super.deserialize(context);
	***REMOVED***
***REMOVED***

makeSerializable(
	WebAssemblyExportImportedDependency,
	"webpack/lib/dependencies/WebAssemblyExportImportedDependency"
);

module.exports = WebAssemblyExportImportedDependency;
