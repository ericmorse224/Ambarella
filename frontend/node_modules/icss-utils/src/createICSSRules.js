const createImports = (imports, postcss, mode = "rule") => {
  return Object.keys(imports).map((path) => {
    const aliases = imports[path];
    const declarations = Object.keys(aliases).map((key) =>
      postcss.decl({
        prop: key,
        value: aliases[key],
        raws: { before: "\n  " ***REMOVED***,
      ***REMOVED***)
    );

    const hasDeclarations = declarations.length > 0;

    const rule =
      mode === "rule"
        ? postcss.rule({
            selector: `:import('${path***REMOVED***')`,
            raws: { after: hasDeclarations ? "\n" : "" ***REMOVED***,
          ***REMOVED***)
        : postcss.atRule({
            name: "icss-import",
            params: `'${path***REMOVED***'`,
            raws: { after: hasDeclarations ? "\n" : "" ***REMOVED***,
          ***REMOVED***);

    if (hasDeclarations) {
      rule.append(declarations);
    ***REMOVED***

    return rule;
  ***REMOVED***);
***REMOVED***;

const createExports = (exports, postcss, mode = "rule") => {
  const declarations = Object.keys(exports).map((key) =>
    postcss.decl({
      prop: key,
      value: exports[key],
      raws: { before: "\n  " ***REMOVED***,
    ***REMOVED***)
  );

  if (declarations.length === 0) {
    return [];
  ***REMOVED***
  const rule =
    mode === "rule"
      ? postcss.rule({
          selector: `:export`,
          raws: { after: "\n" ***REMOVED***,
        ***REMOVED***)
      : postcss.atRule({
          name: "icss-export",
          raws: { after: "\n" ***REMOVED***,
        ***REMOVED***);

  rule.append(declarations);

  return [rule];
***REMOVED***;

const createICSSRules = (imports, exports, postcss, mode) => [
  ...createImports(imports, postcss, mode),
  ...createExports(exports, postcss, mode),
];

module.exports = createICSSRules;
