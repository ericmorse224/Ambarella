/**
 * @fileoverview Options configuration for optionator.
 * @author George Zahariev
 */

"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const optionator = require("optionator");

//------------------------------------------------------------------------------
// Typedefs
//------------------------------------------------------------------------------

/**
 * The options object parsed by Optionator.
 * @typedef {Object***REMOVED*** ParsedCLIOptions
 * @property {boolean***REMOVED*** cache Only check changed files
 * @property {string***REMOVED*** cacheFile Path to the cache file. Deprecated: use --cache-location
 * @property {string***REMOVED*** [cacheLocation] Path to the cache file or directory
 * @property {"metadata" | "content"***REMOVED*** cacheStrategy Strategy to use for detecting changed files in the cache
 * @property {boolean***REMOVED*** [color] Force enabling/disabling of color
 * @property {string***REMOVED*** [config] Use this configuration, overriding .eslintrc.* config options if present
 * @property {boolean***REMOVED*** debug Output debugging information
 * @property {string[]***REMOVED*** [env] Specify environments
 * @property {boolean***REMOVED*** envInfo Output execution environment information
 * @property {boolean***REMOVED*** errorOnUnmatchedPattern Prevent errors when pattern is unmatched
 * @property {boolean***REMOVED*** eslintrc Disable use of configuration from .eslintrc.*
 * @property {string[]***REMOVED*** [ext] Specify JavaScript file extensions
 * @property {string[]***REMOVED*** [flag] Feature flags
 * @property {boolean***REMOVED*** fix Automatically fix problems
 * @property {boolean***REMOVED*** fixDryRun Automatically fix problems without saving the changes to the file system
 * @property {("directive" | "problem" | "suggestion" | "layout")[]***REMOVED*** [fixType] Specify the types of fixes to apply (directive, problem, suggestion, layout)
 * @property {string***REMOVED*** format Use a specific output format
 * @property {string[]***REMOVED*** [global] Define global variables
 * @property {boolean***REMOVED*** [help] Show help
 * @property {boolean***REMOVED*** ignore Disable use of ignore files and patterns
 * @property {string***REMOVED*** [ignorePath] Specify path of ignore file
 * @property {string[]***REMOVED*** [ignorePattern] Patterns of files to ignore. In eslintrc mode, these are in addition to `.eslintignore`
 * @property {boolean***REMOVED*** init Run config initialization wizard
 * @property {boolean***REMOVED*** inlineConfig Prevent comments from changing config or rules
 * @property {number***REMOVED*** maxWarnings Number of warnings to trigger nonzero exit code
 * @property {string***REMOVED*** [outputFile] Specify file to write report to
 * @property {string***REMOVED*** [parser] Specify the parser to be used
 * @property {Object***REMOVED*** [parserOptions] Specify parser options
 * @property {string[]***REMOVED*** [plugin] Specify plugins
 * @property {string***REMOVED*** [printConfig] Print the configuration for the given file
 * @property {boolean | undefined***REMOVED*** reportUnusedDisableDirectives Adds reported errors for unused eslint-disable and eslint-enable directives
 * @property {string | undefined***REMOVED*** reportUnusedDisableDirectivesSeverity A severity string indicating if and how unused disable and enable directives should be tracked and reported.
 * @property {string***REMOVED*** [resolvePluginsRelativeTo] A folder where plugins should be resolved from, CWD by default
 * @property {Object***REMOVED*** [rule] Specify rules
 * @property {string[]***REMOVED*** [rulesdir] Load additional rules from this directory. Deprecated: Use rules from plugins
 * @property {boolean***REMOVED*** stdin Lint code provided on <STDIN>
 * @property {string***REMOVED*** [stdinFilename] Specify filename to process STDIN as
 * @property {boolean***REMOVED*** quiet Report errors only
 * @property {boolean***REMOVED*** [version] Output the version number
 * @property {boolean***REMOVED*** warnIgnored Show warnings when the file list includes ignored files
 * @property {boolean***REMOVED*** [passOnNoPatterns=false] When set to true, missing patterns cause
 *      the linting operation to short circuit and not report any failures.
 * @property {string[]***REMOVED*** _ Positional filenames or patterns
 * @property {boolean***REMOVED*** [stats] Report additional statistics
 * @property {boolean***REMOVED*** [suppressAll] Suppress all error violations
 * @property {string[]***REMOVED*** [suppressRule] Suppress specific rules
 * @property {string***REMOVED*** [suppressionsLocation] Path to the suppressions file or directory
 * @property {boolean***REMOVED*** [pruneSuppressions] Prune unused suppressions
 */

//------------------------------------------------------------------------------
// Initialization and Public Interface
//------------------------------------------------------------------------------

// exports "parse(args)", "generateHelp()", and "generateHelpForOption(optionName)"

/**
 * Creates the CLI options for ESLint.
 * @param {boolean***REMOVED*** usingFlatConfig Indicates if flat config is being used.
 * @returns {Object***REMOVED*** The optionator instance.
 */
module.exports = function (usingFlatConfig) {
	let lookupFlag;

	if (usingFlatConfig) {
		lookupFlag = {
			option: "config-lookup",
			type: "Boolean",
			default: "true",
			description: "Disable look up for eslint.config.js",
		***REMOVED***;
	***REMOVED*** else {
		lookupFlag = {
			option: "eslintrc",
			type: "Boolean",
			default: "true",
			description: "Disable use of configuration from .eslintrc.*",
		***REMOVED***;
	***REMOVED***

	let envFlag;

	if (!usingFlatConfig) {
		envFlag = {
			option: "env",
			type: "[String]",
			description: "Specify environments",
		***REMOVED***;
	***REMOVED***

	let inspectConfigFlag;

	if (usingFlatConfig) {
		inspectConfigFlag = {
			option: "inspect-config",
			type: "Boolean",
			description:
				"Open the config inspector with the current configuration",
		***REMOVED***;
	***REMOVED***

	let extFlag;

	if (!usingFlatConfig) {
		extFlag = {
			option: "ext",
			type: "[String]",
			description: "Specify JavaScript file extensions",
		***REMOVED***;
	***REMOVED*** else {
		extFlag = {
			option: "ext",
			type: "[String]",
			description: "Specify additional file extensions to lint",
		***REMOVED***;
	***REMOVED***

	let resolvePluginsFlag;

	if (!usingFlatConfig) {
		resolvePluginsFlag = {
			option: "resolve-plugins-relative-to",
			type: "path::String",
			description:
				"A folder where plugins should be resolved from, CWD by default",
		***REMOVED***;
	***REMOVED***

	let rulesDirFlag;

	if (!usingFlatConfig) {
		rulesDirFlag = {
			option: "rulesdir",
			type: "[path::String]",
			description:
				"Load additional rules from this directory. Deprecated: Use rules from plugins",
		***REMOVED***;
	***REMOVED***

	let ignorePathFlag;

	if (!usingFlatConfig) {
		ignorePathFlag = {
			option: "ignore-path",
			type: "path::String",
			description: "Specify path of ignore file",
		***REMOVED***;
	***REMOVED***

	let statsFlag;

	if (usingFlatConfig) {
		statsFlag = {
			option: "stats",
			type: "Boolean",
			default: "false",
			description: "Add statistics to the lint report",
		***REMOVED***;
	***REMOVED***

	let warnIgnoredFlag;

	if (usingFlatConfig) {
		warnIgnoredFlag = {
			option: "warn-ignored",
			type: "Boolean",
			default: "true",
			description:
				"Suppress warnings when the file list includes ignored files",
		***REMOVED***;
	***REMOVED***

	let flagFlag;

	if (usingFlatConfig) {
		flagFlag = {
			option: "flag",
			type: "[String]",
			description: "Enable a feature flag",
		***REMOVED***;
	***REMOVED***

	let reportUnusedInlineConfigsFlag;

	if (usingFlatConfig) {
		reportUnusedInlineConfigsFlag = {
			option: "report-unused-inline-configs",
			type: "String",
			default: void 0,
			description:
				"Adds reported errors for unused eslint inline config comments",
			enum: ["off", "warn", "error", "0", "1", "2"],
		***REMOVED***;
	***REMOVED***

	let mcpFlag;

	if (usingFlatConfig) {
		mcpFlag = {
			option: "mcp",
			type: "Boolean",
			description: "Start the ESLint MCP server",
		***REMOVED***;
	***REMOVED***

	return optionator({
		prepend: "eslint [options] file.js [file.js] [dir]",
		defaults: {
			concatRepeatedArrays: true,
			mergeRepeatedObjects: true,
		***REMOVED***,
		options: [
			{
				heading: "Basic configuration",
			***REMOVED***,
			lookupFlag,
			{
				option: "config",
				alias: "c",
				type: "path::String",
				description: usingFlatConfig
					? "Use this configuration instead of eslint.config.js, eslint.config.mjs, or eslint.config.cjs"
					: "Use this configuration, overriding .eslintrc.* config options if present",
			***REMOVED***,
			inspectConfigFlag,
			envFlag,
			extFlag,
			{
				option: "global",
				type: "[String]",
				description: "Define global variables",
			***REMOVED***,
			{
				option: "parser",
				type: "String",
				description: "Specify the parser to be used",
			***REMOVED***,
			{
				option: "parser-options",
				type: "Object",
				description: "Specify parser options",
			***REMOVED***,
			resolvePluginsFlag,
			{
				heading: "Specify Rules and Plugins",
			***REMOVED***,
			{
				option: "plugin",
				type: "[String]",
				description: "Specify plugins",
			***REMOVED***,
			{
				option: "rule",
				type: "Object",
				description: "Specify rules",
			***REMOVED***,
			rulesDirFlag,
			{
				heading: "Fix Problems",
			***REMOVED***,
			{
				option: "fix",
				type: "Boolean",
				default: false,
				description: "Automatically fix problems",
			***REMOVED***,
			{
				option: "fix-dry-run",
				type: "Boolean",
				default: false,
				description:
					"Automatically fix problems without saving the changes to the file system",
			***REMOVED***,
			{
				option: "fix-type",
				type: "Array",
				description:
					"Specify the types of fixes to apply (directive, problem, suggestion, layout)",
			***REMOVED***,
			{
				heading: "Ignore Files",
			***REMOVED***,
			ignorePathFlag,
			{
				option: "ignore",
				type: "Boolean",
				default: "true",
				description: "Disable use of ignore files and patterns",
			***REMOVED***,
			{
				option: "ignore-pattern",
				type: "[String]",
				description: `Patterns of files to ignore${usingFlatConfig ? "" : " (in addition to those in .eslintignore)"***REMOVED***`,
				concatRepeatedArrays: [
					true,
					{
						oneValuePerFlag: true,
					***REMOVED***,
				],
			***REMOVED***,
			{
				heading: "Use stdin",
			***REMOVED***,
			{
				option: "stdin",
				type: "Boolean",
				default: "false",
				description: "Lint code provided on <STDIN>",
			***REMOVED***,
			{
				option: "stdin-filename",
				type: "String",
				description: "Specify filename to process STDIN as",
			***REMOVED***,
			{
				heading: "Handle Warnings",
			***REMOVED***,
			{
				option: "quiet",
				type: "Boolean",
				default: "false",
				description: "Report errors only",
			***REMOVED***,
			{
				option: "max-warnings",
				type: "Int",
				default: "-1",
				description: "Number of warnings to trigger nonzero exit code",
			***REMOVED***,
			{
				heading: "Output",
			***REMOVED***,
			{
				option: "output-file",
				alias: "o",
				type: "path::String",
				description: "Specify file to write report to",
			***REMOVED***,
			{
				option: "format",
				alias: "f",
				type: "String",
				default: "stylish",
				description: "Use a specific output format",
			***REMOVED***,
			{
				option: "color",
				type: "Boolean",
				alias: "no-color",
				description: "Force enabling/disabling of color",
			***REMOVED***,
			{
				heading: "Inline configuration comments",
			***REMOVED***,
			{
				option: "inline-config",
				type: "Boolean",
				default: "true",
				description: "Prevent comments from changing config or rules",
			***REMOVED***,
			{
				option: "report-unused-disable-directives",
				type: "Boolean",
				default: void 0,
				description:
					"Adds reported errors for unused eslint-disable and eslint-enable directives",
			***REMOVED***,
			{
				option: "report-unused-disable-directives-severity",
				type: "String",
				default: void 0,
				description:
					"Chooses severity level for reporting unused eslint-disable and eslint-enable directives",
				enum: ["off", "warn", "error", "0", "1", "2"],
			***REMOVED***,
			reportUnusedInlineConfigsFlag,
			{
				heading: "Caching",
			***REMOVED***,
			{
				option: "cache",
				type: "Boolean",
				default: "false",
				description: "Only check changed files",
			***REMOVED***,
			{
				option: "cache-file",
				type: "path::String",
				default: ".eslintcache",
				description:
					"Path to the cache file. Deprecated: use --cache-location",
			***REMOVED***,
			{
				option: "cache-location",
				type: "path::String",
				description: "Path to the cache file or directory",
			***REMOVED***,
			{
				option: "cache-strategy",
				dependsOn: ["cache"],
				type: "String",
				default: "metadata",
				enum: ["metadata", "content"],
				description:
					"Strategy to use for detecting changed files in the cache",
			***REMOVED***,
			{
				heading: "Suppressing Violations",
			***REMOVED***,
			{
				option: "suppress-all",
				type: "Boolean",
				default: "false",
				description: "Suppress all violations",
			***REMOVED***,
			{
				option: "suppress-rule",
				type: "[String]",
				description: "Suppress specific rules",
			***REMOVED***,
			{
				option: "suppressions-location",
				type: "path::String",
				description: "Specify the location of the suppressions file",
			***REMOVED***,
			{
				option: "prune-suppressions",
				type: "Boolean",
				default: "false",
				description: "Prune unused suppressions",
			***REMOVED***,
			{
				heading: "Miscellaneous",
			***REMOVED***,
			{
				option: "init",
				type: "Boolean",
				default: "false",
				description: "Run config initialization wizard",
			***REMOVED***,
			{
				option: "env-info",
				type: "Boolean",
				default: "false",
				description: "Output execution environment information",
			***REMOVED***,
			{
				option: "error-on-unmatched-pattern",
				type: "Boolean",
				default: "true",
				description: "Prevent errors when pattern is unmatched",
			***REMOVED***,
			{
				option: "exit-on-fatal-error",
				type: "Boolean",
				default: "false",
				description: "Exit with exit code 2 in case of fatal error",
			***REMOVED***,
			warnIgnoredFlag,
			{
				option: "pass-on-no-patterns",
				type: "Boolean",
				default: false,
				description:
					"Exit with exit code 0 in case no file patterns are passed",
			***REMOVED***,
			{
				option: "debug",
				type: "Boolean",
				default: false,
				description: "Output debugging information",
			***REMOVED***,
			{
				option: "help",
				alias: "h",
				type: "Boolean",
				description: "Show help",
			***REMOVED***,
			{
				option: "version",
				alias: "v",
				type: "Boolean",
				description: "Output the version number",
			***REMOVED***,
			{
				option: "print-config",
				type: "path::String",
				description: "Print the configuration for the given file",
			***REMOVED***,
			statsFlag,
			flagFlag,
			mcpFlag,
		].filter(value => !!value),
	***REMOVED***);
***REMOVED***;
