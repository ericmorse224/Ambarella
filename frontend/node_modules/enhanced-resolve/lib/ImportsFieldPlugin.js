/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Ivan Kopeykin @vankop
*/

"use strict";

const DescriptionFileUtils = require("./DescriptionFileUtils");
const forEachBail = require("./forEachBail");
const { processImportsField ***REMOVED*** = require("./util/entrypoints");
const { parseIdentifier ***REMOVED*** = require("./util/identifier");
const {
	invalidSegmentRegEx,
	deprecatedInvalidSegmentRegEx
***REMOVED*** = require("./util/path");

/** @typedef {import("./Resolver")***REMOVED*** Resolver */
/** @typedef {import("./Resolver").JsonObject***REMOVED*** JsonObject */
/** @typedef {import("./Resolver").ResolveRequest***REMOVED*** ResolveRequest */
/** @typedef {import("./Resolver").ResolveStepHook***REMOVED*** ResolveStepHook */
/** @typedef {import("./util/entrypoints").FieldProcessor***REMOVED*** FieldProcessor */
/** @typedef {import("./util/entrypoints").ImportsField***REMOVED*** ImportsField */

const dotCode = ".".charCodeAt(0);

module.exports = class ImportsFieldPlugin {
	/**
	 * @param {string | ResolveStepHook***REMOVED*** source source
	 * @param {Set<string>***REMOVED*** conditionNames condition names
	 * @param {string | string[]***REMOVED*** fieldNamePath name path
	 * @param {string | ResolveStepHook***REMOVED*** targetFile target file
	 * @param {string | ResolveStepHook***REMOVED*** targetPackage target package
	 */
	constructor(
		source,
		conditionNames,
		fieldNamePath,
		targetFile,
		targetPackage
	) {
		this.source = source;
		this.targetFile = targetFile;
		this.targetPackage = targetPackage;
		this.conditionNames = conditionNames;
		this.fieldName = fieldNamePath;
		/** @type {WeakMap<JsonObject, FieldProcessor>***REMOVED*** */
		this.fieldProcessorCache = new WeakMap();
	***REMOVED***

	/**
	 * @param {Resolver***REMOVED*** resolver the resolver
	 * @returns {void***REMOVED***
	 */
	apply(resolver) {
		const targetFile = resolver.ensureHook(this.targetFile);
		const targetPackage = resolver.ensureHook(this.targetPackage);

		resolver
			.getHook(this.source)
			.tapAsync("ImportsFieldPlugin", (request, resolveContext, callback) => {
				// When there is no description file, abort
				if (!request.descriptionFilePath || request.request === undefined) {
					return callback();
				***REMOVED***

				const remainingRequest =
					request.request + request.query + request.fragment;
				const importsField =
					/** @type {ImportsField|null|undefined***REMOVED*** */
					(
						DescriptionFileUtils.getField(
							/** @type {JsonObject***REMOVED*** */ (request.descriptionFileData),
							this.fieldName
						)
					);
				if (!importsField) return callback();

				if (request.directory) {
					return callback(
						new Error(
							`Resolving to directories is not possible with the imports field (request was ${remainingRequest***REMOVED***/)`
						)
					);
				***REMOVED***

				/** @type {string[]***REMOVED*** */
				let paths;
				/** @type {string | null***REMOVED*** */
				let usedField;

				try {
					// We attach the cache to the description file instead of the importsField value
					// because we use a WeakMap and the importsField could be a string too.
					// Description file is always an object when exports field can be accessed.
					let fieldProcessor = this.fieldProcessorCache.get(
						/** @type {JsonObject***REMOVED*** */ (request.descriptionFileData)
					);
					if (fieldProcessor === undefined) {
						fieldProcessor = processImportsField(importsField);
						this.fieldProcessorCache.set(
							/** @type {JsonObject***REMOVED*** */ (request.descriptionFileData),
							fieldProcessor
						);
					***REMOVED***
					[paths, usedField] = fieldProcessor(
						remainingRequest,
						this.conditionNames
					);
				***REMOVED*** catch (/** @type {unknown***REMOVED*** */ err) {
					if (resolveContext.log) {
						resolveContext.log(
							`Imports field in ${request.descriptionFilePath***REMOVED*** can't be processed: ${err***REMOVED***`
						);
					***REMOVED***
					return callback(/** @type {Error***REMOVED*** */ (err));
				***REMOVED***

				if (paths.length === 0) {
					return callback(
						new Error(
							`Package import ${remainingRequest***REMOVED*** is not imported from package ${request.descriptionFileRoot***REMOVED*** (see imports field in ${request.descriptionFilePath***REMOVED***)`
						)
					);
				***REMOVED***

				forEachBail(
					paths,
					/**
					 * @param {string***REMOVED*** p path
					 * @param {(err?: null|Error, result?: null|ResolveRequest) => void***REMOVED*** callback callback
					 * @param {number***REMOVED*** i index
					 * @returns {void***REMOVED***
					 */
					(p, callback, i) => {
						const parsedIdentifier = parseIdentifier(p);

						if (!parsedIdentifier) return callback();

						const [path_, query, fragment] = parsedIdentifier;

						switch (path_.charCodeAt(0)) {
							// should be relative
							case dotCode: {
								if (
									invalidSegmentRegEx.exec(path_.slice(2)) !== null &&
									deprecatedInvalidSegmentRegEx.test(path_.slice(2)) !== null
								) {
									if (paths.length === i) {
										return callback(
											new Error(
												`Invalid "imports" target "${p***REMOVED***" defined for "${usedField***REMOVED***" in the package config ${request.descriptionFilePath***REMOVED***, targets must start with "./"`
											)
										);
									***REMOVED***

									return callback();
								***REMOVED***

								/** @type {ResolveRequest***REMOVED*** */
								const obj = {
									...request,
									request: undefined,
									path: resolver.join(
										/** @type {string***REMOVED*** */ (request.descriptionFileRoot),
										path_
									),
									relativePath: path_,
									query,
									fragment
								***REMOVED***;

								resolver.doResolve(
									targetFile,
									obj,
									"using imports field: " + p,
									resolveContext,
									(err, result) => {
										if (err) return callback(err);
										// Don't allow to continue - https://github.com/webpack/enhanced-resolve/issues/400
										if (result === undefined) return callback(null, null);
										callback(null, result);
									***REMOVED***
								);
								break;
							***REMOVED***

							// package resolving
							default: {
								/** @type {ResolveRequest***REMOVED*** */
								const obj = {
									...request,
									request: path_,
									relativePath: path_,
									fullySpecified: true,
									query,
									fragment
								***REMOVED***;

								resolver.doResolve(
									targetPackage,
									obj,
									"using imports field: " + p,
									resolveContext,
									(err, result) => {
										if (err) return callback(err);
										// Don't allow to continue - https://github.com/webpack/enhanced-resolve/issues/400
										if (result === undefined) return callback(null, null);
										callback(null, result);
									***REMOVED***
								);
							***REMOVED***
						***REMOVED***
					***REMOVED***,
					/**
					 * @param {null|Error***REMOVED*** [err] error
					 * @param {null|ResolveRequest***REMOVED*** [result] result
					 * @returns {void***REMOVED***
					 */
					(err, result) => callback(err, result || null)
				);
			***REMOVED***);
	***REMOVED***
***REMOVED***;
