"use strict";

const conversions = require("webidl-conversions");
const utils = require("./utils.js");

const EventModifierInit = require("./EventModifierInit.js");

exports._convertInherit = (obj, ret, { context = "The provided value" ***REMOVED*** = {***REMOVED***) => {
  EventModifierInit._convertInherit(obj, ret, { context ***REMOVED***);

  {
    const key = "changedTouches";
    let value = obj === undefined || obj === null ? undefined : obj[key];
    if (value !== undefined) {
      if (!utils.isObject(value)) {
        throw new TypeError(context + " has member 'changedTouches' that" + " is not an iterable object.");
      ***REMOVED*** else {
        const V = [];
        const tmp = value;
        for (let nextItem of tmp) {
          nextItem = utils.tryImplForWrapper(nextItem);

          V.push(nextItem);
        ***REMOVED***
        value = V;
      ***REMOVED***

      ret[key] = value;
    ***REMOVED*** else {
      ret[key] = [];
    ***REMOVED***
  ***REMOVED***

  {
    const key = "targetTouches";
    let value = obj === undefined || obj === null ? undefined : obj[key];
    if (value !== undefined) {
      if (!utils.isObject(value)) {
        throw new TypeError(context + " has member 'targetTouches' that" + " is not an iterable object.");
      ***REMOVED*** else {
        const V = [];
        const tmp = value;
        for (let nextItem of tmp) {
          nextItem = utils.tryImplForWrapper(nextItem);

          V.push(nextItem);
        ***REMOVED***
        value = V;
      ***REMOVED***

      ret[key] = value;
    ***REMOVED*** else {
      ret[key] = [];
    ***REMOVED***
  ***REMOVED***

  {
    const key = "touches";
    let value = obj === undefined || obj === null ? undefined : obj[key];
    if (value !== undefined) {
      if (!utils.isObject(value)) {
        throw new TypeError(context + " has member 'touches' that" + " is not an iterable object.");
      ***REMOVED*** else {
        const V = [];
        const tmp = value;
        for (let nextItem of tmp) {
          nextItem = utils.tryImplForWrapper(nextItem);

          V.push(nextItem);
        ***REMOVED***
        value = V;
      ***REMOVED***

      ret[key] = value;
    ***REMOVED*** else {
      ret[key] = [];
    ***REMOVED***
  ***REMOVED***
***REMOVED***;

exports.convert = function convert(obj, { context = "The provided value" ***REMOVED*** = {***REMOVED***) {
  if (obj !== undefined && typeof obj !== "object" && typeof obj !== "function") {
    throw new TypeError(`${context***REMOVED*** is not an object.`);
  ***REMOVED***

  const ret = Object.create(null);
  exports._convertInherit(obj, ret, { context ***REMOVED***);
  return ret;
***REMOVED***;
