/**
 * @fileoverview Rule to flag bitwise identifiers
 * @author Nicholas C. Zakas
 */

"use strict";

/*
 *
 * Set of bitwise operators.
 *
 */
const BITWISE_OPERATORS = [
	"^",
	"|",
	"&",
	"<<",
	">>",
	">>>",
	"^=",
	"|=",
	"&=",
	"<<=",
	">>=",
	">>>=",
	"~",
];

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

/** @type {import('../types').Rule.RuleModule***REMOVED*** */
module.exports = {
	meta: {
		type: "suggestion",

		defaultOptions: [
			{
				allow: [],
				int32Hint: false,
			***REMOVED***,
		],

		docs: {
			description: "Disallow bitwise operators",
			recommended: false,
			url: "https://eslint.org/docs/latest/rules/no-bitwise",
		***REMOVED***,

		schema: [
			{
				type: "object",
				properties: {
					allow: {
						type: "array",
						items: {
							enum: BITWISE_OPERATORS,
						***REMOVED***,
						uniqueItems: true,
					***REMOVED***,
					int32Hint: {
						type: "boolean",
					***REMOVED***,
				***REMOVED***,
				additionalProperties: false,
			***REMOVED***,
		],

		messages: {
			unexpected: "Unexpected use of '{{operator***REMOVED******REMOVED***'.",
		***REMOVED***,
	***REMOVED***,

	create(context) {
		const [{ allow: allowed, int32Hint ***REMOVED***] = context.options;

		/**
		 * Reports an unexpected use of a bitwise operator.
		 * @param {ASTNode***REMOVED*** node Node which contains the bitwise operator.
		 * @returns {void***REMOVED***
		 */
		function report(node) {
			context.report({
				node,
				messageId: "unexpected",
				data: { operator: node.operator ***REMOVED***,
			***REMOVED***);
		***REMOVED***

		/**
		 * Checks if the given node has a bitwise operator.
		 * @param {ASTNode***REMOVED*** node The node to check.
		 * @returns {boolean***REMOVED*** Whether or not the node has a bitwise operator.
		 */
		function hasBitwiseOperator(node) {
			return BITWISE_OPERATORS.includes(node.operator);
		***REMOVED***

		/**
		 * Checks if exceptions were provided, e.g. `{ allow: ['~', '|'] ***REMOVED***`.
		 * @param {ASTNode***REMOVED*** node The node to check.
		 * @returns {boolean***REMOVED*** Whether or not the node has a bitwise operator.
		 */
		function allowedOperator(node) {
			return allowed.includes(node.operator);
		***REMOVED***

		/**
		 * Checks if the given bitwise operator is used for integer typecasting, i.e. "|0"
		 * @param {ASTNode***REMOVED*** node The node to check.
		 * @returns {boolean***REMOVED*** whether the node is used in integer typecasting.
		 */
		function isInt32Hint(node) {
			return (
				int32Hint &&
				node.operator === "|" &&
				node.right &&
				node.right.type === "Literal" &&
				node.right.value === 0
			);
		***REMOVED***

		/**
		 * Report if the given node contains a bitwise operator.
		 * @param {ASTNode***REMOVED*** node The node to check.
		 * @returns {void***REMOVED***
		 */
		function checkNodeForBitwiseOperator(node) {
			if (
				hasBitwiseOperator(node) &&
				!allowedOperator(node) &&
				!isInt32Hint(node)
			) {
				report(node);
			***REMOVED***
		***REMOVED***

		return {
			AssignmentExpression: checkNodeForBitwiseOperator,
			BinaryExpression: checkNodeForBitwiseOperator,
			UnaryExpression: checkNodeForBitwiseOperator,
		***REMOVED***;
	***REMOVED***,
***REMOVED***;
