/**
 * @filedescription Merge Strategy Tests
 */
/* global it, describe, beforeEach */

"use strict";

//-----------------------------------------------------------------------------
// Requirements
//-----------------------------------------------------------------------------

const assert = require("chai").assert;
const { ValidationStrategy ***REMOVED*** = require("../src/");

//-----------------------------------------------------------------------------
// Class
//-----------------------------------------------------------------------------

describe("ValidationStrategy", () => {

    describe("boolean", () => {
        it("should not throw an error when the value is a boolean", () => {
            ValidationStrategy.boolean(true);
        ***REMOVED***);

        it("should throw an error when the value is null", () => {
            assert.throws(() => {
                ValidationStrategy.boolean(null);
            ***REMOVED***, /Expected a Boolean/);
        ***REMOVED***);

        it("should throw an error when the value is a string", () => {
            assert.throws(() => {
                ValidationStrategy.boolean("foo");
            ***REMOVED***, /Expected a Boolean/);
        ***REMOVED***);

        it("should throw an error when the value is a number", () => {
            assert.throws(() => {
                ValidationStrategy.boolean(123);
            ***REMOVED***, /Expected a Boolean/);
        ***REMOVED***);

        it("should throw an error when the value is an object", () => {
            assert.throws(() => {
                ValidationStrategy.boolean({***REMOVED***);
            ***REMOVED***, /Expected a Boolean/);
        ***REMOVED***);
    ***REMOVED***);

    describe("number", () => {
        it("should not throw an error when the value is a number", () => {
            ValidationStrategy.number(25);
        ***REMOVED***);

        it("should throw an error when the value is null", () => {
            assert.throws(() => {
                ValidationStrategy.number(null);
            ***REMOVED***, /Expected a number/);
        ***REMOVED***);

        it("should throw an error when the value is a string", () => {
            assert.throws(() => {
                ValidationStrategy.number("foo");
            ***REMOVED***, /Expected a number/);
        ***REMOVED***);

        it("should throw an error when the value is a boolean", () => {
            assert.throws(() => {
                ValidationStrategy.number(true);
            ***REMOVED***, /Expected a number/);
        ***REMOVED***);

        it("should throw an error when the value is an object", () => {
            assert.throws(() => {
                ValidationStrategy.number({***REMOVED***);
            ***REMOVED***, /Expected a number/);
        ***REMOVED***);
    ***REMOVED***);

    describe("object", () => {
        it("should not throw an error when the value is an object", () => {
            ValidationStrategy.object({***REMOVED***);
        ***REMOVED***);

        it("should throw an error when the value is null", () => {
            assert.throws(() => {
                ValidationStrategy.object(null);
            ***REMOVED***, /Expected an object/);
        ***REMOVED***);

        it("should throw an error when the value is a string", () => {
            assert.throws(() => {
                ValidationStrategy.object("");
            ***REMOVED***, /Expected an object/);
        ***REMOVED***);
    ***REMOVED***);

    describe("array", () => {
        it("should not throw an error when the value is an array", () => {
            ValidationStrategy.array([]);
        ***REMOVED***);

        it("should throw an error when the value is null", () => {
            assert.throws(() => {
                ValidationStrategy.array(null);
            ***REMOVED***, /Expected an array/);
        ***REMOVED***);

        it("should throw an error when the value is a string", () => {
            assert.throws(() => {
                ValidationStrategy.array("");
            ***REMOVED***, /Expected an array/);
        ***REMOVED***);

        it("should throw an error when the value is an object", () => {
            assert.throws(() => {
                ValidationStrategy.array({***REMOVED***);
            ***REMOVED***, /Expected an array/);
        ***REMOVED***);
    ***REMOVED***);

    describe("object?", () => {
        it("should not throw an error when the value is an object", () => {
            ValidationStrategy["object?"]({***REMOVED***);
        ***REMOVED***);

        it("should not throw an error when the value is null", () => {
            ValidationStrategy["object?"](null);
        ***REMOVED***);

        it("should throw an error when the value is a string", () => {
            assert.throws(() => {
                ValidationStrategy["object?"]("");
            ***REMOVED***, /Expected an object/);
        ***REMOVED***);
    ***REMOVED***);

    describe("string", () => {
        it("should not throw an error when the value is a string", () => {
            ValidationStrategy.string("foo");
        ***REMOVED***);

        it("should not throw an error when the value is an empty string", () => {
            ValidationStrategy.string("");
        ***REMOVED***);

        it("should throw an error when the value is null", () => {
            assert.throws(() => {
                ValidationStrategy.string(null);
            ***REMOVED***, /Expected a string/);
        ***REMOVED***);

        it("should throw an error when the value is an object", () => {
            assert.throws(() => {
                ValidationStrategy.string({***REMOVED***);
            ***REMOVED***, /Expected a string/);
        ***REMOVED***);
    ***REMOVED***);

    describe("string!", () => {
        it("should not throw an error when the value is an string", () => {
            ValidationStrategy["string!"]("foo");
        ***REMOVED***);

        it("should throw an error when the value is an empty string", () => {
            assert.throws(() => {
                ValidationStrategy["string!"]("");
            ***REMOVED***, /Expected a non-empty string/);
        ***REMOVED***);

        it("should throw an error when the value is null", () => {
            assert.throws(() => {
                ValidationStrategy["string!"](null);
            ***REMOVED***, /Expected a non-empty string/);
        ***REMOVED***);

        it("should throw an error when the value is an object", () => {
            assert.throws(() => {
                ValidationStrategy["string!"]({***REMOVED***);
            ***REMOVED***, /Expected a non-empty string/);
        ***REMOVED***);
    ***REMOVED***);


***REMOVED***);
