/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

/** @typedef {import("../declarations/WebpackOptions").EntryDescriptionNormalized***REMOVED*** EntryDescription */
/** @typedef {import("../declarations/WebpackOptions").EntryNormalized***REMOVED*** Entry */
/** @typedef {import("./Compiler")***REMOVED*** Compiler */
/** @typedef {import("./Entrypoint").EntryOptions***REMOVED*** EntryOptions */

const PLUGIN_NAME = "EntryOptionPlugin";

class EntryOptionPlugin {
	/**
	 * @param {Compiler***REMOVED*** compiler the compiler instance one is tapping into
	 * @returns {void***REMOVED***
	 */
	apply(compiler) {
		compiler.hooks.entryOption.tap(PLUGIN_NAME, (context, entry) => {
			EntryOptionPlugin.applyEntryOption(compiler, context, entry);
			return true;
		***REMOVED***);
	***REMOVED***

	/**
	 * @param {Compiler***REMOVED*** compiler the compiler
	 * @param {string***REMOVED*** context context directory
	 * @param {Entry***REMOVED*** entry request
	 * @returns {void***REMOVED***
	 */
	static applyEntryOption(compiler, context, entry) {
		if (typeof entry === "function") {
			const DynamicEntryPlugin = require("./DynamicEntryPlugin");
			new DynamicEntryPlugin(context, entry).apply(compiler);
		***REMOVED*** else {
			const EntryPlugin = require("./EntryPlugin");
			for (const name of Object.keys(entry)) {
				const desc = entry[name];
				const options = EntryOptionPlugin.entryDescriptionToOptions(
					compiler,
					name,
					desc
				);
				const descImport =
					/** @type {Exclude<EntryDescription["import"], undefined>***REMOVED*** */
					(desc.import);
				for (const entry of descImport) {
					new EntryPlugin(context, entry, options).apply(compiler);
				***REMOVED***
			***REMOVED***
		***REMOVED***
	***REMOVED***

	/**
	 * @param {Compiler***REMOVED*** compiler the compiler
	 * @param {string***REMOVED*** name entry name
	 * @param {EntryDescription***REMOVED*** desc entry description
	 * @returns {EntryOptions***REMOVED*** options for the entry
	 */
	static entryDescriptionToOptions(compiler, name, desc) {
		/** @type {EntryOptions***REMOVED*** */
		const options = {
			name,
			filename: desc.filename,
			runtime: desc.runtime,
			layer: desc.layer,
			dependOn: desc.dependOn,
			baseUri: desc.baseUri,
			publicPath: desc.publicPath,
			chunkLoading: desc.chunkLoading,
			asyncChunks: desc.asyncChunks,
			wasmLoading: desc.wasmLoading,
			library: desc.library
		***REMOVED***;
		if (desc.layer !== undefined && !compiler.options.experiments.layers) {
			throw new Error(
				"'entryOptions.layer' is only allowed when 'experiments.layers' is enabled"
			);
		***REMOVED***
		if (desc.chunkLoading) {
			const EnableChunkLoadingPlugin = require("./javascript/EnableChunkLoadingPlugin");
			EnableChunkLoadingPlugin.checkEnabled(compiler, desc.chunkLoading);
		***REMOVED***
		if (desc.wasmLoading) {
			const EnableWasmLoadingPlugin = require("./wasm/EnableWasmLoadingPlugin");
			EnableWasmLoadingPlugin.checkEnabled(compiler, desc.wasmLoading);
		***REMOVED***
		if (desc.library) {
			const EnableLibraryPlugin = require("./library/EnableLibraryPlugin");
			EnableLibraryPlugin.checkEnabled(compiler, desc.library.type);
		***REMOVED***
		return options;
	***REMOVED***
***REMOVED***

module.exports = EntryOptionPlugin;
