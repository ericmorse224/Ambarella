/**
 * @fileoverview Enforce label tags have htmlFor attribute.
 * @author Ethan Cohen
 */

// -----------------------------------------------------------------------------
// Requirements
// -----------------------------------------------------------------------------

import { RuleTester ***REMOVED*** from 'eslint';
import assign from 'object.assign';
import parserOptionsMapper from '../../__util__/parserOptionsMapper';
import parsers from '../../__util__/helpers/parsers';
import rule from '../../../src/rules/label-has-for';

// -----------------------------------------------------------------------------
// Tests
// -----------------------------------------------------------------------------

const ruleTester = new RuleTester();

const expectedNestingError = {
  message: 'Form label must have the following type of associated control: nesting',
  type: 'JSXOpeningElement',
***REMOVED***;

const expectedSomeError = {
  message: 'Form label must have ANY of the following types of associated control: nesting, id',
  type: 'JSXOpeningElement',
***REMOVED***;

const expectedEveryError = {
  message: 'Form label must have ALL of the following types of associated control: nesting, id',
  type: 'JSXOpeningElement',
***REMOVED***;

const optionsComponents = [{
  components: ['Label', 'Descriptor'],
***REMOVED***];
const optionsRequiredNesting = [{
  required: 'nesting',
***REMOVED***];
const optionsRequiredSome = [{
  required: { some: ['nesting', 'id'] ***REMOVED***,
***REMOVED***];
const optionsRequiredEvery = [{
  required: { every: ['nesting', 'id'] ***REMOVED***,
***REMOVED***];
const optionsChildrenAllowed = [{
  allowChildren: true,
***REMOVED***];

const attributesSettings = {
  'jsx-a11y': {
    attributes: {
      for: ['htmlFor', 'for'],
    ***REMOVED***,
  ***REMOVED***,
***REMOVED***;

ruleTester.run('label-has-for', rule, {
  valid: parsers.all([].concat(
    // DEFAULT ELEMENT 'label' TESTS
    { code: '<div />' ***REMOVED***,
    { code: '<label htmlFor="foo"><input /></label>' ***REMOVED***,
    { code: '<label htmlFor="foo"><textarea /></label>' ***REMOVED***,
    { code: '<label for="foo"><input /></label>', settings: attributesSettings ***REMOVED***,
    { code: '<label for="foo"><textarea /></label>', settings: attributesSettings ***REMOVED***,
    { code: '<Label />' ***REMOVED***, // lower-case convention refers to real HTML elements.
    { code: '<Label htmlFor="foo" />' ***REMOVED***,
    { code: '<Label for="foo" />', settings: attributesSettings ***REMOVED***,
    { code: '<Descriptor />' ***REMOVED***,
    { code: '<Descriptor htmlFor="foo">Test!</Descriptor>' ***REMOVED***,
    { code: '<Descriptor for="foo">Test!</Descriptor>', settings: attributesSettings ***REMOVED***,
    { code: '<UX.Layout>test</UX.Layout>' ***REMOVED***,

    // CUSTOM ELEMENT ARRAY OPTION TESTS
    { code: '<Label htmlFor="foo" />', options: [assign({***REMOVED***, optionsComponents[0], optionsRequiredSome[0])] ***REMOVED***,
    { code: '<Label htmlFor={"foo"***REMOVED*** />', options: [assign({***REMOVED***, optionsComponents[0], optionsRequiredSome[0])] ***REMOVED***,
    { code: '<Label htmlFor={foo***REMOVED*** />', options: [assign({***REMOVED***, optionsComponents[0], optionsRequiredSome[0])] ***REMOVED***,
    { code: '<Label htmlFor={`${id***REMOVED***`***REMOVED*** />', options: [assign({***REMOVED***, optionsComponents[0], optionsRequiredSome[0])] ***REMOVED***,
    { code: '<div />', options: optionsComponents ***REMOVED***,
    { code: '<Label htmlFor="something"><input /></Label>', options: optionsComponents ***REMOVED***,
    { code: '<Label htmlFor="foo">Test!</Label>', options: [assign({***REMOVED***, optionsComponents[0], optionsRequiredSome[0])] ***REMOVED***,
    { code: '<Descriptor htmlFor="foo" />', options: [assign({***REMOVED***, optionsComponents[0], optionsRequiredSome[0])] ***REMOVED***,
    { code: '<Descriptor htmlFor={"foo"***REMOVED*** />', options: [assign({***REMOVED***, optionsComponents[0], optionsRequiredSome[0])] ***REMOVED***,
    { code: '<Descriptor htmlFor={foo***REMOVED*** />', options: [assign({***REMOVED***, optionsComponents[0], optionsRequiredSome[0])] ***REMOVED***,
    { code: '<Descriptor htmlFor={`${id***REMOVED***`***REMOVED*** />', options: [assign({***REMOVED***, optionsComponents[0], optionsRequiredSome[0])] ***REMOVED***,
    { code: '<Descriptor htmlFor="foo">Test!</Descriptor>', options: [assign({***REMOVED***, optionsComponents[0], optionsRequiredSome[0])] ***REMOVED***,
    { code: '<label htmlFor="foo" />', options: optionsRequiredSome ***REMOVED***,
    { code: '<label htmlFor={"foo"***REMOVED*** />', options: optionsRequiredSome ***REMOVED***,
    { code: '<label htmlFor={foo***REMOVED*** />', options: optionsRequiredSome ***REMOVED***,
    { code: '<label htmlFor={`${id***REMOVED***`***REMOVED*** />', options: optionsRequiredSome ***REMOVED***,
    { code: '<label htmlFor="foo">Test!</label>', options: optionsRequiredSome ***REMOVED***,
    { code: '<label><input /></label>', options: optionsRequiredSome ***REMOVED***,
    { code: '<label><input /></label>', options: optionsRequiredNesting ***REMOVED***,
    { code: '<label htmlFor="input"><input /></label>', options: optionsRequiredEvery ***REMOVED***,
    { code: '<label><input /></label>', options: optionsChildrenAllowed ***REMOVED***,
    { code: '<Descriptor htmlFor="foo">Test!</Descriptor>', options: [assign({***REMOVED***, optionsComponents, optionsChildrenAllowed)] ***REMOVED***,
    { code: '<label>Test!</label>', options: optionsChildrenAllowed ***REMOVED***,
    { code: '<label htmlFor="foo">Test!</label>', options: optionsChildrenAllowed ***REMOVED***,
    { code: '<label>{children***REMOVED***</label>', options: optionsChildrenAllowed ***REMOVED***,
    { code: '<label htmlFor="children">{children***REMOVED***</label>', options: optionsChildrenAllowed ***REMOVED***,
    { code: '<label htmlFor={id***REMOVED***>{ labelText ***REMOVED***<div><input id={id***REMOVED*** type="checkbox" name={id***REMOVED*** value={value***REMOVED*** /></div></label>', options: optionsRequiredEvery ***REMOVED***,
    { code: '<label htmlFor={id***REMOVED***>{ labelText ***REMOVED***<div><div><div><div><input id={id***REMOVED*** type="checkbox" name={id***REMOVED*** value={value***REMOVED*** /></div></div></div></div></label>', options: optionsRequiredEvery ***REMOVED***,
  )).map(parserOptionsMapper),
  invalid: parsers.all([].concat(
    // DEFAULT ELEMENT 'label' TESTS
    { code: '<label id="foo" />', errors: [expectedEveryError], options: optionsRequiredEvery ***REMOVED***,
    { code: '<label htmlFor={undefined***REMOVED*** />', errors: [expectedEveryError], options: optionsRequiredEvery ***REMOVED***,
    { code: '<label htmlFor={`${undefined***REMOVED***`***REMOVED*** />', errors: [expectedEveryError], options: optionsRequiredEvery ***REMOVED***,
    { code: '<label>First Name</label>', errors: [expectedEveryError], options: optionsRequiredEvery ***REMOVED***,
    { code: '<label {...props***REMOVED***>Foo</label>', errors: [expectedEveryError], options: optionsRequiredEvery ***REMOVED***,
    { code: '<label><input /></label>', errors: [expectedEveryError], options: optionsRequiredEvery ***REMOVED***,
    { code: '<label><textarea /></label>', errors: [expectedEveryError], options: optionsRequiredEvery ***REMOVED***,
    { code: '<label>{children***REMOVED***</label>', errors: [expectedEveryError], options: optionsRequiredEvery ***REMOVED***,
    { code: '<label htmlFor="foo" />', errors: [expectedEveryError], options: optionsRequiredEvery ***REMOVED***,
    { code: '<label htmlFor={"foo"***REMOVED*** />', errors: [expectedEveryError], options: optionsRequiredEvery ***REMOVED***,
    { code: '<label htmlFor={foo***REMOVED*** />', errors: [expectedEveryError], options: optionsRequiredEvery ***REMOVED***,
    { code: '<label htmlFor={`${id***REMOVED***`***REMOVED*** />', errors: [expectedEveryError], options: optionsRequiredEvery ***REMOVED***,
    { code: '<label htmlFor="foo">Test!</label>', errors: [expectedEveryError], options: optionsRequiredEvery ***REMOVED***,
    { code: '<label htmlFor={id***REMOVED***>{ labelText ***REMOVED***<div><div><div><div><div id={id***REMOVED*** type="checkbox" name={id***REMOVED*** value={value***REMOVED*** /></div></div></div></div></label>', errors: [expectedEveryError], options: optionsRequiredEvery ***REMOVED***,
    //
    // // CUSTOM ELEMENT ARRAY OPTION TESTS
    {
      code: '<Label></Label>',
      errors: [expectedEveryError],
      options: optionsComponents,
    ***REMOVED***,
    {
      code: '<Label htmlFor="foo" />',
      errors: [expectedEveryError],
      options: [{ ...optionsComponents[0], ...optionsRequiredEvery[0] ***REMOVED***],
    ***REMOVED***,
    {
      code: '<Label htmlFor={"foo"***REMOVED*** />',
      errors: [expectedEveryError],
      options: [{ ...optionsComponents[0], ...optionsRequiredEvery[0] ***REMOVED***],
    ***REMOVED***,
    {
      code: '<Label htmlFor={foo***REMOVED*** />',
      errors: [expectedEveryError],
      options: [{ ...optionsComponents[0], ...optionsRequiredEvery[0] ***REMOVED***],
    ***REMOVED***,
    {
      code: '<Label htmlFor={`${id***REMOVED***`***REMOVED*** />',
      errors: [expectedEveryError],
      options: [{ ...optionsComponents[0], ...optionsRequiredEvery[0] ***REMOVED***],
    ***REMOVED***,
    {
      code: '<Label htmlFor="foo">Test!</Label>',
      errors: [expectedEveryError],
      options: [{ ...optionsComponents[0], ...optionsRequiredEvery[0] ***REMOVED***],
    ***REMOVED***,
    {
      code: '<Descriptor htmlFor="foo" />',
      errors: [expectedEveryError],
      options: [{ ...optionsComponents[0], ...optionsRequiredEvery[0] ***REMOVED***],
    ***REMOVED***,
    {
      code: '<Descriptor htmlFor={"foo"***REMOVED*** />',
      errors: [expectedEveryError],
      options: [{ ...optionsComponents[0], ...optionsRequiredEvery[0] ***REMOVED***],
    ***REMOVED***,
    {
      code: '<Descriptor htmlFor={foo***REMOVED*** />',
      errors: [expectedEveryError],
      options: [{ ...optionsComponents[0], ...optionsRequiredEvery[0] ***REMOVED***],
    ***REMOVED***,
    {
      code: '<Descriptor htmlFor={`${id***REMOVED***`***REMOVED*** />',
      errors: [expectedEveryError],
      options: [{ ...optionsComponents[0], ...optionsRequiredEvery[0] ***REMOVED***],
    ***REMOVED***,
    {
      code: '<Descriptor htmlFor="foo">Test!</Descriptor>',
      errors: [expectedEveryError],
      options: [{ ...optionsComponents[0], ...optionsRequiredEvery[0] ***REMOVED***],
    ***REMOVED***,
    { code: '<Label id="foo" />', errors: [expectedEveryError], options: optionsComponents ***REMOVED***,
    {
      code: '<Label htmlFor={undefined***REMOVED*** />',
      errors: [expectedEveryError],
      options: optionsComponents,
    ***REMOVED***,
    {
      code: '<Label htmlFor={`${undefined***REMOVED***`***REMOVED*** />',
      errors: [expectedEveryError],
      options: optionsComponents,
    ***REMOVED***,
    { code: '<Label>First Name</Label>', errors: [expectedEveryError], options: optionsComponents ***REMOVED***,
    {
      code: '<Label {...props***REMOVED***>Foo</Label>',
      errors: [expectedEveryError],
      options: optionsComponents,
    ***REMOVED***,
    { code: '<Descriptor id="foo" />', errors: [expectedEveryError], options: optionsComponents ***REMOVED***,
    {
      code: '<Descriptor htmlFor={undefined***REMOVED*** />',
      errors: [expectedEveryError],
      options: optionsComponents,
    ***REMOVED***,
    {
      code: '<Descriptor htmlFor={`${undefined***REMOVED***`***REMOVED*** />',
      errors: [expectedEveryError],
      options: optionsComponents,
    ***REMOVED***,
    {
      code: '<Descriptor>First Name</Descriptor>',
      errors: [expectedEveryError],
      options: optionsComponents,
    ***REMOVED***,
    {
      code: '<Descriptor {...props***REMOVED***>Foo</Descriptor>',
      errors: [expectedEveryError],
      options: optionsComponents,
    ***REMOVED***,
    { code: '<label>{children***REMOVED***</label>', errors: [expectedEveryError], options: optionsComponents ***REMOVED***,
    { code: '<label htmlFor="foo" />', errors: [expectedNestingError], options: optionsRequiredNesting ***REMOVED***,
    { code: '<label>First Name</label>', errors: [expectedNestingError], options: optionsRequiredNesting ***REMOVED***,
    { code: '<label>First Name</label>', errors: [expectedSomeError], options: optionsRequiredSome ***REMOVED***,
    { code: '<label>{children***REMOVED***</label>', errors: [expectedSomeError], options: optionsRequiredSome ***REMOVED***,
    { code: '<label>{children***REMOVED***</label>', errors: [expectedNestingError], options: optionsRequiredNesting ***REMOVED***,
    {
      code: '<form><input type="text" id="howmuch" value="1" /><label htmlFor="howmuch">How much ?</label></form>',
      errors: [expectedEveryError],
      options: optionsRequiredEvery,
    ***REMOVED***,
    {
      code: '<form><input type="text" id="howmuch" value="1" /><label htmlFor="howmuch">How much ?<span /></label></form>',
      errors: [expectedEveryError],
      options: optionsRequiredEvery,
    ***REMOVED***,
  )).map(parserOptionsMapper),
***REMOVED***);
