/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const eslintScope = require("eslint-scope");
const Referencer = require("eslint-scope/lib/referencer");
const { SyncBailHook ***REMOVED*** = require("tapable");
const {
	CachedSource,
	ConcatSource,
	ReplaceSource
***REMOVED*** = require("webpack-sources");
const ConcatenationScope = require("../ConcatenationScope");
const { UsageState ***REMOVED*** = require("../ExportsInfo");
const Module = require("../Module");
const { JS_TYPES ***REMOVED*** = require("../ModuleSourceTypesConstants");
const { JAVASCRIPT_MODULE_TYPE_ESM ***REMOVED*** = require("../ModuleTypeConstants");
const RuntimeGlobals = require("../RuntimeGlobals");
const Template = require("../Template");
const { DEFAULTS ***REMOVED*** = require("../config/defaults");
const HarmonyImportDependency = require("../dependencies/HarmonyImportDependency");
const JavascriptParser = require("../javascript/JavascriptParser");
const { equals ***REMOVED*** = require("../util/ArrayHelpers");
const LazySet = require("../util/LazySet");
const { concatComparators ***REMOVED*** = require("../util/comparators");
const {
	RESERVED_NAMES,
	findNewName,
	addScopeSymbols,
	getAllReferences,
	getPathInAst,
	getUsedNamesInScopeInfo
***REMOVED*** = require("../util/concatenate");
const createHash = require("../util/createHash");
const { makePathsRelative ***REMOVED*** = require("../util/identifier");
const makeSerializable = require("../util/makeSerializable");
const propertyAccess = require("../util/propertyAccess");
const { propertyName ***REMOVED*** = require("../util/propertyName");
const {
	filterRuntime,
	intersectRuntime,
	mergeRuntimeCondition,
	mergeRuntimeConditionNonFalse,
	runtimeConditionToString,
	subtractRuntimeCondition
***REMOVED*** = require("../util/runtime");

/** @typedef {import("eslint-scope").Reference***REMOVED*** Reference */
/** @typedef {import("eslint-scope").Scope***REMOVED*** Scope */
/** @typedef {import("eslint-scope").Variable***REMOVED*** Variable */
/** @typedef {import("webpack-sources").Source***REMOVED*** Source */
/** @typedef {import("../../declarations/WebpackOptions").WebpackOptionsNormalized***REMOVED*** WebpackOptions */
/** @typedef {import("../ChunkGraph")***REMOVED*** ChunkGraph */
/** @typedef {import("../CodeGenerationResults")***REMOVED*** CodeGenerationResults */
/** @typedef {import("../Compilation")***REMOVED*** Compilation */
/** @typedef {import("../Dependency")***REMOVED*** Dependency */
/** @typedef {import("../Dependency").UpdateHashContext***REMOVED*** UpdateHashContext */
/** @typedef {import("../DependencyTemplate").DependencyTemplateContext***REMOVED*** DependencyTemplateContext */
/** @typedef {import("../DependencyTemplates")***REMOVED*** DependencyTemplates */
/** @typedef {import("../ExportsInfo").ExportInfo***REMOVED*** ExportInfo */
/** @typedef {import("../Module").BuildCallback***REMOVED*** BuildCallback */
/** @typedef {import("../Module").BuildInfo***REMOVED*** BuildInfo */
/** @typedef {import("../Module").BuildMeta***REMOVED*** BuildMeta */
/** @typedef {import("../Module").CodeGenerationContext***REMOVED*** CodeGenerationContext */
/** @typedef {import("../Module").CodeGenerationResult***REMOVED*** CodeGenerationResult */
/** @typedef {import("../Module").LibIdentOptions***REMOVED*** LibIdentOptions */
/** @typedef {import("../Module").ReadOnlyRuntimeRequirements***REMOVED*** ReadOnlyRuntimeRequirements */
/** @typedef {import("../Module").RuntimeRequirements***REMOVED*** RuntimeRequirements */
/** @typedef {import("../Module").SourceTypes***REMOVED*** SourceTypes */
/** @typedef {import("../ModuleGraph")***REMOVED*** ModuleGraph */
/** @typedef {import("../ModuleGraphConnection")***REMOVED*** ModuleGraphConnection */
/** @typedef {import("../ModuleGraphConnection").ConnectionState***REMOVED*** ConnectionState */
/** @typedef {import("../ModuleParseError")***REMOVED*** ModuleParseError */
/** @typedef {import("../RequestShortener")***REMOVED*** RequestShortener */
/** @typedef {import("../ResolverFactory").ResolverWithOptions***REMOVED*** ResolverWithOptions */
/** @typedef {import("../RuntimeTemplate")***REMOVED*** RuntimeTemplate */
/** @typedef {import("../WebpackError")***REMOVED*** WebpackError */
/** @typedef {import("../javascript/JavascriptModulesPlugin").ChunkRenderContext***REMOVED*** ChunkRenderContext */
/** @typedef {import("../javascript/JavascriptParser").Program***REMOVED*** Program */
/** @typedef {import("../javascript/JavascriptParser").Range***REMOVED*** Range */
/** @typedef {import("../serialization/ObjectMiddleware").ObjectDeserializerContext***REMOVED*** ObjectDeserializerContext */
/** @typedef {import("../util/Hash")***REMOVED*** Hash */
/** @typedef {typeof import("../util/Hash")***REMOVED*** HashConstructor */
/** @typedef {import("../util/concatenate").ScopeInfo***REMOVED*** ScopeInfo */
/** @typedef {import("../util/concatenate").UsedNames***REMOVED*** UsedNames */
/** @typedef {import("../util/fs").InputFileSystem***REMOVED*** InputFileSystem */
/** @typedef {import("../util/identifier").AssociatedObjectForCache***REMOVED*** AssociatedObjectForCache */
/** @typedef {import("../util/runtime").RuntimeSpec***REMOVED*** RuntimeSpec */

/**
 * @template T
 * @typedef {import("../InitFragment")<T>***REMOVED*** InitFragment
 */

/**
 * @template T
 * @typedef {import("../util/comparators").Comparator<T>***REMOVED*** Comparator
 */

// fix eslint-scope to support class properties correctly
// cspell:word Referencer
const ReferencerClass = /** @type {EXPECTED_ANY***REMOVED*** */ (Referencer);
if (!ReferencerClass.prototype.PropertyDefinition) {
	ReferencerClass.prototype.PropertyDefinition =
		ReferencerClass.prototype.Property;
***REMOVED***

/**
 * @typedef {object***REMOVED*** ReexportInfo
 * @property {Module***REMOVED*** module
 * @property {string[]***REMOVED*** export
 */

/** @typedef {RawBinding | SymbolBinding***REMOVED*** Binding */

/**
 * @typedef {object***REMOVED*** RawBinding
 * @property {ModuleInfo***REMOVED*** info
 * @property {string***REMOVED*** rawName
 * @property {string=***REMOVED*** comment
 * @property {string[]***REMOVED*** ids
 * @property {string[]***REMOVED*** exportName
 */

/**
 * @typedef {object***REMOVED*** SymbolBinding
 * @property {ConcatenatedModuleInfo***REMOVED*** info
 * @property {string***REMOVED*** name
 * @property {string=***REMOVED*** comment
 * @property {string[]***REMOVED*** ids
 * @property {string[]***REMOVED*** exportName
 */

/** @typedef {ConcatenatedModuleInfo | ExternalModuleInfo ***REMOVED*** ModuleInfo */
/** @typedef {ConcatenatedModuleInfo | ExternalModuleInfo | ReferenceToModuleInfo ***REMOVED*** ModuleInfoOrReference */

/**
 * @typedef {object***REMOVED*** ConcatenatedModuleInfo
 * @property {"concatenated"***REMOVED*** type
 * @property {Module***REMOVED*** module
 * @property {number***REMOVED*** index
 * @property {Program | undefined***REMOVED*** ast
 * @property {Source | undefined***REMOVED*** internalSource
 * @property {ReplaceSource | undefined***REMOVED*** source
 * @property {InitFragment<ChunkRenderContext>[]=***REMOVED*** chunkInitFragments
 * @property {ReadOnlyRuntimeRequirements | undefined***REMOVED*** runtimeRequirements
 * @property {Scope | undefined***REMOVED*** globalScope
 * @property {Scope | undefined***REMOVED*** moduleScope
 * @property {Map<string, string>***REMOVED*** internalNames
 * @property {Map<string, string> | undefined***REMOVED*** exportMap
 * @property {Map<string, string> | undefined***REMOVED*** rawExportMap
 * @property {string=***REMOVED*** namespaceExportSymbol
 * @property {string | undefined***REMOVED*** namespaceObjectName
 * @property {boolean***REMOVED*** interopNamespaceObjectUsed
 * @property {string | undefined***REMOVED*** interopNamespaceObjectName
 * @property {boolean***REMOVED*** interopNamespaceObject2Used
 * @property {string | undefined***REMOVED*** interopNamespaceObject2Name
 * @property {boolean***REMOVED*** interopDefaultAccessUsed
 * @property {string | undefined***REMOVED*** interopDefaultAccessName
 */

/**
 * @typedef {object***REMOVED*** ExternalModuleInfo
 * @property {"external"***REMOVED*** type
 * @property {Module***REMOVED*** module
 * @property {RuntimeSpec | boolean***REMOVED*** runtimeCondition
 * @property {number***REMOVED*** index
 * @property {string | undefined***REMOVED*** name
 * @property {boolean***REMOVED*** interopNamespaceObjectUsed
 * @property {string | undefined***REMOVED*** interopNamespaceObjectName
 * @property {boolean***REMOVED*** interopNamespaceObject2Used
 * @property {string | undefined***REMOVED*** interopNamespaceObject2Name
 * @property {boolean***REMOVED*** interopDefaultAccessUsed
 * @property {string | undefined***REMOVED*** interopDefaultAccessName
 */

/**
 * @typedef {object***REMOVED*** ReferenceToModuleInfo
 * @property {"reference"***REMOVED*** type
 * @property {RuntimeSpec | boolean***REMOVED*** runtimeCondition
 * @property {ModuleInfo***REMOVED*** target
 */

/**
 * @template T
 * @param {string***REMOVED*** property property
 * @param {function(T[keyof T], T[keyof T]): 0 | 1 | -1***REMOVED*** comparator comparator
 * @returns {Comparator<T>***REMOVED*** comparator
 */

const createComparator = (property, comparator) => (a, b) =>
	comparator(
		a[/** @type {keyof T***REMOVED*** */ (property)],
		b[/** @type {keyof T***REMOVED*** */ (property)]
	);

/**
 * @param {number***REMOVED*** a a
 * @param {number***REMOVED*** b b
 * @returns {0 | 1 | -1***REMOVED*** result
 */
const compareNumbers = (a, b) => {
	if (Number.isNaN(a)) {
		if (!Number.isNaN(b)) {
			return 1;
		***REMOVED***
	***REMOVED*** else {
		if (Number.isNaN(b)) {
			return -1;
		***REMOVED***
		if (a !== b) {
			return a < b ? -1 : 1;
		***REMOVED***
	***REMOVED***
	return 0;
***REMOVED***;
const bySourceOrder = createComparator("sourceOrder", compareNumbers);
const byRangeStart = createComparator("rangeStart", compareNumbers);

/**
 * @param {Iterable<string>***REMOVED*** iterable iterable object
 * @returns {string***REMOVED*** joined iterable object
 */
const joinIterableWithComma = iterable => {
	// This is more performant than Array.from().join(", ")
	// as it doesn't create an array
	let str = "";
	let first = true;
	for (const item of iterable) {
		if (first) {
			first = false;
		***REMOVED*** else {
			str += ", ";
		***REMOVED***
		str += item;
	***REMOVED***
	return str;
***REMOVED***;

/**
 * @typedef {object***REMOVED*** ConcatenationEntry
 * @property {"concatenated" | "external"***REMOVED*** type
 * @property {Module***REMOVED*** module
 * @property {RuntimeSpec | boolean***REMOVED*** runtimeCondition
 */

/**
 * @param {ModuleGraph***REMOVED*** moduleGraph the module graph
 * @param {ModuleInfo***REMOVED*** info module info
 * @param {string[]***REMOVED*** exportName exportName
 * @param {Map<Module, ModuleInfo>***REMOVED*** moduleToInfoMap moduleToInfoMap
 * @param {RuntimeSpec***REMOVED*** runtime for which runtime
 * @param {RequestShortener***REMOVED*** requestShortener the request shortener
 * @param {RuntimeTemplate***REMOVED*** runtimeTemplate the runtime template
 * @param {Set<ConcatenatedModuleInfo>***REMOVED*** neededNamespaceObjects modules for which a namespace object should be generated
 * @param {boolean***REMOVED*** asCall asCall
 * @param {boolean | undefined***REMOVED*** strictHarmonyModule strictHarmonyModule
 * @param {boolean | undefined***REMOVED*** asiSafe asiSafe
 * @param {Set<ExportInfo>***REMOVED*** alreadyVisited alreadyVisited
 * @returns {Binding***REMOVED*** the final variable
 */
const getFinalBinding = (
	moduleGraph,
	info,
	exportName,
	moduleToInfoMap,
	runtime,
	requestShortener,
	runtimeTemplate,
	neededNamespaceObjects,
	asCall,
	strictHarmonyModule,
	asiSafe,
	alreadyVisited = new Set()
) => {
	const exportsType = info.module.getExportsType(
		moduleGraph,
		strictHarmonyModule
	);
	if (exportName.length === 0) {
		switch (exportsType) {
			case "default-only":
				info.interopNamespaceObject2Used = true;
				return {
					info,
					rawName: /** @type {string***REMOVED*** */ (info.interopNamespaceObject2Name),
					ids: exportName,
					exportName
				***REMOVED***;
			case "default-with-named":
				info.interopNamespaceObjectUsed = true;
				return {
					info,
					rawName: /** @type {string***REMOVED*** */ (info.interopNamespaceObjectName),
					ids: exportName,
					exportName
				***REMOVED***;
			case "namespace":
			case "dynamic":
				break;
			default:
				throw new Error(`Unexpected exportsType ${exportsType***REMOVED***`);
		***REMOVED***
	***REMOVED*** else {
		switch (exportsType) {
			case "namespace":
				break;
			case "default-with-named":
				switch (exportName[0]) {
					case "default":
						exportName = exportName.slice(1);
						break;
					case "__esModule":
						return {
							info,
							rawName: "/* __esModule */true",
							ids: exportName.slice(1),
							exportName
						***REMOVED***;
				***REMOVED***
				break;
			case "default-only": {
				const exportId = exportName[0];
				if (exportId === "__esModule") {
					return {
						info,
						rawName: "/* __esModule */true",
						ids: exportName.slice(1),
						exportName
					***REMOVED***;
				***REMOVED***
				exportName = exportName.slice(1);
				if (exportId !== "default") {
					return {
						info,
						rawName:
							"/* non-default import from default-exporting module */undefined",
						ids: exportName,
						exportName
					***REMOVED***;
				***REMOVED***
				break;
			***REMOVED***
			case "dynamic":
				switch (exportName[0]) {
					case "default": {
						exportName = exportName.slice(1);
						info.interopDefaultAccessUsed = true;
						const defaultExport = asCall
							? `${info.interopDefaultAccessName***REMOVED***()`
							: asiSafe
								? `(${info.interopDefaultAccessName***REMOVED***())`
								: asiSafe === false
									? `;(${info.interopDefaultAccessName***REMOVED***())`
									: `${info.interopDefaultAccessName***REMOVED***.a`;
						return {
							info,
							rawName: defaultExport,
							ids: exportName,
							exportName
						***REMOVED***;
					***REMOVED***
					case "__esModule":
						return {
							info,
							rawName: "/* __esModule */true",
							ids: exportName.slice(1),
							exportName
						***REMOVED***;
				***REMOVED***
				break;
			default:
				throw new Error(`Unexpected exportsType ${exportsType***REMOVED***`);
		***REMOVED***
	***REMOVED***
	if (exportName.length === 0) {
		switch (info.type) {
			case "concatenated":
				neededNamespaceObjects.add(info);
				return {
					info,
					rawName:
						/** @type {NonNullable<ConcatenatedModuleInfo["namespaceObjectName"]>***REMOVED*** */
						(info.namespaceObjectName),
					ids: exportName,
					exportName
				***REMOVED***;
			case "external":
				return {
					info,
					rawName:
						/** @type {NonNullable<ExternalModuleInfo["name"]>***REMOVED*** */
						(info.name),
					ids: exportName,
					exportName
				***REMOVED***;
		***REMOVED***
	***REMOVED***
	const exportsInfo = moduleGraph.getExportsInfo(info.module);
	const exportInfo = exportsInfo.getExportInfo(exportName[0]);
	if (alreadyVisited.has(exportInfo)) {
		return {
			info,
			rawName: "/* circular reexport */ Object(function x() { x() ***REMOVED***())",
			ids: [],
			exportName
		***REMOVED***;
	***REMOVED***
	alreadyVisited.add(exportInfo);
	switch (info.type) {
		case "concatenated": {
			const exportId = exportName[0];
			if (exportInfo.provided === false) {
				// It's not provided, but it could be on the prototype
				neededNamespaceObjects.add(info);
				return {
					info,
					rawName: /** @type {string***REMOVED*** */ (info.namespaceObjectName),
					ids: exportName,
					exportName
				***REMOVED***;
			***REMOVED***
			const directExport = info.exportMap && info.exportMap.get(exportId);
			if (directExport) {
				const usedName = /** @type {string[]***REMOVED*** */ (
					exportsInfo.getUsedName(exportName, runtime)
				);
				if (!usedName) {
					return {
						info,
						rawName: "/* unused export */ undefined",
						ids: exportName.slice(1),
						exportName
					***REMOVED***;
				***REMOVED***
				return {
					info,
					name: directExport,
					ids: usedName.slice(1),
					exportName
				***REMOVED***;
			***REMOVED***
			const rawExport = info.rawExportMap && info.rawExportMap.get(exportId);
			if (rawExport) {
				return {
					info,
					rawName: rawExport,
					ids: exportName.slice(1),
					exportName
				***REMOVED***;
			***REMOVED***
			const reexport = exportInfo.findTarget(moduleGraph, module =>
				moduleToInfoMap.has(module)
			);
			if (reexport === false) {
				throw new Error(
					`Target module of reexport from '${info.module.readableIdentifier(
						requestShortener
					)***REMOVED***' is not part of the concatenation (export '${exportId***REMOVED***')\nModules in the concatenation:\n${Array.from(
						moduleToInfoMap,
						([m, info]) =>
							` * ${info.type***REMOVED*** ${m.readableIdentifier(requestShortener)***REMOVED***`
					).join("\n")***REMOVED***`
				);
			***REMOVED***
			if (reexport) {
				const refInfo = moduleToInfoMap.get(reexport.module);
				return getFinalBinding(
					moduleGraph,
					/** @type {ModuleInfo***REMOVED*** */ (refInfo),
					reexport.export
						? [...reexport.export, ...exportName.slice(1)]
						: exportName.slice(1),
					moduleToInfoMap,
					runtime,
					requestShortener,
					runtimeTemplate,
					neededNamespaceObjects,
					asCall,
					/** @type {BuildMeta***REMOVED*** */
					(info.module.buildMeta).strictHarmonyModule,
					asiSafe,
					alreadyVisited
				);
			***REMOVED***
			if (info.namespaceExportSymbol) {
				const usedName = /** @type {string[]***REMOVED*** */ (
					exportsInfo.getUsedName(exportName, runtime)
				);
				return {
					info,
					rawName: /** @type {string***REMOVED*** */ (info.namespaceObjectName),
					ids: usedName,
					exportName
				***REMOVED***;
			***REMOVED***
			throw new Error(
				`Cannot get final name for export '${exportName.join(
					"."
				)***REMOVED***' of ${info.module.readableIdentifier(requestShortener)***REMOVED***`
			);
		***REMOVED***

		case "external": {
			const used = /** @type {string[]***REMOVED*** */ (
				exportsInfo.getUsedName(exportName, runtime)
			);
			if (!used) {
				return {
					info,
					rawName: "/* unused export */ undefined",
					ids: exportName.slice(1),
					exportName
				***REMOVED***;
			***REMOVED***
			const comment = equals(used, exportName)
				? ""
				: Template.toNormalComment(`${exportName.join(".")***REMOVED***`);
			return { info, rawName: info.name + comment, ids: used, exportName ***REMOVED***;
		***REMOVED***
	***REMOVED***
***REMOVED***;

/**
 * @param {ModuleGraph***REMOVED*** moduleGraph the module graph
 * @param {ModuleInfo***REMOVED*** info module info
 * @param {string[]***REMOVED*** exportName exportName
 * @param {Map<Module, ModuleInfo>***REMOVED*** moduleToInfoMap moduleToInfoMap
 * @param {RuntimeSpec***REMOVED*** runtime for which runtime
 * @param {RequestShortener***REMOVED*** requestShortener the request shortener
 * @param {RuntimeTemplate***REMOVED*** runtimeTemplate the runtime template
 * @param {Set<ConcatenatedModuleInfo>***REMOVED*** neededNamespaceObjects modules for which a namespace object should be generated
 * @param {boolean***REMOVED*** asCall asCall
 * @param {boolean | undefined***REMOVED*** callContext callContext
 * @param {boolean | undefined***REMOVED*** strictHarmonyModule strictHarmonyModule
 * @param {boolean | undefined***REMOVED*** asiSafe asiSafe
 * @returns {string***REMOVED*** the final name
 */
const getFinalName = (
	moduleGraph,
	info,
	exportName,
	moduleToInfoMap,
	runtime,
	requestShortener,
	runtimeTemplate,
	neededNamespaceObjects,
	asCall,
	callContext,
	strictHarmonyModule,
	asiSafe
) => {
	const binding = getFinalBinding(
		moduleGraph,
		info,
		exportName,
		moduleToInfoMap,
		runtime,
		requestShortener,
		runtimeTemplate,
		neededNamespaceObjects,
		asCall,
		strictHarmonyModule,
		asiSafe
	);
	{
		const { ids, comment ***REMOVED*** = binding;
		let reference;
		let isPropertyAccess;
		if ("rawName" in binding) {
			reference = `${binding.rawName***REMOVED***${comment || ""***REMOVED***${propertyAccess(ids)***REMOVED***`;
			isPropertyAccess = ids.length > 0;
		***REMOVED*** else {
			const { info, name: exportId ***REMOVED*** = binding;
			const name = info.internalNames.get(exportId);
			if (!name) {
				throw new Error(
					`The export "${exportId***REMOVED***" in "${info.module.readableIdentifier(
						requestShortener
					)***REMOVED***" has no internal name (existing names: ${
						Array.from(
							info.internalNames,
							([name, symbol]) => `${name***REMOVED***: ${symbol***REMOVED***`
						).join(", ") || "none"
					***REMOVED***)`
				);
			***REMOVED***
			reference = `${name***REMOVED***${comment || ""***REMOVED***${propertyAccess(ids)***REMOVED***`;
			isPropertyAccess = ids.length > 1;
		***REMOVED***
		if (isPropertyAccess && asCall && callContext === false) {
			return asiSafe
				? `(0,${reference***REMOVED***)`
				: asiSafe === false
					? `;(0,${reference***REMOVED***)`
					: `/*#__PURE__*/Object(${reference***REMOVED***)`;
		***REMOVED***
		return reference;
	***REMOVED***
***REMOVED***;

/**
 * @typedef {object***REMOVED*** ConcatenateModuleHooks
 * @property {SyncBailHook<[Record<string, string>, ConcatenatedModule], boolean | void>***REMOVED*** exportsDefinitions
 */

/** @type {WeakMap<Compilation, ConcatenateModuleHooks>***REMOVED*** */
const compilationHooksMap = new WeakMap();

class ConcatenatedModule extends Module {
	/**
	 * @param {Module***REMOVED*** rootModule the root module of the concatenation
	 * @param {Set<Module>***REMOVED*** modules all modules in the concatenation (including the root module)
	 * @param {RuntimeSpec***REMOVED*** runtime the runtime
	 * @param {Compilation***REMOVED*** compilation the compilation
	 * @param {AssociatedObjectForCache=***REMOVED*** associatedObjectForCache object for caching
	 * @param {string | HashConstructor=***REMOVED*** hashFunction hash function to use
	 * @returns {ConcatenatedModule***REMOVED*** the module
	 */
	static create(
		rootModule,
		modules,
		runtime,
		compilation,
		associatedObjectForCache,
		hashFunction = DEFAULTS.HASH_FUNCTION
	) {
		const identifier = ConcatenatedModule._createIdentifier(
			rootModule,
			modules,
			associatedObjectForCache,
			hashFunction
		);
		return new ConcatenatedModule({
			identifier,
			rootModule,
			modules,
			runtime,
			compilation
		***REMOVED***);
	***REMOVED***

	/**
	 * @param {Compilation***REMOVED*** compilation the compilation
	 * @returns {ConcatenateModuleHooks***REMOVED*** the attached hooks
	 */
	static getCompilationHooks(compilation) {
		let hooks = compilationHooksMap.get(compilation);
		if (hooks === undefined) {
			hooks = {
				exportsDefinitions: new SyncBailHook(["definitions", "module"])
			***REMOVED***;
			compilationHooksMap.set(compilation, hooks);
		***REMOVED***
		return hooks;
	***REMOVED***

	/**
	 * @param {object***REMOVED*** options options
	 * @param {string***REMOVED*** options.identifier the identifier of the module
	 * @param {Module***REMOVED*** options.rootModule the root module of the concatenation
	 * @param {RuntimeSpec***REMOVED*** options.runtime the selected runtime
	 * @param {Set<Module>***REMOVED*** options.modules all concatenated modules
	 * @param {Compilation***REMOVED*** options.compilation the compilation
	 */
	constructor({ identifier, rootModule, modules, runtime, compilation ***REMOVED***) {
		super(JAVASCRIPT_MODULE_TYPE_ESM, null, rootModule && rootModule.layer);

		// Info from Factory
		/** @type {string***REMOVED*** */
		this._identifier = identifier;
		/** @type {Module***REMOVED*** */
		this.rootModule = rootModule;
		/** @type {Set<Module>***REMOVED*** */
		this._modules = modules;
		this._runtime = runtime;
		this.factoryMeta = rootModule && rootModule.factoryMeta;
		/** @type {Compilation | undefined***REMOVED*** */
		this.compilation = compilation;
	***REMOVED***

	/**
	 * Assuming this module is in the cache. Update the (cached) module with
	 * the fresh module from the factory. Usually updates internal references
	 * and properties.
	 * @param {Module***REMOVED*** module fresh module
	 * @returns {void***REMOVED***
	 */
	updateCacheModule(module) {
		throw new Error("Must not be called");
	***REMOVED***

	/**
	 * @returns {SourceTypes***REMOVED*** types available (do not mutate)
	 */
	getSourceTypes() {
		return JS_TYPES;
	***REMOVED***

	get modules() {
		return Array.from(this._modules);
	***REMOVED***

	/**
	 * @returns {string***REMOVED*** a unique identifier of the module
	 */
	identifier() {
		return this._identifier;
	***REMOVED***

	/**
	 * @param {RequestShortener***REMOVED*** requestShortener the request shortener
	 * @returns {string***REMOVED*** a user readable identifier of the module
	 */
	readableIdentifier(requestShortener) {
		return `${this.rootModule.readableIdentifier(
			requestShortener
		)***REMOVED*** + ${this._modules.size - 1***REMOVED*** modules`;
	***REMOVED***

	/**
	 * @param {LibIdentOptions***REMOVED*** options options
	 * @returns {string | null***REMOVED*** an identifier for library inclusion
	 */
	libIdent(options) {
		return this.rootModule.libIdent(options);
	***REMOVED***

	/**
	 * @returns {string | null***REMOVED*** absolute path which should be used for condition matching (usually the resource path)
	 */
	nameForCondition() {
		return this.rootModule.nameForCondition();
	***REMOVED***

	/**
	 * @param {ModuleGraph***REMOVED*** moduleGraph the module graph
	 * @returns {ConnectionState***REMOVED*** how this module should be connected to referencing modules when consumed for side-effects only
	 */
	getSideEffectsConnectionState(moduleGraph) {
		return this.rootModule.getSideEffectsConnectionState(moduleGraph);
	***REMOVED***

	/**
	 * @param {WebpackOptions***REMOVED*** options webpack options
	 * @param {Compilation***REMOVED*** compilation the compilation
	 * @param {ResolverWithOptions***REMOVED*** resolver the resolver
	 * @param {InputFileSystem***REMOVED*** fs the file system
	 * @param {BuildCallback***REMOVED*** callback callback function
	 * @returns {void***REMOVED***
	 */
	build(options, compilation, resolver, fs, callback) {
		const { rootModule ***REMOVED*** = this;
		const { moduleArgument, exportsArgument ***REMOVED*** =
			/** @type {BuildInfo***REMOVED*** */
			(rootModule.buildInfo);
		this.buildInfo = {
			strict: true,
			cacheable: true,
			moduleArgument,
			exportsArgument,
			fileDependencies: new LazySet(),
			contextDependencies: new LazySet(),
			missingDependencies: new LazySet(),
			topLevelDeclarations: new Set(),
			assets: undefined
		***REMOVED***;
		this.buildMeta = rootModule.buildMeta;
		this.clearDependenciesAndBlocks();
		this.clearWarningsAndErrors();

		for (const m of this._modules) {
			// populate cacheable
			if (!(/** @type {BuildInfo***REMOVED*** */ (m.buildInfo).cacheable)) {
				this.buildInfo.cacheable = false;
			***REMOVED***

			// populate dependencies
			for (const d of m.dependencies.filter(
				dep =>
					!(dep instanceof HarmonyImportDependency) ||
					!this._modules.has(
						/** @type {Module***REMOVED*** */ (compilation.moduleGraph.getModule(dep))
					)
			)) {
				this.dependencies.push(d);
			***REMOVED***
			// populate blocks
			for (const d of m.blocks) {
				this.blocks.push(d);
			***REMOVED***

			// populate warnings
			const warnings = m.getWarnings();
			if (warnings !== undefined) {
				for (const warning of warnings) {
					this.addWarning(warning);
				***REMOVED***
			***REMOVED***

			// populate errors
			const errors = m.getErrors();
			if (errors !== undefined) {
				for (const error of errors) {
					this.addError(error);
				***REMOVED***
			***REMOVED***

			const { assets, assetsInfo, topLevelDeclarations ***REMOVED*** =
				/** @type {BuildInfo***REMOVED*** */ (m.buildInfo);

			// populate topLevelDeclarations
			if (topLevelDeclarations) {
				const topLevelDeclarations = this.buildInfo.topLevelDeclarations;
				if (topLevelDeclarations !== undefined) {
					for (const decl of topLevelDeclarations) {
						topLevelDeclarations.add(decl);
					***REMOVED***
				***REMOVED***
			***REMOVED*** else {
				this.buildInfo.topLevelDeclarations = undefined;
			***REMOVED***

			// populate assets
			if (assets) {
				if (this.buildInfo.assets === undefined) {
					this.buildInfo.assets = Object.create(null);
				***REMOVED***
				Object.assign(
					/** @type {NonNullable<BuildInfo["assets"]>***REMOVED*** */
					(
						/** @type {BuildInfo***REMOVED*** */
						(this.buildInfo).assets
					),
					assets
				);
			***REMOVED***
			if (assetsInfo) {
				if (this.buildInfo.assetsInfo === undefined) {
					this.buildInfo.assetsInfo = new Map();
				***REMOVED***
				for (const [key, value] of assetsInfo) {
					this.buildInfo.assetsInfo.set(key, value);
				***REMOVED***
			***REMOVED***
		***REMOVED***
		callback();
	***REMOVED***

	/**
	 * @param {string=***REMOVED*** type the source type for which the size should be estimated
	 * @returns {number***REMOVED*** the estimated size of the module (must be non-zero)
	 */
	size(type) {
		// Guess size from embedded modules
		let size = 0;
		for (const module of this._modules) {
			size += module.size(type);
		***REMOVED***
		return size;
	***REMOVED***

	/**
	 * @private
	 * @param {Module***REMOVED*** rootModule the root of the concatenation
	 * @param {Set<Module>***REMOVED*** modulesSet a set of modules which should be concatenated
	 * @param {RuntimeSpec***REMOVED*** runtime for this runtime
	 * @param {ModuleGraph***REMOVED*** moduleGraph the module graph
	 * @returns {ConcatenationEntry[]***REMOVED*** concatenation list
	 */
	_createConcatenationList(rootModule, modulesSet, runtime, moduleGraph) {
		/** @type {ConcatenationEntry[]***REMOVED*** */
		const list = [];
		/** @type {Map<Module, RuntimeSpec | true>***REMOVED*** */
		const existingEntries = new Map();

		/**
		 * @param {Module***REMOVED*** module a module
		 * @returns {Iterable<{ connection: ModuleGraphConnection, runtimeCondition: RuntimeSpec | true ***REMOVED***>***REMOVED*** imported modules in order
		 */
		const getConcatenatedImports = module => {
			const connections = Array.from(
				moduleGraph.getOutgoingConnections(module)
			);
			if (module === rootModule) {
				for (const c of moduleGraph.getOutgoingConnections(this))
					connections.push(c);
			***REMOVED***
			/**
			 * @type {Array<{ connection: ModuleGraphConnection, sourceOrder: number, rangeStart: number ***REMOVED***>***REMOVED***
			 */
			const references = connections
				.filter(connection => {
					if (!(connection.dependency instanceof HarmonyImportDependency))
						return false;
					return (
						connection &&
						connection.resolvedOriginModule === module &&
						connection.module &&
						connection.isTargetActive(runtime)
					);
				***REMOVED***)
				.map(connection => {
					const dep = /** @type {HarmonyImportDependency***REMOVED*** */ (
						connection.dependency
					);
					return {
						connection,
						sourceOrder: dep.sourceOrder,
						rangeStart: dep.range && dep.range[0]
					***REMOVED***;
				***REMOVED***);
			/**
			 * bySourceOrder
			 * @example
			 * import a from "a"; // sourceOrder=1
			 * import b from "b"; // sourceOrder=2
			 *
			 * byRangeStart
			 * @example
			 * import {a, b***REMOVED*** from "a"; // sourceOrder=1
			 * a.a(); // first range
			 * b.b(); // second range
			 *
			 * If there is no reexport, we have the same source.
			 * If there is reexport, but module has side effects, this will lead to reexport module only.
			 * If there is side-effects-free reexport, we can get simple deterministic result with range start comparison.
			 */
			references.sort(concatComparators(bySourceOrder, byRangeStart));
			/** @type {Map<Module, { connection: ModuleGraphConnection, runtimeCondition: RuntimeSpec | true ***REMOVED***>***REMOVED*** */
			const referencesMap = new Map();
			for (const { connection ***REMOVED*** of references) {
				const runtimeCondition = filterRuntime(runtime, r =>
					connection.isTargetActive(r)
				);
				if (runtimeCondition === false) continue;
				const module = connection.module;
				const entry = referencesMap.get(module);
				if (entry === undefined) {
					referencesMap.set(module, { connection, runtimeCondition ***REMOVED***);
					continue;
				***REMOVED***
				entry.runtimeCondition = mergeRuntimeConditionNonFalse(
					entry.runtimeCondition,
					runtimeCondition,
					runtime
				);
			***REMOVED***
			return referencesMap.values();
		***REMOVED***;

		/**
		 * @param {ModuleGraphConnection***REMOVED*** connection graph connection
		 * @param {RuntimeSpec | true***REMOVED*** runtimeCondition runtime condition
		 * @returns {void***REMOVED***
		 */
		const enterModule = (connection, runtimeCondition) => {
			const module = connection.module;
			if (!module) return;
			const existingEntry = existingEntries.get(module);
			if (existingEntry === true) {
				return;
			***REMOVED***
			if (modulesSet.has(module)) {
				existingEntries.set(module, true);
				if (runtimeCondition !== true) {
					throw new Error(
						`Cannot runtime-conditional concatenate a module (${module.identifier()***REMOVED*** in ${this.rootModule.identifier()***REMOVED***, ${runtimeConditionToString(
							runtimeCondition
						)***REMOVED***). This should not happen.`
					);
				***REMOVED***
				const imports = getConcatenatedImports(module);
				for (const { connection, runtimeCondition ***REMOVED*** of imports)
					enterModule(connection, runtimeCondition);
				list.push({
					type: "concatenated",
					module: connection.module,
					runtimeCondition
				***REMOVED***);
			***REMOVED*** else {
				if (existingEntry !== undefined) {
					const reducedRuntimeCondition = subtractRuntimeCondition(
						runtimeCondition,
						existingEntry,
						runtime
					);
					if (reducedRuntimeCondition === false) return;
					runtimeCondition = reducedRuntimeCondition;
					existingEntries.set(
						connection.module,
						mergeRuntimeConditionNonFalse(
							existingEntry,
							runtimeCondition,
							runtime
						)
					);
				***REMOVED*** else {
					existingEntries.set(connection.module, runtimeCondition);
				***REMOVED***
				if (list.length > 0) {
					const lastItem = list[list.length - 1];
					if (
						lastItem.type === "external" &&
						lastItem.module === connection.module
					) {
						lastItem.runtimeCondition = mergeRuntimeCondition(
							lastItem.runtimeCondition,
							runtimeCondition,
							runtime
						);
						return;
					***REMOVED***
				***REMOVED***
				list.push({
					type: "external",
					get module() {
						// We need to use a getter here, because the module in the dependency
						// could be replaced by some other process (i. e. also replaced with a
						// concatenated module)
						return connection.module;
					***REMOVED***,
					runtimeCondition
				***REMOVED***);
			***REMOVED***
		***REMOVED***;

		existingEntries.set(rootModule, true);
		const imports = getConcatenatedImports(rootModule);
		for (const { connection, runtimeCondition ***REMOVED*** of imports)
			enterModule(connection, runtimeCondition);
		list.push({
			type: "concatenated",
			module: rootModule,
			runtimeCondition: true
		***REMOVED***);

		return list;
	***REMOVED***

	/**
	 * @param {Module***REMOVED*** rootModule the root module of the concatenation
	 * @param {Set<Module>***REMOVED*** modules all modules in the concatenation (including the root module)
	 * @param {AssociatedObjectForCache=***REMOVED*** associatedObjectForCache object for caching
	 * @param {string | HashConstructor=***REMOVED*** hashFunction hash function to use
	 * @returns {string***REMOVED*** the identifier
	 */
	static _createIdentifier(
		rootModule,
		modules,
		associatedObjectForCache,
		hashFunction = DEFAULTS.HASH_FUNCTION
	) {
		const cachedMakePathsRelative = makePathsRelative.bindContextCache(
			/** @type {string***REMOVED*** */ (rootModule.context),
			associatedObjectForCache
		);
		const identifiers = [];
		for (const module of modules) {
			identifiers.push(cachedMakePathsRelative(module.identifier()));
		***REMOVED***
		identifiers.sort();
		const hash = createHash(hashFunction);
		hash.update(identifiers.join(" "));
		return `${rootModule.identifier()***REMOVED***|${hash.digest("hex")***REMOVED***`;
	***REMOVED***

	/**
	 * @param {LazySet<string>***REMOVED*** fileDependencies set where file dependencies are added to
	 * @param {LazySet<string>***REMOVED*** contextDependencies set where context dependencies are added to
	 * @param {LazySet<string>***REMOVED*** missingDependencies set where missing dependencies are added to
	 * @param {LazySet<string>***REMOVED*** buildDependencies set where build dependencies are added to
	 */
	addCacheDependencies(
		fileDependencies,
		contextDependencies,
		missingDependencies,
		buildDependencies
	) {
		for (const module of this._modules) {
			module.addCacheDependencies(
				fileDependencies,
				contextDependencies,
				missingDependencies,
				buildDependencies
			);
		***REMOVED***
	***REMOVED***

	/**
	 * @param {CodeGenerationContext***REMOVED*** context context for code generation
	 * @returns {CodeGenerationResult***REMOVED*** result
	 */
	codeGeneration({
		dependencyTemplates,
		runtimeTemplate,
		moduleGraph,
		chunkGraph,
		runtime: generationRuntime,
		codeGenerationResults
	***REMOVED***) {
		/** @type {RuntimeRequirements***REMOVED*** */
		const runtimeRequirements = new Set();
		const runtime = intersectRuntime(generationRuntime, this._runtime);

		const requestShortener = runtimeTemplate.requestShortener;
		// Meta info for each module
		const [modulesWithInfo, moduleToInfoMap] = this._getModulesWithInfo(
			moduleGraph,
			runtime
		);

		// Set with modules that need a generated namespace object
		/** @type {Set<ConcatenatedModuleInfo>***REMOVED*** */
		const neededNamespaceObjects = new Set();

		// Generate source code and analyse scopes
		// Prepare a ReplaceSource for the final source
		for (const info of moduleToInfoMap.values()) {
			this._analyseModule(
				moduleToInfoMap,
				info,
				dependencyTemplates,
				runtimeTemplate,
				moduleGraph,
				chunkGraph,
				runtime,
				/** @type {CodeGenerationResults***REMOVED*** */
				(codeGenerationResults)
			);
		***REMOVED***

		// List of all used names to avoid conflicts
		const allUsedNames = new Set(RESERVED_NAMES);
		// Updated Top level declarations are created by renaming
		const topLevelDeclarations = new Set();

		// List of additional names in scope for module references
		/** @type {Map<string, ScopeInfo>***REMOVED*** */
		const usedNamesInScopeInfo = new Map();

		// Set of already checked scopes
		const ignoredScopes = new Set();

		// get all global names
		for (const info of modulesWithInfo) {
			if (info.type === "concatenated") {
				// ignore symbols from moduleScope
				if (info.moduleScope) {
					ignoredScopes.add(info.moduleScope);
				***REMOVED***

				// The super class expression in class scopes behaves weird
				// We get ranges of all super class expressions to make
				// renaming to work correctly
				const superClassCache = new WeakMap();
				/**
				 * @param {Scope***REMOVED*** scope scope
				 * @returns {{ range: Range, variables: Variable[] ***REMOVED***[]***REMOVED*** result
				 */
				const getSuperClassExpressions = scope => {
					const cacheEntry = superClassCache.get(scope);
					if (cacheEntry !== undefined) return cacheEntry;
					const superClassExpressions = [];
					for (const childScope of scope.childScopes) {
						if (childScope.type !== "class") continue;
						const block = childScope.block;
						if (
							(block.type === "ClassDeclaration" ||
								block.type === "ClassExpression") &&
							block.superClass
						) {
							superClassExpressions.push({
								range: /** @type {Range***REMOVED*** */ (block.superClass.range),
								variables: childScope.variables
							***REMOVED***);
						***REMOVED***
					***REMOVED***
					superClassCache.set(scope, superClassExpressions);
					return superClassExpressions;
				***REMOVED***;

				// add global symbols
				if (info.globalScope) {
					for (const reference of info.globalScope.through) {
						const name = reference.identifier.name;
						if (ConcatenationScope.isModuleReference(name)) {
							const match = ConcatenationScope.matchModuleReference(name);
							if (!match) continue;
							const referencedInfo = modulesWithInfo[match.index];
							if (referencedInfo.type === "reference")
								throw new Error("Module reference can't point to a reference");
							const binding = getFinalBinding(
								moduleGraph,
								referencedInfo,
								match.ids,
								moduleToInfoMap,
								runtime,
								requestShortener,
								runtimeTemplate,
								neededNamespaceObjects,
								false,
								/** @type {BuildMeta***REMOVED*** */
								(info.module.buildMeta).strictHarmonyModule,
								true
							);
							if (!binding.ids) continue;
							const { usedNames, alreadyCheckedScopes ***REMOVED*** =
								getUsedNamesInScopeInfo(
									usedNamesInScopeInfo,
									binding.info.module.identifier(),
									"name" in binding ? binding.name : ""
								);
							for (const expr of getSuperClassExpressions(reference.from)) {
								if (
									expr.range[0] <=
										/** @type {Range***REMOVED*** */ (reference.identifier.range)[0] &&
									expr.range[1] >=
										/** @type {Range***REMOVED*** */ (reference.identifier.range)[1]
								) {
									for (const variable of expr.variables) {
										usedNames.add(variable.name);
									***REMOVED***
								***REMOVED***
							***REMOVED***
							addScopeSymbols(
								reference.from,
								usedNames,
								alreadyCheckedScopes,
								ignoredScopes
							);
						***REMOVED*** else {
							allUsedNames.add(name);
						***REMOVED***
					***REMOVED***
				***REMOVED***
			***REMOVED***
		***REMOVED***

		// generate names for symbols
		for (const info of moduleToInfoMap.values()) {
			const { usedNames: namespaceObjectUsedNames ***REMOVED*** = getUsedNamesInScopeInfo(
				usedNamesInScopeInfo,
				info.module.identifier(),
				""
			);
			switch (info.type) {
				case "concatenated": {
					const variables = /** @type {Scope***REMOVED*** */ (info.moduleScope).variables;
					for (const variable of variables) {
						const name = variable.name;
						const { usedNames, alreadyCheckedScopes ***REMOVED*** = getUsedNamesInScopeInfo(
							usedNamesInScopeInfo,
							info.module.identifier(),
							name
						);
						if (allUsedNames.has(name) || usedNames.has(name)) {
							const references = getAllReferences(variable);
							for (const ref of references) {
								addScopeSymbols(
									ref.from,
									usedNames,
									alreadyCheckedScopes,
									ignoredScopes
								);
							***REMOVED***
							const newName = findNewName(
								name,
								allUsedNames,
								usedNames,
								info.module.readableIdentifier(requestShortener)
							);
							allUsedNames.add(newName);
							info.internalNames.set(name, newName);
							topLevelDeclarations.add(newName);
							const source = /** @type {ReplaceSource***REMOVED*** */ (info.source);
							const allIdentifiers = new Set(
								references.map(r => r.identifier).concat(variable.identifiers)
							);
							for (const identifier of allIdentifiers) {
								const r = /** @type {Range***REMOVED*** */ (identifier.range);
								const path = getPathInAst(
									/** @type {NonNullable<ConcatenatedModuleInfo["ast"]>***REMOVED*** */
									(info.ast),
									identifier
								);
								if (path && path.length > 1) {
									const maybeProperty =
										path[1].type === "AssignmentPattern" &&
										path[1].left === path[0]
											? path[2]
											: path[1];
									if (
										maybeProperty.type === "Property" &&
										maybeProperty.shorthand
									) {
										source.insert(r[1], `: ${newName***REMOVED***`);
										continue;
									***REMOVED***
								***REMOVED***
								source.replace(r[0], r[1] - 1, newName);
							***REMOVED***
						***REMOVED*** else {
							allUsedNames.add(name);
							info.internalNames.set(name, name);
							topLevelDeclarations.add(name);
						***REMOVED***
					***REMOVED***
					let namespaceObjectName;
					if (info.namespaceExportSymbol) {
						namespaceObjectName = info.internalNames.get(
							info.namespaceExportSymbol
						);
					***REMOVED*** else {
						namespaceObjectName = findNewName(
							"namespaceObject",
							allUsedNames,
							namespaceObjectUsedNames,
							info.module.readableIdentifier(requestShortener)
						);
						allUsedNames.add(namespaceObjectName);
					***REMOVED***
					info.namespaceObjectName =
						/** @type {string***REMOVED*** */
						(namespaceObjectName);
					topLevelDeclarations.add(namespaceObjectName);
					break;
				***REMOVED***
				case "external": {
					const externalName = findNewName(
						"",
						allUsedNames,
						namespaceObjectUsedNames,
						info.module.readableIdentifier(requestShortener)
					);
					allUsedNames.add(externalName);
					info.name = externalName;
					topLevelDeclarations.add(externalName);
					break;
				***REMOVED***
			***REMOVED***
			const buildMeta = /** @type {BuildMeta***REMOVED*** */ (info.module.buildMeta);
			if (buildMeta.exportsType !== "namespace") {
				const externalNameInterop = findNewName(
					"namespaceObject",
					allUsedNames,
					namespaceObjectUsedNames,
					info.module.readableIdentifier(requestShortener)
				);
				allUsedNames.add(externalNameInterop);
				info.interopNamespaceObjectName = externalNameInterop;
				topLevelDeclarations.add(externalNameInterop);
			***REMOVED***
			if (
				buildMeta.exportsType === "default" &&
				buildMeta.defaultObject !== "redirect"
			) {
				const externalNameInterop = findNewName(
					"namespaceObject2",
					allUsedNames,
					namespaceObjectUsedNames,
					info.module.readableIdentifier(requestShortener)
				);
				allUsedNames.add(externalNameInterop);
				info.interopNamespaceObject2Name = externalNameInterop;
				topLevelDeclarations.add(externalNameInterop);
			***REMOVED***
			if (buildMeta.exportsType === "dynamic" || !buildMeta.exportsType) {
				const externalNameInterop = findNewName(
					"default",
					allUsedNames,
					namespaceObjectUsedNames,
					info.module.readableIdentifier(requestShortener)
				);
				allUsedNames.add(externalNameInterop);
				info.interopDefaultAccessName = externalNameInterop;
				topLevelDeclarations.add(externalNameInterop);
			***REMOVED***
		***REMOVED***

		// Find and replace references to modules
		for (const info of moduleToInfoMap.values()) {
			if (info.type === "concatenated") {
				const globalScope = /** @type {Scope***REMOVED*** */ (info.globalScope);
				for (const reference of globalScope.through) {
					const name = reference.identifier.name;
					const match = ConcatenationScope.matchModuleReference(name);
					if (match) {
						const referencedInfo = modulesWithInfo[match.index];
						if (referencedInfo.type === "reference")
							throw new Error("Module reference can't point to a reference");
						const finalName = getFinalName(
							moduleGraph,
							referencedInfo,
							match.ids,
							moduleToInfoMap,
							runtime,
							requestShortener,
							runtimeTemplate,
							neededNamespaceObjects,
							match.call,
							!match.directImport,
							/** @type {BuildMeta***REMOVED*** */
							(info.module.buildMeta).strictHarmonyModule,
							match.asiSafe
						);
						const r = /** @type {Range***REMOVED*** */ (reference.identifier.range);
						const source = /** @type {ReplaceSource***REMOVED*** */ (info.source);
						// range is extended by 2 chars to cover the appended "._"
						source.replace(r[0], r[1] + 1, finalName);
					***REMOVED***
				***REMOVED***
			***REMOVED***
		***REMOVED***

		// Map with all root exposed used exports
		/** @type {Map<string, (requestShortener: RequestShortener) => string>***REMOVED*** */
		const exportsMap = new Map();

		// Set with all root exposed unused exports
		/** @type {Set<string>***REMOVED*** */
		const unusedExports = new Set();

		const rootInfo =
			/** @type {ConcatenatedModuleInfo***REMOVED*** */
			(moduleToInfoMap.get(this.rootModule));
		const strictHarmonyModule =
			/** @type {BuildMeta***REMOVED*** */
			(rootInfo.module.buildMeta).strictHarmonyModule;
		const exportsInfo = moduleGraph.getExportsInfo(rootInfo.module);
		/** @type {Record<string, string>***REMOVED*** */
		const exportsFinalName = {***REMOVED***;
		for (const exportInfo of exportsInfo.orderedExports) {
			const name = exportInfo.name;
			if (exportInfo.provided === false) continue;
			const used = exportInfo.getUsedName(undefined, runtime);
			if (!used) {
				unusedExports.add(name);
				continue;
			***REMOVED***
			exportsMap.set(used, requestShortener => {
				try {
					const finalName = getFinalName(
						moduleGraph,
						rootInfo,
						[name],
						moduleToInfoMap,
						runtime,
						requestShortener,
						runtimeTemplate,
						neededNamespaceObjects,
						false,
						false,
						strictHarmonyModule,
						true
					);
					exportsFinalName[used] = finalName;
					return `/* ${
						exportInfo.isReexport() ? "reexport" : "binding"
					***REMOVED*** */ ${finalName***REMOVED***`;
				***REMOVED*** catch (err) {
					/** @type {Error***REMOVED*** */
					(err).message +=
						`\nwhile generating the root export '${name***REMOVED***' (used name: '${used***REMOVED***')`;
					throw err;
				***REMOVED***
			***REMOVED***);
		***REMOVED***

		const result = new ConcatSource();

		// add harmony compatibility flag (must be first because of possible circular dependencies)
		let shouldAddHarmonyFlag = false;
		if (
			moduleGraph.getExportsInfo(this).otherExportsInfo.getUsed(runtime) !==
			UsageState.Unused
		) {
			shouldAddHarmonyFlag = true;
		***REMOVED***

		// define exports
		if (exportsMap.size > 0) {
			const { exportsDefinitions ***REMOVED*** = ConcatenatedModule.getCompilationHooks(
				/** @type {Compilation***REMOVED*** */
				(this.compilation)
			);

			const definitions = [];
			for (const [key, value] of exportsMap) {
				definitions.push(
					`\n  ${propertyName(key)***REMOVED***: ${runtimeTemplate.returningFunction(
						value(requestShortener)
					)***REMOVED***`
				);
			***REMOVED***

			const shouldSkipRenderDefinitions = exportsDefinitions.call(
				exportsFinalName,
				this
			);

			if (!shouldSkipRenderDefinitions) {
				runtimeRequirements.add(RuntimeGlobals.exports);
				runtimeRequirements.add(RuntimeGlobals.definePropertyGetters);

				if (shouldAddHarmonyFlag) {
					result.add("// ESM COMPAT FLAG\n");
					result.add(
						runtimeTemplate.defineEsModuleFlagStatement({
							exportsArgument: this.exportsArgument,
							runtimeRequirements
						***REMOVED***)
					);
				***REMOVED***

				result.add("\n// EXPORTS\n");
				result.add(
					`${RuntimeGlobals.definePropertyGetters***REMOVED***(${
						this.exportsArgument
					***REMOVED***, {${definitions.join(",")***REMOVED***\n***REMOVED***);\n`
				);
			***REMOVED*** else {
				/** @type {BuildMeta***REMOVED*** */
				(this.buildMeta).exportsFinalName = exportsFinalName;
			***REMOVED***
		***REMOVED***

		// list unused exports
		if (unusedExports.size > 0) {
			result.add(
				`\n// UNUSED EXPORTS: ${joinIterableWithComma(unusedExports)***REMOVED***\n`
			);
		***REMOVED***

		// generate namespace objects
		const namespaceObjectSources = new Map();
		for (const info of neededNamespaceObjects) {
			if (info.namespaceExportSymbol) continue;
			const nsObj = [];
			const exportsInfo = moduleGraph.getExportsInfo(info.module);
			for (const exportInfo of exportsInfo.orderedExports) {
				if (exportInfo.provided === false) continue;
				const usedName = exportInfo.getUsedName(undefined, runtime);
				if (usedName) {
					const finalName = getFinalName(
						moduleGraph,
						info,
						[exportInfo.name],
						moduleToInfoMap,
						runtime,
						requestShortener,
						runtimeTemplate,
						neededNamespaceObjects,
						false,
						undefined,
						/** @type {BuildMeta***REMOVED*** */
						(info.module.buildMeta).strictHarmonyModule,
						true
					);
					nsObj.push(
						`\n  ${propertyName(usedName)***REMOVED***: ${runtimeTemplate.returningFunction(
							finalName
						)***REMOVED***`
					);
				***REMOVED***
			***REMOVED***
			const name = info.namespaceObjectName;
			const defineGetters =
				nsObj.length > 0
					? `${RuntimeGlobals.definePropertyGetters***REMOVED***(${name***REMOVED***, {${nsObj.join(
							","
						)***REMOVED***\n***REMOVED***);\n`
					: "";
			if (nsObj.length > 0)
				runtimeRequirements.add(RuntimeGlobals.definePropertyGetters);
			namespaceObjectSources.set(
				info,
				`
// NAMESPACE OBJECT: ${info.module.readableIdentifier(requestShortener)***REMOVED***
var ${name***REMOVED*** = {***REMOVED***;
${RuntimeGlobals.makeNamespaceObject***REMOVED***(${name***REMOVED***);
${defineGetters***REMOVED***`
			);
			runtimeRequirements.add(RuntimeGlobals.makeNamespaceObject);
		***REMOVED***

		// define required namespace objects (must be before evaluation modules)
		for (const info of modulesWithInfo) {
			if (info.type === "concatenated") {
				const source = namespaceObjectSources.get(info);
				if (!source) continue;
				result.add(source);
			***REMOVED***
		***REMOVED***

		const chunkInitFragments = [];

		// evaluate modules in order
		for (const rawInfo of modulesWithInfo) {
			let name;
			let isConditional = false;
			const info = rawInfo.type === "reference" ? rawInfo.target : rawInfo;
			switch (info.type) {
				case "concatenated": {
					result.add(
						`\n;// ${info.module.readableIdentifier(requestShortener)***REMOVED***\n`
					);
					result.add(/** @type {ReplaceSource***REMOVED*** */ (info.source));
					if (info.chunkInitFragments) {
						for (const f of info.chunkInitFragments) chunkInitFragments.push(f);
					***REMOVED***
					if (info.runtimeRequirements) {
						for (const r of info.runtimeRequirements) {
							runtimeRequirements.add(r);
						***REMOVED***
					***REMOVED***
					name = info.namespaceObjectName;
					break;
				***REMOVED***
				case "external": {
					result.add(
						`\n// EXTERNAL MODULE: ${info.module.readableIdentifier(
							requestShortener
						)***REMOVED***\n`
					);
					runtimeRequirements.add(RuntimeGlobals.require);
					const { runtimeCondition ***REMOVED*** =
						/** @type {ExternalModuleInfo | ReferenceToModuleInfo***REMOVED*** */
						(rawInfo);
					const condition = runtimeTemplate.runtimeConditionExpression({
						chunkGraph,
						runtimeCondition,
						runtime,
						runtimeRequirements
					***REMOVED***);
					if (condition !== "true") {
						isConditional = true;
						result.add(`if (${condition***REMOVED***) {\n`);
					***REMOVED***
					result.add(
						`var ${info.name***REMOVED*** = ${RuntimeGlobals.require***REMOVED***(${JSON.stringify(
							chunkGraph.getModuleId(info.module)
						)***REMOVED***);`
					);
					name = info.name;
					break;
				***REMOVED***
				default:
					// @ts-expect-error never is expected here
					throw new Error(`Unsupported concatenation entry type ${info.type***REMOVED***`);
			***REMOVED***
			if (info.interopNamespaceObjectUsed) {
				runtimeRequirements.add(RuntimeGlobals.createFakeNamespaceObject);
				result.add(
					`\nvar ${info.interopNamespaceObjectName***REMOVED*** = /*#__PURE__*/${RuntimeGlobals.createFakeNamespaceObject***REMOVED***(${name***REMOVED***, 2);`
				);
			***REMOVED***
			if (info.interopNamespaceObject2Used) {
				runtimeRequirements.add(RuntimeGlobals.createFakeNamespaceObject);
				result.add(
					`\nvar ${info.interopNamespaceObject2Name***REMOVED*** = /*#__PURE__*/${RuntimeGlobals.createFakeNamespaceObject***REMOVED***(${name***REMOVED***);`
				);
			***REMOVED***
			if (info.interopDefaultAccessUsed) {
				runtimeRequirements.add(RuntimeGlobals.compatGetDefaultExport);
				result.add(
					`\nvar ${info.interopDefaultAccessName***REMOVED*** = /*#__PURE__*/${RuntimeGlobals.compatGetDefaultExport***REMOVED***(${name***REMOVED***);`
				);
			***REMOVED***
			if (isConditional) {
				result.add("\n***REMOVED***");
			***REMOVED***
		***REMOVED***

		const data = new Map();
		if (chunkInitFragments.length > 0)
			data.set("chunkInitFragments", chunkInitFragments);
		data.set("topLevelDeclarations", topLevelDeclarations);

		/** @type {CodeGenerationResult***REMOVED*** */
		const resultEntry = {
			sources: new Map([["javascript", new CachedSource(result)]]),
			data,
			runtimeRequirements
		***REMOVED***;

		return resultEntry;
	***REMOVED***

	/**
	 * @param {Map<Module, ModuleInfo>***REMOVED*** modulesMap modulesMap
	 * @param {ModuleInfo***REMOVED*** info info
	 * @param {DependencyTemplates***REMOVED*** dependencyTemplates dependencyTemplates
	 * @param {RuntimeTemplate***REMOVED*** runtimeTemplate runtimeTemplate
	 * @param {ModuleGraph***REMOVED*** moduleGraph moduleGraph
	 * @param {ChunkGraph***REMOVED*** chunkGraph chunkGraph
	 * @param {RuntimeSpec***REMOVED*** runtime runtime
	 * @param {CodeGenerationResults***REMOVED*** codeGenerationResults codeGenerationResults
	 */
	_analyseModule(
		modulesMap,
		info,
		dependencyTemplates,
		runtimeTemplate,
		moduleGraph,
		chunkGraph,
		runtime,
		codeGenerationResults
	) {
		if (info.type === "concatenated") {
			const m = info.module;
			try {
				// Create a concatenation scope to track and capture information
				const concatenationScope = new ConcatenationScope(modulesMap, info);

				// TODO cache codeGeneration results
				const codeGenResult = m.codeGeneration({
					dependencyTemplates,
					runtimeTemplate,
					moduleGraph,
					chunkGraph,
					runtime,
					concatenationScope,
					codeGenerationResults,
					sourceTypes: JS_TYPES
				***REMOVED***);
				const source =
					/** @type {Source***REMOVED*** */
					(codeGenResult.sources.get("javascript"));
				const data = codeGenResult.data;
				const chunkInitFragments = data && data.get("chunkInitFragments");
				const code = source.source().toString();
				let ast;
				try {
					ast = JavascriptParser._parse(code, {
						sourceType: "module"
					***REMOVED***);
				***REMOVED*** catch (_err) {
					const err =
						/** @type {Error & { loc?: { line: number, column: number ***REMOVED*** ***REMOVED******REMOVED*** */
						(_err);
					if (
						err.loc &&
						typeof err.loc === "object" &&
						typeof err.loc.line === "number"
					) {
						const lineNumber = err.loc.line;
						const lines = code.split("\n");
						err.message += `\n| ${lines
							.slice(Math.max(0, lineNumber - 3), lineNumber + 2)
							.join("\n| ")***REMOVED***`;
					***REMOVED***
					throw err;
				***REMOVED***
				const scopeManager = eslintScope.analyze(ast, {
					ecmaVersion: 6,
					sourceType: "module",
					optimistic: true,
					ignoreEval: true,
					impliedStrict: true
				***REMOVED***);
				const globalScope = /** @type {Scope***REMOVED*** */ (scopeManager.acquire(ast));
				const moduleScope = globalScope.childScopes[0];
				const resultSource = new ReplaceSource(source);
				info.runtimeRequirements =
					/** @type {ReadOnlyRuntimeRequirements***REMOVED*** */
					(codeGenResult.runtimeRequirements);
				info.ast = ast;
				info.internalSource = source;
				info.source = resultSource;
				info.chunkInitFragments = chunkInitFragments;
				info.globalScope = globalScope;
				info.moduleScope = moduleScope;
			***REMOVED*** catch (err) {
				/** @type {Error***REMOVED*** */
				(err).message +=
					`\nwhile analyzing module ${m.identifier()***REMOVED*** for concatenation`;
				throw err;
			***REMOVED***
		***REMOVED***
	***REMOVED***

	/**
	 * @param {ModuleGraph***REMOVED*** moduleGraph the module graph
	 * @param {RuntimeSpec***REMOVED*** runtime the runtime
	 * @returns {[ModuleInfoOrReference[], Map<Module, ModuleInfo>]***REMOVED*** module info items
	 */
	_getModulesWithInfo(moduleGraph, runtime) {
		const orderedConcatenationList = this._createConcatenationList(
			this.rootModule,
			this._modules,
			runtime,
			moduleGraph
		);
		/** @type {Map<Module, ModuleInfo>***REMOVED*** */
		const map = new Map();
		const list = orderedConcatenationList.map((info, index) => {
			let item = map.get(info.module);
			if (item === undefined) {
				switch (info.type) {
					case "concatenated":
						item = {
							type: "concatenated",
							module: info.module,
							index,
							ast: undefined,
							internalSource: undefined,
							runtimeRequirements: undefined,
							source: undefined,
							globalScope: undefined,
							moduleScope: undefined,
							internalNames: new Map(),
							exportMap: undefined,
							rawExportMap: undefined,
							namespaceExportSymbol: undefined,
							namespaceObjectName: undefined,
							interopNamespaceObjectUsed: false,
							interopNamespaceObjectName: undefined,
							interopNamespaceObject2Used: false,
							interopNamespaceObject2Name: undefined,
							interopDefaultAccessUsed: false,
							interopDefaultAccessName: undefined
						***REMOVED***;
						break;
					case "external":
						item = {
							type: "external",
							module: info.module,
							runtimeCondition: info.runtimeCondition,
							index,
							name: undefined,
							interopNamespaceObjectUsed: false,
							interopNamespaceObjectName: undefined,
							interopNamespaceObject2Used: false,
							interopNamespaceObject2Name: undefined,
							interopDefaultAccessUsed: false,
							interopDefaultAccessName: undefined
						***REMOVED***;
						break;
					default:
						throw new Error(
							`Unsupported concatenation entry type ${info.type***REMOVED***`
						);
				***REMOVED***
				map.set(
					/** @type {ModuleInfo***REMOVED*** */ (item).module,
					/** @type {ModuleInfo***REMOVED*** */ (item)
				);
				return /** @type {ModuleInfo***REMOVED*** */ (item);
			***REMOVED***
			/** @type {ReferenceToModuleInfo***REMOVED*** */
			const ref = {
				type: "reference",
				runtimeCondition: info.runtimeCondition,
				target: item
			***REMOVED***;
			return ref;
		***REMOVED***);
		return [list, map];
	***REMOVED***

	/**
	 * @param {Hash***REMOVED*** hash the hash used to track dependencies
	 * @param {UpdateHashContext***REMOVED*** context context
	 * @returns {void***REMOVED***
	 */
	updateHash(hash, context) {
		const { chunkGraph, runtime ***REMOVED*** = context;
		for (const info of this._createConcatenationList(
			this.rootModule,
			this._modules,
			intersectRuntime(runtime, this._runtime),
			chunkGraph.moduleGraph
		)) {
			switch (info.type) {
				case "concatenated":
					info.module.updateHash(hash, context);
					break;
				case "external":
					hash.update(`${chunkGraph.getModuleId(info.module)***REMOVED***`);
					// TODO runtimeCondition
					break;
			***REMOVED***
		***REMOVED***
		super.updateHash(hash, context);
	***REMOVED***

	/**
	 * @param {ObjectDeserializerContext***REMOVED*** context context
	 * @returns {ConcatenatedModule***REMOVED*** ConcatenatedModule
	 */
	static deserialize(context) {
		const obj = new ConcatenatedModule({
			identifier: /** @type {EXPECTED_ANY***REMOVED*** */ (undefined),
			rootModule: /** @type {EXPECTED_ANY***REMOVED*** */ (undefined),
			modules: /** @type {EXPECTED_ANY***REMOVED*** */ (undefined),
			runtime: undefined,
			compilation: /** @type {EXPECTED_ANY***REMOVED*** */ (undefined)
		***REMOVED***);
		obj.deserialize(context);
		return obj;
	***REMOVED***
***REMOVED***

makeSerializable(ConcatenatedModule, "webpack/lib/optimize/ConcatenatedModule");

module.exports = ConcatenatedModule;
