/* jshint quotmark: false */
'use strict';

var FS = require('fs'),
    PATH = require('path'),
    chalk = require('chalk'),
    mkdirp = require('mkdirp'),
    promisify = require('util.promisify'),
    readdir = promisify(FS.readdir),
    readFile = promisify(FS.readFile),
    writeFile = promisify(FS.writeFile),
    SVGO = require('../svgo.js'),
    YAML = require('js-yaml'),
    PKG = require('../../package.json'),
    encodeSVGDatauri = require('./tools.js').encodeSVGDatauri,
    decodeSVGDatauri = require('./tools.js').decodeSVGDatauri,
    checkIsDir = require('./tools.js').checkIsDir,
    regSVGFile = /\.svg$/,
    noop = () => {***REMOVED***,
    svgo;

/**
 * Command-Option-Argument.
 *
 * @see https://github.com/veged/coa
 */
module.exports = require('coa').Cmd()
    .helpful()
    .name(PKG.name)
    .title(PKG.description)
    .opt()
        .name('version').title('Version')
        .short('v').long('version')
        .only()
        .flag()
        .act(function() {
            // output the version to stdout instead of stderr if returned
            process.stdout.write(PKG.version + '\n');
            // coa will run `.toString` on the returned value and send it to stderr
            return '';
        ***REMOVED***)
        .end()
    .opt()
        .name('input').title('Input file, "-" for STDIN')
        .short('i').long('input')
        .arr()
        .val(function(val) {
            return val || this.reject("Option '--input' must have a value.");
        ***REMOVED***)
        .end()
    .opt()
        .name('string').title('Input SVG data string')
        .short('s').long('string')
        .end()
    .opt()
        .name('folder').title('Input folder, optimize and rewrite all *.svg files')
        .short('f').long('folder')
        .val(function(val) {
            return val || this.reject("Option '--folder' must have a value.");
        ***REMOVED***)
        .end()
    .opt()
        .name('output').title('Output file or folder (by default the same as the input), "-" for STDOUT')
        .short('o').long('output')
        .arr()
        .val(function(val) {
            return val || this.reject("Option '--output' must have a value.");
        ***REMOVED***)
        .end()
    .opt()
        .name('precision').title('Set number of digits in the fractional part, overrides plugins params')
        .short('p').long('precision')
        .val(function(val) {
            return !isNaN(val) ? val : this.reject("Option '--precision' must be an integer number");
        ***REMOVED***)
        .end()
    .opt()
        .name('config').title('Config file or JSON string to extend or replace default')
        .long('config')
        .val(function(val) {
            return val || this.reject("Option '--config' must have a value.");
        ***REMOVED***)
        .end()
    .opt()
        .name('disable').title('Disable plugin by name, "--disable={PLUGIN1,PLUGIN2***REMOVED***" for multiple plugins (*nix)')
        .long('disable')
        .arr()
        .val(function(val) {
            return val || this.reject("Option '--disable' must have a value.");
        ***REMOVED***)
        .end()
    .opt()
        .name('enable').title('Enable plugin by name, "--enable={PLUGIN3,PLUGIN4***REMOVED***" for multiple plugins (*nix)')
        .long('enable')
        .arr()
        .val(function(val) {
            return val || this.reject("Option '--enable' must have a value.");
        ***REMOVED***)
        .end()
    .opt()
        .name('datauri').title('Output as Data URI string (base64, URI encoded or unencoded)')
        .long('datauri')
        .val(function(val) {
            return val || this.reject("Option '--datauri' must have one of the following values: 'base64', 'enc' or 'unenc'");
        ***REMOVED***)
        .end()
    .opt()
        .name('multipass').title('Pass over SVGs multiple times to ensure all optimizations are applied')
        .long('multipass')
        .flag()
        .end()
    .opt()
        .name('pretty').title('Make SVG pretty printed')
        .long('pretty')
        .flag()
        .end()
    .opt()
        .name('indent').title('Indent number when pretty printing SVGs')
        .long('indent')
        .val(function(val) {
            return !isNaN(val) ? val : this.reject("Option '--indent' must be an integer number");
        ***REMOVED***)
        .end()
    .opt()
        .name('recursive').title('Use with \'-f\'. Optimizes *.svg files in folders recursively.')
        .short('r').long('recursive')
        .flag()
        .end()
    .opt()
        .name('quiet').title('Only output error messages, not regular status messages')
        .short('q').long('quiet')
        .flag()
        .end()
    .opt()
        .name('show-plugins').title('Show available plugins and exit')
        .long('show-plugins')
        .flag()
        .end()
    .arg()
        .name('input').title('Alias to --input')
        .arr()
        .end()
    .act(function(opts, args) {
        var input = opts.input || args.input,
            output = opts.output,
            config = {***REMOVED***;

        // --show-plugins
        if (opts['show-plugins']) {
            showAvailablePlugins();
            return;
        ***REMOVED***

        // w/o anything
        if (
            (!input || input[0] === '-') &&
            !opts.string &&
            !opts.stdin &&
            !opts.folder &&
            process.stdin.isTTY === true
        ) return this.usage();

        if (typeof process == 'object' && process.versions && process.versions.node && PKG && PKG.engines.node) {
            var nodeVersion = String(PKG.engines.node).match(/\d*(\.\d+)*/)[0];
            if (parseFloat(process.versions.node) < parseFloat(nodeVersion)) {
                return printErrorAndExit(`Error: ${PKG.name***REMOVED*** requires Node.js version ${nodeVersion***REMOVED*** or higher.`);
            ***REMOVED***
        ***REMOVED***

        // --config
        if (opts.config) {
            // string
            if (opts.config.charAt(0) === '{') {
                try {
                    config = JSON.parse(opts.config);
                ***REMOVED*** catch (e) {
                    return printErrorAndExit(`Error: Couldn't parse config JSON.\n${String(e)***REMOVED***`);
                ***REMOVED***
            // external file
            ***REMOVED*** else {
                var configPath = PATH.resolve(opts.config),
                    configData;
                try {
                    // require() adds some weird output on YML files
                    configData = FS.readFileSync(configPath, 'utf8');
                    config = JSON.parse(configData);
                ***REMOVED*** catch (err) {
                    if (err.code === 'ENOENT') {
                        return printErrorAndExit(`Error: couldn't find config file '${opts.config***REMOVED***'.`);
                    ***REMOVED*** else if (err.code === 'EISDIR') {
                        return printErrorAndExit(`Error: directory '${opts.config***REMOVED***' is not a config file.`);
                    ***REMOVED***
                    config = YAML.safeLoad(configData);
                    config.__DIR = PATH.dirname(configPath); // will use it to resolve custom plugins defined via path

                    if (!config || Array.isArray(config)) {
                        return printErrorAndExit(`Error: invalid config file '${opts.config***REMOVED***'.`);
                    ***REMOVED***
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***

        // --quiet
        if (opts.quiet) {
            config.quiet = opts.quiet;
        ***REMOVED***

        // --recursive
        if (opts.recursive) {
            config.recursive = opts.recursive;
        ***REMOVED***

        // --precision
        if (opts.precision) {
            var precision = Math.min(Math.max(0, parseInt(opts.precision)), 20);
            if (!isNaN(precision)) {
                config.floatPrecision = precision;
            ***REMOVED***
        ***REMOVED***

        // --disable
        if (opts.disable) {
            changePluginsState(opts.disable, false, config);
        ***REMOVED***

        // --enable
        if (opts.enable) {
            changePluginsState(opts.enable, true, config);
        ***REMOVED***

        // --multipass
        if (opts.multipass) {
            config.multipass = true;
        ***REMOVED***

        // --pretty
        if (opts.pretty) {
            config.js2svg = config.js2svg || {***REMOVED***;
            config.js2svg.pretty = true;
            var indent;
            if (opts.indent && !isNaN(indent = parseInt(opts.indent))) {
                config.js2svg.indent = indent;
            ***REMOVED***
        ***REMOVED***

        svgo = new SVGO(config);

        // --output
        if (output) {
            if (input && input[0] != '-') {
                if (output.length == 1 && checkIsDir(output[0])) {
                    var dir = output[0];
                    for (var i = 0; i < input.length; i++) {
                        output[i] = checkIsDir(input[i]) ? input[i] : PATH.resolve(dir, PATH.basename(input[i]));
                    ***REMOVED***
                ***REMOVED*** else if (output.length < input.length) {
                    output = output.concat(input.slice(output.length));
                ***REMOVED***
            ***REMOVED***
        ***REMOVED*** else if (input) {
            output = input;
        ***REMOVED*** else if (opts.string) {
            output = '-';
        ***REMOVED***

        if (opts.datauri) {
            config.datauri = opts.datauri;
        ***REMOVED***

        // --folder
        if (opts.folder) {
            var ouputFolder = output && output[0] || opts.folder;
            return optimizeFolder(config, opts.folder, ouputFolder).then(noop, printErrorAndExit);
        ***REMOVED***

        // --input
        if (input) {
            // STDIN
            if (input[0] === '-') {
                return new Promise((resolve, reject) => {
                    var data = '',
                        file = output[0];

                    process.stdin
                        .on('data', chunk => data += chunk)
                        .once('end', () => processSVGData(config, {input: 'string'***REMOVED***, data, file).then(resolve, reject));
                ***REMOVED***);
            // file
            ***REMOVED*** else {
                return Promise.all(input.map((file, n) => optimizeFile(config, file, output[n])))
                    .then(noop, printErrorAndExit);
            ***REMOVED***

        // --string
        ***REMOVED*** else if (opts.string) {
            var data = decodeSVGDatauri(opts.string);

            return processSVGData(config, {input: 'string'***REMOVED***, data, output[0]);
        ***REMOVED***
    ***REMOVED***);

/**
 * Change plugins state by names array.
 *
 * @param {Array***REMOVED*** names plugins names
 * @param {Boolean***REMOVED*** state active state
 * @param {Object***REMOVED*** config original config
 * @return {Object***REMOVED*** changed config
 */
function changePluginsState(names, state, config) {
    names.forEach(flattenPluginsCbk);

    // extend config
    if (config.plugins) {
        for (var name of names) {
            var matched = false,
                key;

            for (var plugin of config.plugins) {
                // get plugin name
                if (typeof plugin === 'object') {
                    key = Object.keys(plugin)[0];
                ***REMOVED*** else {
                    key = plugin;
                ***REMOVED***

                // if there is such a plugin name
                if (key === name) {
                    // don't replace plugin's params with true
                    if (typeof plugin[key] !== 'object' || !state) {
                        plugin[key] = state;
                    ***REMOVED***
                    // mark it as matched
                    matched = true;
                ***REMOVED***
            ***REMOVED***

            // if not matched and current config is not full
            if (!matched && !config.full) {
                // push new plugin Object
                config.plugins.push({ [name]: state ***REMOVED***);
                matched = true;
            ***REMOVED***
        ***REMOVED***
    // just push
    ***REMOVED*** else {
        config.plugins = names.map(name => ({ [name]: state ***REMOVED***));
    ***REMOVED***
    return config;
***REMOVED***

/**
 * Flatten an array of plugins by invoking this callback on each element
 * whose value may be a comma separated list of plugins.
 *
 * @param {String***REMOVED*** name Plugin name
 * @param {Number***REMOVED*** index Plugin index
 * @param {Array***REMOVED*** names Plugins being traversed
 */
function flattenPluginsCbk(name, index, names)
{
    var split = name.split(',');

    if(split.length > 1) {
        names[index] = split.shift();
        names.push.apply(names, split);
    ***REMOVED***

***REMOVED***

/**
 * Optimize SVG files in a directory.
 * @param {Object***REMOVED*** config options
 * @param {string***REMOVED*** dir input directory
 * @param {string***REMOVED*** output output directory
 * @return {Promise***REMOVED***
 */
function optimizeFolder(config, dir, output) {
    if (!config.quiet) {
        console.log(`Processing directory '${dir***REMOVED***':\n`);
    ***REMOVED***
    return readdir(dir).then(files => processDirectory(config, dir, files, output));
***REMOVED***

/**
 * Process given files, take only SVG.
 * @param {Object***REMOVED*** config options
 * @param {string***REMOVED*** dir input directory
 * @param {Array***REMOVED*** files list of file names in the directory
 * @param {string***REMOVED*** output output directory
 * @return {Promise***REMOVED***
 */
function processDirectory(config, dir, files, output) {
    // take only *.svg files, recursively if necessary
    var svgFilesDescriptions = getFilesDescriptions(config, dir, files, output);

    return svgFilesDescriptions.length ?
        Promise.all(svgFilesDescriptions.map(fileDescription => optimizeFile(config, fileDescription.inputPath, fileDescription.outputPath))) :
        Promise.reject(new Error(`No SVG files have been found in '${dir***REMOVED***' directory.`));
***REMOVED***

/**
 * Get svg files descriptions
 * @param {Object***REMOVED*** config options
 * @param {string***REMOVED*** dir input directory
 * @param {Array***REMOVED*** files list of file names in the directory
 * @param {string***REMOVED*** output output directory
 * @return {Array***REMOVED***
 */
function getFilesDescriptions(config, dir, files, output) {
    const filesInThisFolder = files
        .filter(name => regSVGFile.test(name))
        .map(name => ({
            inputPath: PATH.resolve(dir, name),
            outputPath: PATH.resolve(output, name),
        ***REMOVED***));

    return config.recursive ?
        [].concat(
            filesInThisFolder,
            files
                .filter(name => checkIsDir(PATH.resolve(dir, name)))
                .map(subFolderName => {
                    const subFolderPath = PATH.resolve(dir, subFolderName);
                    const subFolderFiles = FS.readdirSync(subFolderPath);
                    const subFolderOutput = PATH.resolve(output, subFolderName);
                    return getFilesDescriptions(config, subFolderPath, subFolderFiles, subFolderOutput);
                ***REMOVED***)
                .reduce((a, b) => [].concat(a, b), [])
        ) :
        filesInThisFolder;
***REMOVED***

/**
 * Read SVG file and pass to processing.
 * @param {Object***REMOVED*** config options
 * @param {string***REMOVED*** file
 * @param {string***REMOVED*** output
 * @return {Promise***REMOVED***
 */
function optimizeFile(config, file, output) {
    return readFile(file, 'utf8').then(
        data => processSVGData(config, {input: 'file', path: file***REMOVED***, data, output, file),
        error => checkOptimizeFileError(config, file, output, error)
    );
***REMOVED***

/**
 * Optimize SVG data.
 * @param {Object***REMOVED*** config options
 * @param {string***REMOVED*** data SVG content to optimize
 * @param {string***REMOVED*** output where to write optimized file
 * @param {string***REMOVED*** [input] input file name (being used if output is a directory)
 * @return {Promise***REMOVED***
 */
function processSVGData(config, info, data, output, input) {
    var startTime = Date.now(),
        prevFileSize = Buffer.byteLength(data, 'utf8');

    return svgo.optimize(data, info).then(function(result) {
        if (config.datauri) {
            result.data = encodeSVGDatauri(result.data, config.datauri);
        ***REMOVED***
        var resultFileSize = Buffer.byteLength(result.data, 'utf8'),
            processingTime = Date.now() - startTime;

        return writeOutput(input, output, result.data).then(function() {
            if (!config.quiet && output != '-') {
                if (input) {
                    console.log(`\n${PATH.basename(input)***REMOVED***:`);
                ***REMOVED***
                printTimeInfo(processingTime);
                printProfitInfo(prevFileSize, resultFileSize);
            ***REMOVED***
        ***REMOVED***,
        error => Promise.reject(new Error(error.code === 'ENOTDIR' ? `Error: output '${output***REMOVED***' is not a directory.` : error)));
    ***REMOVED***);
***REMOVED***

/**
 * Write result of an optimization.
 * @param {string***REMOVED*** input
 * @param {string***REMOVED*** output output file name. '-' for stdout
 * @param {string***REMOVED*** data data to write
 * @return {Promise***REMOVED***
 */
function writeOutput(input, output, data) {
    if (output == '-') {
        console.log(data);
        return Promise.resolve();
    ***REMOVED***

    mkdirp.sync(PATH.dirname(output));

    return writeFile(output, data, 'utf8').catch(error => checkWriteFileError(input, output, data, error));
***REMOVED***


/**
 * Write a time taken by optimization.
 * @param {number***REMOVED*** time time in milliseconds.
 */
function printTimeInfo(time) {
    console.log(`Done in ${time***REMOVED*** ms!`);
***REMOVED***

/**
 * Write optimizing information in human readable format.
 * @param {number***REMOVED*** inBytes size before optimization.
 * @param {number***REMOVED*** outBytes size after optimization.
 */
function printProfitInfo(inBytes, outBytes) {
    var profitPercents = 100 - outBytes * 100 / inBytes;

    console.log(
        (Math.round((inBytes / 1024) * 1000) / 1000) + ' KiB' +
        (profitPercents < 0 ? ' + ' : ' - ') +
        chalk.green(Math.abs((Math.round(profitPercents * 10) / 10)) + '%') + ' = ' +
        (Math.round((outBytes / 1024) * 1000) / 1000) + ' KiB'
    );
***REMOVED***

/**
 * Check for errors, if it's a dir optimize the dir.
 * @param {Object***REMOVED*** config
 * @param {string***REMOVED*** input
 * @param {string***REMOVED*** output
 * @param {Error***REMOVED*** error
 * @return {Promise***REMOVED***
 */
function checkOptimizeFileError(config, input, output, error) {
    if (error.code == 'EISDIR') {
        return optimizeFolder(config, input, output);
    ***REMOVED*** else if (error.code == 'ENOENT') {
        return Promise.reject(new Error(`Error: no such file or directory '${error.path***REMOVED***'.`));
    ***REMOVED***
    return Promise.reject(error);
***REMOVED***

/**
 * Check for saving file error. If the output is a dir, then write file there.
 * @param {string***REMOVED*** input
 * @param {string***REMOVED*** output
 * @param {string***REMOVED*** data
 * @param {Error***REMOVED*** error
 * @return {Promise***REMOVED***
 */
function checkWriteFileError(input, output, data, error) {
    if (error.code == 'EISDIR' && input) {
        return writeFile(PATH.resolve(output, PATH.basename(input)), data, 'utf8');
    ***REMOVED*** else {
        return Promise.reject(error);
    ***REMOVED***
***REMOVED***

/**
 * Show list of available plugins with short description.
 */
function showAvailablePlugins() {
    console.log('Currently available plugins:');

    // Flatten an array of plugins grouped per type, sort and write output
    var list = [].concat.apply([], new SVGO().config.plugins)
        .sort((a, b) => a.name.localeCompare(b.name))
        .map(plugin => ` [ ${chalk.green(plugin.name)***REMOVED*** ] ${plugin.description***REMOVED***`)
        .join('\n');
    console.log(list);
***REMOVED***

/**
 * Write an error and exit.
 * @param {Error***REMOVED*** error
 * @return {Promise***REMOVED*** a promise for running tests
 */
function printErrorAndExit(error) {
    console.error(chalk.red(error));
    process.exit(1);
    return Promise.reject(error); // for tests
***REMOVED***
