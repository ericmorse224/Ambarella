/*
  Copyright 2018 Google LLC

  Use of this source code is governed by an MIT-style
  license that can be found in the LICENSE file or at
  https://opensource.org/licenses/MIT.
*/
import { WorkboxError ***REMOVED*** from 'workbox-core/_private/WorkboxError.js';
import { logger ***REMOVED*** from 'workbox-core/_private/logger.js';
import { assert ***REMOVED*** from 'workbox-core/_private/assert.js';
import { getFriendlyURL ***REMOVED*** from 'workbox-core/_private/getFriendlyURL.js';
import { QueueStore ***REMOVED*** from './lib/QueueStore.js';
import { StorableRequest ***REMOVED*** from './lib/StorableRequest.js';
import './_version.js';
const TAG_PREFIX = 'workbox-background-sync';
const MAX_RETENTION_TIME = 60 * 24 * 7; // 7 days in minutes
const queueNames = new Set();
/**
 * Converts a QueueStore entry into the format exposed by Queue. This entails
 * converting the request data into a real request and omitting the `id` and
 * `queueName` properties.
 *
 * @param {UnidentifiedQueueStoreEntry***REMOVED*** queueStoreEntry
 * @return {Queue***REMOVED***
 * @private
 */
const convertEntry = (queueStoreEntry) => {
    const queueEntry = {
        request: new StorableRequest(queueStoreEntry.requestData).toRequest(),
        timestamp: queueStoreEntry.timestamp,
    ***REMOVED***;
    if (queueStoreEntry.metadata) {
        queueEntry.metadata = queueStoreEntry.metadata;
    ***REMOVED***
    return queueEntry;
***REMOVED***;
/**
 * A class to manage storing failed requests in IndexedDB and retrying them
 * later. All parts of the storing and replaying process are observable via
 * callbacks.
 *
 * @memberof workbox-background-sync
 */
class Queue {
    /**
     * Creates an instance of Queue with the given options
     *
     * @param {string***REMOVED*** name The unique name for this queue. This name must be
     *     unique as it's used to register sync events and store requests
     *     in IndexedDB specific to this instance. An error will be thrown if
     *     a duplicate name is detected.
     * @param {Object***REMOVED*** [options]
     * @param {Function***REMOVED*** [options.onSync] A function that gets invoked whenever
     *     the 'sync' event fires. The function is invoked with an object
     *     containing the `queue` property (referencing this instance), and you
     *     can use the callback to customize the replay behavior of the queue.
     *     When not set the `replayRequests()` method is called.
     *     Note: if the replay fails after a sync event, make sure you throw an
     *     error, so the browser knows to retry the sync event later.
     * @param {number***REMOVED*** [options.maxRetentionTime=7 days] The amount of time (in
     *     minutes) a request may be retried. After this amount of time has
     *     passed, the request will be deleted from the queue.
     * @param {boolean***REMOVED*** [options.forceSyncFallback=false] If `true`, instead
     *     of attempting to use background sync events, always attempt to replay
     *     queued request at service worker startup. Most folks will not need
     *     this, unless you explicitly target a runtime like Electron that
     *     exposes the interfaces for background sync, but does not have a working
     *     implementation.
     */
    constructor(name, { forceSyncFallback, onSync, maxRetentionTime ***REMOVED*** = {***REMOVED***) {
        this._syncInProgress = false;
        this._requestsAddedDuringSync = false;
        // Ensure the store name is not already being used
        if (queueNames.has(name)) {
            throw new WorkboxError('duplicate-queue-name', { name ***REMOVED***);
        ***REMOVED***
        else {
            queueNames.add(name);
        ***REMOVED***
        this._name = name;
        this._onSync = onSync || this.replayRequests;
        this._maxRetentionTime = maxRetentionTime || MAX_RETENTION_TIME;
        this._forceSyncFallback = Boolean(forceSyncFallback);
        this._queueStore = new QueueStore(this._name);
        this._addSyncListener();
    ***REMOVED***
    /**
     * @return {string***REMOVED***
     */
    get name() {
        return this._name;
    ***REMOVED***
    /**
     * Stores the passed request in IndexedDB (with its timestamp and any
     * metadata) at the end of the queue.
     *
     * @param {QueueEntry***REMOVED*** entry
     * @param {Request***REMOVED*** entry.request The request to store in the queue.
     * @param {Object***REMOVED*** [entry.metadata] Any metadata you want associated with the
     *     stored request. When requests are replayed you'll have access to this
     *     metadata object in case you need to modify the request beforehand.
     * @param {number***REMOVED*** [entry.timestamp] The timestamp (Epoch time in
     *     milliseconds) when the request was first added to the queue. This is
     *     used along with `maxRetentionTime` to remove outdated requests. In
     *     general you don't need to set this value, as it's automatically set
     *     for you (defaulting to `Date.now()`), but you can update it if you
     *     don't want particular requests to expire.
     */
    async pushRequest(entry) {
        if (process.env.NODE_ENV !== 'production') {
            assert.isType(entry, 'object', {
                moduleName: 'workbox-background-sync',
                className: 'Queue',
                funcName: 'pushRequest',
                paramName: 'entry',
            ***REMOVED***);
            assert.isInstance(entry.request, Request, {
                moduleName: 'workbox-background-sync',
                className: 'Queue',
                funcName: 'pushRequest',
                paramName: 'entry.request',
            ***REMOVED***);
        ***REMOVED***
        await this._addRequest(entry, 'push');
    ***REMOVED***
    /**
     * Stores the passed request in IndexedDB (with its timestamp and any
     * metadata) at the beginning of the queue.
     *
     * @param {QueueEntry***REMOVED*** entry
     * @param {Request***REMOVED*** entry.request The request to store in the queue.
     * @param {Object***REMOVED*** [entry.metadata] Any metadata you want associated with the
     *     stored request. When requests are replayed you'll have access to this
     *     metadata object in case you need to modify the request beforehand.
     * @param {number***REMOVED*** [entry.timestamp] The timestamp (Epoch time in
     *     milliseconds) when the request was first added to the queue. This is
     *     used along with `maxRetentionTime` to remove outdated requests. In
     *     general you don't need to set this value, as it's automatically set
     *     for you (defaulting to `Date.now()`), but you can update it if you
     *     don't want particular requests to expire.
     */
    async unshiftRequest(entry) {
        if (process.env.NODE_ENV !== 'production') {
            assert.isType(entry, 'object', {
                moduleName: 'workbox-background-sync',
                className: 'Queue',
                funcName: 'unshiftRequest',
                paramName: 'entry',
            ***REMOVED***);
            assert.isInstance(entry.request, Request, {
                moduleName: 'workbox-background-sync',
                className: 'Queue',
                funcName: 'unshiftRequest',
                paramName: 'entry.request',
            ***REMOVED***);
        ***REMOVED***
        await this._addRequest(entry, 'unshift');
    ***REMOVED***
    /**
     * Removes and returns the last request in the queue (along with its
     * timestamp and any metadata). The returned object takes the form:
     * `{request, timestamp, metadata***REMOVED***`.
     *
     * @return {Promise<QueueEntry | undefined>***REMOVED***
     */
    async popRequest() {
        return this._removeRequest('pop');
    ***REMOVED***
    /**
     * Removes and returns the first request in the queue (along with its
     * timestamp and any metadata). The returned object takes the form:
     * `{request, timestamp, metadata***REMOVED***`.
     *
     * @return {Promise<QueueEntry | undefined>***REMOVED***
     */
    async shiftRequest() {
        return this._removeRequest('shift');
    ***REMOVED***
    /**
     * Returns all the entries that have not expired (per `maxRetentionTime`).
     * Any expired entries are removed from the queue.
     *
     * @return {Promise<Array<QueueEntry>>***REMOVED***
     */
    async getAll() {
        const allEntries = await this._queueStore.getAll();
        const now = Date.now();
        const unexpiredEntries = [];
        for (const entry of allEntries) {
            // Ignore requests older than maxRetentionTime. Call this function
            // recursively until an unexpired request is found.
            const maxRetentionTimeInMs = this._maxRetentionTime * 60 * 1000;
            if (now - entry.timestamp > maxRetentionTimeInMs) {
                await this._queueStore.deleteEntry(entry.id);
            ***REMOVED***
            else {
                unexpiredEntries.push(convertEntry(entry));
            ***REMOVED***
        ***REMOVED***
        return unexpiredEntries;
    ***REMOVED***
    /**
     * Returns the number of entries present in the queue.
     * Note that expired entries (per `maxRetentionTime`) are also included in this count.
     *
     * @return {Promise<number>***REMOVED***
     */
    async size() {
        return await this._queueStore.size();
    ***REMOVED***
    /**
     * Adds the entry to the QueueStore and registers for a sync event.
     *
     * @param {Object***REMOVED*** entry
     * @param {Request***REMOVED*** entry.request
     * @param {Object***REMOVED*** [entry.metadata]
     * @param {number***REMOVED*** [entry.timestamp=Date.now()]
     * @param {string***REMOVED*** operation ('push' or 'unshift')
     * @private
     */
    async _addRequest({ request, metadata, timestamp = Date.now() ***REMOVED***, operation) {
        const storableRequest = await StorableRequest.fromRequest(request.clone());
        const entry = {
            requestData: storableRequest.toObject(),
            timestamp,
        ***REMOVED***;
        // Only include metadata if it's present.
        if (metadata) {
            entry.metadata = metadata;
        ***REMOVED***
        switch (operation) {
            case 'push':
                await this._queueStore.pushEntry(entry);
                break;
            case 'unshift':
                await this._queueStore.unshiftEntry(entry);
                break;
        ***REMOVED***
        if (process.env.NODE_ENV !== 'production') {
            logger.log(`Request for '${getFriendlyURL(request.url)***REMOVED***' has ` +
                `been added to background sync queue '${this._name***REMOVED***'.`);
        ***REMOVED***
        // Don't register for a sync if we're in the middle of a sync. Instead,
        // we wait until the sync is complete and call register if
        // `this._requestsAddedDuringSync` is true.
        if (this._syncInProgress) {
            this._requestsAddedDuringSync = true;
        ***REMOVED***
        else {
            await this.registerSync();
        ***REMOVED***
    ***REMOVED***
    /**
     * Removes and returns the first or last (depending on `operation`) entry
     * from the QueueStore that's not older than the `maxRetentionTime`.
     *
     * @param {string***REMOVED*** operation ('pop' or 'shift')
     * @return {Object|undefined***REMOVED***
     * @private
     */
    async _removeRequest(operation) {
        const now = Date.now();
        let entry;
        switch (operation) {
            case 'pop':
                entry = await this._queueStore.popEntry();
                break;
            case 'shift':
                entry = await this._queueStore.shiftEntry();
                break;
        ***REMOVED***
        if (entry) {
            // Ignore requests older than maxRetentionTime. Call this function
            // recursively until an unexpired request is found.
            const maxRetentionTimeInMs = this._maxRetentionTime * 60 * 1000;
            if (now - entry.timestamp > maxRetentionTimeInMs) {
                return this._removeRequest(operation);
            ***REMOVED***
            return convertEntry(entry);
        ***REMOVED***
        else {
            return undefined;
        ***REMOVED***
    ***REMOVED***
    /**
     * Loops through each request in the queue and attempts to re-fetch it.
     * If any request fails to re-fetch, it's put back in the same position in
     * the queue (which registers a retry for the next sync event).
     */
    async replayRequests() {
        let entry;
        while ((entry = await this.shiftRequest())) {
            try {
                await fetch(entry.request.clone());
                if (process.env.NODE_ENV !== 'production') {
                    logger.log(`Request for '${getFriendlyURL(entry.request.url)***REMOVED***' ` +
                        `has been replayed in queue '${this._name***REMOVED***'`);
                ***REMOVED***
            ***REMOVED***
            catch (error) {
                await this.unshiftRequest(entry);
                if (process.env.NODE_ENV !== 'production') {
                    logger.log(`Request for '${getFriendlyURL(entry.request.url)***REMOVED***' ` +
                        `failed to replay, putting it back in queue '${this._name***REMOVED***'`);
                ***REMOVED***
                throw new WorkboxError('queue-replay-failed', { name: this._name ***REMOVED***);
            ***REMOVED***
        ***REMOVED***
        if (process.env.NODE_ENV !== 'production') {
            logger.log(`All requests in queue '${this.name***REMOVED***' have successfully ` +
                `replayed; the queue is now empty!`);
        ***REMOVED***
    ***REMOVED***
    /**
     * Registers a sync event with a tag unique to this instance.
     */
    async registerSync() {
        // See https://github.com/GoogleChrome/workbox/issues/2393
        if ('sync' in self.registration && !this._forceSyncFallback) {
            try {
                await self.registration.sync.register(`${TAG_PREFIX***REMOVED***:${this._name***REMOVED***`);
            ***REMOVED***
            catch (err) {
                // This means the registration failed for some reason, possibly due to
                // the user disabling it.
                if (process.env.NODE_ENV !== 'production') {
                    logger.warn(`Unable to register sync event for '${this._name***REMOVED***'.`, err);
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***
    /**
     * In sync-supporting browsers, this adds a listener for the sync event.
     * In non-sync-supporting browsers, or if _forceSyncFallback is true, this
     * will retry the queue on service worker startup.
     *
     * @private
     */
    _addSyncListener() {
        // See https://github.com/GoogleChrome/workbox/issues/2393
        if ('sync' in self.registration && !this._forceSyncFallback) {
            self.addEventListener('sync', (event) => {
                if (event.tag === `${TAG_PREFIX***REMOVED***:${this._name***REMOVED***`) {
                    if (process.env.NODE_ENV !== 'production') {
                        logger.log(`Background sync for tag '${event.tag***REMOVED***' ` + `has been received`);
                    ***REMOVED***
                    const syncComplete = async () => {
                        this._syncInProgress = true;
                        let syncError;
                        try {
                            await this._onSync({ queue: this ***REMOVED***);
                        ***REMOVED***
                        catch (error) {
                            if (error instanceof Error) {
                                syncError = error;
                                // Rethrow the error. Note: the logic in the finally clause
                                // will run before this gets rethrown.
                                throw syncError;
                            ***REMOVED***
                        ***REMOVED***
                        finally {
                            // New items may have been added to the queue during the sync,
                            // so we need to register for a new sync if that's happened...
                            // Unless there was an error during the sync, in which
                            // case the browser will automatically retry later, as long
                            // as `event.lastChance` is not true.
                            if (this._requestsAddedDuringSync &&
                                !(syncError && !event.lastChance)) {
                                await this.registerSync();
                            ***REMOVED***
                            this._syncInProgress = false;
                            this._requestsAddedDuringSync = false;
                        ***REMOVED***
                    ***REMOVED***;
                    event.waitUntil(syncComplete());
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***
        else {
            if (process.env.NODE_ENV !== 'production') {
                logger.log(`Background sync replaying without background sync event`);
            ***REMOVED***
            // If the browser doesn't support background sync, or the developer has
            // opted-in to not using it, retry every time the service worker starts up
            // as a fallback.
            void this._onSync({ queue: this ***REMOVED***);
        ***REMOVED***
    ***REMOVED***
    /**
     * Returns the set of queue names. This is primarily used to reset the list
     * of queue names in tests.
     *
     * @return {Set<string>***REMOVED***
     *
     * @private
     */
    static get _queueNames() {
        return queueNames;
    ***REMOVED***
***REMOVED***
export { Queue ***REMOVED***;
