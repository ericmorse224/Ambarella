import type {SchemaObjCxt***REMOVED*** from ".."
import {_, getProperty, stringify***REMOVED*** from "../codegen"
import {checkStrictMode***REMOVED*** from "../util"

export function assignDefaults(it: SchemaObjCxt, ty?: string): void {
  const {properties, items***REMOVED*** = it.schema
  if (ty === "object" && properties) {
    for (const key in properties) {
      assignDefault(it, key, properties[key].default)
    ***REMOVED***
  ***REMOVED*** else if (ty === "array" && Array.isArray(items)) {
    items.forEach((sch, i: number) => assignDefault(it, i, sch.default))
  ***REMOVED***
***REMOVED***

function assignDefault(it: SchemaObjCxt, prop: string | number, defaultValue: unknown): void {
  const {gen, compositeRule, data, opts***REMOVED*** = it
  if (defaultValue === undefined) return
  const childData = _`${data***REMOVED***${getProperty(prop)***REMOVED***`
  if (compositeRule) {
    checkStrictMode(it, `default is ignored for: ${childData***REMOVED***`)
    return
  ***REMOVED***

  let condition = _`${childData***REMOVED*** === undefined`
  if (opts.useDefaults === "empty") {
    condition = _`${condition***REMOVED*** || ${childData***REMOVED*** === null || ${childData***REMOVED*** === ""`
  ***REMOVED***
  // `${childData***REMOVED*** === undefined` +
  // (opts.useDefaults === "empty" ? ` || ${childData***REMOVED*** === null || ${childData***REMOVED*** === ""` : "")
  gen.if(condition, _`${childData***REMOVED*** = ${stringify(defaultValue)***REMOVED***`)
***REMOVED***
