'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
***REMOVED***);
exports.default = void 0;

function _assert() {
  const data = _interopRequireDefault(require('assert'));

  _assert = function () {
    return data;
  ***REMOVED***;

  return data;
***REMOVED***

function _console() {
  const data = require('console');

  _console = function () {
    return data;
  ***REMOVED***;

  return data;
***REMOVED***

function _util() {
  const data = require('util');

  _util = function () {
    return data;
  ***REMOVED***;

  return data;
***REMOVED***

function _chalk() {
  const data = _interopRequireDefault(require('chalk'));

  _chalk = function () {
    return data;
  ***REMOVED***;

  return data;
***REMOVED***

function _jestUtil() {
  const data = require('jest-util');

  _jestUtil = function () {
    return data;
  ***REMOVED***;

  return data;
***REMOVED***

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {default: obj***REMOVED***;
***REMOVED***

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    ***REMOVED***);
  ***REMOVED*** else {
    obj[key] = value;
  ***REMOVED***
  return obj;
***REMOVED***

class CustomConsole extends _console().Console {
  constructor(stdout, stderr, formatBuffer = (_type, message) => message) {
    super(stdout, stderr);

    _defineProperty(this, '_stdout', void 0);

    _defineProperty(this, '_stderr', void 0);

    _defineProperty(this, '_formatBuffer', void 0);

    _defineProperty(this, '_counters', {***REMOVED***);

    _defineProperty(this, '_timers', {***REMOVED***);

    _defineProperty(this, '_groupDepth', 0);

    _defineProperty(this, 'Console', _console().Console);

    this._stdout = stdout;
    this._stderr = stderr;
    this._formatBuffer = formatBuffer;
  ***REMOVED***

  _log(type, message) {
    (0, _jestUtil().clearLine)(this._stdout);
    super.log(
      this._formatBuffer(type, '  '.repeat(this._groupDepth) + message)
    );
  ***REMOVED***

  _logError(type, message) {
    (0, _jestUtil().clearLine)(this._stderr);
    super.error(
      this._formatBuffer(type, '  '.repeat(this._groupDepth) + message)
    );
  ***REMOVED***

  assert(value, message) {
    try {
      (0, _assert().default)(value, message);
    ***REMOVED*** catch (error) {
      this._logError('assert', error.toString());
    ***REMOVED***
  ***REMOVED***

  count(label = 'default') {
    if (!this._counters[label]) {
      this._counters[label] = 0;
    ***REMOVED***

    this._log(
      'count',
      (0, _util().format)(`${label***REMOVED***: ${++this._counters[label]***REMOVED***`)
    );
  ***REMOVED***

  countReset(label = 'default') {
    this._counters[label] = 0;
  ***REMOVED***

  debug(firstArg, ...args) {
    this._log('debug', (0, _util().format)(firstArg, ...args));
  ***REMOVED***

  dir(firstArg, options = {***REMOVED***) {
    const representation = (0, _util().inspect)(firstArg, options);

    this._log('dir', (0, _util().formatWithOptions)(options, representation));
  ***REMOVED***

  dirxml(firstArg, ...args) {
    this._log('dirxml', (0, _util().format)(firstArg, ...args));
  ***REMOVED***

  error(firstArg, ...args) {
    this._logError('error', (0, _util().format)(firstArg, ...args));
  ***REMOVED***

  group(title, ...args) {
    this._groupDepth++;

    if (title || args.length > 0) {
      this._log(
        'group',
        _chalk().default.bold((0, _util().format)(title, ...args))
      );
    ***REMOVED***
  ***REMOVED***

  groupCollapsed(title, ...args) {
    this._groupDepth++;

    if (title || args.length > 0) {
      this._log(
        'groupCollapsed',
        _chalk().default.bold((0, _util().format)(title, ...args))
      );
    ***REMOVED***
  ***REMOVED***

  groupEnd() {
    if (this._groupDepth > 0) {
      this._groupDepth--;
    ***REMOVED***
  ***REMOVED***

  info(firstArg, ...args) {
    this._log('info', (0, _util().format)(firstArg, ...args));
  ***REMOVED***

  log(firstArg, ...args) {
    this._log('log', (0, _util().format)(firstArg, ...args));
  ***REMOVED***

  time(label = 'default') {
    if (this._timers[label]) {
      return;
    ***REMOVED***

    this._timers[label] = new Date();
  ***REMOVED***

  timeEnd(label = 'default') {
    const startTime = this._timers[label];

    if (startTime) {
      const endTime = new Date().getTime();
      const time = endTime - startTime.getTime();

      this._log(
        'time',
        (0, _util().format)(`${label***REMOVED***: ${(0, _jestUtil().formatTime)(time)***REMOVED***`)
      );

      delete this._timers[label];
    ***REMOVED***
  ***REMOVED***

  timeLog(label = 'default', ...data) {
    const startTime = this._timers[label];

    if (startTime) {
      const endTime = new Date();
      const time = endTime.getTime() - startTime.getTime();

      this._log(
        'time',
        (0, _util().format)(
          `${label***REMOVED***: ${(0, _jestUtil().formatTime)(time)***REMOVED***`,
          ...data
        )
      );
    ***REMOVED***
  ***REMOVED***

  warn(firstArg, ...args) {
    this._logError('warn', (0, _util().format)(firstArg, ...args));
  ***REMOVED***

  getBuffer() {
    return undefined;
  ***REMOVED***
***REMOVED***

exports.default = CustomConsole;
