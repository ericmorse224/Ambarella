/**
 * @fileoverview Rule to disallow specified names in exports
 * @author Milos Djermanovic
 */

"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const astUtils = require("./utils/ast-utils");

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

/** @type {import('../types').Rule.RuleModule***REMOVED*** */
module.exports = {
	meta: {
		type: "suggestion",

		docs: {
			description: "Disallow specified names in exports",
			recommended: false,
			url: "https://eslint.org/docs/latest/rules/no-restricted-exports",
		***REMOVED***,

		schema: [
			{
				anyOf: [
					{
						type: "object",
						properties: {
							restrictedNamedExports: {
								type: "array",
								items: {
									type: "string",
								***REMOVED***,
								uniqueItems: true,
							***REMOVED***,
							restrictedNamedExportsPattern: { type: "string" ***REMOVED***,
						***REMOVED***,
						additionalProperties: false,
					***REMOVED***,
					{
						type: "object",
						properties: {
							restrictedNamedExports: {
								type: "array",
								items: {
									type: "string",
									pattern: "^(?!default$)",
								***REMOVED***,
								uniqueItems: true,
							***REMOVED***,
							restrictedNamedExportsPattern: { type: "string" ***REMOVED***,
							restrictDefaultExports: {
								type: "object",
								properties: {
									// Allow/Disallow `export default foo; export default 42; export default function foo() {***REMOVED***` format
									direct: {
										type: "boolean",
									***REMOVED***,

									// Allow/Disallow `export { foo as default ***REMOVED***;` declarations
									named: {
										type: "boolean",
									***REMOVED***,

									//  Allow/Disallow `export { default ***REMOVED*** from "mod"; export { default as default ***REMOVED*** from "mod";` declarations
									defaultFrom: {
										type: "boolean",
									***REMOVED***,

									//  Allow/Disallow `export { foo as default ***REMOVED*** from "mod";` declarations
									namedFrom: {
										type: "boolean",
									***REMOVED***,

									//  Allow/Disallow `export * as default from "mod"`; declarations
									namespaceFrom: {
										type: "boolean",
									***REMOVED***,
								***REMOVED***,
								additionalProperties: false,
							***REMOVED***,
						***REMOVED***,
						additionalProperties: false,
					***REMOVED***,
				],
			***REMOVED***,
		],

		messages: {
			restrictedNamed:
				"'{{name***REMOVED******REMOVED***' is restricted from being used as an exported name.",
			restrictedDefault: "Exporting 'default' is restricted.",
		***REMOVED***,
	***REMOVED***,

	create(context) {
		const restrictedNames = new Set(
			context.options[0] && context.options[0].restrictedNamedExports,
		);
		const restrictedNamePattern =
			context.options[0] &&
			context.options[0].restrictedNamedExportsPattern;
		const restrictDefaultExports =
			context.options[0] && context.options[0].restrictDefaultExports;
		const sourceCode = context.sourceCode;

		/**
		 * Checks and reports given exported name.
		 * @param {ASTNode***REMOVED*** node exported `Identifier` or string `Literal` node to check.
		 * @returns {void***REMOVED***
		 */
		function checkExportedName(node) {
			const name = astUtils.getModuleExportName(node);

			let matchesRestrictedNamePattern = false;

			if (restrictedNamePattern && name !== "default") {
				const patternRegex = new RegExp(restrictedNamePattern, "u");

				matchesRestrictedNamePattern = patternRegex.test(name);
			***REMOVED***

			if (matchesRestrictedNamePattern || restrictedNames.has(name)) {
				context.report({
					node,
					messageId: "restrictedNamed",
					data: { name ***REMOVED***,
				***REMOVED***);
				return;
			***REMOVED***

			if (name === "default") {
				if (node.parent.type === "ExportAllDeclaration") {
					if (
						restrictDefaultExports &&
						restrictDefaultExports.namespaceFrom
					) {
						context.report({
							node,
							messageId: "restrictedDefault",
						***REMOVED***);
					***REMOVED***
				***REMOVED*** else {
					// ExportSpecifier
					const isSourceSpecified = !!node.parent.parent.source;
					const specifierLocalName = astUtils.getModuleExportName(
						node.parent.local,
					);

					if (
						!isSourceSpecified &&
						restrictDefaultExports &&
						restrictDefaultExports.named
					) {
						context.report({
							node,
							messageId: "restrictedDefault",
						***REMOVED***);
						return;
					***REMOVED***

					if (isSourceSpecified && restrictDefaultExports) {
						if (
							(specifierLocalName === "default" &&
								restrictDefaultExports.defaultFrom) ||
							(specifierLocalName !== "default" &&
								restrictDefaultExports.namedFrom)
						) {
							context.report({
								node,
								messageId: "restrictedDefault",
							***REMOVED***);
						***REMOVED***
					***REMOVED***
				***REMOVED***
			***REMOVED***
		***REMOVED***

		return {
			ExportAllDeclaration(node) {
				if (node.exported) {
					checkExportedName(node.exported);
				***REMOVED***
			***REMOVED***,

			ExportDefaultDeclaration(node) {
				if (restrictDefaultExports && restrictDefaultExports.direct) {
					context.report({
						node,
						messageId: "restrictedDefault",
					***REMOVED***);
				***REMOVED***
			***REMOVED***,

			ExportNamedDeclaration(node) {
				const declaration = node.declaration;

				if (declaration) {
					if (
						declaration.type === "FunctionDeclaration" ||
						declaration.type === "ClassDeclaration"
					) {
						checkExportedName(declaration.id);
					***REMOVED*** else if (declaration.type === "VariableDeclaration") {
						sourceCode
							.getDeclaredVariables(declaration)
							.map(v =>
								v.defs.find(d => d.parent === declaration),
							)
							.map(d => d.name) // Identifier nodes
							.forEach(checkExportedName);
					***REMOVED***
				***REMOVED*** else {
					node.specifiers
						.map(s => s.exported)
						.forEach(checkExportedName);
				***REMOVED***
			***REMOVED***,
		***REMOVED***;
	***REMOVED***,
***REMOVED***;
