/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const { UsageState ***REMOVED*** = require("../ExportsInfo");
const makeSerializable = require("../util/makeSerializable");
const NullDependency = require("./NullDependency");

/** @typedef {import("webpack-sources").ReplaceSource***REMOVED*** ReplaceSource */
/** @typedef {import("../ChunkGraph")***REMOVED*** ChunkGraph */
/** @typedef {import("../Dependency")***REMOVED*** Dependency */
/** @typedef {import("../Dependency").UpdateHashContext***REMOVED*** UpdateHashContext */
/** @typedef {import("../DependencyTemplate").DependencyTemplateContext***REMOVED*** DependencyTemplateContext */
/** @typedef {import("../Module")***REMOVED*** Module */
/** @typedef {import("../ModuleGraph")***REMOVED*** ModuleGraph */
/** @typedef {import("../javascript/JavascriptParser").Range***REMOVED*** Range */
/** @typedef {import("../serialization/ObjectMiddleware").ObjectDeserializerContext***REMOVED*** ObjectDeserializerContext */
/** @typedef {import("../serialization/ObjectMiddleware").ObjectSerializerContext***REMOVED*** ObjectSerializerContext */
/** @typedef {import("../util/Hash")***REMOVED*** Hash */
/** @typedef {import("../util/runtime").RuntimeSpec***REMOVED*** RuntimeSpec */

/**
 * @template T
 * @typedef {import("../util/SortableSet")<T>***REMOVED*** SortableSet
 */

/**
 * @param {ModuleGraph***REMOVED*** moduleGraph the module graph
 * @param {Module***REMOVED*** module the module
 * @param {string[] | null***REMOVED*** _exportName name of the export if any
 * @param {string | null***REMOVED*** property name of the requested property
 * @param {RuntimeSpec***REMOVED*** runtime for which runtime
 * @returns {undefined | null | number | boolean | string[] | SortableSet<string>***REMOVED*** value of the property
 */
const getProperty = (moduleGraph, module, _exportName, property, runtime) => {
	if (!_exportName) {
		switch (property) {
			case "usedExports": {
				const usedExports = moduleGraph
					.getExportsInfo(module)
					.getUsedExports(runtime);
				if (
					typeof usedExports === "boolean" ||
					usedExports === undefined ||
					usedExports === null
				) {
					return usedExports;
				***REMOVED***
				return Array.from(usedExports).sort();
			***REMOVED***
		***REMOVED***
	***REMOVED***
	const exportName = /** @type {string[]***REMOVED*** */ (_exportName);
	switch (property) {
		case "canMangle": {
			const exportsInfo = moduleGraph.getExportsInfo(module);
			const exportInfo = exportsInfo.getReadOnlyExportInfoRecursive(exportName);
			if (exportInfo) return exportInfo.canMangle;
			return exportsInfo.otherExportsInfo.canMangle;
		***REMOVED***
		case "used":
			return (
				moduleGraph.getExportsInfo(module).getUsed(exportName, runtime) !==
				UsageState.Unused
			);
		case "useInfo": {
			const state = moduleGraph
				.getExportsInfo(module)
				.getUsed(exportName, runtime);
			switch (state) {
				case UsageState.Used:
				case UsageState.OnlyPropertiesUsed:
					return true;
				case UsageState.Unused:
					return false;
				case UsageState.NoInfo:
					return;
				case UsageState.Unknown:
					return null;
				default:
					throw new Error(`Unexpected UsageState ${state***REMOVED***`);
			***REMOVED***
		***REMOVED***
		case "provideInfo":
			return moduleGraph.getExportsInfo(module).isExportProvided(exportName);
	***REMOVED***
***REMOVED***;

class ExportsInfoDependency extends NullDependency {
	/**
	 * @param {Range***REMOVED*** range range
	 * @param {string[] | null***REMOVED*** exportName export name
	 * @param {string | null***REMOVED*** property property
	 */
	constructor(range, exportName, property) {
		super();
		this.range = range;
		this.exportName = exportName;
		this.property = property;
	***REMOVED***

	/**
	 * @param {ObjectSerializerContext***REMOVED*** context context
	 */
	serialize(context) {
		const { write ***REMOVED*** = context;
		write(this.range);
		write(this.exportName);
		write(this.property);
		super.serialize(context);
	***REMOVED***

	/**
	 * @param {ObjectDeserializerContext***REMOVED*** context context
	 * @returns {ExportsInfoDependency***REMOVED*** ExportsInfoDependency
	 */
	static deserialize(context) {
		const obj = new ExportsInfoDependency(
			context.read(),
			context.read(),
			context.read()
		);
		obj.deserialize(context);
		return obj;
	***REMOVED***
***REMOVED***

makeSerializable(
	ExportsInfoDependency,
	"webpack/lib/dependencies/ExportsInfoDependency"
);

ExportsInfoDependency.Template = class ExportsInfoDependencyTemplate extends (
	NullDependency.Template
) {
	/**
	 * @param {Dependency***REMOVED*** dependency the dependency for which the template should be applied
	 * @param {ReplaceSource***REMOVED*** source the current replace source which can be modified
	 * @param {DependencyTemplateContext***REMOVED*** templateContext the context object
	 * @returns {void***REMOVED***
	 */
	apply(dependency, source, { module, moduleGraph, runtime ***REMOVED***) {
		const dep = /** @type {ExportsInfoDependency***REMOVED*** */ (dependency);

		const value = getProperty(
			moduleGraph,
			module,
			dep.exportName,
			dep.property,
			runtime
		);
		source.replace(
			dep.range[0],
			dep.range[1] - 1,
			value === undefined ? "undefined" : JSON.stringify(value)
		);
	***REMOVED***
***REMOVED***;

module.exports = ExportsInfoDependency;
