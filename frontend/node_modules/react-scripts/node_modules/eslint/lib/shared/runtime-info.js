/**
 * @fileoverview Utility to get information about the execution environment.
 * @author Kai Cataldo
 */

"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const path = require("path");
const spawn = require("cross-spawn");
const os = require("os");
const log = require("../shared/logging");
const packageJson = require("../../package.json");

//------------------------------------------------------------------------------
// Helpers
//------------------------------------------------------------------------------

/**
 * Generates and returns execution environment information.
 * @returns {string***REMOVED*** A string that contains execution environment information.
 */
function environment() {
    const cache = new Map();

    /**
     * Checks if a path is a child of a directory.
     * @param {string***REMOVED*** parentPath The parent path to check.
     * @param {string***REMOVED*** childPath The path to check.
     * @returns {boolean***REMOVED*** Whether or not the given path is a child of a directory.
     */
    function isChildOfDirectory(parentPath, childPath) {
        return !path.relative(parentPath, childPath).startsWith("..");
    ***REMOVED***

    /**
     * Synchronously executes a shell command and formats the result.
     * @param {string***REMOVED*** cmd The command to execute.
     * @param {Array***REMOVED*** args The arguments to be executed with the command.
     * @throws {Error***REMOVED*** As may be collected by `cross-spawn.sync`.
     * @returns {string***REMOVED*** The version returned by the command.
     */
    function execCommand(cmd, args) {
        const key = [cmd, ...args].join(" ");

        if (cache.has(key)) {
            return cache.get(key);
        ***REMOVED***

        const process = spawn.sync(cmd, args, { encoding: "utf8" ***REMOVED***);

        if (process.error) {
            throw process.error;
        ***REMOVED***

        const result = process.stdout.trim();

        cache.set(key, result);
        return result;
    ***REMOVED***

    /**
     * Normalizes a version number.
     * @param {string***REMOVED*** versionStr The string to normalize.
     * @returns {string***REMOVED*** The normalized version number.
     */
    function normalizeVersionStr(versionStr) {
        return versionStr.startsWith("v") ? versionStr : `v${versionStr***REMOVED***`;
    ***REMOVED***

    /**
     * Gets bin version.
     * @param {string***REMOVED*** bin The bin to check.
     * @throws {Error***REMOVED*** As may be collected by `cross-spawn.sync`.
     * @returns {string***REMOVED*** The normalized version returned by the command.
     */
    function getBinVersion(bin) {
        const binArgs = ["--version"];

        try {
            return normalizeVersionStr(execCommand(bin, binArgs));
        ***REMOVED*** catch (e) {
            log.error(`Error finding ${bin***REMOVED*** version running the command \`${bin***REMOVED*** ${binArgs.join(" ")***REMOVED***\``);
            throw e;
        ***REMOVED***
    ***REMOVED***

    /**
     * Gets installed npm package version.
     * @param {string***REMOVED*** pkg The package to check.
     * @param {boolean***REMOVED*** global Whether to check globally or not.
     * @throws {Error***REMOVED*** As may be collected by `cross-spawn.sync`.
     * @returns {string***REMOVED*** The normalized version returned by the command.
     */
    function getNpmPackageVersion(pkg, { global = false ***REMOVED*** = {***REMOVED***) {
        const npmBinArgs = ["bin", "-g"];
        const npmLsArgs = ["ls", "--depth=0", "--json", pkg];

        if (global) {
            npmLsArgs.push("-g");
        ***REMOVED***

        try {
            const parsedStdout = JSON.parse(execCommand("npm", npmLsArgs));

            /*
             * Checking globally returns an empty JSON object, while local checks
             * include the name and version of the local project.
             */
            if (Object.keys(parsedStdout).length === 0 || !(parsedStdout.dependencies && parsedStdout.dependencies.eslint)) {
                return "Not found";
            ***REMOVED***

            const [, processBinPath] = process.argv;
            let npmBinPath;

            try {
                npmBinPath = execCommand("npm", npmBinArgs);
            ***REMOVED*** catch (e) {
                log.error(`Error finding npm binary path when running command \`npm ${npmBinArgs.join(" ")***REMOVED***\``);
                throw e;
            ***REMOVED***

            const isGlobal = isChildOfDirectory(npmBinPath, processBinPath);
            let pkgVersion = parsedStdout.dependencies.eslint.version;

            if ((global && isGlobal) || (!global && !isGlobal)) {
                pkgVersion += " (Currently used)";
            ***REMOVED***

            return normalizeVersionStr(pkgVersion);
        ***REMOVED*** catch (e) {
            log.error(`Error finding ${pkg***REMOVED*** version running the command \`npm ${npmLsArgs.join(" ")***REMOVED***\``);
            throw e;
        ***REMOVED***
    ***REMOVED***

    return [
        "Environment Info:",
        "",
        `Node version: ${getBinVersion("node")***REMOVED***`,
        `npm version: ${getBinVersion("npm")***REMOVED***`,
        `Local ESLint version: ${getNpmPackageVersion("eslint", { global: false ***REMOVED***)***REMOVED***`,
        `Global ESLint version: ${getNpmPackageVersion("eslint", { global: true ***REMOVED***)***REMOVED***`,
        `Operating System: ${os.platform()***REMOVED*** ${os.release()***REMOVED***`
    ].join("\n");
***REMOVED***

/**
 * Returns version of currently executing ESLint.
 * @returns {string***REMOVED*** The version from the currently executing ESLint's package.json.
 */
function version() {
    return `v${packageJson.version***REMOVED***`;
***REMOVED***

//------------------------------------------------------------------------------
// Public Interface
//------------------------------------------------------------------------------

module.exports = {
    environment,
    version
***REMOVED***;
