/**
 * @fileoverview "table reporter.
 * @author Gajus Kuizinas <gajus@gajus.com>
 */
"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const chalk = require("chalk"),
    table = require("table").table;

//------------------------------------------------------------------------------
// Helpers
//------------------------------------------------------------------------------

/**
 * Given a word and a count, append an "s" if count is not one.
 * @param {string***REMOVED*** word A word.
 * @param {number***REMOVED*** count Quantity.
 * @returns {string***REMOVED*** The original word with an s on the end if count is not one.
 */
function pluralize(word, count) {
    return (count === 1 ? word : `${word***REMOVED***s`);
***REMOVED***

/**
 * Draws text table.
 * @param {Array<Object>***REMOVED*** messages Error messages relating to a specific file.
 * @returns {string***REMOVED*** A text table.
 */
function drawTable(messages) {
    const rows = [];

    if (messages.length === 0) {
        return "";
    ***REMOVED***

    rows.push([
        chalk.bold("Line"),
        chalk.bold("Column"),
        chalk.bold("Type"),
        chalk.bold("Message"),
        chalk.bold("Rule ID")
    ]);

    messages.forEach(message => {
        let messageType;

        if (message.fatal || message.severity === 2) {
            messageType = chalk.red("error");
        ***REMOVED*** else {
            messageType = chalk.yellow("warning");
        ***REMOVED***

        rows.push([
            message.line || 0,
            message.column || 0,
            messageType,
            message.message,
            message.ruleId || ""
        ]);
    ***REMOVED***);

    return table(rows, {
        columns: {
            0: {
                width: 8,
                wrapWord: true
            ***REMOVED***,
            1: {
                width: 8,
                wrapWord: true
            ***REMOVED***,
            2: {
                width: 8,
                wrapWord: true
            ***REMOVED***,
            3: {
                paddingRight: 5,
                width: 50,
                wrapWord: true
            ***REMOVED***,
            4: {
                width: 20,
                wrapWord: true
            ***REMOVED***
        ***REMOVED***,
        drawHorizontalLine(index) {
            return index === 1;
        ***REMOVED***
    ***REMOVED***);
***REMOVED***

/**
 * Draws a report (multiple tables).
 * @param {Array***REMOVED*** results Report results for every file.
 * @returns {string***REMOVED*** A column of text tables.
 */
function drawReport(results) {
    let files;

    files = results.map(result => {
        if (!result.messages.length) {
            return "";
        ***REMOVED***

        return `\n${result.filePath***REMOVED***\n\n${drawTable(result.messages)***REMOVED***`;
    ***REMOVED***);

    files = files.filter(content => content.trim());

    return files.join("");
***REMOVED***

//------------------------------------------------------------------------------
// Public Interface
//------------------------------------------------------------------------------

module.exports = function(report) {
    let result,
        errorCount,
        warningCount;

    result = "";
    errorCount = 0;
    warningCount = 0;

    report.forEach(fileReport => {
        errorCount += fileReport.errorCount;
        warningCount += fileReport.warningCount;
    ***REMOVED***);

    if (errorCount || warningCount) {
        result = drawReport(report);
    ***REMOVED***

    result += `\n${table([
        [
            chalk.red(pluralize(`${errorCount***REMOVED*** Error`, errorCount))
        ],
        [
            chalk.yellow(pluralize(`${warningCount***REMOVED*** Warning`, warningCount))
        ]
    ], {
        columns: {
            0: {
                width: 110,
                wrapWord: true
            ***REMOVED***
        ***REMOVED***,
        drawHorizontalLine() {
            return true;
        ***REMOVED***
    ***REMOVED***)***REMOVED***`;

    return result;
***REMOVED***;
