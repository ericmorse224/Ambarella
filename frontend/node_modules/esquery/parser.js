/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */
(function(root, factory) {
  if (typeof define === "function" && define.amd) {
    define([], factory);
  ***REMOVED*** else if (typeof module === "object" && module.exports) {
    module.exports = factory();
  ***REMOVED***
***REMOVED***)(this, function() {
  "use strict";

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; ***REMOVED***
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  ***REMOVED***

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    ***REMOVED***
  ***REMOVED***

  peg$subclass(peg$SyntaxError, Error);

  peg$SyntaxError.buildMessage = function(expected, found) {
    var DESCRIBE_EXPECTATION_FNS = {
          literal: function(expectation) {
            return "\"" + literalEscape(expectation.text) + "\"";
          ***REMOVED***,

          "class": function(expectation) {
            var escapedParts = "",
                i;

            for (i = 0; i < expectation.parts.length; i++) {
              escapedParts += expectation.parts[i] instanceof Array
                ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
                : classEscape(expectation.parts[i]);
            ***REMOVED***

            return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
          ***REMOVED***,

          any: function(expectation) {
            return "any character";
          ***REMOVED***,

          end: function(expectation) {
            return "end of input";
          ***REMOVED***,

          other: function(expectation) {
            return expectation.description;
          ***REMOVED***
        ***REMOVED***;

    function hex(ch) {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    ***REMOVED***

    function literalEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/"/g,  '\\"')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); ***REMOVED***)
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); ***REMOVED***);
    ***REMOVED***

    function classEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/\]/g, '\\]')
        .replace(/\^/g, '\\^')
        .replace(/-/g,  '\\-')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); ***REMOVED***)
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); ***REMOVED***);
    ***REMOVED***

    function describeExpectation(expectation) {
      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    ***REMOVED***

    function describeExpected(expected) {
      var descriptions = new Array(expected.length),
          i, j;

      for (i = 0; i < expected.length; i++) {
        descriptions[i] = describeExpectation(expected[i]);
      ***REMOVED***

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          ***REMOVED***
        ***REMOVED***
        descriptions.length = j;
      ***REMOVED***

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ")
            + ", or "
            + descriptions[descriptions.length - 1];
      ***REMOVED***
    ***REMOVED***

    function describeFound(found) {
      return found ? "\"" + literalEscape(found) + "\"" : "end of input";
    ***REMOVED***

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  ***REMOVED***;

  function peg$parse(input, options) {
    options = options !== void 0 ? options : {***REMOVED***;

    var peg$FAILED = {***REMOVED***,

        peg$startRuleFunctions = { start: peg$parsestart ***REMOVED***,
        peg$startRuleFunction  = peg$parsestart,

        peg$c0 = function(ss) {
            return ss.length === 1 ? ss[0] : { type: 'matches', selectors: ss ***REMOVED***;
          ***REMOVED***,
        peg$c1 = function() { return void 0; ***REMOVED***,
        peg$c2 = " ",
        peg$c3 = peg$literalExpectation(" ", false),
        peg$c4 = /^[^ [\],():#!=><~+.]/,
        peg$c5 = peg$classExpectation([" ", "[", "]", ",", "(", ")", ":", "#", "!", "=", ">", "<", "~", "+", "."], true, false),
        peg$c6 = function(i) { return i.join(''); ***REMOVED***,
        peg$c7 = ">",
        peg$c8 = peg$literalExpectation(">", false),
        peg$c9 = function() { return 'child'; ***REMOVED***,
        peg$c10 = "~",
        peg$c11 = peg$literalExpectation("~", false),
        peg$c12 = function() { return 'sibling'; ***REMOVED***,
        peg$c13 = "+",
        peg$c14 = peg$literalExpectation("+", false),
        peg$c15 = function() { return 'adjacent'; ***REMOVED***,
        peg$c16 = function() { return 'descendant'; ***REMOVED***,
        peg$c17 = ",",
        peg$c18 = peg$literalExpectation(",", false),
        peg$c19 = function(s, ss) {
          return [s].concat(ss.map(function (s) { return s[3]; ***REMOVED***));
        ***REMOVED***,
        peg$c20 = function(op, s) {
            if (!op) return s;
            return { type: op, left: { type: 'exactNode' ***REMOVED***, right: s ***REMOVED***;
          ***REMOVED***,
        peg$c21 = function(a, ops) {
            return ops.reduce(function (memo, rhs) {
              return { type: rhs[0], left: memo, right: rhs[1] ***REMOVED***;
            ***REMOVED***, a);
          ***REMOVED***,
        peg$c22 = "!",
        peg$c23 = peg$literalExpectation("!", false),
        peg$c24 = function(subject, as) {
            const b = as.length === 1 ? as[0] : { type: 'compound', selectors: as ***REMOVED***;
            if(subject) b.subject = true;
            return b;
          ***REMOVED***,
        peg$c25 = "*",
        peg$c26 = peg$literalExpectation("*", false),
        peg$c27 = function(a) { return { type: 'wildcard', value: a ***REMOVED***; ***REMOVED***,
        peg$c28 = "#",
        peg$c29 = peg$literalExpectation("#", false),
        peg$c30 = function(i) { return { type: 'identifier', value: i ***REMOVED***; ***REMOVED***,
        peg$c31 = "[",
        peg$c32 = peg$literalExpectation("[", false),
        peg$c33 = "]",
        peg$c34 = peg$literalExpectation("]", false),
        peg$c35 = function(v) { return v; ***REMOVED***,
        peg$c36 = /^[><!]/,
        peg$c37 = peg$classExpectation([">", "<", "!"], false, false),
        peg$c38 = "=",
        peg$c39 = peg$literalExpectation("=", false),
        peg$c40 = function(a) { return (a || '') + '='; ***REMOVED***,
        peg$c41 = /^[><]/,
        peg$c42 = peg$classExpectation([">", "<"], false, false),
        peg$c43 = ".",
        peg$c44 = peg$literalExpectation(".", false),
        peg$c45 = function(a, as) {
            return [].concat.apply([a], as).join('');
          ***REMOVED***,
        peg$c46 = function(name, op, value) {
              return { type: 'attribute', name: name, operator: op, value: value ***REMOVED***;
            ***REMOVED***,
        peg$c47 = function(name) { return { type: 'attribute', name: name ***REMOVED***; ***REMOVED***,
        peg$c48 = "\"",
        peg$c49 = peg$literalExpectation("\"", false),
        peg$c50 = /^[^\\"]/,
        peg$c51 = peg$classExpectation(["\\", "\""], true, false),
        peg$c52 = "\\",
        peg$c53 = peg$literalExpectation("\\", false),
        peg$c54 = peg$anyExpectation(),
        peg$c55 = function(a, b) { return a + b; ***REMOVED***,
        peg$c56 = function(d) {
                return { type: 'literal', value: strUnescape(d.join('')) ***REMOVED***;
              ***REMOVED***,
        peg$c57 = "'",
        peg$c58 = peg$literalExpectation("'", false),
        peg$c59 = /^[^\\']/,
        peg$c60 = peg$classExpectation(["\\", "'"], true, false),
        peg$c61 = /^[0-9]/,
        peg$c62 = peg$classExpectation([["0", "9"]], false, false),
        peg$c63 = function(a, b) {
                // Can use `a.flat().join('')` once supported
                const leadingDecimals = a ? [].concat.apply([], a).join('') : '';
                return { type: 'literal', value: parseFloat(leadingDecimals + b.join('')) ***REMOVED***;
              ***REMOVED***,
        peg$c64 = function(i) { return { type: 'literal', value: i ***REMOVED***; ***REMOVED***,
        peg$c65 = "type(",
        peg$c66 = peg$literalExpectation("type(", false),
        peg$c67 = /^[^ )]/,
        peg$c68 = peg$classExpectation([" ", ")"], true, false),
        peg$c69 = ")",
        peg$c70 = peg$literalExpectation(")", false),
        peg$c71 = function(t) { return { type: 'type', value: t.join('') ***REMOVED***; ***REMOVED***,
        peg$c72 = /^[imsu]/,
        peg$c73 = peg$classExpectation(["i", "m", "s", "u"], false, false),
        peg$c74 = "/",
        peg$c75 = peg$literalExpectation("/", false),
        peg$c76 = /^[^\/]/,
        peg$c77 = peg$classExpectation(["/"], true, false),
        peg$c78 = function(d, flgs) { return {
              type: 'regexp', value: new RegExp(d.join(''), flgs ? flgs.join('') : '') ***REMOVED***;
            ***REMOVED***,
        peg$c79 = function(i, is) {
          return { type: 'field', name: is.reduce(function(memo, p){ return memo + p[0] + p[1]; ***REMOVED***, i)***REMOVED***;
        ***REMOVED***,
        peg$c80 = ":not(",
        peg$c81 = peg$literalExpectation(":not(", false),
        peg$c82 = function(ss) { return { type: 'not', selectors: ss ***REMOVED***; ***REMOVED***,
        peg$c83 = ":matches(",
        peg$c84 = peg$literalExpectation(":matches(", false),
        peg$c85 = function(ss) { return { type: 'matches', selectors: ss ***REMOVED***; ***REMOVED***,
        peg$c86 = ":has(",
        peg$c87 = peg$literalExpectation(":has(", false),
        peg$c88 = function(ss) { return { type: 'has', selectors: ss ***REMOVED***; ***REMOVED***,
        peg$c89 = ":first-child",
        peg$c90 = peg$literalExpectation(":first-child", false),
        peg$c91 = function() { return nth(1); ***REMOVED***,
        peg$c92 = ":last-child",
        peg$c93 = peg$literalExpectation(":last-child", false),
        peg$c94 = function() { return nthLast(1); ***REMOVED***,
        peg$c95 = ":nth-child(",
        peg$c96 = peg$literalExpectation(":nth-child(", false),
        peg$c97 = function(n) { return nth(parseInt(n.join(''), 10)); ***REMOVED***,
        peg$c98 = ":nth-last-child(",
        peg$c99 = peg$literalExpectation(":nth-last-child(", false),
        peg$c100 = function(n) { return nthLast(parseInt(n.join(''), 10)); ***REMOVED***,
        peg$c101 = ":",
        peg$c102 = peg$literalExpectation(":", false),
        peg$c103 = function(c) {
          return { type: 'class', name: c ***REMOVED***;
        ***REMOVED***,

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1 ***REMOVED***],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$resultsCache = {***REMOVED***,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      ***REMOVED***

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    ***REMOVED***

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    ***REMOVED***

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    ***REMOVED***

    function expected(description, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildStructuredError(
        [peg$otherExpectation(description)],
        input.substring(peg$savedPos, peg$currPos),
        location
      );
    ***REMOVED***

    function error(message, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildSimpleError(message, location);
    ***REMOVED***

    function peg$literalExpectation(text, ignoreCase) {
      return { type: "literal", text: text, ignoreCase: ignoreCase ***REMOVED***;
    ***REMOVED***

    function peg$classExpectation(parts, inverted, ignoreCase) {
      return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase ***REMOVED***;
    ***REMOVED***

    function peg$anyExpectation() {
      return { type: "any" ***REMOVED***;
    ***REMOVED***

    function peg$endExpectation() {
      return { type: "end" ***REMOVED***;
    ***REMOVED***

    function peg$otherExpectation(description) {
      return { type: "other", description: description ***REMOVED***;
    ***REMOVED***

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos], p;

      if (details) {
        return details;
      ***REMOVED*** else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        ***REMOVED***

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column
        ***REMOVED***;

        while (p < pos) {
          if (input.charCodeAt(p) === 10) {
            details.line++;
            details.column = 1;
          ***REMOVED*** else {
            details.column++;
          ***REMOVED***

          p++;
        ***REMOVED***

        peg$posDetailsCache[pos] = details;
        return details;
      ***REMOVED***
    ***REMOVED***

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails   = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        ***REMOVED***,
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        ***REMOVED***
      ***REMOVED***;
    ***REMOVED***

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; ***REMOVED***

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      ***REMOVED***

      peg$maxFailExpected.push(expected);
    ***REMOVED***

    function peg$buildSimpleError(message, location) {
      return new peg$SyntaxError(message, null, null, location);
    ***REMOVED***

    function peg$buildStructuredError(expected, found, location) {
      return new peg$SyntaxError(
        peg$SyntaxError.buildMessage(expected, found),
        expected,
        found,
        location
      );
    ***REMOVED***

    function peg$parsestart() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 32 + 0,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      ***REMOVED***

      s0 = peg$currPos;
      s1 = peg$parse_();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseselectors();
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c0(s2);
            s0 = s1;
          ***REMOVED*** else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          ***REMOVED***
        ***REMOVED*** else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        ***REMOVED***
      ***REMOVED*** else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      ***REMOVED***
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c1();
        ***REMOVED***
        s0 = s1;
      ***REMOVED***

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 ***REMOVED***;

      return s0;
    ***REMOVED***

    function peg$parse_() {
      var s0, s1;

      var key    = peg$currPos * 32 + 1,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      ***REMOVED***

      s0 = [];
      if (input.charCodeAt(peg$currPos) === 32) {
        s1 = peg$c2;
        peg$currPos++;
      ***REMOVED*** else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c3); ***REMOVED***
      ***REMOVED***
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        if (input.charCodeAt(peg$currPos) === 32) {
          s1 = peg$c2;
          peg$currPos++;
        ***REMOVED*** else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c3); ***REMOVED***
        ***REMOVED***
      ***REMOVED***

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 ***REMOVED***;

      return s0;
    ***REMOVED***

    function peg$parseidentifierName() {
      var s0, s1, s2;

      var key    = peg$currPos * 32 + 2,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      ***REMOVED***

      s0 = peg$currPos;
      s1 = [];
      if (peg$c4.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      ***REMOVED*** else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c5); ***REMOVED***
      ***REMOVED***
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c4.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          ***REMOVED*** else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c5); ***REMOVED***
          ***REMOVED***
        ***REMOVED***
      ***REMOVED*** else {
        s1 = peg$FAILED;
      ***REMOVED***
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c6(s1);
      ***REMOVED***
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 ***REMOVED***;

      return s0;
    ***REMOVED***

    function peg$parsebinaryOp() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 32 + 3,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      ***REMOVED***

      s0 = peg$currPos;
      s1 = peg$parse_();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 62) {
          s2 = peg$c7;
          peg$currPos++;
        ***REMOVED*** else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c8); ***REMOVED***
        ***REMOVED***
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c9();
            s0 = s1;
          ***REMOVED*** else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          ***REMOVED***
        ***REMOVED*** else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        ***REMOVED***
      ***REMOVED*** else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      ***REMOVED***
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 126) {
            s2 = peg$c10;
            peg$currPos++;
          ***REMOVED*** else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c11); ***REMOVED***
          ***REMOVED***
          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c12();
              s0 = s1;
            ***REMOVED*** else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            ***REMOVED***
          ***REMOVED*** else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          ***REMOVED***
        ***REMOVED*** else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        ***REMOVED***
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parse_();
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 43) {
              s2 = peg$c13;
              peg$currPos++;
            ***REMOVED*** else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c14); ***REMOVED***
            ***REMOVED***
            if (s2 !== peg$FAILED) {
              s3 = peg$parse_();
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c15();
                s0 = s1;
              ***REMOVED*** else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              ***REMOVED***
            ***REMOVED*** else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            ***REMOVED***
          ***REMOVED*** else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          ***REMOVED***
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 32) {
              s1 = peg$c2;
              peg$currPos++;
            ***REMOVED*** else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c3); ***REMOVED***
            ***REMOVED***
            if (s1 !== peg$FAILED) {
              s2 = peg$parse_();
              if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c16();
                s0 = s1;
              ***REMOVED*** else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              ***REMOVED***
            ***REMOVED*** else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            ***REMOVED***
          ***REMOVED***
        ***REMOVED***
      ***REMOVED***

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 ***REMOVED***;

      return s0;
    ***REMOVED***

    function peg$parsehasSelectors() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      var key    = peg$currPos * 32 + 4,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      ***REMOVED***

      s0 = peg$currPos;
      s1 = peg$parsehasSelector();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c17;
            peg$currPos++;
          ***REMOVED*** else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c18); ***REMOVED***
          ***REMOVED***
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsehasSelector();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              ***REMOVED*** else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              ***REMOVED***
            ***REMOVED*** else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            ***REMOVED***
          ***REMOVED*** else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          ***REMOVED***
        ***REMOVED*** else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        ***REMOVED***
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c17;
              peg$currPos++;
            ***REMOVED*** else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c18); ***REMOVED***
            ***REMOVED***
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsehasSelector();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                ***REMOVED*** else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                ***REMOVED***
              ***REMOVED*** else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              ***REMOVED***
            ***REMOVED*** else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            ***REMOVED***
          ***REMOVED*** else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          ***REMOVED***
        ***REMOVED***
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c19(s1, s2);
          s0 = s1;
        ***REMOVED*** else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        ***REMOVED***
      ***REMOVED*** else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      ***REMOVED***

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 ***REMOVED***;

      return s0;
    ***REMOVED***

    function peg$parseselectors() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      var key    = peg$currPos * 32 + 5,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      ***REMOVED***

      s0 = peg$currPos;
      s1 = peg$parseselector();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c17;
            peg$currPos++;
          ***REMOVED*** else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c18); ***REMOVED***
          ***REMOVED***
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseselector();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              ***REMOVED*** else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              ***REMOVED***
            ***REMOVED*** else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            ***REMOVED***
          ***REMOVED*** else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          ***REMOVED***
        ***REMOVED*** else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        ***REMOVED***
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c17;
              peg$currPos++;
            ***REMOVED*** else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c18); ***REMOVED***
            ***REMOVED***
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseselector();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                ***REMOVED*** else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                ***REMOVED***
              ***REMOVED*** else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              ***REMOVED***
            ***REMOVED*** else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            ***REMOVED***
          ***REMOVED*** else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          ***REMOVED***
        ***REMOVED***
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c19(s1, s2);
          s0 = s1;
        ***REMOVED*** else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        ***REMOVED***
      ***REMOVED*** else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      ***REMOVED***

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 ***REMOVED***;

      return s0;
    ***REMOVED***

    function peg$parsehasSelector() {
      var s0, s1, s2;

      var key    = peg$currPos * 32 + 6,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      ***REMOVED***

      s0 = peg$currPos;
      s1 = peg$parsebinaryOp();
      if (s1 === peg$FAILED) {
        s1 = null;
      ***REMOVED***
      if (s1 !== peg$FAILED) {
        s2 = peg$parseselector();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c20(s1, s2);
          s0 = s1;
        ***REMOVED*** else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        ***REMOVED***
      ***REMOVED*** else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      ***REMOVED***

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 ***REMOVED***;

      return s0;
    ***REMOVED***

    function peg$parseselector() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 32 + 7,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      ***REMOVED***

      s0 = peg$currPos;
      s1 = peg$parsesequence();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parsebinaryOp();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsesequence();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          ***REMOVED*** else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          ***REMOVED***
        ***REMOVED*** else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        ***REMOVED***
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parsebinaryOp();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsesequence();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            ***REMOVED*** else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            ***REMOVED***
          ***REMOVED*** else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          ***REMOVED***
        ***REMOVED***
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c21(s1, s2);
          s0 = s1;
        ***REMOVED*** else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        ***REMOVED***
      ***REMOVED*** else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      ***REMOVED***

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 ***REMOVED***;

      return s0;
    ***REMOVED***

    function peg$parsesequence() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 32 + 8,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      ***REMOVED***

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 33) {
        s1 = peg$c22;
        peg$currPos++;
      ***REMOVED*** else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c23); ***REMOVED***
      ***REMOVED***
      if (s1 === peg$FAILED) {
        s1 = null;
      ***REMOVED***
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseatom();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseatom();
          ***REMOVED***
        ***REMOVED*** else {
          s2 = peg$FAILED;
        ***REMOVED***
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c24(s1, s2);
          s0 = s1;
        ***REMOVED*** else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        ***REMOVED***
      ***REMOVED*** else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      ***REMOVED***

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 ***REMOVED***;

      return s0;
    ***REMOVED***

    function peg$parseatom() {
      var s0;

      var key    = peg$currPos * 32 + 9,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      ***REMOVED***

      s0 = peg$parsewildcard();
      if (s0 === peg$FAILED) {
        s0 = peg$parseidentifier();
        if (s0 === peg$FAILED) {
          s0 = peg$parseattr();
          if (s0 === peg$FAILED) {
            s0 = peg$parsefield();
            if (s0 === peg$FAILED) {
              s0 = peg$parsenegation();
              if (s0 === peg$FAILED) {
                s0 = peg$parsematches();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsehas();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsefirstChild();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parselastChild();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parsenthChild();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parsenthLastChild();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parseclass();
                          ***REMOVED***
                        ***REMOVED***
                      ***REMOVED***
                    ***REMOVED***
                  ***REMOVED***
                ***REMOVED***
              ***REMOVED***
            ***REMOVED***
          ***REMOVED***
        ***REMOVED***
      ***REMOVED***

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 ***REMOVED***;

      return s0;
    ***REMOVED***

    function peg$parsewildcard() {
      var s0, s1;

      var key    = peg$currPos * 32 + 10,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      ***REMOVED***

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 42) {
        s1 = peg$c25;
        peg$currPos++;
      ***REMOVED*** else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c26); ***REMOVED***
      ***REMOVED***
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c27(s1);
      ***REMOVED***
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 ***REMOVED***;

      return s0;
    ***REMOVED***

    function peg$parseidentifier() {
      var s0, s1, s2;

      var key    = peg$currPos * 32 + 11,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      ***REMOVED***

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 35) {
        s1 = peg$c28;
        peg$currPos++;
      ***REMOVED*** else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c29); ***REMOVED***
      ***REMOVED***
      if (s1 === peg$FAILED) {
        s1 = null;
      ***REMOVED***
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifierName();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c30(s2);
          s0 = s1;
        ***REMOVED*** else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        ***REMOVED***
      ***REMOVED*** else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      ***REMOVED***

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 ***REMOVED***;

      return s0;
    ***REMOVED***

    function peg$parseattr() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 32 + 12,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      ***REMOVED***

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c31;
        peg$currPos++;
      ***REMOVED*** else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c32); ***REMOVED***
      ***REMOVED***
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseattrValue();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 93) {
                s5 = peg$c33;
                peg$currPos++;
              ***REMOVED*** else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c34); ***REMOVED***
              ***REMOVED***
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c35(s3);
                s0 = s1;
              ***REMOVED*** else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              ***REMOVED***
            ***REMOVED*** else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            ***REMOVED***
          ***REMOVED*** else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          ***REMOVED***
        ***REMOVED*** else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        ***REMOVED***
      ***REMOVED*** else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      ***REMOVED***

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 ***REMOVED***;

      return s0;
    ***REMOVED***

    function peg$parseattrOps() {
      var s0, s1, s2;

      var key    = peg$currPos * 32 + 13,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      ***REMOVED***

      s0 = peg$currPos;
      if (peg$c36.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      ***REMOVED*** else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c37); ***REMOVED***
      ***REMOVED***
      if (s1 === peg$FAILED) {
        s1 = null;
      ***REMOVED***
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 61) {
          s2 = peg$c38;
          peg$currPos++;
        ***REMOVED*** else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c39); ***REMOVED***
        ***REMOVED***
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c40(s1);
          s0 = s1;
        ***REMOVED*** else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        ***REMOVED***
      ***REMOVED*** else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      ***REMOVED***
      if (s0 === peg$FAILED) {
        if (peg$c41.test(input.charAt(peg$currPos))) {
          s0 = input.charAt(peg$currPos);
          peg$currPos++;
        ***REMOVED*** else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c42); ***REMOVED***
        ***REMOVED***
      ***REMOVED***

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 ***REMOVED***;

      return s0;
    ***REMOVED***

    function peg$parseattrEqOps() {
      var s0, s1, s2;

      var key    = peg$currPos * 32 + 14,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      ***REMOVED***

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 33) {
        s1 = peg$c22;
        peg$currPos++;
      ***REMOVED*** else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c23); ***REMOVED***
      ***REMOVED***
      if (s1 === peg$FAILED) {
        s1 = null;
      ***REMOVED***
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 61) {
          s2 = peg$c38;
          peg$currPos++;
        ***REMOVED*** else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c39); ***REMOVED***
        ***REMOVED***
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c40(s1);
          s0 = s1;
        ***REMOVED*** else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        ***REMOVED***
      ***REMOVED*** else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      ***REMOVED***

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 ***REMOVED***;

      return s0;
    ***REMOVED***

    function peg$parseattrName() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 32 + 15,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      ***REMOVED***

      s0 = peg$currPos;
      s1 = peg$parseidentifierName();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 46) {
          s4 = peg$c43;
          peg$currPos++;
        ***REMOVED*** else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c44); ***REMOVED***
        ***REMOVED***
        if (s4 !== peg$FAILED) {
          s5 = peg$parseidentifierName();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          ***REMOVED*** else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          ***REMOVED***
        ***REMOVED*** else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        ***REMOVED***
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 46) {
            s4 = peg$c43;
            peg$currPos++;
          ***REMOVED*** else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c44); ***REMOVED***
          ***REMOVED***
          if (s4 !== peg$FAILED) {
            s5 = peg$parseidentifierName();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            ***REMOVED*** else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            ***REMOVED***
          ***REMOVED*** else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          ***REMOVED***
        ***REMOVED***
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c45(s1, s2);
          s0 = s1;
        ***REMOVED*** else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        ***REMOVED***
      ***REMOVED*** else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      ***REMOVED***

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 ***REMOVED***;

      return s0;
    ***REMOVED***

    function peg$parseattrValue() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 32 + 16,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      ***REMOVED***

      s0 = peg$currPos;
      s1 = peg$parseattrName();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseattrEqOps();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsetype();
              if (s5 === peg$FAILED) {
                s5 = peg$parseregex();
              ***REMOVED***
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c46(s1, s3, s5);
                s0 = s1;
              ***REMOVED*** else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              ***REMOVED***
            ***REMOVED*** else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            ***REMOVED***
          ***REMOVED*** else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          ***REMOVED***
        ***REMOVED*** else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        ***REMOVED***
      ***REMOVED*** else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      ***REMOVED***
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseattrName();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseattrOps();
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              if (s4 !== peg$FAILED) {
                s5 = peg$parsestring();
                if (s5 === peg$FAILED) {
                  s5 = peg$parsenumber();
                  if (s5 === peg$FAILED) {
                    s5 = peg$parsepath();
                  ***REMOVED***
                ***REMOVED***
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c46(s1, s3, s5);
                  s0 = s1;
                ***REMOVED*** else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                ***REMOVED***
              ***REMOVED*** else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              ***REMOVED***
            ***REMOVED*** else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            ***REMOVED***
          ***REMOVED*** else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          ***REMOVED***
        ***REMOVED*** else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        ***REMOVED***
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseattrName();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c47(s1);
          ***REMOVED***
          s0 = s1;
        ***REMOVED***
      ***REMOVED***

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 ***REMOVED***;

      return s0;
    ***REMOVED***

    function peg$parsestring() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 32 + 17,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      ***REMOVED***

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 34) {
        s1 = peg$c48;
        peg$currPos++;
      ***REMOVED*** else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c49); ***REMOVED***
      ***REMOVED***
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c50.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        ***REMOVED*** else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c51); ***REMOVED***
        ***REMOVED***
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 92) {
            s4 = peg$c52;
            peg$currPos++;
          ***REMOVED*** else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c53); ***REMOVED***
          ***REMOVED***
          if (s4 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            ***REMOVED*** else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c54); ***REMOVED***
            ***REMOVED***
            if (s5 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c55(s4, s5);
              s3 = s4;
            ***REMOVED*** else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            ***REMOVED***
          ***REMOVED*** else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          ***REMOVED***
        ***REMOVED***
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c50.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          ***REMOVED*** else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c51); ***REMOVED***
          ***REMOVED***
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 92) {
              s4 = peg$c52;
              peg$currPos++;
            ***REMOVED*** else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c53); ***REMOVED***
            ***REMOVED***
            if (s4 !== peg$FAILED) {
              if (input.length > peg$currPos) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              ***REMOVED*** else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c54); ***REMOVED***
              ***REMOVED***
              if (s5 !== peg$FAILED) {
                peg$savedPos = s3;
                s4 = peg$c55(s4, s5);
                s3 = s4;
              ***REMOVED*** else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              ***REMOVED***
            ***REMOVED*** else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            ***REMOVED***
          ***REMOVED***
        ***REMOVED***
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 34) {
            s3 = peg$c48;
            peg$currPos++;
          ***REMOVED*** else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c49); ***REMOVED***
          ***REMOVED***
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c56(s2);
            s0 = s1;
          ***REMOVED*** else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          ***REMOVED***
        ***REMOVED*** else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        ***REMOVED***
      ***REMOVED*** else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      ***REMOVED***
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 39) {
          s1 = peg$c57;
          peg$currPos++;
        ***REMOVED*** else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c58); ***REMOVED***
        ***REMOVED***
        if (s1 !== peg$FAILED) {
          s2 = [];
          if (peg$c59.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          ***REMOVED*** else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c60); ***REMOVED***
          ***REMOVED***
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 92) {
              s4 = peg$c52;
              peg$currPos++;
            ***REMOVED*** else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c53); ***REMOVED***
            ***REMOVED***
            if (s4 !== peg$FAILED) {
              if (input.length > peg$currPos) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              ***REMOVED*** else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c54); ***REMOVED***
              ***REMOVED***
              if (s5 !== peg$FAILED) {
                peg$savedPos = s3;
                s4 = peg$c55(s4, s5);
                s3 = s4;
              ***REMOVED*** else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              ***REMOVED***
            ***REMOVED*** else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            ***REMOVED***
          ***REMOVED***
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$c59.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            ***REMOVED*** else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c60); ***REMOVED***
            ***REMOVED***
            if (s3 === peg$FAILED) {
              s3 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 92) {
                s4 = peg$c52;
                peg$currPos++;
              ***REMOVED*** else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c53); ***REMOVED***
              ***REMOVED***
              if (s4 !== peg$FAILED) {
                if (input.length > peg$currPos) {
                  s5 = input.charAt(peg$currPos);
                  peg$currPos++;
                ***REMOVED*** else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c54); ***REMOVED***
                ***REMOVED***
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s3;
                  s4 = peg$c55(s4, s5);
                  s3 = s4;
                ***REMOVED*** else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                ***REMOVED***
              ***REMOVED*** else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              ***REMOVED***
            ***REMOVED***
          ***REMOVED***
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 39) {
              s3 = peg$c57;
              peg$currPos++;
            ***REMOVED*** else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c58); ***REMOVED***
            ***REMOVED***
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c56(s2);
              s0 = s1;
            ***REMOVED*** else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            ***REMOVED***
          ***REMOVED*** else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          ***REMOVED***
        ***REMOVED*** else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        ***REMOVED***
      ***REMOVED***

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 ***REMOVED***;

      return s0;
    ***REMOVED***

    function peg$parsenumber() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 32 + 18,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      ***REMOVED***

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = [];
      if (peg$c61.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      ***REMOVED*** else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c62); ***REMOVED***
      ***REMOVED***
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$c61.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        ***REMOVED*** else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c62); ***REMOVED***
        ***REMOVED***
      ***REMOVED***
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 46) {
          s3 = peg$c43;
          peg$currPos++;
        ***REMOVED*** else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c44); ***REMOVED***
        ***REMOVED***
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        ***REMOVED*** else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        ***REMOVED***
      ***REMOVED*** else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      ***REMOVED***
      if (s1 === peg$FAILED) {
        s1 = null;
      ***REMOVED***
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c61.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        ***REMOVED*** else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c62); ***REMOVED***
        ***REMOVED***
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$c61.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            ***REMOVED*** else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c62); ***REMOVED***
            ***REMOVED***
          ***REMOVED***
        ***REMOVED*** else {
          s2 = peg$FAILED;
        ***REMOVED***
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c63(s1, s2);
          s0 = s1;
        ***REMOVED*** else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        ***REMOVED***
      ***REMOVED*** else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      ***REMOVED***

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 ***REMOVED***;

      return s0;
    ***REMOVED***

    function peg$parsepath() {
      var s0, s1;

      var key    = peg$currPos * 32 + 19,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      ***REMOVED***

      s0 = peg$currPos;
      s1 = peg$parseidentifierName();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c64(s1);
      ***REMOVED***
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 ***REMOVED***;

      return s0;
    ***REMOVED***

    function peg$parsetype() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 32 + 20,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      ***REMOVED***

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c65) {
        s1 = peg$c65;
        peg$currPos += 5;
      ***REMOVED*** else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c66); ***REMOVED***
      ***REMOVED***
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = [];
          if (peg$c67.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          ***REMOVED*** else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c68); ***REMOVED***
          ***REMOVED***
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              if (peg$c67.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
              ***REMOVED*** else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c68); ***REMOVED***
              ***REMOVED***
            ***REMOVED***
          ***REMOVED*** else {
            s3 = peg$FAILED;
          ***REMOVED***
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s5 = peg$c69;
                peg$currPos++;
              ***REMOVED*** else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c70); ***REMOVED***
              ***REMOVED***
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c71(s3);
                s0 = s1;
              ***REMOVED*** else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              ***REMOVED***
            ***REMOVED*** else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            ***REMOVED***
          ***REMOVED*** else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          ***REMOVED***
        ***REMOVED*** else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        ***REMOVED***
      ***REMOVED*** else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      ***REMOVED***

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 ***REMOVED***;

      return s0;
    ***REMOVED***

    function peg$parseflags() {
      var s0, s1;

      var key    = peg$currPos * 32 + 21,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      ***REMOVED***

      s0 = [];
      if (peg$c72.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      ***REMOVED*** else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c73); ***REMOVED***
      ***REMOVED***
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          if (peg$c72.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          ***REMOVED*** else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c73); ***REMOVED***
          ***REMOVED***
        ***REMOVED***
      ***REMOVED*** else {
        s0 = peg$FAILED;
      ***REMOVED***

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 ***REMOVED***;

      return s0;
    ***REMOVED***

    function peg$parseregex() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 32 + 22,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      ***REMOVED***

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 47) {
        s1 = peg$c74;
        peg$currPos++;
      ***REMOVED*** else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c75); ***REMOVED***
      ***REMOVED***
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c76.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        ***REMOVED*** else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c77); ***REMOVED***
        ***REMOVED***
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$c76.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            ***REMOVED*** else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c77); ***REMOVED***
            ***REMOVED***
          ***REMOVED***
        ***REMOVED*** else {
          s2 = peg$FAILED;
        ***REMOVED***
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 47) {
            s3 = peg$c74;
            peg$currPos++;
          ***REMOVED*** else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c75); ***REMOVED***
          ***REMOVED***
          if (s3 !== peg$FAILED) {
            s4 = peg$parseflags();
            if (s4 === peg$FAILED) {
              s4 = null;
            ***REMOVED***
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c78(s2, s4);
              s0 = s1;
            ***REMOVED*** else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            ***REMOVED***
          ***REMOVED*** else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          ***REMOVED***
        ***REMOVED*** else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        ***REMOVED***
      ***REMOVED*** else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      ***REMOVED***

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 ***REMOVED***;

      return s0;
    ***REMOVED***

    function peg$parsefield() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 32 + 23,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      ***REMOVED***

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s1 = peg$c43;
        peg$currPos++;
      ***REMOVED*** else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c44); ***REMOVED***
      ***REMOVED***
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifierName();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 46) {
            s5 = peg$c43;
            peg$currPos++;
          ***REMOVED*** else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c44); ***REMOVED***
          ***REMOVED***
          if (s5 !== peg$FAILED) {
            s6 = peg$parseidentifierName();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            ***REMOVED*** else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            ***REMOVED***
          ***REMOVED*** else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          ***REMOVED***
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 46) {
              s5 = peg$c43;
              peg$currPos++;
            ***REMOVED*** else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c44); ***REMOVED***
            ***REMOVED***
            if (s5 !== peg$FAILED) {
              s6 = peg$parseidentifierName();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              ***REMOVED*** else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              ***REMOVED***
            ***REMOVED*** else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            ***REMOVED***
          ***REMOVED***
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c79(s2, s3);
            s0 = s1;
          ***REMOVED*** else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          ***REMOVED***
        ***REMOVED*** else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        ***REMOVED***
      ***REMOVED*** else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      ***REMOVED***

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 ***REMOVED***;

      return s0;
    ***REMOVED***

    function peg$parsenegation() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 32 + 24,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      ***REMOVED***

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c80) {
        s1 = peg$c80;
        peg$currPos += 5;
      ***REMOVED*** else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c81); ***REMOVED***
      ***REMOVED***
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseselectors();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s5 = peg$c69;
                peg$currPos++;
              ***REMOVED*** else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c70); ***REMOVED***
              ***REMOVED***
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c82(s3);
                s0 = s1;
              ***REMOVED*** else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              ***REMOVED***
            ***REMOVED*** else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            ***REMOVED***
          ***REMOVED*** else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          ***REMOVED***
        ***REMOVED*** else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        ***REMOVED***
      ***REMOVED*** else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      ***REMOVED***

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 ***REMOVED***;

      return s0;
    ***REMOVED***

    function peg$parsematches() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 32 + 25,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      ***REMOVED***

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9) === peg$c83) {
        s1 = peg$c83;
        peg$currPos += 9;
      ***REMOVED*** else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c84); ***REMOVED***
      ***REMOVED***
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseselectors();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s5 = peg$c69;
                peg$currPos++;
              ***REMOVED*** else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c70); ***REMOVED***
              ***REMOVED***
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c85(s3);
                s0 = s1;
              ***REMOVED*** else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              ***REMOVED***
            ***REMOVED*** else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            ***REMOVED***
          ***REMOVED*** else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          ***REMOVED***
        ***REMOVED*** else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        ***REMOVED***
      ***REMOVED*** else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      ***REMOVED***

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 ***REMOVED***;

      return s0;
    ***REMOVED***

    function peg$parsehas() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 32 + 26,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      ***REMOVED***

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c86) {
        s1 = peg$c86;
        peg$currPos += 5;
      ***REMOVED*** else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c87); ***REMOVED***
      ***REMOVED***
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsehasSelectors();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s5 = peg$c69;
                peg$currPos++;
              ***REMOVED*** else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c70); ***REMOVED***
              ***REMOVED***
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c88(s3);
                s0 = s1;
              ***REMOVED*** else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              ***REMOVED***
            ***REMOVED*** else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            ***REMOVED***
          ***REMOVED*** else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          ***REMOVED***
        ***REMOVED*** else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        ***REMOVED***
      ***REMOVED*** else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      ***REMOVED***

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 ***REMOVED***;

      return s0;
    ***REMOVED***

    function peg$parsefirstChild() {
      var s0, s1;

      var key    = peg$currPos * 32 + 27,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      ***REMOVED***

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 12) === peg$c89) {
        s1 = peg$c89;
        peg$currPos += 12;
      ***REMOVED*** else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c90); ***REMOVED***
      ***REMOVED***
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c91();
      ***REMOVED***
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 ***REMOVED***;

      return s0;
    ***REMOVED***

    function peg$parselastChild() {
      var s0, s1;

      var key    = peg$currPos * 32 + 28,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      ***REMOVED***

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 11) === peg$c92) {
        s1 = peg$c92;
        peg$currPos += 11;
      ***REMOVED*** else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c93); ***REMOVED***
      ***REMOVED***
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c94();
      ***REMOVED***
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 ***REMOVED***;

      return s0;
    ***REMOVED***

    function peg$parsenthChild() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 32 + 29,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      ***REMOVED***

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 11) === peg$c95) {
        s1 = peg$c95;
        peg$currPos += 11;
      ***REMOVED*** else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c96); ***REMOVED***
      ***REMOVED***
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = [];
          if (peg$c61.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          ***REMOVED*** else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c62); ***REMOVED***
          ***REMOVED***
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              if (peg$c61.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
              ***REMOVED*** else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c62); ***REMOVED***
              ***REMOVED***
            ***REMOVED***
          ***REMOVED*** else {
            s3 = peg$FAILED;
          ***REMOVED***
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s5 = peg$c69;
                peg$currPos++;
              ***REMOVED*** else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c70); ***REMOVED***
              ***REMOVED***
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c97(s3);
                s0 = s1;
              ***REMOVED*** else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              ***REMOVED***
            ***REMOVED*** else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            ***REMOVED***
          ***REMOVED*** else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          ***REMOVED***
        ***REMOVED*** else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        ***REMOVED***
      ***REMOVED*** else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      ***REMOVED***

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 ***REMOVED***;

      return s0;
    ***REMOVED***

    function peg$parsenthLastChild() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 32 + 30,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      ***REMOVED***

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 16) === peg$c98) {
        s1 = peg$c98;
        peg$currPos += 16;
      ***REMOVED*** else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c99); ***REMOVED***
      ***REMOVED***
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = [];
          if (peg$c61.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          ***REMOVED*** else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c62); ***REMOVED***
          ***REMOVED***
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              if (peg$c61.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
              ***REMOVED*** else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c62); ***REMOVED***
              ***REMOVED***
            ***REMOVED***
          ***REMOVED*** else {
            s3 = peg$FAILED;
          ***REMOVED***
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s5 = peg$c69;
                peg$currPos++;
              ***REMOVED*** else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c70); ***REMOVED***
              ***REMOVED***
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c100(s3);
                s0 = s1;
              ***REMOVED*** else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              ***REMOVED***
            ***REMOVED*** else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            ***REMOVED***
          ***REMOVED*** else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          ***REMOVED***
        ***REMOVED*** else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        ***REMOVED***
      ***REMOVED*** else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      ***REMOVED***

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 ***REMOVED***;

      return s0;
    ***REMOVED***

    function peg$parseclass() {
      var s0, s1, s2;

      var key    = peg$currPos * 32 + 31,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      ***REMOVED***

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 58) {
        s1 = peg$c101;
        peg$currPos++;
      ***REMOVED*** else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c102); ***REMOVED***
      ***REMOVED***
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifierName();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c103(s2);
          s0 = s1;
        ***REMOVED*** else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        ***REMOVED***
      ***REMOVED*** else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      ***REMOVED***

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 ***REMOVED***;

      return s0;
    ***REMOVED***


      function nth(n) { return { type: 'nth-child', index: { type: 'literal', value: n ***REMOVED*** ***REMOVED***; ***REMOVED***
      function nthLast(n) { return { type: 'nth-last-child', index: { type: 'literal', value: n ***REMOVED*** ***REMOVED***; ***REMOVED***
      function strUnescape(s) {
        return s.replace(/\\(.)/g, function(match, ch) {
          switch(ch) {
            case 'b': return '\b';
            case 'f': return '\f';
            case 'n': return '\n';
            case 'r': return '\r';
            case 't': return '\t';
            case 'v': return '\v';
            default: return ch;
          ***REMOVED***
        ***REMOVED***);
      ***REMOVED***


    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    ***REMOVED*** else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail(peg$endExpectation());
      ***REMOVED***

      throw peg$buildStructuredError(
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    ***REMOVED***
  ***REMOVED***

  return {
    SyntaxError: peg$SyntaxError,
    parse:       peg$parse
  ***REMOVED***;
***REMOVED***);
