'use strict';

var GetIntrinsic = require('get-intrinsic');

var $ObjectCreate = GetIntrinsic('%Object.create%', true);
var $TypeError = require('es-errors/type');
var $SyntaxError = require('es-errors/syntax');

var IsArray = require('./IsArray');

var forEach = require('../helpers/forEach');
var isObject = require('../helpers/isObject');

var SLOT = require('internal-slot');

var hasProto = require('has-proto')();

// https://262.ecma-international.org/6.0/#sec-objectcreate

module.exports = function ObjectCreate(proto, internalSlotsList) {
	if (proto !== null && !isObject(proto)) {
		throw new $TypeError('Assertion failed: `proto` must be null or an object');
	***REMOVED***
	var slots = arguments.length < 2 ? [] : internalSlotsList; // step 1
	if (arguments.length >= 2 && !IsArray(slots)) {
		throw new $TypeError('Assertion failed: `internalSlotsList` must be an Array');
	***REMOVED***

	var O;
	if ($ObjectCreate) {
		O = $ObjectCreate(proto);
	***REMOVED*** else if (hasProto) {
		O = { __proto__: proto ***REMOVED***;
	***REMOVED*** else {
		if (proto === null) {
			throw new $SyntaxError('native Object.create support is required to create null objects');
		***REMOVED***
		var T = function T() {***REMOVED***;
		T.prototype = proto;
		O = new T();
	***REMOVED***

	if (slots.length > 0) {
		forEach(slots, function (slot) {
			SLOT.set(O, slot, void undefined);
		***REMOVED***);
	***REMOVED***

	return O; // step 6
***REMOVED***;
