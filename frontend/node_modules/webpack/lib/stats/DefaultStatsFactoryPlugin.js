/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const util = require("util");
const { WEBPACK_MODULE_TYPE_RUNTIME ***REMOVED*** = require("../ModuleTypeConstants");
const ModuleDependency = require("../dependencies/ModuleDependency");
const formatLocation = require("../formatLocation");
const { LogType ***REMOVED*** = require("../logging/Logger");
const AggressiveSplittingPlugin = require("../optimize/AggressiveSplittingPlugin");
const SizeLimitsPlugin = require("../performance/SizeLimitsPlugin");
const { countIterable ***REMOVED*** = require("../util/IterableHelpers");
const {
	compareLocations,
	compareChunksById,
	compareNumbers,
	compareIds,
	concatComparators,
	compareSelect,
	compareModulesByIdentifier
***REMOVED*** = require("../util/comparators");
const { makePathsRelative, parseResource ***REMOVED*** = require("../util/identifier");

/** @typedef {import("webpack-sources").Source***REMOVED*** Source */
/** @typedef {import("../Chunk")***REMOVED*** Chunk */
/** @typedef {import("../Chunk").ChunkId***REMOVED*** ChunkId */
/** @typedef {import("../Chunk").ChunkName***REMOVED*** ChunkName */
/** @typedef {import("../ChunkGraph").ModuleId***REMOVED*** ModuleId */
/** @typedef {import("../ChunkGroup")***REMOVED*** ChunkGroup */
/** @typedef {import("../ChunkGroup").OriginRecord***REMOVED*** OriginRecord */
/** @typedef {import("../Compilation")***REMOVED*** Compilation */
/** @typedef {import("../Compilation").Asset***REMOVED*** Asset */
/** @typedef {import("../Compilation").AssetInfo***REMOVED*** AssetInfo */
/** @typedef {import("../Compilation").ExcludeModulesType***REMOVED*** ExcludeModulesType */
/** @typedef {import("../Compilation").KnownNormalizedStatsOptions***REMOVED*** KnownNormalizedStatsOptions */
/** @typedef {import("../Compilation").NormalizedStatsOptions***REMOVED*** NormalizedStatsOptions */
/** @typedef {import("../Compiler")***REMOVED*** Compiler */
/** @typedef {import("../Dependency")***REMOVED*** Dependency */
/** @typedef {import("../Dependency").DependencyLocation***REMOVED*** DependencyLocation */
/** @typedef {import("../Module")***REMOVED*** Module */
/** @typedef {import("../Module").BuildInfo***REMOVED*** BuildInfo */
/** @typedef {import("../ModuleGraphConnection")***REMOVED*** ModuleGraphConnection */
/** @typedef {import("../ModuleProfile")***REMOVED*** ModuleProfile */
/** @typedef {import("../RequestShortener")***REMOVED*** RequestShortener */
/** @typedef {import("../TemplatedPathPlugin").TemplatePath***REMOVED*** TemplatePath */
/** @typedef {import("../WebpackError")***REMOVED*** WebpackError */
/** @typedef {import("../util/runtime").RuntimeSpec***REMOVED*** RuntimeSpec */
/** @typedef {import("./StatsFactory")***REMOVED*** StatsFactory */
/** @typedef {import("./StatsFactory").StatsFactoryContext***REMOVED*** StatsFactoryContext */

/**
 * @template T
 * @typedef {import("../util/comparators").Comparator<T>***REMOVED*** Comparator<T>
 */

/**
 * @template T, R
 * @typedef {import("../util/smartGrouping").GroupConfig<T, R>***REMOVED*** GroupConfig
 */

/** @typedef {KnownStatsCompilation & Record<string, EXPECTED_ANY>***REMOVED*** StatsCompilation */
/**
 * @typedef {object***REMOVED*** KnownStatsCompilation
 * @property {Record<string, EXPECTED_ANY>=***REMOVED*** env
 * @property {string=***REMOVED*** name
 * @property {string=***REMOVED*** hash
 * @property {string=***REMOVED*** version
 * @property {number=***REMOVED*** time
 * @property {number=***REMOVED*** builtAt
 * @property {boolean=***REMOVED*** needAdditionalPass
 * @property {string=***REMOVED*** publicPath
 * @property {string=***REMOVED*** outputPath
 * @property {Record<string, string[]>=***REMOVED*** assetsByChunkName
 * @property {StatsAsset[]=***REMOVED*** assets
 * @property {number=***REMOVED*** filteredAssets
 * @property {StatsChunk[]=***REMOVED*** chunks
 * @property {StatsModule[]=***REMOVED*** modules
 * @property {number=***REMOVED*** filteredModules
 * @property {Record<string, StatsChunkGroup>=***REMOVED*** entrypoints
 * @property {Record<string, StatsChunkGroup>=***REMOVED*** namedChunkGroups
 * @property {StatsError[]=***REMOVED*** errors
 * @property {number=***REMOVED*** errorsCount
 * @property {StatsError[]=***REMOVED*** warnings
 * @property {number=***REMOVED*** warningsCount
 * @property {StatsCompilation[]=***REMOVED*** children
 * @property {Record<string, StatsLogging>=***REMOVED*** logging
 * @property {number=***REMOVED*** filteredWarningDetailsCount
 * @property {number=***REMOVED*** filteredErrorDetailsCount
 */

/** @typedef {KnownStatsLogging & Record<string, EXPECTED_ANY>***REMOVED*** StatsLogging */
/**
 * @typedef {object***REMOVED*** KnownStatsLogging
 * @property {StatsLoggingEntry[]***REMOVED*** entries
 * @property {number***REMOVED*** filteredEntries
 * @property {boolean***REMOVED*** debug
 */

/** @typedef {KnownStatsLoggingEntry & Record<string, EXPECTED_ANY>***REMOVED*** StatsLoggingEntry */
/**
 * @typedef {object***REMOVED*** KnownStatsLoggingEntry
 * @property {string***REMOVED*** type
 * @property {string=***REMOVED*** message
 * @property {string[]=***REMOVED*** trace
 * @property {StatsLoggingEntry[]=***REMOVED*** children
 * @property {EXPECTED_ANY[]=***REMOVED*** args
 * @property {number=***REMOVED*** time
 */

/** @typedef {KnownStatsAsset & Record<string, EXPECTED_ANY>***REMOVED*** StatsAsset */
/** @typedef {ChunkId***REMOVED*** KnownStatsAssetChunk */
/** @typedef {ChunkName***REMOVED*** KnownStatsAssetChunkName */
/** @typedef {string***REMOVED*** KnownStatsAssetChunkIdHint */
/**
 * @typedef {object***REMOVED*** KnownStatsAsset
 * @property {string***REMOVED*** type
 * @property {string***REMOVED*** name
 * @property {AssetInfo***REMOVED*** info
 * @property {number***REMOVED*** size
 * @property {boolean***REMOVED*** emitted
 * @property {boolean***REMOVED*** comparedForEmit
 * @property {boolean***REMOVED*** cached
 * @property {StatsAsset[]=***REMOVED*** related
 * @property {KnownStatsAssetChunk[]=***REMOVED*** chunks
 * @property {KnownStatsAssetChunkName[]=***REMOVED*** chunkNames
 * @property {KnownStatsAssetChunkIdHint[]=***REMOVED*** chunkIdHints
 * @property {KnownStatsAssetChunk[]=***REMOVED*** auxiliaryChunks
 * @property {KnownStatsAssetChunkName[]=***REMOVED*** auxiliaryChunkNames
 * @property {KnownStatsAssetChunkIdHint[]=***REMOVED*** auxiliaryChunkIdHints
 * @property {number=***REMOVED*** filteredRelated
 * @property {boolean=***REMOVED*** isOverSizeLimit
 */

/** @typedef {KnownStatsChunkGroup & Record<string, EXPECTED_ANY>***REMOVED*** StatsChunkGroup */
/**
 * @typedef {object***REMOVED*** KnownStatsChunkGroup
 * @property {(string | null)=***REMOVED*** name
 * @property {(string | number)[]=***REMOVED*** chunks
 * @property {({ name: string, size?: number ***REMOVED***)[]=***REMOVED*** assets
 * @property {number=***REMOVED*** filteredAssets
 * @property {number=***REMOVED*** assetsSize
 * @property {({ name: string, size?: number ***REMOVED***)[]=***REMOVED*** auxiliaryAssets
 * @property {number=***REMOVED*** filteredAuxiliaryAssets
 * @property {number=***REMOVED*** auxiliaryAssetsSize
 * @property {{ [x: string]: StatsChunkGroup[] ***REMOVED***=***REMOVED*** children
 * @property {{ [x: string]: string[] ***REMOVED***=***REMOVED*** childAssets
 * @property {boolean=***REMOVED*** isOverSizeLimit
 */

/** @typedef {Module[]***REMOVED*** ModuleIssuerPath */
/** @typedef {KnownStatsModule & Record<string, EXPECTED_ANY>***REMOVED*** StatsModule */
/**
 * @typedef {object***REMOVED*** KnownStatsModule
 * @property {string=***REMOVED*** type
 * @property {string=***REMOVED*** moduleType
 * @property {(string | null)=***REMOVED*** layer
 * @property {string=***REMOVED*** identifier
 * @property {string=***REMOVED*** name
 * @property {(string | null)=***REMOVED*** nameForCondition
 * @property {number=***REMOVED*** index
 * @property {number=***REMOVED*** preOrderIndex
 * @property {number=***REMOVED*** index2
 * @property {number=***REMOVED*** postOrderIndex
 * @property {number=***REMOVED*** size
 * @property {{ [x: string]: number ***REMOVED***=***REMOVED*** sizes
 * @property {boolean=***REMOVED*** cacheable
 * @property {boolean=***REMOVED*** built
 * @property {boolean=***REMOVED*** codeGenerated
 * @property {boolean=***REMOVED*** buildTimeExecuted
 * @property {boolean=***REMOVED*** cached
 * @property {boolean=***REMOVED*** optional
 * @property {boolean=***REMOVED*** orphan
 * @property {string | number=***REMOVED*** id
 * @property {string | number | null=***REMOVED*** issuerId
 * @property {(string | number)[]=***REMOVED*** chunks
 * @property {(string | number)[]=***REMOVED*** assets
 * @property {boolean=***REMOVED*** dependent
 * @property {(string | null)=***REMOVED*** issuer
 * @property {(string | null)=***REMOVED*** issuerName
 * @property {StatsModuleIssuer[] | null=***REMOVED*** issuerPath
 * @property {boolean=***REMOVED*** failed
 * @property {number=***REMOVED*** errors
 * @property {number=***REMOVED*** warnings
 * @property {StatsProfile=***REMOVED*** profile
 * @property {StatsModuleReason[]=***REMOVED*** reasons
 * @property {(boolean | null | string[])=***REMOVED*** usedExports
 * @property {(string[] | null)=***REMOVED*** providedExports
 * @property {string[]=***REMOVED*** optimizationBailout
 * @property {(number | null)=***REMOVED*** depth
 * @property {StatsModule[]=***REMOVED*** modules
 * @property {number=***REMOVED*** filteredModules
 * @property {ReturnType<Source["source"]>=***REMOVED*** source
 */

/** @typedef {KnownStatsProfile & Record<string, EXPECTED_ANY>***REMOVED*** StatsProfile */
/**
 * @typedef {object***REMOVED*** KnownStatsProfile
 * @property {number***REMOVED*** total
 * @property {number***REMOVED*** resolving
 * @property {number***REMOVED*** restoring
 * @property {number***REMOVED*** building
 * @property {number***REMOVED*** integration
 * @property {number***REMOVED*** storing
 * @property {number***REMOVED*** additionalResolving
 * @property {number***REMOVED*** additionalIntegration
 * @property {number***REMOVED*** factory
 * @property {number***REMOVED*** dependencies
 */

/** @typedef {KnownStatsModuleIssuer & Record<string, EXPECTED_ANY>***REMOVED*** StatsModuleIssuer */
/**
 * @typedef {object***REMOVED*** KnownStatsModuleIssuer
 * @property {string***REMOVED*** identifier
 * @property {string***REMOVED*** name
 * @property {(string|number)=***REMOVED*** id
 * @property {StatsProfile***REMOVED*** profile
 */

/** @typedef {KnownStatsModuleReason & Record<string, EXPECTED_ANY>***REMOVED*** StatsModuleReason */
/**
 * @typedef {object***REMOVED*** KnownStatsModuleReason
 * @property {string | null***REMOVED*** moduleIdentifier
 * @property {string | null***REMOVED*** module
 * @property {string | null***REMOVED*** moduleName
 * @property {string | null***REMOVED*** resolvedModuleIdentifier
 * @property {string | null***REMOVED*** resolvedModule
 * @property {string | null***REMOVED*** type
 * @property {boolean***REMOVED*** active
 * @property {string | null***REMOVED*** explanation
 * @property {string | null***REMOVED*** userRequest
 * @property {(string | null)=***REMOVED*** loc
 * @property {(string | number | null)=***REMOVED*** moduleId
 * @property {(string | number | null)=***REMOVED*** resolvedModuleId
 */

/** @typedef {KnownStatsChunk & Record<string, EXPECTED_ANY>***REMOVED*** StatsChunk */
/**
 * @typedef {object***REMOVED*** KnownStatsChunk
 * @property {boolean***REMOVED*** rendered
 * @property {boolean***REMOVED*** initial
 * @property {boolean***REMOVED*** entry
 * @property {boolean***REMOVED*** recorded
 * @property {string=***REMOVED*** reason
 * @property {number***REMOVED*** size
 * @property {Record<string, number>***REMOVED*** sizes
 * @property {string[]***REMOVED*** names
 * @property {string[]***REMOVED*** idHints
 * @property {string[]=***REMOVED*** runtime
 * @property {string[]***REMOVED*** files
 * @property {string[]***REMOVED*** auxiliaryFiles
 * @property {string***REMOVED*** hash
 * @property {Record<string, ChunkId[]>***REMOVED*** childrenByOrder
 * @property {(string|number)=***REMOVED*** id
 * @property {(string|number)[]=***REMOVED*** siblings
 * @property {(string|number)[]=***REMOVED*** parents
 * @property {(string|number)[]=***REMOVED*** children
 * @property {StatsModule[]=***REMOVED*** modules
 * @property {number=***REMOVED*** filteredModules
 * @property {StatsChunkOrigin[]=***REMOVED*** origins
 */

/** @typedef {KnownStatsChunkOrigin & Record<string, EXPECTED_ANY>***REMOVED*** StatsChunkOrigin */
/**
 * @typedef {object***REMOVED*** KnownStatsChunkOrigin
 * @property {string***REMOVED*** module
 * @property {string***REMOVED*** moduleIdentifier
 * @property {string***REMOVED*** moduleName
 * @property {string***REMOVED*** loc
 * @property {string***REMOVED*** request
 * @property {(string | number)=***REMOVED*** moduleId
 */

/** @typedef {KnownStatsModuleTraceItem & Record<string, EXPECTED_ANY>***REMOVED*** StatsModuleTraceItem */
/**
 * @typedef {object***REMOVED*** KnownStatsModuleTraceItem
 * @property {string=***REMOVED*** originIdentifier
 * @property {string=***REMOVED*** originName
 * @property {string=***REMOVED*** moduleIdentifier
 * @property {string=***REMOVED*** moduleName
 * @property {StatsModuleTraceDependency[]=***REMOVED*** dependencies
 * @property {(string|number)=***REMOVED*** originId
 * @property {(string|number)=***REMOVED*** moduleId
 */

/** @typedef {KnownStatsModuleTraceDependency & Record<string, EXPECTED_ANY>***REMOVED*** StatsModuleTraceDependency */
/**
 * @typedef {object***REMOVED*** KnownStatsModuleTraceDependency
 * @property {string=***REMOVED*** loc
 */

/** @typedef {KnownStatsError & Record<string, EXPECTED_ANY>***REMOVED*** StatsError */
/**
 * @typedef {object***REMOVED*** KnownStatsError
 * @property {string***REMOVED*** message
 * @property {string=***REMOVED*** chunkName
 * @property {boolean=***REMOVED*** chunkEntry
 * @property {boolean=***REMOVED*** chunkInitial
 * @property {string=***REMOVED*** file
 * @property {string=***REMOVED*** moduleIdentifier
 * @property {string=***REMOVED*** moduleName
 * @property {string=***REMOVED*** loc
 * @property {ChunkId=***REMOVED*** chunkId
 * @property {string|number=***REMOVED*** moduleId
 * @property {StatsModuleTraceItem[]=***REMOVED*** moduleTrace
 * @property {string=***REMOVED*** details
 * @property {string=***REMOVED*** stack
 * @property {KnownStatsError=***REMOVED*** cause
 * @property {KnownStatsError[]=***REMOVED*** errors
 * @property {string=***REMOVED*** compilerPath
 */

/** @typedef {Asset & { type: string, related: PreprocessedAsset[] | undefined ***REMOVED******REMOVED*** PreprocessedAsset */

/**
 * @template T
 * @template O
 * @typedef {Record<string, (object: O, data: T, context: StatsFactoryContext, options: NormalizedStatsOptions, factory: StatsFactory) => void>***REMOVED*** ExtractorsByOption
 */

/** @typedef {{ name: string, chunkGroup: ChunkGroup ***REMOVED******REMOVED*** ChunkGroupInfoWithName */
/** @typedef {{ origin: Module, module: Module ***REMOVED******REMOVED*** ModuleTrace */

/**
 * @typedef {object***REMOVED*** SimpleExtractors
 * @property {ExtractorsByOption<Compilation, StatsCompilation>***REMOVED*** compilation
 * @property {ExtractorsByOption<PreprocessedAsset, StatsAsset>***REMOVED*** asset
 * @property {ExtractorsByOption<PreprocessedAsset, StatsAsset>***REMOVED*** asset$visible
 * @property {ExtractorsByOption<ChunkGroupInfoWithName, StatsChunkGroup>***REMOVED*** chunkGroup
 * @property {ExtractorsByOption<Module, StatsModule>***REMOVED*** module
 * @property {ExtractorsByOption<Module, StatsModule>***REMOVED*** module$visible
 * @property {ExtractorsByOption<Module, StatsModuleIssuer>***REMOVED*** moduleIssuer
 * @property {ExtractorsByOption<ModuleProfile, StatsProfile>***REMOVED*** profile
 * @property {ExtractorsByOption<ModuleGraphConnection, StatsModuleReason>***REMOVED*** moduleReason
 * @property {ExtractorsByOption<Chunk, StatsChunk>***REMOVED*** chunk
 * @property {ExtractorsByOption<OriginRecord, StatsChunkOrigin>***REMOVED*** chunkOrigin
 * @property {ExtractorsByOption<WebpackError, StatsError>***REMOVED*** error
 * @property {ExtractorsByOption<WebpackError, StatsError>***REMOVED*** warning
 * @property {ExtractorsByOption<WebpackError, StatsError>***REMOVED*** cause
 * @property {ExtractorsByOption<ModuleTrace, StatsModuleTraceItem>***REMOVED*** moduleTraceItem
 * @property {ExtractorsByOption<Dependency, StatsModuleTraceDependency>***REMOVED*** moduleTraceDependency
 */

/**
 * @template T
 * @template I
 * @param {Iterable<T>***REMOVED*** items items to select from
 * @param {(item: T) => Iterable<I>***REMOVED*** selector selector function to select values from item
 * @returns {I[]***REMOVED*** array of values
 */
const uniqueArray = (items, selector) => {
	/** @type {Set<I>***REMOVED*** */
	const set = new Set();
	for (const item of items) {
		for (const i of selector(item)) {
			set.add(i);
		***REMOVED***
	***REMOVED***
	return Array.from(set);
***REMOVED***;

/**
 * @template T
 * @template I
 * @param {Iterable<T>***REMOVED*** items items to select from
 * @param {(item: T) => Iterable<I>***REMOVED*** selector selector function to select values from item
 * @param {Comparator<I>***REMOVED*** comparator comparator function
 * @returns {I[]***REMOVED*** array of values
 */
const uniqueOrderedArray = (items, selector, comparator) =>
	uniqueArray(items, selector).sort(comparator);

/** @template T @template R @typedef {{ [P in keyof T]: R ***REMOVED******REMOVED*** MappedValues<T, R> */

/**
 * @template {object***REMOVED*** T
 * @template {object***REMOVED*** R
 * @param {T***REMOVED*** obj object to be mapped
 * @param {function(T[keyof T], keyof T): R***REMOVED*** fn mapping function
 * @returns {MappedValues<T, R>***REMOVED*** mapped object
 */
const mapObject = (obj, fn) => {
	const newObj = Object.create(null);
	for (const key of Object.keys(obj)) {
		newObj[key] = fn(
			obj[/** @type {keyof T***REMOVED*** */ (key)],
			/** @type {keyof T***REMOVED*** */ (key)
		);
	***REMOVED***
	return newObj;
***REMOVED***;

/**
 * @template T
 * @param {Compilation***REMOVED*** compilation the compilation
 * @param {(compilation: Compilation, name: string) => T[]***REMOVED*** getItems get items
 * @returns {number***REMOVED*** total number
 */
const countWithChildren = (compilation, getItems) => {
	let count = getItems(compilation, "").length;
	for (const child of compilation.children) {
		count += countWithChildren(child, (c, type) =>
			getItems(c, `.children[].compilation${type***REMOVED***`)
		);
	***REMOVED***
	return count;
***REMOVED***;

/** @typedef {Error & { cause?: unknown ***REMOVED******REMOVED*** ErrorWithCause */
/** @typedef {Error & { errors: EXPECTED_ANY[] ***REMOVED******REMOVED*** AggregateError */

/** @type {ExtractorsByOption<string | ErrorWithCause | AggregateError | WebpackError, StatsError>***REMOVED*** */
const EXTRACT_ERROR = {
	_: (object, error, context, { requestShortener ***REMOVED***) => {
		// TODO webpack 6 disallow strings in the errors/warnings list
		if (typeof error === "string") {
			object.message = error;
		***REMOVED*** else {
			if (/** @type {WebpackError***REMOVED*** */ (error).chunk) {
				const chunk = /** @type {WebpackError***REMOVED*** */ (error).chunk;
				object.chunkName =
					/** @type {string | undefined***REMOVED*** */
					(chunk.name);
				object.chunkEntry = chunk.hasRuntime();
				object.chunkInitial = chunk.canBeInitial();
			***REMOVED***

			if (/** @type {WebpackError***REMOVED*** */ (error).file) {
				object.file = /** @type {WebpackError***REMOVED*** */ (error).file;
			***REMOVED***

			if (/** @type {WebpackError***REMOVED*** */ (error).module) {
				object.moduleIdentifier =
					/** @type {WebpackError***REMOVED*** */
					(error).module.identifier();
				object.moduleName =
					/** @type {WebpackError***REMOVED*** */
					(error).module.readableIdentifier(requestShortener);
			***REMOVED***

			if (/** @type {WebpackError***REMOVED*** */ (error).loc) {
				object.loc = formatLocation(/** @type {WebpackError***REMOVED*** */ (error).loc);
			***REMOVED***

			object.message = error.message;
		***REMOVED***
	***REMOVED***,
	ids: (object, error, { compilation: { chunkGraph ***REMOVED*** ***REMOVED***) => {
		if (typeof error !== "string") {
			if (/** @type {WebpackError***REMOVED*** */ (error).chunk) {
				object.chunkId = /** @type {ChunkId***REMOVED*** */ (
					/** @type {WebpackError***REMOVED*** */
					(error).chunk.id
				);
			***REMOVED***

			if (/** @type {WebpackError***REMOVED*** */ (error).module) {
				object.moduleId =
					/** @type {ModuleId***REMOVED*** */
					(chunkGraph.getModuleId(/** @type {WebpackError***REMOVED*** */ (error).module));
			***REMOVED***
		***REMOVED***
	***REMOVED***,
	moduleTrace: (object, error, context, options, factory) => {
		if (
			typeof error !== "string" &&
			/** @type {WebpackError***REMOVED*** */ (error).module
		) {
			const {
				type,
				compilation: { moduleGraph ***REMOVED***
			***REMOVED*** = context;
			/** @type {Set<Module>***REMOVED*** */
			const visitedModules = new Set();
			/** @type {ModuleTrace[]***REMOVED*** */
			const moduleTrace = [];
			let current = /** @type {WebpackError***REMOVED*** */ (error).module;
			while (current) {
				if (visitedModules.has(current)) break; // circular (technically impossible, but how knows)
				visitedModules.add(current);
				const origin = moduleGraph.getIssuer(current);
				if (!origin) break;
				moduleTrace.push({ origin, module: current ***REMOVED***);
				current = origin;
			***REMOVED***
			object.moduleTrace = factory.create(
				`${type***REMOVED***.moduleTrace`,
				moduleTrace,
				context
			);
		***REMOVED***
	***REMOVED***,
	errorDetails: (
		object,
		error,
		{ type, compilation, cachedGetErrors, cachedGetWarnings ***REMOVED***,
		{ errorDetails ***REMOVED***
	) => {
		if (
			typeof error !== "string" &&
			(errorDetails === true ||
				(type.endsWith(".error") && cachedGetErrors(compilation).length < 3))
		) {
			object.details = /** @type {WebpackError***REMOVED*** */ (error).details;
		***REMOVED***
	***REMOVED***,
	errorStack: (object, error) => {
		if (typeof error !== "string") {
			object.stack = error.stack;
		***REMOVED***
	***REMOVED***,
	errorCause: (object, error, context, options, factory) => {
		if (
			typeof error !== "string" &&
			/** @type {ErrorWithCause***REMOVED*** */ (error).cause
		) {
			const rawCause = /** @type {ErrorWithCause***REMOVED*** */ (error).cause;
			/** @type {Error***REMOVED*** */
			const cause =
				typeof rawCause === "string"
					? /** @type {Error***REMOVED*** */ ({ message: rawCause ***REMOVED***)
					: /** @type {Error***REMOVED*** */ (rawCause);
			const { type ***REMOVED*** = context;

			object.cause = factory.create(`${type***REMOVED***.cause`, cause, context);
		***REMOVED***
	***REMOVED***,
	errorErrors: (object, error, context, options, factory) => {
		if (
			typeof error !== "string" &&
			/** @type {AggregateError***REMOVED*** */
			(error).errors
		) {
			const { type ***REMOVED*** = context;
			object.errors = factory.create(
				`${type***REMOVED***.errors`,
				/** @type {Error[]***REMOVED*** */
				(/** @type {AggregateError***REMOVED*** */ (error).errors),
				context
			);
		***REMOVED***
	***REMOVED***
***REMOVED***;

/** @type {SimpleExtractors***REMOVED*** */
const SIMPLE_EXTRACTORS = {
	compilation: {
		_: (object, compilation, context, options) => {
			if (!context.makePathsRelative) {
				context.makePathsRelative = makePathsRelative.bindContextCache(
					compilation.compiler.context,
					compilation.compiler.root
				);
			***REMOVED***
			if (!context.cachedGetErrors) {
				const map = new WeakMap();
				context.cachedGetErrors = compilation =>
					map.get(compilation) ||
					// eslint-disable-next-line no-sequences
					(errors => (map.set(compilation, errors), errors))(
						compilation.getErrors()
					);
			***REMOVED***
			if (!context.cachedGetWarnings) {
				const map = new WeakMap();
				context.cachedGetWarnings = compilation =>
					map.get(compilation) ||
					// eslint-disable-next-line no-sequences
					(warnings => (map.set(compilation, warnings), warnings))(
						compilation.getWarnings()
					);
			***REMOVED***
			if (compilation.name) {
				object.name = compilation.name;
			***REMOVED***
			if (compilation.needAdditionalPass) {
				object.needAdditionalPass = true;
			***REMOVED***

			const { logging, loggingDebug, loggingTrace ***REMOVED*** = options;
			if (logging || (loggingDebug && loggingDebug.length > 0)) {
				const util = require("util");
				object.logging = {***REMOVED***;
				let acceptedTypes;
				let collapsedGroups = false;
				switch (logging) {
					case "error":
						acceptedTypes = new Set([LogType.error]);
						break;
					case "warn":
						acceptedTypes = new Set([LogType.error, LogType.warn]);
						break;
					case "info":
						acceptedTypes = new Set([
							LogType.error,
							LogType.warn,
							LogType.info
						]);
						break;
					case "log":
						acceptedTypes = new Set([
							LogType.error,
							LogType.warn,
							LogType.info,
							LogType.log,
							LogType.group,
							LogType.groupEnd,
							LogType.groupCollapsed,
							LogType.clear
						]);
						break;
					case "verbose":
						acceptedTypes = new Set([
							LogType.error,
							LogType.warn,
							LogType.info,
							LogType.log,
							LogType.group,
							LogType.groupEnd,
							LogType.groupCollapsed,
							LogType.profile,
							LogType.profileEnd,
							LogType.time,
							LogType.status,
							LogType.clear
						]);
						collapsedGroups = true;
						break;
					default:
						acceptedTypes = new Set();
						break;
				***REMOVED***
				const cachedMakePathsRelative = makePathsRelative.bindContextCache(
					options.context,
					compilation.compiler.root
				);
				let depthInCollapsedGroup = 0;
				for (const [origin, logEntries] of compilation.logging) {
					const debugMode = loggingDebug.some(fn => fn(origin));
					if (logging === false && !debugMode) continue;
					/** @type {KnownStatsLoggingEntry[]***REMOVED*** */
					const groupStack = [];
					/** @type {KnownStatsLoggingEntry[]***REMOVED*** */
					const rootList = [];
					let currentList = rootList;
					let processedLogEntries = 0;
					for (const entry of logEntries) {
						let type = entry.type;
						if (!debugMode && !acceptedTypes.has(type)) continue;

						// Expand groups in verbose and debug modes
						if (
							type === LogType.groupCollapsed &&
							(debugMode || collapsedGroups)
						)
							type = LogType.group;

						if (depthInCollapsedGroup === 0) {
							processedLogEntries++;
						***REMOVED***

						if (type === LogType.groupEnd) {
							groupStack.pop();
							currentList =
								groupStack.length > 0
									? /** @type {KnownStatsLoggingEntry[]***REMOVED*** */ (
											groupStack[groupStack.length - 1].children
										)
									: rootList;
							if (depthInCollapsedGroup > 0) depthInCollapsedGroup--;
							continue;
						***REMOVED***
						let message;
						if (entry.type === LogType.time) {
							const [label, first, second] =
								/** @type {[string, number, number]***REMOVED*** */
								(entry.args);
							message = `${label***REMOVED***: ${first * 1000 + second / 1000000***REMOVED*** ms`;
						***REMOVED*** else if (entry.args && entry.args.length > 0) {
							message = util.format(entry.args[0], ...entry.args.slice(1));
						***REMOVED***
						/** @type {KnownStatsLoggingEntry***REMOVED*** */
						const newEntry = {
							...entry,
							type,
							message,
							trace: loggingTrace ? entry.trace : undefined,
							children:
								type === LogType.group || type === LogType.groupCollapsed
									? []
									: undefined
						***REMOVED***;
						currentList.push(newEntry);
						if (newEntry.children) {
							groupStack.push(newEntry);
							currentList = newEntry.children;
							if (depthInCollapsedGroup > 0) {
								depthInCollapsedGroup++;
							***REMOVED*** else if (type === LogType.groupCollapsed) {
								depthInCollapsedGroup = 1;
							***REMOVED***
						***REMOVED***
					***REMOVED***
					let name = cachedMakePathsRelative(origin).replace(/\|/g, " ");
					if (name in object.logging) {
						let i = 1;
						while (`${name***REMOVED***#${i***REMOVED***` in object.logging) {
							i++;
						***REMOVED***
						name = `${name***REMOVED***#${i***REMOVED***`;
					***REMOVED***
					object.logging[name] = {
						entries: rootList,
						filteredEntries: logEntries.length - processedLogEntries,
						debug: debugMode
					***REMOVED***;
				***REMOVED***
			***REMOVED***
		***REMOVED***,
		hash: (object, compilation) => {
			object.hash = /** @type {string***REMOVED*** */ (compilation.hash);
		***REMOVED***,
		version: object => {
			object.version = require("../../package.json").version;
		***REMOVED***,
		env: (object, compilation, context, { _env ***REMOVED***) => {
			object.env = _env;
		***REMOVED***,
		timings: (object, compilation) => {
			object.time =
				/** @type {number***REMOVED*** */ (compilation.endTime) -
				/** @type {number***REMOVED*** */ (compilation.startTime);
		***REMOVED***,
		builtAt: (object, compilation) => {
			object.builtAt = /** @type {number***REMOVED*** */ (compilation.endTime);
		***REMOVED***,
		publicPath: (object, compilation) => {
			object.publicPath = compilation.getPath(
				/** @type {TemplatePath***REMOVED*** */
				(compilation.outputOptions.publicPath)
			);
		***REMOVED***,
		outputPath: (object, compilation) => {
			object.outputPath = /** @type {string***REMOVED*** */ (
				compilation.outputOptions.path
			);
		***REMOVED***,
		assets: (object, compilation, context, options, factory) => {
			const { type ***REMOVED*** = context;
			/** @type {Map<string, Chunk[]>***REMOVED*** */
			const compilationFileToChunks = new Map();
			/** @type {Map<string, Chunk[]>***REMOVED*** */
			const compilationAuxiliaryFileToChunks = new Map();
			for (const chunk of compilation.chunks) {
				for (const file of chunk.files) {
					let array = compilationFileToChunks.get(file);
					if (array === undefined) {
						array = [];
						compilationFileToChunks.set(file, array);
					***REMOVED***
					array.push(chunk);
				***REMOVED***
				for (const file of chunk.auxiliaryFiles) {
					let array = compilationAuxiliaryFileToChunks.get(file);
					if (array === undefined) {
						array = [];
						compilationAuxiliaryFileToChunks.set(file, array);
					***REMOVED***
					array.push(chunk);
				***REMOVED***
			***REMOVED***
			/** @type {Map<string, PreprocessedAsset>***REMOVED*** */
			const assetMap = new Map();
			/** @type {Set<PreprocessedAsset>***REMOVED*** */
			const assets = new Set();
			for (const asset of compilation.getAssets()) {
				/** @type {PreprocessedAsset***REMOVED*** */
				const item = {
					...asset,
					type: "asset",
					related: undefined
				***REMOVED***;
				assets.add(item);
				assetMap.set(asset.name, item);
			***REMOVED***
			for (const item of assetMap.values()) {
				const related = item.info.related;
				if (!related) continue;
				for (const type of Object.keys(related)) {
					const relatedEntry = related[type];
					const deps = Array.isArray(relatedEntry)
						? relatedEntry
						: [relatedEntry];
					for (const dep of deps) {
						const depItem = assetMap.get(dep);
						if (!depItem) continue;
						assets.delete(depItem);
						depItem.type = type;
						item.related = item.related || [];
						item.related.push(depItem);
					***REMOVED***
				***REMOVED***
			***REMOVED***

			object.assetsByChunkName = {***REMOVED***;
			for (const [file, chunks] of compilationFileToChunks) {
				for (const chunk of chunks) {
					const name = chunk.name;
					if (!name) continue;
					if (
						!Object.prototype.hasOwnProperty.call(
							object.assetsByChunkName,
							name
						)
					) {
						object.assetsByChunkName[name] = [];
					***REMOVED***
					object.assetsByChunkName[name].push(file);
				***REMOVED***
			***REMOVED***

			const groupedAssets = factory.create(
				`${type***REMOVED***.assets`,
				Array.from(assets),
				{
					...context,
					compilationFileToChunks,
					compilationAuxiliaryFileToChunks
				***REMOVED***
			);
			const limited = spaceLimited(
				groupedAssets,
				/** @type {number***REMOVED*** */ (options.assetsSpace)
			);
			object.assets = limited.children;
			object.filteredAssets = limited.filteredChildren;
		***REMOVED***,
		chunks: (object, compilation, context, options, factory) => {
			const { type ***REMOVED*** = context;
			object.chunks = factory.create(
				`${type***REMOVED***.chunks`,
				Array.from(compilation.chunks),
				context
			);
		***REMOVED***,
		modules: (object, compilation, context, options, factory) => {
			const { type ***REMOVED*** = context;
			const array = Array.from(compilation.modules);
			const groupedModules = factory.create(`${type***REMOVED***.modules`, array, context);
			const limited = spaceLimited(groupedModules, options.modulesSpace);
			object.modules = limited.children;
			object.filteredModules = limited.filteredChildren;
		***REMOVED***,
		entrypoints: (
			object,
			compilation,
			context,
			{ entrypoints, chunkGroups, chunkGroupAuxiliary, chunkGroupChildren ***REMOVED***,
			factory
		) => {
			const { type ***REMOVED*** = context;
			/** @type {ChunkGroupInfoWithName[]***REMOVED*** */
			const array = Array.from(compilation.entrypoints, ([key, value]) => ({
				name: key,
				chunkGroup: value
			***REMOVED***));
			if (entrypoints === "auto" && !chunkGroups) {
				if (array.length > 5) return;
				if (
					!chunkGroupChildren &&
					array.every(({ chunkGroup ***REMOVED***) => {
						if (chunkGroup.chunks.length !== 1) return false;
						const chunk = chunkGroup.chunks[0];
						return (
							chunk.files.size === 1 &&
							(!chunkGroupAuxiliary || chunk.auxiliaryFiles.size === 0)
						);
					***REMOVED***)
				) {
					return;
				***REMOVED***
			***REMOVED***
			object.entrypoints = factory.create(
				`${type***REMOVED***.entrypoints`,
				array,
				context
			);
		***REMOVED***,
		chunkGroups: (object, compilation, context, options, factory) => {
			const { type ***REMOVED*** = context;
			const array = Array.from(
				compilation.namedChunkGroups,
				([key, value]) => ({
					name: key,
					chunkGroup: value
				***REMOVED***)
			);
			object.namedChunkGroups = factory.create(
				`${type***REMOVED***.namedChunkGroups`,
				array,
				context
			);
		***REMOVED***,
		errors: (object, compilation, context, options, factory) => {
			const { type, cachedGetErrors ***REMOVED*** = context;
			const rawErrors = cachedGetErrors(compilation);
			const factorizedErrors = factory.create(
				`${type***REMOVED***.errors`,
				cachedGetErrors(compilation),
				context
			);
			let filtered = 0;
			if (options.errorDetails === "auto" && rawErrors.length >= 3) {
				filtered = rawErrors
					.map(e => typeof e !== "string" && e.details)
					.filter(Boolean).length;
			***REMOVED***
			if (
				options.errorDetails === true ||
				!Number.isFinite(options.errorsSpace)
			) {
				object.errors = factorizedErrors;
				if (filtered) object.filteredErrorDetailsCount = filtered;
				return;
			***REMOVED***
			const [errors, filteredBySpace] = errorsSpaceLimit(
				factorizedErrors,
				/** @type {number***REMOVED*** */
				(options.errorsSpace)
			);
			object.filteredErrorDetailsCount = filtered + filteredBySpace;
			object.errors = errors;
		***REMOVED***,
		errorsCount: (object, compilation, { cachedGetErrors ***REMOVED***) => {
			object.errorsCount = countWithChildren(compilation, c =>
				cachedGetErrors(c)
			);
		***REMOVED***,
		warnings: (object, compilation, context, options, factory) => {
			const { type, cachedGetWarnings ***REMOVED*** = context;
			const rawWarnings = factory.create(
				`${type***REMOVED***.warnings`,
				cachedGetWarnings(compilation),
				context
			);
			let filtered = 0;
			if (options.errorDetails === "auto") {
				filtered = cachedGetWarnings(compilation)
					.map(e => typeof e !== "string" && e.details)
					.filter(Boolean).length;
			***REMOVED***
			if (
				options.errorDetails === true ||
				!Number.isFinite(options.warningsSpace)
			) {
				object.warnings = rawWarnings;
				if (filtered) object.filteredWarningDetailsCount = filtered;
				return;
			***REMOVED***
			const [warnings, filteredBySpace] = errorsSpaceLimit(
				rawWarnings,
				/** @type {number***REMOVED*** */
				(options.warningsSpace)
			);
			object.filteredWarningDetailsCount = filtered + filteredBySpace;
			object.warnings = warnings;
		***REMOVED***,
		warningsCount: (
			object,
			compilation,
			context,
			{ warningsFilter ***REMOVED***,
			factory
		) => {
			const { type, cachedGetWarnings ***REMOVED*** = context;
			object.warningsCount = countWithChildren(compilation, (c, childType) => {
				if (
					!warningsFilter &&
					/** @type {KnownNormalizedStatsOptions["warningsFilter"]***REMOVED*** */
					(warningsFilter).length === 0
				)
					// Type is wrong, because we don't need the real value for counting
					return /** @type {EXPECTED_ANY[]***REMOVED*** */ (cachedGetWarnings(c));
				return factory
					.create(`${type***REMOVED***${childType***REMOVED***.warnings`, cachedGetWarnings(c), context)
					.filter(
						/**
						 * @param {StatsError***REMOVED*** warning warning
						 * @returns {boolean***REMOVED*** result
						 */
						warning => {
							const warningString = Object.keys(warning)
								.map(
									key =>
										`${warning[/** @type {keyof KnownStatsError***REMOVED*** */ (key)]***REMOVED***`
								)
								.join("\n");
							return !warningsFilter.some(filter =>
								filter(warning, warningString)
							);
						***REMOVED***
					);
			***REMOVED***);
		***REMOVED***,
		children: (object, compilation, context, options, factory) => {
			const { type ***REMOVED*** = context;
			object.children = factory.create(
				`${type***REMOVED***.children`,
				compilation.children,
				context
			);
		***REMOVED***
	***REMOVED***,
	asset: {
		_: (object, asset, context, options, factory) => {
			const { compilation ***REMOVED*** = context;
			object.type = asset.type;
			object.name = asset.name;
			object.size = asset.source.size();
			object.emitted = compilation.emittedAssets.has(asset.name);
			object.comparedForEmit = compilation.comparedForEmitAssets.has(
				asset.name
			);
			const cached = !object.emitted && !object.comparedForEmit;
			object.cached = cached;
			object.info = asset.info;
			if (!cached || options.cachedAssets) {
				Object.assign(
					object,
					factory.create(`${context.type***REMOVED***$visible`, asset, context)
				);
			***REMOVED***
		***REMOVED***
	***REMOVED***,
	asset$visible: {
		_: (
			object,
			asset,
			{ compilation, compilationFileToChunks, compilationAuxiliaryFileToChunks ***REMOVED***
		) => {
			const chunks = compilationFileToChunks.get(asset.name) || [];
			const auxiliaryChunks =
				compilationAuxiliaryFileToChunks.get(asset.name) || [];
			object.chunkNames = uniqueOrderedArray(
				chunks,
				c => (c.name ? [c.name] : []),
				compareIds
			);
			object.chunkIdHints = uniqueOrderedArray(
				chunks,
				c => Array.from(c.idNameHints),
				compareIds
			);
			object.auxiliaryChunkNames = uniqueOrderedArray(
				auxiliaryChunks,
				c => (c.name ? [c.name] : []),
				compareIds
			);
			object.auxiliaryChunkIdHints = uniqueOrderedArray(
				auxiliaryChunks,
				c => Array.from(c.idNameHints),
				compareIds
			);
			object.filteredRelated = asset.related ? asset.related.length : undefined;
		***REMOVED***,
		relatedAssets: (object, asset, context, options, factory) => {
			const { type ***REMOVED*** = context;
			object.related = factory.create(
				`${type.slice(0, -8)***REMOVED***.related`,
				asset.related || [],
				context
			);
			object.filteredRelated = asset.related
				? asset.related.length -
					/** @type {StatsAsset[]***REMOVED*** */ (object.related).length
				: undefined;
		***REMOVED***,
		ids: (
			object,
			asset,
			{ compilationFileToChunks, compilationAuxiliaryFileToChunks ***REMOVED***
		) => {
			const chunks = compilationFileToChunks.get(asset.name) || [];
			const auxiliaryChunks =
				compilationAuxiliaryFileToChunks.get(asset.name) || [];
			object.chunks = uniqueOrderedArray(
				chunks,
				c => /** @type {ChunkId[]***REMOVED*** */ (c.ids),
				compareIds
			);
			object.auxiliaryChunks = uniqueOrderedArray(
				auxiliaryChunks,
				c => /** @type {ChunkId[]***REMOVED*** */ (c.ids),
				compareIds
			);
		***REMOVED***,
		performance: (object, asset) => {
			object.isOverSizeLimit = SizeLimitsPlugin.isOverSizeLimit(asset.source);
		***REMOVED***
	***REMOVED***,
	chunkGroup: {
		_: (
			object,
			{ name, chunkGroup ***REMOVED***,
			{ compilation, compilation: { moduleGraph, chunkGraph ***REMOVED*** ***REMOVED***,
			{ ids, chunkGroupAuxiliary, chunkGroupChildren, chunkGroupMaxAssets ***REMOVED***
		) => {
			const children =
				chunkGroupChildren &&
				chunkGroup.getChildrenByOrders(moduleGraph, chunkGraph);
			/**
			 * @param {string***REMOVED*** name Name
			 * @returns {{ name: string, size: number ***REMOVED******REMOVED*** Asset object
			 */
			const toAsset = name => {
				const asset = compilation.getAsset(name);
				return {
					name,
					size: /** @type {number***REMOVED*** */ (asset ? asset.info.size : -1)
				***REMOVED***;
			***REMOVED***;
			/** @type {(total: number, asset: { size: number ***REMOVED***) => number***REMOVED*** */
			const sizeReducer = (total, { size ***REMOVED***) => total + size;
			const assets = uniqueArray(chunkGroup.chunks, c => c.files).map(toAsset);
			const auxiliaryAssets = uniqueOrderedArray(
				chunkGroup.chunks,
				c => c.auxiliaryFiles,
				compareIds
			).map(toAsset);
			const assetsSize = assets.reduce(sizeReducer, 0);
			const auxiliaryAssetsSize = auxiliaryAssets.reduce(sizeReducer, 0);
			/** @type {KnownStatsChunkGroup***REMOVED*** */
			const statsChunkGroup = {
				name,
				chunks: ids
					? /** @type {ChunkId[]***REMOVED*** */ (chunkGroup.chunks.map(c => c.id))
					: undefined,
				assets: assets.length <= chunkGroupMaxAssets ? assets : undefined,
				filteredAssets:
					assets.length <= chunkGroupMaxAssets ? 0 : assets.length,
				assetsSize,
				auxiliaryAssets:
					chunkGroupAuxiliary && auxiliaryAssets.length <= chunkGroupMaxAssets
						? auxiliaryAssets
						: undefined,
				filteredAuxiliaryAssets:
					chunkGroupAuxiliary && auxiliaryAssets.length <= chunkGroupMaxAssets
						? 0
						: auxiliaryAssets.length,
				auxiliaryAssetsSize,
				children: children
					? mapObject(children, groups =>
							groups.map(group => {
								const assets = uniqueArray(group.chunks, c => c.files).map(
									toAsset
								);
								const auxiliaryAssets = uniqueOrderedArray(
									group.chunks,
									c => c.auxiliaryFiles,
									compareIds
								).map(toAsset);

								/** @type {KnownStatsChunkGroup***REMOVED*** */
								const childStatsChunkGroup = {
									name: group.name,
									chunks: ids
										? /** @type {ChunkId[]***REMOVED*** */
											(group.chunks.map(c => c.id))
										: undefined,
									assets:
										assets.length <= chunkGroupMaxAssets ? assets : undefined,
									filteredAssets:
										assets.length <= chunkGroupMaxAssets ? 0 : assets.length,
									auxiliaryAssets:
										chunkGroupAuxiliary &&
										auxiliaryAssets.length <= chunkGroupMaxAssets
											? auxiliaryAssets
											: undefined,
									filteredAuxiliaryAssets:
										chunkGroupAuxiliary &&
										auxiliaryAssets.length <= chunkGroupMaxAssets
											? 0
											: auxiliaryAssets.length
								***REMOVED***;

								return childStatsChunkGroup;
							***REMOVED***)
						)
					: undefined,
				childAssets: children
					? mapObject(children, groups => {
							/** @type {Set<string>***REMOVED*** */
							const set = new Set();
							for (const group of groups) {
								for (const chunk of group.chunks) {
									for (const asset of chunk.files) {
										set.add(asset);
									***REMOVED***
								***REMOVED***
							***REMOVED***
							return Array.from(set);
						***REMOVED***)
					: undefined
			***REMOVED***;
			Object.assign(object, statsChunkGroup);
		***REMOVED***,
		performance: (object, { chunkGroup ***REMOVED***) => {
			object.isOverSizeLimit = SizeLimitsPlugin.isOverSizeLimit(chunkGroup);
		***REMOVED***
	***REMOVED***,
	module: {
		_: (object, module, context, options, factory) => {
			const { type ***REMOVED*** = context;
			const compilation = /** @type {Compilation***REMOVED*** */ (context.compilation);
			const built = compilation.builtModules.has(module);
			const codeGenerated = compilation.codeGeneratedModules.has(module);
			const buildTimeExecuted =
				compilation.buildTimeExecutedModules.has(module);
			/** @type {{[x: string]: number***REMOVED******REMOVED*** */
			const sizes = {***REMOVED***;
			for (const sourceType of module.getSourceTypes()) {
				sizes[sourceType] = module.size(sourceType);
			***REMOVED***
			/** @type {KnownStatsModule***REMOVED*** */
			const statsModule = {
				type: "module",
				moduleType: module.type,
				layer: module.layer,
				size: module.size(),
				sizes,
				built,
				codeGenerated,
				buildTimeExecuted,
				cached: !built && !codeGenerated
			***REMOVED***;
			Object.assign(object, statsModule);
			if (built || codeGenerated || options.cachedModules) {
				Object.assign(
					object,
					factory.create(`${type***REMOVED***$visible`, module, context)
				);
			***REMOVED***
		***REMOVED***
	***REMOVED***,
	module$visible: {
		_: (object, module, context, { requestShortener ***REMOVED***, factory) => {
			const { type, rootModules ***REMOVED*** = context;
			const compilation = /** @type {Compilation***REMOVED*** */ (context.compilation);
			const { moduleGraph ***REMOVED*** = compilation;
			/** @type {ModuleIssuerPath***REMOVED*** */
			const path = [];
			const issuer = moduleGraph.getIssuer(module);
			let current = issuer;
			while (current) {
				path.push(current);
				current = moduleGraph.getIssuer(current);
			***REMOVED***
			path.reverse();
			const profile = moduleGraph.getProfile(module);
			const errors = module.getErrors();
			const errorsCount = errors !== undefined ? countIterable(errors) : 0;
			const warnings = module.getWarnings();
			const warningsCount =
				warnings !== undefined ? countIterable(warnings) : 0;
			/** @type {KnownStatsModule***REMOVED*** */
			const statsModule = {
				identifier: module.identifier(),
				name: module.readableIdentifier(requestShortener),
				nameForCondition: module.nameForCondition(),
				index: /** @type {number***REMOVED*** */ (moduleGraph.getPreOrderIndex(module)),
				preOrderIndex: /** @type {number***REMOVED*** */ (
					moduleGraph.getPreOrderIndex(module)
				),
				index2: /** @type {number***REMOVED*** */ (moduleGraph.getPostOrderIndex(module)),
				postOrderIndex: /** @type {number***REMOVED*** */ (
					moduleGraph.getPostOrderIndex(module)
				),
				cacheable: /** @type {BuildInfo***REMOVED*** */ (module.buildInfo).cacheable,
				optional: module.isOptional(moduleGraph),
				orphan:
					!type.endsWith("module.modules[].module$visible") &&
					compilation.chunkGraph.getNumberOfModuleChunks(module) === 0,
				dependent: rootModules ? !rootModules.has(module) : undefined,
				issuer: issuer && issuer.identifier(),
				issuerName: issuer && issuer.readableIdentifier(requestShortener),
				issuerPath:
					issuer &&
					/** @type {StatsModuleIssuer[] | undefined***REMOVED*** */
					(factory.create(`${type.slice(0, -8)***REMOVED***.issuerPath`, path, context)),
				failed: errorsCount > 0,
				errors: errorsCount,
				warnings: warningsCount
			***REMOVED***;
			Object.assign(object, statsModule);
			if (profile) {
				object.profile = factory.create(
					`${type.slice(0, -8)***REMOVED***.profile`,
					profile,
					context
				);
			***REMOVED***
		***REMOVED***,
		ids: (object, module, { compilation: { chunkGraph, moduleGraph ***REMOVED*** ***REMOVED***) => {
			object.id = /** @type {ModuleId***REMOVED*** */ (chunkGraph.getModuleId(module));
			const issuer = moduleGraph.getIssuer(module);
			object.issuerId = issuer && chunkGraph.getModuleId(issuer);
			object.chunks =
				/** @type {ChunkId[]***REMOVED*** */
				(
					Array.from(
						chunkGraph.getOrderedModuleChunksIterable(
							module,
							compareChunksById
						),
						chunk => chunk.id
					)
				);
		***REMOVED***,
		moduleAssets: (object, module) => {
			object.assets = /** @type {BuildInfo***REMOVED*** */ (module.buildInfo).assets
				? Object.keys(/** @type {BuildInfo***REMOVED*** */ (module.buildInfo).assets)
				: [];
		***REMOVED***,
		reasons: (object, module, context, options, factory) => {
			const {
				type,
				compilation: { moduleGraph ***REMOVED***
			***REMOVED*** = context;
			const groupsReasons = factory.create(
				`${type.slice(0, -8)***REMOVED***.reasons`,
				Array.from(moduleGraph.getIncomingConnections(module)),
				context
			);
			const limited = spaceLimited(
				groupsReasons,
				/** @type {number***REMOVED*** */
				(options.reasonsSpace)
			);
			object.reasons = limited.children;
			object.filteredReasons = limited.filteredChildren;
		***REMOVED***,
		usedExports: (
			object,
			module,
			{ runtime, compilation: { moduleGraph ***REMOVED*** ***REMOVED***
		) => {
			const usedExports = moduleGraph.getUsedExports(module, runtime);
			if (usedExports === null) {
				object.usedExports = null;
			***REMOVED*** else if (typeof usedExports === "boolean") {
				object.usedExports = usedExports;
			***REMOVED*** else {
				object.usedExports = Array.from(usedExports);
			***REMOVED***
		***REMOVED***,
		providedExports: (object, module, { compilation: { moduleGraph ***REMOVED*** ***REMOVED***) => {
			const providedExports = moduleGraph.getProvidedExports(module);
			object.providedExports = Array.isArray(providedExports)
				? providedExports
				: null;
		***REMOVED***,
		optimizationBailout: (
			object,
			module,
			{ compilation: { moduleGraph ***REMOVED*** ***REMOVED***,
			{ requestShortener ***REMOVED***
		) => {
			object.optimizationBailout = moduleGraph
				.getOptimizationBailout(module)
				.map(item => {
					if (typeof item === "function") return item(requestShortener);
					return item;
				***REMOVED***);
		***REMOVED***,
		depth: (object, module, { compilation: { moduleGraph ***REMOVED*** ***REMOVED***) => {
			object.depth = moduleGraph.getDepth(module);
		***REMOVED***,
		nestedModules: (object, module, context, options, factory) => {
			const { type ***REMOVED*** = context;
			const innerModules = /** @type {Module & { modules?: Module[] ***REMOVED******REMOVED*** */ (
				module
			).modules;
			if (Array.isArray(innerModules)) {
				const groupedModules = factory.create(
					`${type.slice(0, -8)***REMOVED***.modules`,
					innerModules,
					context
				);
				const limited = spaceLimited(
					groupedModules,
					options.nestedModulesSpace
				);
				object.modules = limited.children;
				object.filteredModules = limited.filteredChildren;
			***REMOVED***
		***REMOVED***,
		source: (object, module) => {
			const originalSource = module.originalSource();
			if (originalSource) {
				object.source = originalSource.source();
			***REMOVED***
		***REMOVED***
	***REMOVED***,
	profile: {
		_: (object, profile) => {
			/** @type {KnownStatsProfile***REMOVED*** */
			const statsProfile = {
				total:
					profile.factory +
					profile.restoring +
					profile.integration +
					profile.building +
					profile.storing,
				resolving: profile.factory,
				restoring: profile.restoring,
				building: profile.building,
				integration: profile.integration,
				storing: profile.storing,
				additionalResolving: profile.additionalFactories,
				additionalIntegration: profile.additionalIntegration,
				// TODO remove this in webpack 6
				factory: profile.factory,
				// TODO remove this in webpack 6
				dependencies: profile.additionalFactories
			***REMOVED***;
			Object.assign(object, statsProfile);
		***REMOVED***
	***REMOVED***,
	moduleIssuer: {
		_: (object, module, context, { requestShortener ***REMOVED***, factory) => {
			const { type ***REMOVED*** = context;
			const compilation = /** @type {Compilation***REMOVED*** */ (context.compilation);
			const { moduleGraph ***REMOVED*** = compilation;
			const profile = moduleGraph.getProfile(module);
			/** @type {Partial<KnownStatsModuleIssuer>***REMOVED*** */
			const statsModuleIssuer = {
				identifier: module.identifier(),
				name: module.readableIdentifier(requestShortener)
			***REMOVED***;
			Object.assign(object, statsModuleIssuer);
			if (profile) {
				object.profile = factory.create(`${type***REMOVED***.profile`, profile, context);
			***REMOVED***
		***REMOVED***,
		ids: (object, module, { compilation: { chunkGraph ***REMOVED*** ***REMOVED***) => {
			object.id = /** @type {ModuleId***REMOVED*** */ (chunkGraph.getModuleId(module));
		***REMOVED***
	***REMOVED***,
	moduleReason: {
		_: (object, reason, { runtime ***REMOVED***, { requestShortener ***REMOVED***) => {
			const dep = reason.dependency;
			const moduleDep =
				dep && dep instanceof ModuleDependency ? dep : undefined;
			/** @type {KnownStatsModuleReason***REMOVED*** */
			const statsModuleReason = {
				moduleIdentifier: reason.originModule
					? reason.originModule.identifier()
					: null,
				module: reason.originModule
					? reason.originModule.readableIdentifier(requestShortener)
					: null,
				moduleName: reason.originModule
					? reason.originModule.readableIdentifier(requestShortener)
					: null,
				resolvedModuleIdentifier: reason.resolvedOriginModule
					? reason.resolvedOriginModule.identifier()
					: null,
				resolvedModule: reason.resolvedOriginModule
					? reason.resolvedOriginModule.readableIdentifier(requestShortener)
					: null,
				type: reason.dependency ? reason.dependency.type : null,
				active: reason.isActive(runtime),
				explanation: reason.explanation,
				userRequest: (moduleDep && moduleDep.userRequest) || null
			***REMOVED***;
			Object.assign(object, statsModuleReason);
			if (reason.dependency) {
				const locInfo = formatLocation(reason.dependency.loc);
				if (locInfo) {
					object.loc = locInfo;
				***REMOVED***
			***REMOVED***
		***REMOVED***,
		ids: (object, reason, { compilation: { chunkGraph ***REMOVED*** ***REMOVED***) => {
			object.moduleId = reason.originModule
				? chunkGraph.getModuleId(reason.originModule)
				: null;
			object.resolvedModuleId = reason.resolvedOriginModule
				? chunkGraph.getModuleId(reason.resolvedOriginModule)
				: null;
		***REMOVED***
	***REMOVED***,
	chunk: {
		_: (object, chunk, { makePathsRelative, compilation: { chunkGraph ***REMOVED*** ***REMOVED***) => {
			const childIdByOrder = chunk.getChildIdsByOrders(chunkGraph);

			/** @type {KnownStatsChunk***REMOVED*** */
			const statsChunk = {
				rendered: chunk.rendered,
				initial: chunk.canBeInitial(),
				entry: chunk.hasRuntime(),
				recorded: AggressiveSplittingPlugin.wasChunkRecorded(chunk),
				reason: chunk.chunkReason,
				size: chunkGraph.getChunkModulesSize(chunk),
				sizes: chunkGraph.getChunkModulesSizes(chunk),
				names: chunk.name ? [chunk.name] : [],
				idHints: Array.from(chunk.idNameHints),
				runtime:
					chunk.runtime === undefined
						? undefined
						: typeof chunk.runtime === "string"
							? [makePathsRelative(chunk.runtime)]
							: Array.from(chunk.runtime.sort(), makePathsRelative),
				files: Array.from(chunk.files),
				auxiliaryFiles: Array.from(chunk.auxiliaryFiles).sort(compareIds),
				hash: /** @type {string***REMOVED*** */ (chunk.renderedHash),
				childrenByOrder: childIdByOrder
			***REMOVED***;
			Object.assign(object, statsChunk);
		***REMOVED***,
		ids: (object, chunk) => {
			object.id = /** @type {ChunkId***REMOVED*** */ (chunk.id);
		***REMOVED***,
		chunkRelations: (object, chunk, { compilation: { chunkGraph ***REMOVED*** ***REMOVED***) => {
			/** @type {Set<string|number>***REMOVED*** */
			const parents = new Set();
			/** @type {Set<string|number>***REMOVED*** */
			const children = new Set();
			/** @type {Set<string|number>***REMOVED*** */
			const siblings = new Set();

			for (const chunkGroup of chunk.groupsIterable) {
				for (const parentGroup of chunkGroup.parentsIterable) {
					for (const chunk of parentGroup.chunks) {
						parents.add(/** @type {ChunkId***REMOVED*** */ (chunk.id));
					***REMOVED***
				***REMOVED***
				for (const childGroup of chunkGroup.childrenIterable) {
					for (const chunk of childGroup.chunks) {
						children.add(/** @type {ChunkId***REMOVED*** */ (chunk.id));
					***REMOVED***
				***REMOVED***
				for (const sibling of chunkGroup.chunks) {
					if (sibling !== chunk)
						siblings.add(/** @type {ChunkId***REMOVED*** */ (sibling.id));
				***REMOVED***
			***REMOVED***
			object.siblings = Array.from(siblings).sort(compareIds);
			object.parents = Array.from(parents).sort(compareIds);
			object.children = Array.from(children).sort(compareIds);
		***REMOVED***,
		chunkModules: (object, chunk, context, options, factory) => {
			const {
				type,
				compilation: { chunkGraph ***REMOVED***
			***REMOVED*** = context;
			const array = chunkGraph.getChunkModules(chunk);
			const groupedModules = factory.create(`${type***REMOVED***.modules`, array, {
				...context,
				runtime: chunk.runtime,
				rootModules: new Set(chunkGraph.getChunkRootModules(chunk))
			***REMOVED***);
			const limited = spaceLimited(groupedModules, options.chunkModulesSpace);
			object.modules = limited.children;
			object.filteredModules = limited.filteredChildren;
		***REMOVED***,
		chunkOrigins: (object, chunk, context, options, factory) => {
			const {
				type,
				compilation: { chunkGraph ***REMOVED***
			***REMOVED*** = context;
			/** @type {Set<string>***REMOVED*** */
			const originsKeySet = new Set();
			/** @type {OriginRecord[]***REMOVED*** */
			const origins = [];
			for (const g of chunk.groupsIterable) {
				origins.push(...g.origins);
			***REMOVED***
			const array = origins.filter(origin => {
				const key = [
					origin.module ? chunkGraph.getModuleId(origin.module) : undefined,
					formatLocation(origin.loc),
					origin.request
				].join();
				if (originsKeySet.has(key)) return false;
				originsKeySet.add(key);
				return true;
			***REMOVED***);
			object.origins = factory.create(`${type***REMOVED***.origins`, array, context);
		***REMOVED***
	***REMOVED***,
	chunkOrigin: {
		_: (object, origin, context, { requestShortener ***REMOVED***) => {
			/** @type {KnownStatsChunkOrigin***REMOVED*** */
			const statsChunkOrigin = {
				module: origin.module ? origin.module.identifier() : "",
				moduleIdentifier: origin.module ? origin.module.identifier() : "",
				moduleName: origin.module
					? origin.module.readableIdentifier(requestShortener)
					: "",
				loc: formatLocation(origin.loc),
				request: origin.request
			***REMOVED***;
			Object.assign(object, statsChunkOrigin);
		***REMOVED***,
		ids: (object, origin, { compilation: { chunkGraph ***REMOVED*** ***REMOVED***) => {
			object.moduleId = origin.module
				? /** @type {ModuleId***REMOVED*** */ (chunkGraph.getModuleId(origin.module))
				: undefined;
		***REMOVED***
	***REMOVED***,
	error: EXTRACT_ERROR,
	warning: EXTRACT_ERROR,
	cause: EXTRACT_ERROR,
	moduleTraceItem: {
		_: (object, { origin, module ***REMOVED***, context, { requestShortener ***REMOVED***, factory) => {
			const {
				type,
				compilation: { moduleGraph ***REMOVED***
			***REMOVED*** = context;
			object.originIdentifier = origin.identifier();
			object.originName = origin.readableIdentifier(requestShortener);
			object.moduleIdentifier = module.identifier();
			object.moduleName = module.readableIdentifier(requestShortener);
			const dependencies = Array.from(
				moduleGraph.getIncomingConnections(module)
			)
				.filter(c => c.resolvedOriginModule === origin && c.dependency)
				.map(c => c.dependency);
			object.dependencies = factory.create(
				`${type***REMOVED***.dependencies`,
				/** @type {Dependency[]***REMOVED*** */
				(Array.from(new Set(dependencies))),
				context
			);
		***REMOVED***,
		ids: (object, { origin, module ***REMOVED***, { compilation: { chunkGraph ***REMOVED*** ***REMOVED***) => {
			object.originId =
				/** @type {ModuleId***REMOVED*** */
				(chunkGraph.getModuleId(origin));
			object.moduleId =
				/** @type {ModuleId***REMOVED*** */
				(chunkGraph.getModuleId(module));
		***REMOVED***
	***REMOVED***,
	moduleTraceDependency: {
		_: (object, dependency) => {
			object.loc = formatLocation(dependency.loc);
		***REMOVED***
	***REMOVED***
***REMOVED***;

/** @type {Record<string, Record<string, (thing: ModuleGraphConnection, context: StatsFactoryContext, options: NormalizedStatsOptions, idx: number, i: number) => boolean | undefined>>***REMOVED*** */
const FILTER = {
	"module.reasons": {
		"!orphanModules": (reason, { compilation: { chunkGraph ***REMOVED*** ***REMOVED***) => {
			if (
				reason.originModule &&
				chunkGraph.getNumberOfModuleChunks(reason.originModule) === 0
			) {
				return false;
			***REMOVED***
		***REMOVED***
	***REMOVED***
***REMOVED***;

/** @type {Record<string, Record<string, (thing: KnownStatsError, context: StatsFactoryContext, options: NormalizedStatsOptions, idx: number, i: number) => boolean | undefined>>***REMOVED*** */
const FILTER_RESULTS = {
	"compilation.warnings": {
		warningsFilter: util.deprecate(
			(warning, context, { warningsFilter ***REMOVED***) => {
				const warningString = Object.keys(warning)
					.map(key => `${warning[/** @type {keyof KnownStatsError***REMOVED*** */ (key)]***REMOVED***`)
					.join("\n");
				return !warningsFilter.some(filter => filter(warning, warningString));
			***REMOVED***,
			"config.stats.warningsFilter is deprecated in favor of config.ignoreWarnings",
			"DEP_WEBPACK_STATS_WARNINGS_FILTER"
		)
	***REMOVED***
***REMOVED***;

/** @type {Record<string, (comparators: Comparator<Module>[], context: StatsFactoryContext) => void>***REMOVED*** */
const MODULES_SORTER = {
	_: (comparators, { compilation: { moduleGraph ***REMOVED*** ***REMOVED***) => {
		comparators.push(
			compareSelect(m => moduleGraph.getDepth(m), compareNumbers),
			compareSelect(m => moduleGraph.getPreOrderIndex(m), compareNumbers),
			compareSelect(m => m.identifier(), compareIds)
		);
	***REMOVED***
***REMOVED***;

/** @type {Record<string, Record<string, (comparators: Comparator<TODO>[], context: StatsFactoryContext, options: NormalizedStatsOptions) => void>>***REMOVED*** */
const SORTERS = {
	"compilation.chunks": {
		_: comparators => {
			comparators.push(compareSelect(c => c.id, compareIds));
		***REMOVED***
	***REMOVED***,
	"compilation.modules": MODULES_SORTER,
	"chunk.rootModules": MODULES_SORTER,
	"chunk.modules": MODULES_SORTER,
	"module.modules": MODULES_SORTER,
	"module.reasons": {
		_: (comparators, { compilation: { chunkGraph ***REMOVED*** ***REMOVED***) => {
			comparators.push(
				compareSelect(x => x.originModule, compareModulesByIdentifier)
			);
			comparators.push(
				compareSelect(x => x.resolvedOriginModule, compareModulesByIdentifier)
			);
			comparators.push(
				compareSelect(
					x => x.dependency,
					concatComparators(
						compareSelect(
							/**
							 * @param {Dependency***REMOVED*** x dependency
							 * @returns {DependencyLocation***REMOVED*** location
							 */
							x => x.loc,
							compareLocations
						),
						compareSelect(x => x.type, compareIds)
					)
				)
			);
		***REMOVED***
	***REMOVED***,
	"chunk.origins": {
		_: (comparators, { compilation: { chunkGraph ***REMOVED*** ***REMOVED***) => {
			comparators.push(
				compareSelect(
					origin =>
						origin.module ? chunkGraph.getModuleId(origin.module) : undefined,
					compareIds
				),
				compareSelect(origin => formatLocation(origin.loc), compareIds),
				compareSelect(origin => origin.request, compareIds)
			);
		***REMOVED***
	***REMOVED***
***REMOVED***;

/**
 * @template T
 * @typedef {T & { children?: Children<T>[] | undefined, filteredChildren?: number ***REMOVED******REMOVED*** Children
 */

/**
 * @template T
 * @param {Children<T>***REMOVED*** item item
 * @returns {number***REMOVED*** item size
 */
const getItemSize = item =>
	// Each item takes 1 line
	// + the size of the children
	// + 1 extra line when it has children and filteredChildren
	!item.children
		? 1
		: item.filteredChildren
			? 2 + getTotalSize(item.children)
			: 1 + getTotalSize(item.children);

/**
 * @template T
 * @param {Children<T>[]***REMOVED*** children children
 * @returns {number***REMOVED*** total size
 */
const getTotalSize = children => {
	let size = 0;
	for (const child of children) {
		size += getItemSize(child);
	***REMOVED***
	return size;
***REMOVED***;

/**
 * @template T
 * @param {Children<T>[]***REMOVED*** children children
 * @returns {number***REMOVED*** total items
 */
const getTotalItems = children => {
	let count = 0;
	for (const child of children) {
		if (!child.children && !child.filteredChildren) {
			count++;
		***REMOVED*** else {
			if (child.children) count += getTotalItems(child.children);
			if (child.filteredChildren) count += child.filteredChildren;
		***REMOVED***
	***REMOVED***
	return count;
***REMOVED***;

/**
 * @template T
 * @param {Children<T>[]***REMOVED*** children children
 * @returns {Children<T>[]***REMOVED*** collapsed children
 */
const collapse = children => {
	// After collapse each child must take exactly one line
	const newChildren = [];
	for (const child of children) {
		if (child.children) {
			let filteredChildren = child.filteredChildren || 0;
			filteredChildren += getTotalItems(child.children);
			newChildren.push({
				...child,
				children: undefined,
				filteredChildren
			***REMOVED***);
		***REMOVED*** else {
			newChildren.push(child);
		***REMOVED***
	***REMOVED***
	return newChildren;
***REMOVED***;

/**
 * @template T
 * @param {Children<T>[]***REMOVED*** itemsAndGroups item and groups
 * @param {number***REMOVED*** max max
 * @param {boolean=***REMOVED*** filteredChildrenLineReserved filtered children line reserved
 * @returns {Children<T>***REMOVED*** result
 */
const spaceLimited = (
	itemsAndGroups,
	max,
	filteredChildrenLineReserved = false
) => {
	if (max < 1) {
		return /** @type {Children<T>***REMOVED*** */ ({
			children: undefined,
			filteredChildren: getTotalItems(itemsAndGroups)
		***REMOVED***);
	***REMOVED***
	/** @type {Children<T>[] | undefined***REMOVED*** */
	let children;
	/** @type {number | undefined***REMOVED*** */
	let filteredChildren;
	// This are the groups, which take 1+ lines each
	/** @type {Children<T>[] | undefined***REMOVED*** */
	const groups = [];
	// The sizes of the groups are stored in groupSizes
	/** @type {number[]***REMOVED*** */
	const groupSizes = [];
	// This are the items, which take 1 line each
	const items = [];
	// The total of group sizes
	let groupsSize = 0;

	for (const itemOrGroup of itemsAndGroups) {
		// is item
		if (!itemOrGroup.children && !itemOrGroup.filteredChildren) {
			items.push(itemOrGroup);
		***REMOVED*** else {
			groups.push(itemOrGroup);
			const size = getItemSize(itemOrGroup);
			groupSizes.push(size);
			groupsSize += size;
		***REMOVED***
	***REMOVED***

	if (groupsSize + items.length <= max) {
		// The total size in the current state fits into the max
		// keep all
		children = groups.length > 0 ? groups.concat(items) : items;
	***REMOVED*** else if (groups.length === 0) {
		// slice items to max
		// inner space marks that lines for filteredChildren already reserved
		const limit = max - (filteredChildrenLineReserved ? 0 : 1);
		filteredChildren = items.length - limit;
		items.length = limit;
		children = items;
	***REMOVED*** else {
		// limit is the size when all groups are collapsed
		const limit =
			groups.length +
			(filteredChildrenLineReserved || items.length === 0 ? 0 : 1);
		if (limit < max) {
			// calculate how much we are over the size limit
			// this allows to approach the limit faster
			let oversize;
			// If each group would take 1 line the total would be below the maximum
			// collapse some groups, keep items
			while (
				(oversize =
					groupsSize +
					items.length +
					(filteredChildren && !filteredChildrenLineReserved ? 1 : 0) -
					max) > 0
			) {
				// Find the maximum group and process only this one
				const maxGroupSize = Math.max(...groupSizes);
				if (maxGroupSize < items.length) {
					filteredChildren = items.length;
					items.length = 0;
					continue;
				***REMOVED***
				for (let i = 0; i < groups.length; i++) {
					if (groupSizes[i] === maxGroupSize) {
						const group = groups[i];
						// run this algorithm recursively and limit the size of the children to
						// current size - oversize / number of groups
						// So it should always end up being smaller
						const headerSize = group.filteredChildren ? 2 : 1;
						const limited = spaceLimited(
							/** @type {Children<T>[]***REMOVED*** */ (group.children),
							maxGroupSize -
								// we should use ceil to always feet in max
								Math.ceil(oversize / groups.length) -
								// we substitute size of group head
								headerSize,
							headerSize === 2
						);
						groups[i] = {
							...group,
							children: limited.children,
							filteredChildren: limited.filteredChildren
								? (group.filteredChildren || 0) + limited.filteredChildren
								: group.filteredChildren
						***REMOVED***;
						const newSize = getItemSize(groups[i]);
						groupsSize -= maxGroupSize - newSize;
						groupSizes[i] = newSize;
						break;
					***REMOVED***
				***REMOVED***
			***REMOVED***
			children = groups.concat(items);
		***REMOVED*** else if (limit === max) {
			// If we have only enough space to show one line per group and one line for the filtered items
			// collapse all groups and items
			children = collapse(groups);
			filteredChildren = items.length;
		***REMOVED*** else {
			// If we have no space
			// collapse complete group
			filteredChildren = getTotalItems(itemsAndGroups);
		***REMOVED***
	***REMOVED***

	return /** @type {Children<T>***REMOVED*** */ ({ children, filteredChildren ***REMOVED***);
***REMOVED***;

/**
 * @param {StatsError[]***REMOVED*** errors errors
 * @param {number***REMOVED*** max max
 * @returns {[StatsError[], number]***REMOVED*** error space limit
 */
const errorsSpaceLimit = (errors, max) => {
	let filtered = 0;
	// Can not fit into limit
	// print only messages
	if (errors.length + 1 >= max)
		return [
			errors.map(error => {
				if (typeof error === "string" || !error.details) return error;
				filtered++;
				return { ...error, details: "" ***REMOVED***;
			***REMOVED***),
			filtered
		];
	let fullLength = errors.length;
	let result = errors;

	let i = 0;
	for (; i < errors.length; i++) {
		const error = errors[i];
		if (typeof error !== "string" && error.details) {
			const splitted = error.details.split("\n");
			const len = splitted.length;
			fullLength += len;
			if (fullLength > max) {
				result = i > 0 ? errors.slice(0, i) : [];
				const overLimit = fullLength - max + 1;
				const error = errors[i++];
				result.push({
					...error,
					details:
						/** @type {string***REMOVED*** */
						(error.details).split("\n").slice(0, -overLimit).join("\n"),
					filteredDetails: overLimit
				***REMOVED***);
				filtered = errors.length - i;
				for (; i < errors.length; i++) {
					const error = errors[i];
					if (typeof error === "string" || !error.details) result.push(error);
					result.push({ ...error, details: "" ***REMOVED***);
				***REMOVED***
				break;
			***REMOVED*** else if (fullLength === max) {
				result = errors.slice(0, ++i);
				filtered = errors.length - i;
				for (; i < errors.length; i++) {
					const error = errors[i];
					if (typeof error === "string" || !error.details) result.push(error);
					result.push({ ...error, details: "" ***REMOVED***);
				***REMOVED***
				break;
			***REMOVED***
		***REMOVED***
	***REMOVED***

	return [result, filtered];
***REMOVED***;

/**
 * @template {{ size: number ***REMOVED******REMOVED*** T
 * @template {{ size: number ***REMOVED******REMOVED*** R
 * @param {(R | T)[]***REMOVED*** children children
 * @param {T[]***REMOVED*** assets assets
 * @returns {{ size: number ***REMOVED******REMOVED*** asset size
 */
const assetGroup = (children, assets) => {
	let size = 0;
	for (const asset of children) {
		size += asset.size;
	***REMOVED***
	return { size ***REMOVED***;
***REMOVED***;

/**
 * @template {{ size: number, sizes: Record<string, number> ***REMOVED******REMOVED*** T
 * @param {Children<T>[]***REMOVED*** children children
 * @param {KnownStatsModule[]***REMOVED*** modules modules
 * @returns {{ size: number, sizes: Record<string, number>***REMOVED******REMOVED*** size and sizes
 */
const moduleGroup = (children, modules) => {
	let size = 0;
	/** @type {Record<string, number>***REMOVED*** */
	const sizes = {***REMOVED***;
	for (const module of children) {
		size += module.size;
		for (const key of Object.keys(module.sizes)) {
			sizes[key] = (sizes[key] || 0) + module.sizes[key];
		***REMOVED***
	***REMOVED***
	return {
		size,
		sizes
	***REMOVED***;
***REMOVED***;

/**
 * @template {{ active: boolean ***REMOVED******REMOVED*** T
 * @param {Children<T>[]***REMOVED*** children children
 * @param {KnownStatsModuleReason[]***REMOVED*** reasons reasons
 * @returns {{ active: boolean ***REMOVED******REMOVED*** reason group
 */
const reasonGroup = (children, reasons) => {
	let active = false;
	for (const reason of children) {
		active = active || reason.active;
	***REMOVED***
	return {
		active
	***REMOVED***;
***REMOVED***;

const GROUP_EXTENSION_REGEXP = /(\.[^.]+?)(?:\?|(?: \+ \d+ modules?)?$)/;
const GROUP_PATH_REGEXP = /(.+)[/\\][^/\\]+?(?:\?|(?: \+ \d+ modules?)?$)/;

/** @typedef {Record<string, (groupConfigs: GroupConfig<KnownStatsAsset, TODO>[], context: StatsFactoryContext, options: NormalizedStatsOptions) => void>***REMOVED*** AssetsGroupers */

/** @type {AssetsGroupers***REMOVED*** */
const ASSETS_GROUPERS = {
	_: (groupConfigs, context, options) => {
		/**
		 * @param {keyof KnownStatsAsset***REMOVED*** name name
		 * @param {boolean=***REMOVED*** exclude need exclude?
		 */
		const groupByFlag = (name, exclude) => {
			groupConfigs.push({
				getKeys: asset => (asset[name] ? ["1"] : undefined),
				getOptions: () => ({
					groupChildren: !exclude,
					force: exclude
				***REMOVED***),
				createGroup: (key, children, assets) =>
					exclude
						? {
								type: "assets by status",
								[name]: Boolean(key),
								filteredChildren: assets.length,
								...assetGroup(children, assets)
							***REMOVED***
						: {
								type: "assets by status",
								[name]: Boolean(key),
								children,
								...assetGroup(children, assets)
							***REMOVED***
			***REMOVED***);
		***REMOVED***;
		const {
			groupAssetsByEmitStatus,
			groupAssetsByPath,
			groupAssetsByExtension
		***REMOVED*** = options;
		if (groupAssetsByEmitStatus) {
			groupByFlag("emitted");
			groupByFlag("comparedForEmit");
			groupByFlag("isOverSizeLimit");
		***REMOVED***
		if (groupAssetsByEmitStatus || !options.cachedAssets) {
			groupByFlag("cached", !options.cachedAssets);
		***REMOVED***
		if (groupAssetsByPath || groupAssetsByExtension) {
			groupConfigs.push({
				getKeys: asset => {
					const extensionMatch =
						groupAssetsByExtension && GROUP_EXTENSION_REGEXP.exec(asset.name);
					const extension = extensionMatch ? extensionMatch[1] : "";
					const pathMatch =
						groupAssetsByPath && GROUP_PATH_REGEXP.exec(asset.name);
					const path = pathMatch ? pathMatch[1].split(/[/\\]/) : [];
					/** @type {string[]***REMOVED*** */
					const keys = [];
					if (groupAssetsByPath) {
						keys.push(".");
						if (extension)
							keys.push(
								path.length
									? `${path.join("/")***REMOVED***/*${extension***REMOVED***`
									: `*${extension***REMOVED***`
							);
						while (path.length > 0) {
							keys.push(`${path.join("/")***REMOVED***/`);
							path.pop();
						***REMOVED***
					***REMOVED*** else if (extension) {
						keys.push(`*${extension***REMOVED***`);
					***REMOVED***
					return keys;
				***REMOVED***,
				createGroup: (key, children, assets) => ({
					type: groupAssetsByPath ? "assets by path" : "assets by extension",
					name: key,
					children,
					...assetGroup(children, assets)
				***REMOVED***)
			***REMOVED***);
		***REMOVED***
	***REMOVED***,
	groupAssetsByInfo: (groupConfigs, context, options) => {
		/**
		 * @param {string***REMOVED*** name name
		 */
		const groupByAssetInfoFlag = name => {
			groupConfigs.push({
				getKeys: asset => (asset.info && asset.info[name] ? ["1"] : undefined),
				createGroup: (key, children, assets) => ({
					type: "assets by info",
					info: {
						[name]: Boolean(key)
					***REMOVED***,
					children,
					...assetGroup(children, assets)
				***REMOVED***)
			***REMOVED***);
		***REMOVED***;
		groupByAssetInfoFlag("immutable");
		groupByAssetInfoFlag("development");
		groupByAssetInfoFlag("hotModuleReplacement");
	***REMOVED***,
	groupAssetsByChunk: (groupConfigs, context, options) => {
		/**
		 * @param {keyof KnownStatsAsset***REMOVED*** name name
		 */
		const groupByNames = name => {
			groupConfigs.push({
				getKeys: asset => /** @type {string[]***REMOVED*** */ (asset[name]),
				createGroup: (key, children, assets) => ({
					type: "assets by chunk",
					[name]: [key],
					children,
					...assetGroup(children, assets)
				***REMOVED***)
			***REMOVED***);
		***REMOVED***;
		groupByNames("chunkNames");
		groupByNames("auxiliaryChunkNames");
		groupByNames("chunkIdHints");
		groupByNames("auxiliaryChunkIdHints");
	***REMOVED***,
	excludeAssets: (groupConfigs, context, { excludeAssets ***REMOVED***) => {
		groupConfigs.push({
			getKeys: asset => {
				const ident = asset.name;
				const excluded = excludeAssets.some(fn => fn(ident, asset));
				if (excluded) return ["excluded"];
			***REMOVED***,
			getOptions: () => ({
				groupChildren: false,
				force: true
			***REMOVED***),
			createGroup: (key, children, assets) => ({
				type: "hidden assets",
				filteredChildren: assets.length,
				...assetGroup(children, assets)
			***REMOVED***)
		***REMOVED***);
	***REMOVED***
***REMOVED***;

/** @typedef {Record<string, (groupConfigs: GroupConfig<KnownStatsModule, TODO>[], context: StatsFactoryContext, options: NormalizedStatsOptions) => void>***REMOVED*** ModulesGroupers */

/** @type {(type: ExcludeModulesType) => ModulesGroupers***REMOVED*** */
const MODULES_GROUPERS = type => ({
	_: (groupConfigs, context, options) => {
		/**
		 * @param {keyof KnownStatsModule***REMOVED*** name name
		 * @param {string***REMOVED*** type type
		 * @param {boolean=***REMOVED*** exclude need exclude?
		 */
		const groupByFlag = (name, type, exclude) => {
			groupConfigs.push({
				getKeys: module => (module[name] ? ["1"] : undefined),
				getOptions: () => ({
					groupChildren: !exclude,
					force: exclude
				***REMOVED***),
				createGroup: (key, children, modules) => ({
					type,
					[name]: Boolean(key),
					...(exclude ? { filteredChildren: modules.length ***REMOVED*** : { children ***REMOVED***),
					...moduleGroup(children, modules)
				***REMOVED***)
			***REMOVED***);
		***REMOVED***;
		const {
			groupModulesByCacheStatus,
			groupModulesByLayer,
			groupModulesByAttributes,
			groupModulesByType,
			groupModulesByPath,
			groupModulesByExtension
		***REMOVED*** = options;
		if (groupModulesByAttributes) {
			groupByFlag("errors", "modules with errors");
			groupByFlag("warnings", "modules with warnings");
			groupByFlag("assets", "modules with assets");
			groupByFlag("optional", "optional modules");
		***REMOVED***
		if (groupModulesByCacheStatus) {
			groupByFlag("cacheable", "cacheable modules");
			groupByFlag("built", "built modules");
			groupByFlag("codeGenerated", "code generated modules");
		***REMOVED***
		if (groupModulesByCacheStatus || !options.cachedModules) {
			groupByFlag("cached", "cached modules", !options.cachedModules);
		***REMOVED***
		if (groupModulesByAttributes || !options.orphanModules) {
			groupByFlag("orphan", "orphan modules", !options.orphanModules);
		***REMOVED***
		if (groupModulesByAttributes || !options.dependentModules) {
			groupByFlag("dependent", "dependent modules", !options.dependentModules);
		***REMOVED***
		if (groupModulesByType || !options.runtimeModules) {
			groupConfigs.push({
				getKeys: module => {
					if (!module.moduleType) return;
					if (groupModulesByType) {
						return [module.moduleType.split("/", 1)[0]];
					***REMOVED*** else if (module.moduleType === WEBPACK_MODULE_TYPE_RUNTIME) {
						return [WEBPACK_MODULE_TYPE_RUNTIME];
					***REMOVED***
				***REMOVED***,
				getOptions: key => {
					const exclude =
						key === WEBPACK_MODULE_TYPE_RUNTIME && !options.runtimeModules;
					return {
						groupChildren: !exclude,
						force: exclude
					***REMOVED***;
				***REMOVED***,
				createGroup: (key, children, modules) => {
					const exclude =
						key === WEBPACK_MODULE_TYPE_RUNTIME && !options.runtimeModules;
					return {
						type: `${key***REMOVED*** modules`,
						moduleType: key,
						...(exclude ? { filteredChildren: modules.length ***REMOVED*** : { children ***REMOVED***),
						...moduleGroup(children, modules)
					***REMOVED***;
				***REMOVED***
			***REMOVED***);
		***REMOVED***
		if (groupModulesByLayer) {
			groupConfigs.push({
				getKeys: module => /** @type {string[]***REMOVED*** */ ([module.layer]),
				createGroup: (key, children, modules) => ({
					type: "modules by layer",
					layer: key,
					children,
					...moduleGroup(children, modules)
				***REMOVED***)
			***REMOVED***);
		***REMOVED***
		if (groupModulesByPath || groupModulesByExtension) {
			groupConfigs.push({
				getKeys: module => {
					if (!module.name) return;
					const resource = parseResource(
						/** @type {string***REMOVED*** */ (module.name.split("!").pop())
					).path;
					const dataUrl = /^data:[^,;]+/.exec(resource);
					if (dataUrl) return [dataUrl[0]];
					const extensionMatch =
						groupModulesByExtension && GROUP_EXTENSION_REGEXP.exec(resource);
					const extension = extensionMatch ? extensionMatch[1] : "";
					const pathMatch =
						groupModulesByPath && GROUP_PATH_REGEXP.exec(resource);
					const path = pathMatch ? pathMatch[1].split(/[/\\]/) : [];
					const keys = [];
					if (groupModulesByPath) {
						if (extension)
							keys.push(
								path.length
									? `${path.join("/")***REMOVED***/*${extension***REMOVED***`
									: `*${extension***REMOVED***`
							);
						while (path.length > 0) {
							keys.push(`${path.join("/")***REMOVED***/`);
							path.pop();
						***REMOVED***
					***REMOVED*** else if (extension) {
						keys.push(`*${extension***REMOVED***`);
					***REMOVED***
					return keys;
				***REMOVED***,
				createGroup: (key, children, modules) => {
					const isDataUrl = key.startsWith("data:");
					return {
						type: isDataUrl
							? "modules by mime type"
							: groupModulesByPath
								? "modules by path"
								: "modules by extension",
						name: isDataUrl ? key.slice(/* 'data:'.length */ 5) : key,
						children,
						...moduleGroup(children, modules)
					***REMOVED***;
				***REMOVED***
			***REMOVED***);
		***REMOVED***
	***REMOVED***,
	excludeModules: (groupConfigs, context, { excludeModules ***REMOVED***) => {
		groupConfigs.push({
			getKeys: module => {
				const name = module.name;
				if (name) {
					const excluded = excludeModules.some(fn => fn(name, module, type));
					if (excluded) return ["1"];
				***REMOVED***
			***REMOVED***,
			getOptions: () => ({
				groupChildren: false,
				force: true
			***REMOVED***),
			createGroup: (key, children, modules) => ({
				type: "hidden modules",
				filteredChildren: children.length,
				...moduleGroup(children, modules)
			***REMOVED***)
		***REMOVED***);
	***REMOVED***
***REMOVED***);

/** @typedef {Record<string, (groupConfigs: GroupConfig<KnownStatsModuleReason, TODO>[], context: StatsFactoryContext, options: NormalizedStatsOptions) => void>***REMOVED*** ModuleReasonsGroupers */

/** @type {ModuleReasonsGroupers***REMOVED*** */
const MODULE_REASONS_GROUPERS = {
	groupReasonsByOrigin: groupConfigs => {
		groupConfigs.push({
			getKeys: reason => /** @type {string[]***REMOVED*** */ ([reason.module]),
			createGroup: (key, children, reasons) => ({
				type: "from origin",
				module: key,
				children,
				...reasonGroup(children, reasons)
			***REMOVED***)
		***REMOVED***);
	***REMOVED***
***REMOVED***;

/** @type {Record<string, AssetsGroupers | ModulesGroupers | ModuleReasonsGroupers>***REMOVED*** */
const RESULT_GROUPERS = {
	"compilation.assets": ASSETS_GROUPERS,
	"asset.related": ASSETS_GROUPERS,
	"compilation.modules": MODULES_GROUPERS("module"),
	"chunk.modules": MODULES_GROUPERS("chunk"),
	"chunk.rootModules": MODULES_GROUPERS("root-of-chunk"),
	"module.modules": MODULES_GROUPERS("nested"),
	"module.reasons": MODULE_REASONS_GROUPERS
***REMOVED***;

// remove a prefixed "!" that can be specified to reverse sort order
/**
 * @param {string***REMOVED*** field a field name
 * @returns {field***REMOVED*** normalized field
 */
const normalizeFieldKey = field => {
	if (field[0] === "!") {
		return field.slice(1);
	***REMOVED***
	return field;
***REMOVED***;

// if a field is prefixed by a "!" reverse sort order
/**
 * @param {string***REMOVED*** field a field name
 * @returns {boolean***REMOVED*** result
 */
const sortOrderRegular = field => {
	if (field[0] === "!") {
		return false;
	***REMOVED***
	return true;
***REMOVED***;

/**
 * @template T
 * @param {string | false***REMOVED*** field field name
 * @returns {(a: T, b: T) => 0 | 1 | -1***REMOVED*** comparators
 */
const sortByField = field => {
	if (!field) {
		/**
		 * @param {T***REMOVED*** a first
		 * @param {T***REMOVED*** b second
		 * @returns {-1 | 0 | 1***REMOVED*** zero
		 */
		const noSort = (a, b) => 0;
		return noSort;
	***REMOVED***

	const fieldKey = normalizeFieldKey(field);

	let sortFn = compareSelect(m => m[fieldKey], compareIds);

	// if a field is prefixed with a "!" the sort is reversed!
	const sortIsRegular = sortOrderRegular(field);

	if (!sortIsRegular) {
		const oldSortFn = sortFn;
		sortFn = (a, b) => oldSortFn(b, a);
	***REMOVED***

	return sortFn;
***REMOVED***;

/** @type {Record<string, (comparators: Comparator<Asset>[], context: StatsFactoryContext, options: NormalizedStatsOptions) => void>***REMOVED*** */
const ASSET_SORTERS = {
	assetsSort: (comparators, context, { assetsSort ***REMOVED***) => {
		comparators.push(sortByField(assetsSort));
	***REMOVED***,
	_: comparators => {
		comparators.push(compareSelect(a => a.name, compareIds));
	***REMOVED***
***REMOVED***;

/** @type {Record<string, Record<string, (comparators: Comparator<TODO>[], context: StatsFactoryContext, options: NormalizedStatsOptions) => void>>***REMOVED*** */
const RESULT_SORTERS = {
	"compilation.chunks": {
		chunksSort: (comparators, context, { chunksSort ***REMOVED***) => {
			comparators.push(sortByField(chunksSort));
		***REMOVED***
	***REMOVED***,
	"compilation.modules": {
		modulesSort: (comparators, context, { modulesSort ***REMOVED***) => {
			comparators.push(sortByField(modulesSort));
		***REMOVED***
	***REMOVED***,
	"chunk.modules": {
		chunkModulesSort: (comparators, context, { chunkModulesSort ***REMOVED***) => {
			comparators.push(sortByField(chunkModulesSort));
		***REMOVED***
	***REMOVED***,
	"module.modules": {
		nestedModulesSort: (comparators, context, { nestedModulesSort ***REMOVED***) => {
			comparators.push(sortByField(nestedModulesSort));
		***REMOVED***
	***REMOVED***,
	"compilation.assets": ASSET_SORTERS,
	"asset.related": ASSET_SORTERS
***REMOVED***;

/**
 * @template T
 * @param {Record<string, Record<string, T>>***REMOVED*** config the config see above
 * @param {NormalizedStatsOptions***REMOVED*** options stats options
 * @param {(hookFor: string, fn: T) => void***REMOVED*** fn handler function called for every active line in config
 * @returns {void***REMOVED***
 */
const iterateConfig = (config, options, fn) => {
	for (const hookFor of Object.keys(config)) {
		const subConfig = config[hookFor];
		for (const option of Object.keys(subConfig)) {
			if (option !== "_") {
				if (option.startsWith("!")) {
					if (options[option.slice(1)]) continue;
				***REMOVED*** else {
					const value = options[option];
					if (
						value === false ||
						value === undefined ||
						(Array.isArray(value) && value.length === 0)
					)
						continue;
				***REMOVED***
			***REMOVED***
			fn(hookFor, subConfig[option]);
		***REMOVED***
	***REMOVED***
***REMOVED***;

/** @type {Record<string, string>***REMOVED*** */
const ITEM_NAMES = {
	"compilation.children[]": "compilation",
	"compilation.modules[]": "module",
	"compilation.entrypoints[]": "chunkGroup",
	"compilation.namedChunkGroups[]": "chunkGroup",
	"compilation.errors[]": "error",
	"compilation.warnings[]": "warning",
	"error.errors[]": "error",
	"warning.errors[]": "error",
	"chunk.modules[]": "module",
	"chunk.rootModules[]": "module",
	"chunk.origins[]": "chunkOrigin",
	"compilation.chunks[]": "chunk",
	"compilation.assets[]": "asset",
	"asset.related[]": "asset",
	"module.issuerPath[]": "moduleIssuer",
	"module.reasons[]": "moduleReason",
	"module.modules[]": "module",
	"module.children[]": "module",
	"moduleTrace[]": "moduleTraceItem",
	"moduleTraceItem.dependencies[]": "moduleTraceDependency"
***REMOVED***;

/**
 * @template T
 * @typedef {{ name: T ***REMOVED******REMOVED*** NamedObject
 */

/**
 * @template {{ name: string ***REMOVED******REMOVED*** T
 * @param {T[]***REMOVED*** items items to be merged
 * @returns {NamedObject<T>***REMOVED*** an object
 */
const mergeToObject = items => {
	const obj = Object.create(null);
	for (const item of items) {
		obj[item.name] = item;
	***REMOVED***
	return obj;
***REMOVED***;

/**
 * @template {{ name: string ***REMOVED******REMOVED*** T
 * @type {Record<string, (items: T[]) => NamedObject<T>>***REMOVED***
 */
const MERGER = {
	"compilation.entrypoints": mergeToObject,
	"compilation.namedChunkGroups": mergeToObject
***REMOVED***;

const PLUGIN_NAME = "DefaultStatsFactoryPlugin";

class DefaultStatsFactoryPlugin {
	/**
	 * Apply the plugin
	 * @param {Compiler***REMOVED*** compiler the compiler instance
	 * @returns {void***REMOVED***
	 */
	apply(compiler) {
		compiler.hooks.compilation.tap(PLUGIN_NAME, compilation => {
			compilation.hooks.statsFactory.tap(
				PLUGIN_NAME,
				/**
				 * @param {StatsFactory***REMOVED*** stats stats factory
				 * @param {NormalizedStatsOptions***REMOVED*** options stats options
				 */
				(stats, options) => {
					iterateConfig(
						/** @type {TODO***REMOVED*** */
						(SIMPLE_EXTRACTORS),
						options,
						(hookFor, fn) => {
							stats.hooks.extract
								.for(hookFor)
								.tap(PLUGIN_NAME, (obj, data, ctx) =>
									fn(obj, data, ctx, options, stats)
								);
						***REMOVED***
					);
					iterateConfig(FILTER, options, (hookFor, fn) => {
						stats.hooks.filter
							.for(hookFor)
							.tap(PLUGIN_NAME, (item, ctx, idx, i) =>
								fn(item, ctx, options, idx, i)
							);
					***REMOVED***);
					iterateConfig(FILTER_RESULTS, options, (hookFor, fn) => {
						stats.hooks.filterResults
							.for(hookFor)
							.tap(PLUGIN_NAME, (item, ctx, idx, i) =>
								fn(item, ctx, options, idx, i)
							);
					***REMOVED***);
					iterateConfig(SORTERS, options, (hookFor, fn) => {
						stats.hooks.sort
							.for(hookFor)
							.tap(PLUGIN_NAME, (comparators, ctx) =>
								fn(comparators, ctx, options)
							);
					***REMOVED***);
					iterateConfig(RESULT_SORTERS, options, (hookFor, fn) => {
						stats.hooks.sortResults
							.for(hookFor)
							.tap(PLUGIN_NAME, (comparators, ctx) =>
								fn(comparators, ctx, options)
							);
					***REMOVED***);
					iterateConfig(
						/** @type {TODO***REMOVED*** */
						(RESULT_GROUPERS),
						options,
						(hookFor, fn) => {
							stats.hooks.groupResults
								.for(hookFor)
								.tap(PLUGIN_NAME, (groupConfigs, ctx) =>
									fn(groupConfigs, ctx, options)
								);
						***REMOVED***
					);
					for (const key of Object.keys(ITEM_NAMES)) {
						const itemName = ITEM_NAMES[key];
						stats.hooks.getItemName.for(key).tap(PLUGIN_NAME, () => itemName);
					***REMOVED***
					for (const key of Object.keys(MERGER)) {
						const merger = MERGER[key];
						stats.hooks.merge.for(key).tap(PLUGIN_NAME, merger);
					***REMOVED***
					if (options.children) {
						if (Array.isArray(options.children)) {
							stats.hooks.getItemFactory
								.for("compilation.children[].compilation")
								.tap(
									PLUGIN_NAME,
									/**
									 * @param {Compilation***REMOVED*** comp compilation
									 * @param {StatsFactoryContext***REMOVED*** options options
									 * @returns {StatsFactory | undefined***REMOVED*** stats factory
									 */
									(comp, { _index: idx ***REMOVED***) => {
										const children =
											/** @type {TODO***REMOVED*** */
											(options.children);
										if (idx < children.length) {
											return compilation.createStatsFactory(
												compilation.createStatsOptions(children[idx])
											);
										***REMOVED***
									***REMOVED***
								);
						***REMOVED*** else if (options.children !== true) {
							const childFactory = compilation.createStatsFactory(
								compilation.createStatsOptions(options.children)
							);
							stats.hooks.getItemFactory
								.for("compilation.children[].compilation")
								.tap(PLUGIN_NAME, () => childFactory);
						***REMOVED***
					***REMOVED***
				***REMOVED***
			);
		***REMOVED***);
	***REMOVED***
***REMOVED***
module.exports = DefaultStatsFactoryPlugin;
