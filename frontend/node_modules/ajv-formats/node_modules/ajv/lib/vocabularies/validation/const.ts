import type {CodeKeywordDefinition, ErrorObject, KeywordErrorDefinition***REMOVED*** from "../../types"
import type {KeywordCxt***REMOVED*** from "../../compile/validate"
import {_***REMOVED*** from "../../compile/codegen"
import {useFunc***REMOVED*** from "../../compile/util"
import equal from "../../runtime/equal"

export type ConstError = ErrorObject<"const", {allowedValue: any***REMOVED***>

const error: KeywordErrorDefinition = {
  message: "must be equal to constant",
  params: ({schemaCode***REMOVED***) => _`{allowedValue: ${schemaCode***REMOVED******REMOVED***`,
***REMOVED***

const def: CodeKeywordDefinition = {
  keyword: "const",
  $data: true,
  error,
  code(cxt: KeywordCxt) {
    const {gen, data, $data, schemaCode, schema***REMOVED*** = cxt
    if ($data || (schema && typeof schema == "object")) {
      cxt.fail$data(_`!${useFunc(gen, equal)***REMOVED***(${data***REMOVED***, ${schemaCode***REMOVED***)`)
    ***REMOVED*** else {
      cxt.fail(_`${schema***REMOVED*** !== ${data***REMOVED***`)
    ***REMOVED***
  ***REMOVED***,
***REMOVED***

export default def
