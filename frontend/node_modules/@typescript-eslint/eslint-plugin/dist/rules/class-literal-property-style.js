"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; ***REMOVED*** ***REMOVED***;
    ***REMOVED***
    Object.defineProperty(o, k2, desc);
***REMOVED***) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
***REMOVED***));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v ***REMOVED***);
***REMOVED***) : function(o, v) {
    o["default"] = v;
***REMOVED***);
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {***REMOVED***;
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
***REMOVED***;
Object.defineProperty(exports, "__esModule", { value: true ***REMOVED***);
const utils_1 = require("@typescript-eslint/utils");
const util = __importStar(require("../util"));
const printNodeModifiers = (node, final) => {
    var _a;
    return `${(_a = node.accessibility) !== null && _a !== void 0 ? _a : ''***REMOVED***${node.static ? ' static' : ''***REMOVED*** ${final***REMOVED*** `.trimStart();
***REMOVED***;
const isSupportedLiteral = (node) => {
    if (node.type === utils_1.AST_NODE_TYPES.Literal) {
        return true;
    ***REMOVED***
    if (node.type === utils_1.AST_NODE_TYPES.TaggedTemplateExpression ||
        node.type === utils_1.AST_NODE_TYPES.TemplateLiteral) {
        return ('quasi' in node ? node.quasi.quasis : node.quasis).length === 1;
    ***REMOVED***
    return false;
***REMOVED***;
exports.default = util.createRule({
    name: 'class-literal-property-style',
    meta: {
        type: 'problem',
        docs: {
            description: 'Enforce that literals on classes are exposed in a consistent style',
            recommended: 'strict',
        ***REMOVED***,
        hasSuggestions: true,
        messages: {
            preferFieldStyle: 'Literals should be exposed using readonly fields.',
            preferFieldStyleSuggestion: 'Replace the literals with readonly fields.',
            preferGetterStyle: 'Literals should be exposed using getters.',
            preferGetterStyleSuggestion: 'Replace the literals with getters.',
        ***REMOVED***,
        schema: [{ enum: ['fields', 'getters'] ***REMOVED***],
    ***REMOVED***,
    defaultOptions: ['fields'],
    create(context, [style]) {
        return Object.assign(Object.assign({***REMOVED***, (style === 'fields' && {
            MethodDefinition(node) {
                if (node.kind !== 'get' ||
                    !node.value.body ||
                    !node.value.body.body.length) {
                    return;
                ***REMOVED***
                const [statement] = node.value.body.body;
                if (statement.type !== utils_1.AST_NODE_TYPES.ReturnStatement) {
                    return;
                ***REMOVED***
                const { argument ***REMOVED*** = statement;
                if (!argument || !isSupportedLiteral(argument)) {
                    return;
                ***REMOVED***
                context.report({
                    node: node.key,
                    messageId: 'preferFieldStyle',
                    suggest: [
                        {
                            messageId: 'preferFieldStyleSuggestion',
                            fix(fixer) {
                                const sourceCode = context.getSourceCode();
                                const name = sourceCode.getText(node.key);
                                let text = '';
                                text += printNodeModifiers(node, 'readonly');
                                text += node.computed ? `[${name***REMOVED***]` : name;
                                text += ` = ${sourceCode.getText(argument)***REMOVED***;`;
                                return fixer.replaceText(node, text);
                            ***REMOVED***,
                        ***REMOVED***,
                    ],
                ***REMOVED***);
            ***REMOVED***,
        ***REMOVED***)), (style === 'getters' && {
            PropertyDefinition(node) {
                if (!node.readonly || node.declare) {
                    return;
                ***REMOVED***
                const { value ***REMOVED*** = node;
                if (!value || !isSupportedLiteral(value)) {
                    return;
                ***REMOVED***
                context.report({
                    node: node.key,
                    messageId: 'preferGetterStyle',
                    suggest: [
                        {
                            messageId: 'preferGetterStyleSuggestion',
                            fix(fixer) {
                                const sourceCode = context.getSourceCode();
                                const name = sourceCode.getText(node.key);
                                let text = '';
                                text += printNodeModifiers(node, 'get');
                                text += node.computed ? `[${name***REMOVED***]` : name;
                                text += `() { return ${sourceCode.getText(value)***REMOVED***; ***REMOVED***`;
                                return fixer.replaceText(node, text);
                            ***REMOVED***,
                        ***REMOVED***,
                    ],
                ***REMOVED***);
            ***REMOVED***,
        ***REMOVED***));
    ***REMOVED***,
***REMOVED***);
//# sourceMappingURL=class-literal-property-style.js.map