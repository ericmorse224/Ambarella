/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const DependencyTemplate = require("../DependencyTemplate");
const makeSerializable = require("../util/makeSerializable");
const LocalModuleDependency = require("./LocalModuleDependency");
const NullDependency = require("./NullDependency");

/** @typedef {import("webpack-sources").ReplaceSource***REMOVED*** ReplaceSource */
/** @typedef {import("../Dependency")***REMOVED*** Dependency */
/** @typedef {import("../DependencyTemplate").DependencyTemplateContext***REMOVED*** DependencyTemplateContext */
/** @typedef {import("../javascript/JavascriptParser").Range***REMOVED*** Range */
/** @typedef {import("../serialization/ObjectMiddleware").ObjectDeserializerContext***REMOVED*** ObjectDeserializerContext */
/** @typedef {import("../serialization/ObjectMiddleware").ObjectSerializerContext***REMOVED*** ObjectSerializerContext */
/** @typedef {import("./AMDRequireItemDependency")***REMOVED*** AMDRequireItemDependency */

class AMDRequireArrayDependency extends NullDependency {
	/**
	 * @param {(string | LocalModuleDependency | AMDRequireItemDependency)[]***REMOVED*** depsArray deps array
	 * @param {Range***REMOVED*** range range
	 */
	constructor(depsArray, range) {
		super();

		this.depsArray = depsArray;
		this.range = range;
	***REMOVED***

	get type() {
		return "amd require array";
	***REMOVED***

	get category() {
		return "amd";
	***REMOVED***

	/**
	 * @param {ObjectSerializerContext***REMOVED*** context context
	 */
	serialize(context) {
		const { write ***REMOVED*** = context;

		write(this.depsArray);
		write(this.range);

		super.serialize(context);
	***REMOVED***

	/**
	 * @param {ObjectDeserializerContext***REMOVED*** context context
	 */
	deserialize(context) {
		const { read ***REMOVED*** = context;

		this.depsArray = read();
		this.range = read();

		super.deserialize(context);
	***REMOVED***
***REMOVED***

makeSerializable(
	AMDRequireArrayDependency,
	"webpack/lib/dependencies/AMDRequireArrayDependency"
);

AMDRequireArrayDependency.Template = class AMDRequireArrayDependencyTemplate extends (
	DependencyTemplate
) {
	/**
	 * @param {Dependency***REMOVED*** dependency the dependency for which the template should be applied
	 * @param {ReplaceSource***REMOVED*** source the current replace source which can be modified
	 * @param {DependencyTemplateContext***REMOVED*** templateContext the context object
	 * @returns {void***REMOVED***
	 */
	apply(dependency, source, templateContext) {
		const dep = /** @type {AMDRequireArrayDependency***REMOVED*** */ (dependency);
		const content = this.getContent(dep, templateContext);
		source.replace(dep.range[0], dep.range[1] - 1, content);
	***REMOVED***

	/**
	 * @param {AMDRequireArrayDependency***REMOVED*** dep the dependency for which the template should be applied
	 * @param {DependencyTemplateContext***REMOVED*** templateContext the context object
	 * @returns {string***REMOVED*** content
	 */
	getContent(dep, templateContext) {
		const requires = dep.depsArray.map(dependency =>
			this.contentForDependency(dependency, templateContext)
		);
		return `[${requires.join(", ")***REMOVED***]`;
	***REMOVED***

	/**
	 * @param {string | LocalModuleDependency | AMDRequireItemDependency***REMOVED*** dep the dependency for which the template should be applied
	 * @param {DependencyTemplateContext***REMOVED*** templateContext the context object
	 * @returns {string***REMOVED*** content
	 */
	contentForDependency(
		dep,
		{ runtimeTemplate, moduleGraph, chunkGraph, runtimeRequirements ***REMOVED***
	) {
		if (typeof dep === "string") {
			return dep;
		***REMOVED***

		if (dep instanceof LocalModuleDependency) {
			return dep.localModule.variableName();
		***REMOVED***

		return runtimeTemplate.moduleExports({
			module: moduleGraph.getModule(dep),
			chunkGraph,
			request: dep.request,
			runtimeRequirements
		***REMOVED***);
	***REMOVED***
***REMOVED***;

module.exports = AMDRequireArrayDependency;
