/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

/** @typedef {import("./Resolver")***REMOVED*** Resolver */
/** @typedef {import("./Resolver").ResolveRequest***REMOVED*** ResolveRequest */
/** @typedef {import("./Resolver").ResolveStepHook***REMOVED*** ResolveStepHook */
/** @typedef {import("./Resolver").ResolveContextYield***REMOVED*** ResolveContextYield */
/** @typedef {{[k: string]: ResolveRequest | ResolveRequest[] | undefined***REMOVED******REMOVED*** Cache */

/**
 * @param {string***REMOVED*** type type of cache
 * @param {ResolveRequest***REMOVED*** request request
 * @param {boolean***REMOVED*** withContext cache with context?
 * @returns {string***REMOVED*** cache id
 */
function getCacheId(type, request, withContext) {
	return JSON.stringify({
		type,
		context: withContext ? request.context : "",
		path: request.path,
		query: request.query,
		fragment: request.fragment,
		request: request.request
	***REMOVED***);
***REMOVED***

module.exports = class UnsafeCachePlugin {
	/**
	 * @param {string | ResolveStepHook***REMOVED*** source source
	 * @param {function(ResolveRequest): boolean***REMOVED*** filterPredicate filterPredicate
	 * @param {Cache***REMOVED*** cache cache
	 * @param {boolean***REMOVED*** withContext withContext
	 * @param {string | ResolveStepHook***REMOVED*** target target
	 */
	constructor(source, filterPredicate, cache, withContext, target) {
		this.source = source;
		this.filterPredicate = filterPredicate;
		this.withContext = withContext;
		this.cache = cache;
		this.target = target;
	***REMOVED***

	/**
	 * @param {Resolver***REMOVED*** resolver the resolver
	 * @returns {void***REMOVED***
	 */
	apply(resolver) {
		const target = resolver.ensureHook(this.target);
		resolver
			.getHook(this.source)
			.tapAsync("UnsafeCachePlugin", (request, resolveContext, callback) => {
				if (!this.filterPredicate(request)) return callback();
				const isYield = typeof resolveContext.yield === "function";
				const cacheId = getCacheId(
					isYield ? "yield" : "default",
					request,
					this.withContext
				);
				const cacheEntry = this.cache[cacheId];
				if (cacheEntry) {
					if (isYield) {
						const yield_ = /** @type {Function***REMOVED*** */ (resolveContext.yield);
						if (Array.isArray(cacheEntry)) {
							for (const result of cacheEntry) yield_(result);
						***REMOVED*** else {
							yield_(cacheEntry);
						***REMOVED***
						return callback(null, null);
					***REMOVED***
					return callback(null, /** @type {ResolveRequest***REMOVED*** */ (cacheEntry));
				***REMOVED***

				/** @type {ResolveContextYield|undefined***REMOVED*** */
				let yieldFn;
				/** @type {ResolveContextYield|undefined***REMOVED*** */
				let yield_;
				/** @type {ResolveRequest[]***REMOVED*** */
				const yieldResult = [];
				if (isYield) {
					yieldFn = resolveContext.yield;
					yield_ = result => {
						yieldResult.push(result);
					***REMOVED***;
				***REMOVED***

				resolver.doResolve(
					target,
					request,
					null,
					yield_ ? { ...resolveContext, yield: yield_ ***REMOVED*** : resolveContext,
					(err, result) => {
						if (err) return callback(err);
						if (isYield) {
							if (result) yieldResult.push(result);
							for (const result of yieldResult) {
								/** @type {ResolveContextYield***REMOVED*** */
								(yieldFn)(result);
							***REMOVED***
							this.cache[cacheId] = yieldResult;
							return callback(null, null);
						***REMOVED***
						if (result) return callback(null, (this.cache[cacheId] = result));
						callback();
					***REMOVED***
				);
			***REMOVED***);
	***REMOVED***
***REMOVED***;
