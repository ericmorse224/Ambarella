'use strict';
const selectorParser = require('postcss-selector-parser');

/**
 * @param {string***REMOVED*** selectors
 * @param {selectorParser.SyncProcessor<void>***REMOVED*** callback
 * @return {string***REMOVED***
 */
function parseSelectors(selectors, callback) {
  return selectorParser(callback).processSync(selectors);
***REMOVED***

/**
 * @param {import('postcss').Rule***REMOVED*** rule
 * @return {string***REMOVED***
 */
function unique(rule) {
  const selector = [...new Set(rule.selectors)];
  selector.sort();
  return selector.join();
***REMOVED***

/**
 * @type {import('postcss').PluginCreator<void>***REMOVED***
 * @return {import('postcss').Plugin***REMOVED***
 */
function pluginCreator() {
  return {
    postcssPlugin: 'postcss-unique-selectors',
    OnceExit(css) {
      css.walkRules((nodes) => {
        /** @type {string[]***REMOVED*** */
        let comments = [];
        /** @type {selectorParser.SyncProcessor<void>***REMOVED*** */
        const removeAndSaveComments = (selNode) => {
          selNode.walk((sel) => {
            if (sel.type === 'comment') {
              comments.push(sel.value);
              sel.remove();
              return;
            ***REMOVED*** else {
              return;
            ***REMOVED***
          ***REMOVED***);
        ***REMOVED***;
        if (nodes.raws.selector && nodes.raws.selector.raw) {
          parseSelectors(nodes.raws.selector.raw, removeAndSaveComments);
          nodes.raws.selector.raw = unique(nodes);
        ***REMOVED***
        nodes.selector = parseSelectors(nodes.selector, removeAndSaveComments);
        nodes.selector = unique(nodes);
        nodes.selectors = nodes.selectors.concat(comments);
      ***REMOVED***);
    ***REMOVED***,
  ***REMOVED***;
***REMOVED***

pluginCreator.postcss = true;
module.exports = pluginCreator;
