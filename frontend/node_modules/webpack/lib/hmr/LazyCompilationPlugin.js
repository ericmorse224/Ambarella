/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const { RawSource ***REMOVED*** = require("webpack-sources");
const AsyncDependenciesBlock = require("../AsyncDependenciesBlock");
const Dependency = require("../Dependency");
const Module = require("../Module");
const ModuleFactory = require("../ModuleFactory");
const { JS_TYPES ***REMOVED*** = require("../ModuleSourceTypesConstants");
const {
	WEBPACK_MODULE_TYPE_LAZY_COMPILATION_PROXY
***REMOVED*** = require("../ModuleTypeConstants");
const RuntimeGlobals = require("../RuntimeGlobals");
const Template = require("../Template");
const CommonJsRequireDependency = require("../dependencies/CommonJsRequireDependency");
const { registerNotSerializable ***REMOVED*** = require("../util/serialization");

/** @typedef {import("../../declarations/WebpackOptions")***REMOVED*** WebpackOptions */
/** @typedef {import("../Compilation")***REMOVED*** Compilation */
/** @typedef {import("../Compiler")***REMOVED*** Compiler */
/** @typedef {import("../Dependency").UpdateHashContext***REMOVED*** UpdateHashContext */
/** @typedef {import("../Module").BuildCallback***REMOVED*** BuildCallback */
/** @typedef {import("../Module").BuildMeta***REMOVED*** BuildMeta */
/** @typedef {import("../Module").CodeGenerationContext***REMOVED*** CodeGenerationContext */
/** @typedef {import("../Module").CodeGenerationResult***REMOVED*** CodeGenerationResult */
/** @typedef {import("../Module").LibIdentOptions***REMOVED*** LibIdentOptions */
/** @typedef {import("../Module").NeedBuildCallback***REMOVED*** NeedBuildCallback */
/** @typedef {import("../Module").NeedBuildContext***REMOVED*** NeedBuildContext */
/** @typedef {import("../Module").SourceTypes***REMOVED*** SourceTypes */
/** @typedef {import("../ModuleFactory").ModuleFactoryCallback***REMOVED*** ModuleFactoryCallback */
/** @typedef {import("../ModuleFactory").ModuleFactoryCreateData***REMOVED*** ModuleFactoryCreateData */
/** @typedef {import("../RequestShortener")***REMOVED*** RequestShortener */
/** @typedef {import("../ResolverFactory").ResolverWithOptions***REMOVED*** ResolverWithOptions */
/** @typedef {import("../WebpackError")***REMOVED*** WebpackError */
/** @typedef {import("../dependencies/HarmonyImportDependency")***REMOVED*** HarmonyImportDependency */
/** @typedef {import("../util/Hash")***REMOVED*** Hash */
/** @typedef {import("../util/fs").InputFileSystem***REMOVED*** InputFileSystem */

/** @typedef {{ client: string, data: string, active: boolean ***REMOVED******REMOVED*** ModuleResult */

/**
 * @typedef {object***REMOVED*** BackendApi
 * @property {(callback: (err?: (Error | null)) => void) => void***REMOVED*** dispose
 * @property {(module: Module) => ModuleResult***REMOVED*** module
 */

const HMR_DEPENDENCY_TYPES = new Set([
	"import.meta.webpackHot.accept",
	"import.meta.webpackHot.decline",
	"module.hot.accept",
	"module.hot.decline"
]);

/**
 * @param {Options["test"]***REMOVED*** test test option
 * @param {Module***REMOVED*** module the module
 * @returns {boolean | null | string***REMOVED*** true, if the module should be selected
 */
const checkTest = (test, module) => {
	if (test === undefined) return true;
	if (typeof test === "function") {
		return test(module);
	***REMOVED***
	if (typeof test === "string") {
		const name = module.nameForCondition();
		return name && name.startsWith(test);
	***REMOVED***
	if (test instanceof RegExp) {
		const name = module.nameForCondition();
		return name && test.test(name);
	***REMOVED***
	return false;
***REMOVED***;

class LazyCompilationDependency extends Dependency {
	/**
	 * @param {LazyCompilationProxyModule***REMOVED*** proxyModule proxy module
	 */
	constructor(proxyModule) {
		super();
		this.proxyModule = proxyModule;
	***REMOVED***

	get category() {
		return "esm";
	***REMOVED***

	get type() {
		return "lazy import()";
	***REMOVED***

	/**
	 * @returns {string | null***REMOVED*** an identifier to merge equal requests
	 */
	getResourceIdentifier() {
		return this.proxyModule.originalModule.identifier();
	***REMOVED***
***REMOVED***

registerNotSerializable(LazyCompilationDependency);

class LazyCompilationProxyModule extends Module {
	/**
	 * @param {string***REMOVED*** context context
	 * @param {Module***REMOVED*** originalModule an original module
	 * @param {string***REMOVED*** request request
	 * @param {ModuleResult["client"]***REMOVED*** client client
	 * @param {ModuleResult["data"]***REMOVED*** data data
	 * @param {ModuleResult["active"]***REMOVED*** active true when active, otherwise false
	 */
	constructor(context, originalModule, request, client, data, active) {
		super(
			WEBPACK_MODULE_TYPE_LAZY_COMPILATION_PROXY,
			context,
			originalModule.layer
		);
		this.originalModule = originalModule;
		this.request = request;
		this.client = client;
		this.data = data;
		this.active = active;
	***REMOVED***

	/**
	 * @returns {string***REMOVED*** a unique identifier of the module
	 */
	identifier() {
		return `${WEBPACK_MODULE_TYPE_LAZY_COMPILATION_PROXY***REMOVED***|${this.originalModule.identifier()***REMOVED***`;
	***REMOVED***

	/**
	 * @param {RequestShortener***REMOVED*** requestShortener the request shortener
	 * @returns {string***REMOVED*** a user readable identifier of the module
	 */
	readableIdentifier(requestShortener) {
		return `${WEBPACK_MODULE_TYPE_LAZY_COMPILATION_PROXY***REMOVED*** ${this.originalModule.readableIdentifier(
			requestShortener
		)***REMOVED***`;
	***REMOVED***

	/**
	 * Assuming this module is in the cache. Update the (cached) module with
	 * the fresh module from the factory. Usually updates internal references
	 * and properties.
	 * @param {Module***REMOVED*** module fresh module
	 * @returns {void***REMOVED***
	 */
	updateCacheModule(module) {
		super.updateCacheModule(module);
		const m = /** @type {LazyCompilationProxyModule***REMOVED*** */ (module);
		this.originalModule = m.originalModule;
		this.request = m.request;
		this.client = m.client;
		this.data = m.data;
		this.active = m.active;
	***REMOVED***

	/**
	 * @param {LibIdentOptions***REMOVED*** options options
	 * @returns {string | null***REMOVED*** an identifier for library inclusion
	 */
	libIdent(options) {
		return `${this.originalModule.libIdent(
			options
		)***REMOVED***!${WEBPACK_MODULE_TYPE_LAZY_COMPILATION_PROXY***REMOVED***`;
	***REMOVED***

	/**
	 * @param {NeedBuildContext***REMOVED*** context context info
	 * @param {NeedBuildCallback***REMOVED*** callback callback function, returns true, if the module needs a rebuild
	 * @returns {void***REMOVED***
	 */
	needBuild(context, callback) {
		callback(null, !this.buildInfo || this.buildInfo.active !== this.active);
	***REMOVED***

	/**
	 * @param {WebpackOptions***REMOVED*** options webpack options
	 * @param {Compilation***REMOVED*** compilation the compilation
	 * @param {ResolverWithOptions***REMOVED*** resolver the resolver
	 * @param {InputFileSystem***REMOVED*** fs the file system
	 * @param {BuildCallback***REMOVED*** callback callback function
	 * @returns {void***REMOVED***
	 */
	build(options, compilation, resolver, fs, callback) {
		this.buildInfo = {
			active: this.active
		***REMOVED***;
		/** @type {BuildMeta***REMOVED*** */
		this.buildMeta = {***REMOVED***;
		this.clearDependenciesAndBlocks();
		const dep = new CommonJsRequireDependency(this.client);
		this.addDependency(dep);
		if (this.active) {
			const dep = new LazyCompilationDependency(this);
			const block = new AsyncDependenciesBlock({***REMOVED***);
			block.addDependency(dep);
			this.addBlock(block);
		***REMOVED***
		callback();
	***REMOVED***

	/**
	 * @returns {SourceTypes***REMOVED*** types available (do not mutate)
	 */
	getSourceTypes() {
		return JS_TYPES;
	***REMOVED***

	/**
	 * @param {string=***REMOVED*** type the source type for which the size should be estimated
	 * @returns {number***REMOVED*** the estimated size of the module (must be non-zero)
	 */
	size(type) {
		return 200;
	***REMOVED***

	/**
	 * @param {CodeGenerationContext***REMOVED*** context context for code generation
	 * @returns {CodeGenerationResult***REMOVED*** result
	 */
	codeGeneration({ runtimeTemplate, chunkGraph, moduleGraph ***REMOVED***) {
		const sources = new Map();
		const runtimeRequirements = new Set();
		runtimeRequirements.add(RuntimeGlobals.module);
		const clientDep = /** @type {CommonJsRequireDependency***REMOVED*** */ (
			this.dependencies[0]
		);
		const clientModule = moduleGraph.getModule(clientDep);
		const block = this.blocks[0];
		const client = Template.asString([
			`var client = ${runtimeTemplate.moduleExports({
				module: clientModule,
				chunkGraph,
				request: clientDep.userRequest,
				runtimeRequirements
			***REMOVED***)***REMOVED***`,
			`var data = ${JSON.stringify(this.data)***REMOVED***;`
		]);
		const keepActive = Template.asString([
			`var dispose = client.keepAlive({ data: data, active: ${JSON.stringify(
				Boolean(block)
			)***REMOVED***, module: module, onError: onError ***REMOVED***);`
		]);
		let source;
		if (block) {
			const dep = block.dependencies[0];
			const module = /** @type {Module***REMOVED*** */ (moduleGraph.getModule(dep));
			source = Template.asString([
				client,
				`module.exports = ${runtimeTemplate.moduleNamespacePromise({
					chunkGraph,
					block,
					module,
					request: this.request,
					strict: false, // TODO this should be inherited from the original module
					message: "import()",
					runtimeRequirements
				***REMOVED***)***REMOVED***;`,
				"if (module.hot) {",
				Template.indent([
					"module.hot.accept();",
					`module.hot.accept(${JSON.stringify(
						chunkGraph.getModuleId(module)
					)***REMOVED***, function() { module.hot.invalidate(); ***REMOVED***);`,
					"module.hot.dispose(function(data) { delete data.resolveSelf; dispose(data); ***REMOVED***);",
					"if (module.hot.data && module.hot.data.resolveSelf) module.hot.data.resolveSelf(module.exports);"
				]),
				"***REMOVED***",
				"function onError() { /* ignore */ ***REMOVED***",
				keepActive
			]);
		***REMOVED*** else {
			source = Template.asString([
				client,
				"var resolveSelf, onError;",
				"module.exports = new Promise(function(resolve, reject) { resolveSelf = resolve; onError = reject; ***REMOVED***);",
				"if (module.hot) {",
				Template.indent([
					"module.hot.accept();",
					"if (module.hot.data && module.hot.data.resolveSelf) module.hot.data.resolveSelf(module.exports);",
					"module.hot.dispose(function(data) { data.resolveSelf = resolveSelf; dispose(data); ***REMOVED***);"
				]),
				"***REMOVED***",
				keepActive
			]);
		***REMOVED***
		sources.set("javascript", new RawSource(source));
		return {
			sources,
			runtimeRequirements
		***REMOVED***;
	***REMOVED***

	/**
	 * @param {Hash***REMOVED*** hash the hash used to track dependencies
	 * @param {UpdateHashContext***REMOVED*** context context
	 * @returns {void***REMOVED***
	 */
	updateHash(hash, context) {
		super.updateHash(hash, context);
		hash.update(this.active ? "active" : "");
		hash.update(JSON.stringify(this.data));
	***REMOVED***
***REMOVED***

registerNotSerializable(LazyCompilationProxyModule);

class LazyCompilationDependencyFactory extends ModuleFactory {
	constructor() {
		super();
	***REMOVED***

	/**
	 * @param {ModuleFactoryCreateData***REMOVED*** data data object
	 * @param {ModuleFactoryCallback***REMOVED*** callback callback
	 * @returns {void***REMOVED***
	 */
	create(data, callback) {
		const dependency =
			/** @type {LazyCompilationDependency***REMOVED*** */
			(data.dependencies[0]);
		callback(null, {
			module: dependency.proxyModule.originalModule
		***REMOVED***);
	***REMOVED***
***REMOVED***

/**
 * @callback BackendHandler
 * @param {Compiler***REMOVED*** compiler compiler
 * @param {(err: Error | null, backendApi?: BackendApi) => void***REMOVED*** callback callback
 * @returns {void***REMOVED***
 */

/**
 * @callback PromiseBackendHandler
 * @param {Compiler***REMOVED*** compiler compiler
 * @returns {Promise<BackendApi>***REMOVED*** backend
 */

/** @typedef {BackendHandler | PromiseBackendHandler***REMOVED*** BackEnd */

/**
 * @typedef {object***REMOVED*** Options options
 * @property {BackEnd***REMOVED*** backend the backend
 * @property {boolean=***REMOVED*** entries
 * @property {boolean=***REMOVED*** imports
 * @property {(RegExp | string | ((module: Module) => boolean))=***REMOVED*** test additional filter for lazy compiled entrypoint modules
 */

const PLUGIN_NAME = "LazyCompilationPlugin";

class LazyCompilationPlugin {
	/**
	 * @param {Options***REMOVED*** options options
	 */
	constructor({ backend, entries, imports, test ***REMOVED***) {
		this.backend = backend;
		this.entries = entries;
		this.imports = imports;
		this.test = test;
	***REMOVED***

	/**
	 * Apply the plugin
	 * @param {Compiler***REMOVED*** compiler the compiler instance
	 * @returns {void***REMOVED***
	 */
	apply(compiler) {
		/** @type {BackendApi***REMOVED*** */
		let backend;
		compiler.hooks.beforeCompile.tapAsync(PLUGIN_NAME, (params, callback) => {
			if (backend !== undefined) return callback();
			const promise = this.backend(compiler, (err, result) => {
				if (err) return callback(err);
				backend = /** @type {BackendApi***REMOVED*** */ (result);
				callback();
			***REMOVED***);
			if (promise && promise.then) {
				promise.then(b => {
					backend = b;
					callback();
				***REMOVED***, callback);
			***REMOVED***
		***REMOVED***);
		compiler.hooks.thisCompilation.tap(
			PLUGIN_NAME,
			(compilation, { normalModuleFactory ***REMOVED***) => {
				normalModuleFactory.hooks.module.tap(
					PLUGIN_NAME,
					(module, createData, resolveData) => {
						if (
							resolveData.dependencies.every(dep =>
								HMR_DEPENDENCY_TYPES.has(dep.type)
							)
						) {
							// for HMR only resolving, try to determine if the HMR accept/decline refers to
							// an import() or not
							const hmrDep = resolveData.dependencies[0];
							const originModule =
								/** @type {Module***REMOVED*** */
								(compilation.moduleGraph.getParentModule(hmrDep));
							const isReferringToDynamicImport = originModule.blocks.some(
								block =>
									block.dependencies.some(
										dep =>
											dep.type === "import()" &&
											/** @type {HarmonyImportDependency***REMOVED*** */ (dep).request ===
												hmrDep.request
									)
							);
							if (!isReferringToDynamicImport) return module;
						***REMOVED*** else if (
							!resolveData.dependencies.every(
								dep =>
									HMR_DEPENDENCY_TYPES.has(dep.type) ||
									(this.imports &&
										(dep.type === "import()" ||
											dep.type === "import() context element")) ||
									(this.entries && dep.type === "entry")
							)
						)
							return module;
						if (
							/webpack[/\\]hot[/\\]|webpack-dev-server[/\\]client|webpack-hot-middleware[/\\]client/.test(
								resolveData.request
							) ||
							!checkTest(this.test, module)
						)
							return module;
						const moduleInfo = backend.module(module);
						if (!moduleInfo) return module;
						const { client, data, active ***REMOVED*** = moduleInfo;

						return new LazyCompilationProxyModule(
							compiler.context,
							module,
							resolveData.request,
							client,
							data,
							active
						);
					***REMOVED***
				);
				compilation.dependencyFactories.set(
					LazyCompilationDependency,
					new LazyCompilationDependencyFactory()
				);
			***REMOVED***
		);
		compiler.hooks.shutdown.tapAsync(PLUGIN_NAME, callback => {
			backend.dispose(callback);
		***REMOVED***);
	***REMOVED***
***REMOVED***

module.exports = LazyCompilationPlugin;
