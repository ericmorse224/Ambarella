/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const { OriginalSource, RawSource ***REMOVED*** = require("webpack-sources");
const Module = require("./Module");
const { JS_TYPES ***REMOVED*** = require("./ModuleSourceTypesConstants");
const { JAVASCRIPT_MODULE_TYPE_DYNAMIC ***REMOVED*** = require("./ModuleTypeConstants");
const RuntimeGlobals = require("./RuntimeGlobals");
const DelegatedSourceDependency = require("./dependencies/DelegatedSourceDependency");
const StaticExportsDependency = require("./dependencies/StaticExportsDependency");
const makeSerializable = require("./util/makeSerializable");

/** @typedef {import("webpack-sources").Source***REMOVED*** Source */
/** @typedef {import("../declarations/WebpackOptions").WebpackOptionsNormalized***REMOVED*** WebpackOptions */
/** @typedef {import("../declarations/plugins/DllReferencePlugin").DllReferencePluginOptions***REMOVED*** DllReferencePluginOptions */
/** @typedef {import("./ChunkGraph")***REMOVED*** ChunkGraph */
/** @typedef {import("./Compilation")***REMOVED*** Compilation */
/** @typedef {import("./Dependency").UpdateHashContext***REMOVED*** UpdateHashContext */
/** @typedef {import("./DependencyTemplates")***REMOVED*** DependencyTemplates */
/** @typedef {import("./Generator").SourceTypes***REMOVED*** SourceTypes */
/** @typedef {import("./LibManifestPlugin").ManifestModuleData***REMOVED*** ManifestModuleData */
/** @typedef {import("./Module").BuildCallback***REMOVED*** BuildCallback */
/** @typedef {import("./Module").BuildMeta***REMOVED*** BuildMeta */
/** @typedef {import("./Module").CodeGenerationContext***REMOVED*** CodeGenerationContext */
/** @typedef {import("./Module").CodeGenerationResult***REMOVED*** CodeGenerationResult */
/** @typedef {import("./Module").LibIdentOptions***REMOVED*** LibIdentOptions */
/** @typedef {import("./Module").NeedBuildCallback***REMOVED*** NeedBuildCallback */
/** @typedef {import("./Module").NeedBuildContext***REMOVED*** NeedBuildContext */
/** @typedef {import("./Module").SourceContext***REMOVED*** SourceContext */
/** @typedef {import("./RequestShortener")***REMOVED*** RequestShortener */
/** @typedef {import("./ResolverFactory").ResolverWithOptions***REMOVED*** ResolverWithOptions */
/** @typedef {import("./RuntimeTemplate")***REMOVED*** RuntimeTemplate */
/** @typedef {import("./WebpackError")***REMOVED*** WebpackError */
/** @typedef {import("./dependencies/ModuleDependency")***REMOVED*** ModuleDependency */
/** @typedef {import("./serialization/ObjectMiddleware").ObjectDeserializerContext***REMOVED*** ObjectDeserializerContext */
/** @typedef {import("./serialization/ObjectMiddleware").ObjectSerializerContext***REMOVED*** ObjectSerializerContext */
/** @typedef {import("./util/Hash")***REMOVED*** Hash */
/** @typedef {import("./util/fs").InputFileSystem***REMOVED*** InputFileSystem */

/** @typedef {string***REMOVED*** DelegatedModuleSourceRequest */

/** @typedef {NonNullable<DllReferencePluginOptions["type"]>***REMOVED*** DelegatedModuleType */

/**
 * @typedef {object***REMOVED*** DelegatedModuleData
 * @property {BuildMeta=***REMOVED*** buildMeta build meta
 * @property {true | string[]=***REMOVED*** exports exports
 * @property {number | string***REMOVED*** id module id
 */

const RUNTIME_REQUIREMENTS = new Set([
	RuntimeGlobals.module,
	RuntimeGlobals.require
]);

class DelegatedModule extends Module {
	/**
	 * @param {DelegatedModuleSourceRequest***REMOVED*** sourceRequest source request
	 * @param {DelegatedModuleData***REMOVED*** data data
	 * @param {DelegatedModuleType***REMOVED*** type type
	 * @param {string***REMOVED*** userRequest user request
	 * @param {string | Module***REMOVED*** originalRequest original request
	 */
	constructor(sourceRequest, data, type, userRequest, originalRequest) {
		super(JAVASCRIPT_MODULE_TYPE_DYNAMIC, null);

		// Info from Factory
		this.sourceRequest = sourceRequest;
		this.request = data.id;
		this.delegationType = type;
		this.userRequest = userRequest;
		this.originalRequest = originalRequest;
		this.delegateData = data;

		// Build info
		this.delegatedSourceDependency = undefined;
	***REMOVED***

	/**
	 * @returns {SourceTypes***REMOVED*** types available (do not mutate)
	 */
	getSourceTypes() {
		return JS_TYPES;
	***REMOVED***

	/**
	 * @param {LibIdentOptions***REMOVED*** options options
	 * @returns {string | null***REMOVED*** an identifier for library inclusion
	 */
	libIdent(options) {
		return typeof this.originalRequest === "string"
			? this.originalRequest
			: this.originalRequest.libIdent(options);
	***REMOVED***

	/**
	 * @returns {string***REMOVED*** a unique identifier of the module
	 */
	identifier() {
		return `delegated ${JSON.stringify(this.request)***REMOVED*** from ${
			this.sourceRequest
		***REMOVED***`;
	***REMOVED***

	/**
	 * @param {RequestShortener***REMOVED*** requestShortener the request shortener
	 * @returns {string***REMOVED*** a user readable identifier of the module
	 */
	readableIdentifier(requestShortener) {
		return `delegated ${this.userRequest***REMOVED*** from ${this.sourceRequest***REMOVED***`;
	***REMOVED***

	/**
	 * @param {NeedBuildContext***REMOVED*** context context info
	 * @param {NeedBuildCallback***REMOVED*** callback callback function, returns true, if the module needs a rebuild
	 * @returns {void***REMOVED***
	 */
	needBuild(context, callback) {
		return callback(null, !this.buildMeta);
	***REMOVED***

	/**
	 * @param {WebpackOptions***REMOVED*** options webpack options
	 * @param {Compilation***REMOVED*** compilation the compilation
	 * @param {ResolverWithOptions***REMOVED*** resolver the resolver
	 * @param {InputFileSystem***REMOVED*** fs the file system
	 * @param {BuildCallback***REMOVED*** callback callback function
	 * @returns {void***REMOVED***
	 */
	build(options, compilation, resolver, fs, callback) {
		const delegateData = /** @type {ManifestModuleData***REMOVED*** */ (this.delegateData);
		this.buildMeta = { ...delegateData.buildMeta ***REMOVED***;
		this.buildInfo = {***REMOVED***;
		this.dependencies.length = 0;
		this.delegatedSourceDependency = new DelegatedSourceDependency(
			this.sourceRequest
		);
		this.addDependency(this.delegatedSourceDependency);
		this.addDependency(
			new StaticExportsDependency(delegateData.exports || true, false)
		);
		callback();
	***REMOVED***

	/**
	 * @param {CodeGenerationContext***REMOVED*** context context for code generation
	 * @returns {CodeGenerationResult***REMOVED*** result
	 */
	codeGeneration({ runtimeTemplate, moduleGraph, chunkGraph ***REMOVED***) {
		const dep = /** @type {DelegatedSourceDependency***REMOVED*** */ (this.dependencies[0]);
		const sourceModule = moduleGraph.getModule(dep);
		let str;

		if (!sourceModule) {
			str = runtimeTemplate.throwMissingModuleErrorBlock({
				request: this.sourceRequest
			***REMOVED***);
		***REMOVED*** else {
			str = `module.exports = (${runtimeTemplate.moduleExports({
				module: sourceModule,
				chunkGraph,
				request: dep.request,
				runtimeRequirements: new Set()
			***REMOVED***)***REMOVED***)`;

			switch (this.delegationType) {
				case "require":
					str += `(${JSON.stringify(this.request)***REMOVED***)`;
					break;
				case "object":
					str += `[${JSON.stringify(this.request)***REMOVED***]`;
					break;
			***REMOVED***

			str += ";";
		***REMOVED***

		const sources = new Map();
		if (this.useSourceMap || this.useSimpleSourceMap) {
			sources.set("javascript", new OriginalSource(str, this.identifier()));
		***REMOVED*** else {
			sources.set("javascript", new RawSource(str));
		***REMOVED***

		return {
			sources,
			runtimeRequirements: RUNTIME_REQUIREMENTS
		***REMOVED***;
	***REMOVED***

	/**
	 * @param {string=***REMOVED*** type the source type for which the size should be estimated
	 * @returns {number***REMOVED*** the estimated size of the module (must be non-zero)
	 */
	size(type) {
		return 42;
	***REMOVED***

	/**
	 * @param {Hash***REMOVED*** hash the hash used to track dependencies
	 * @param {UpdateHashContext***REMOVED*** context context
	 * @returns {void***REMOVED***
	 */
	updateHash(hash, context) {
		hash.update(this.delegationType);
		hash.update(JSON.stringify(this.request));
		super.updateHash(hash, context);
	***REMOVED***

	/**
	 * @param {ObjectSerializerContext***REMOVED*** context context
	 */
	serialize(context) {
		const { write ***REMOVED*** = context;
		// constructor
		write(this.sourceRequest);
		write(this.delegateData);
		write(this.delegationType);
		write(this.userRequest);
		write(this.originalRequest);
		super.serialize(context);
	***REMOVED***

	/**
	 * @param {ObjectDeserializerContext***REMOVED*** context context\
	 * @returns {DelegatedModule***REMOVED*** DelegatedModule
	 */
	static deserialize(context) {
		const { read ***REMOVED*** = context;
		const obj = new DelegatedModule(
			read(), // sourceRequest
			read(), // delegateData
			read(), // delegationType
			read(), // userRequest
			read() // originalRequest
		);
		obj.deserialize(context);
		return obj;
	***REMOVED***

	/**
	 * Assuming this module is in the cache. Update the (cached) module with
	 * the fresh module from the factory. Usually updates internal references
	 * and properties.
	 * @param {Module***REMOVED*** module fresh module
	 * @returns {void***REMOVED***
	 */
	updateCacheModule(module) {
		super.updateCacheModule(module);
		const m = /** @type {DelegatedModule***REMOVED*** */ (module);
		this.delegationType = m.delegationType;
		this.userRequest = m.userRequest;
		this.originalRequest = m.originalRequest;
		this.delegateData = m.delegateData;
	***REMOVED***

	/**
	 * Assuming this module is in the cache. Remove internal references to allow freeing some memory.
	 */
	cleanupForCache() {
		super.cleanupForCache();
		this.delegateData =
			/** @type {EXPECTED_ANY***REMOVED*** */
			(undefined);
	***REMOVED***
***REMOVED***

makeSerializable(DelegatedModule, "webpack/lib/DelegatedModule");

module.exports = DelegatedModule;
