'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
***REMOVED***);
exports.default = void 0;

function _chalk() {
  const data = _interopRequireDefault(require('chalk'));

  _chalk = function () {
    return data;
  ***REMOVED***;

  return data;
***REMOVED***

function _jestUtil() {
  const data = require('jest-util');

  _jestUtil = function () {
    return data;
  ***REMOVED***;

  return data;
***REMOVED***

var _DefaultReporter = _interopRequireDefault(require('./DefaultReporter'));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {default: obj***REMOVED***;
***REMOVED***

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    ***REMOVED***);
  ***REMOVED*** else {
    obj[key] = value;
  ***REMOVED***
  return obj;
***REMOVED***

const {ICONS***REMOVED*** = _jestUtil().specialChars;

class VerboseReporter extends _DefaultReporter.default {
  constructor(globalConfig) {
    super(globalConfig);

    _defineProperty(this, '_globalConfig', void 0);

    this._globalConfig = globalConfig;
  ***REMOVED*** // Verbose mode is for debugging. Buffering of output is undesirable.
  // See https://github.com/facebook/jest/issues/8208

  __wrapStdio(stream) {
    const write = stream.write.bind(stream);

    stream.write = chunk => {
      this.__clearStatus();

      write(chunk);

      this.__printStatus();

      return true;
    ***REMOVED***;
  ***REMOVED***

  static filterTestResults(testResults) {
    return testResults.filter(({status***REMOVED***) => status !== 'pending');
  ***REMOVED***

  static groupTestsBySuites(testResults) {
    const root = {
      suites: [],
      tests: [],
      title: ''
    ***REMOVED***;
    testResults.forEach(testResult => {
      let targetSuite = root; // Find the target suite for this test,
      // creating nested suites as necessary.

      for (const title of testResult.ancestorTitles) {
        let matchingSuite = targetSuite.suites.find(s => s.title === title);

        if (!matchingSuite) {
          matchingSuite = {
            suites: [],
            tests: [],
            title
          ***REMOVED***;
          targetSuite.suites.push(matchingSuite);
        ***REMOVED***

        targetSuite = matchingSuite;
      ***REMOVED***

      targetSuite.tests.push(testResult);
    ***REMOVED***);
    return root;
  ***REMOVED***

  onTestResult(test, result, aggregatedResults) {
    super.testFinished(test.context.config, result, aggregatedResults);

    if (!result.skipped) {
      this.printTestFileHeader(
        result.testFilePath,
        test.context.config,
        result
      );

      if (!result.testExecError && !result.skipped) {
        this._logTestResults(result.testResults);
      ***REMOVED***

      this.printTestFileFailureMessage(
        result.testFilePath,
        test.context.config,
        result
      );
    ***REMOVED***

    super.forceFlushBufferedOutput();
  ***REMOVED***

  _logTestResults(testResults) {
    this._logSuite(VerboseReporter.groupTestsBySuites(testResults), 0);

    this._logLine();
  ***REMOVED***

  _logSuite(suite, indentLevel) {
    if (suite.title) {
      this._logLine(suite.title, indentLevel);
    ***REMOVED***

    this._logTests(suite.tests, indentLevel + 1);

    suite.suites.forEach(suite => this._logSuite(suite, indentLevel + 1));
  ***REMOVED***

  _getIcon(status) {
    if (status === 'failed') {
      return _chalk().default.red(ICONS.failed);
    ***REMOVED*** else if (status === 'pending') {
      return _chalk().default.yellow(ICONS.pending);
    ***REMOVED*** else if (status === 'todo') {
      return _chalk().default.magenta(ICONS.todo);
    ***REMOVED*** else {
      return _chalk().default.green(ICONS.success);
    ***REMOVED***
  ***REMOVED***

  _logTest(test, indentLevel) {
    const status = this._getIcon(test.status);

    const time = test.duration
      ? ` (${(0, _jestUtil().formatTime)(Math.round(test.duration))***REMOVED***)`
      : '';

    this._logLine(
      status + ' ' + _chalk().default.dim(test.title + time),
      indentLevel
    );
  ***REMOVED***

  _logTests(tests, indentLevel) {
    if (this._globalConfig.expand) {
      tests.forEach(test => this._logTest(test, indentLevel));
    ***REMOVED*** else {
      const summedTests = tests.reduce(
        (result, test) => {
          if (test.status === 'pending') {
            result.pending.push(test);
          ***REMOVED*** else if (test.status === 'todo') {
            result.todo.push(test);
          ***REMOVED*** else {
            this._logTest(test, indentLevel);
          ***REMOVED***

          return result;
        ***REMOVED***,
        {
          pending: [],
          todo: []
        ***REMOVED***
      );

      if (summedTests.pending.length > 0) {
        summedTests.pending.forEach(this._logTodoOrPendingTest(indentLevel));
      ***REMOVED***

      if (summedTests.todo.length > 0) {
        summedTests.todo.forEach(this._logTodoOrPendingTest(indentLevel));
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***

  _logTodoOrPendingTest(indentLevel) {
    return test => {
      const printedTestStatus =
        test.status === 'pending' ? 'skipped' : test.status;

      const icon = this._getIcon(test.status);

      const text = _chalk().default.dim(`${printedTestStatus***REMOVED*** ${test.title***REMOVED***`);

      this._logLine(`${icon***REMOVED*** ${text***REMOVED***`, indentLevel);
    ***REMOVED***;
  ***REMOVED***

  _logLine(str, indentLevel) {
    const indentation = '  '.repeat(indentLevel || 0);
    this.log(indentation + (str || ''));
  ***REMOVED***
***REMOVED***

exports.default = VerboseReporter;

_defineProperty(VerboseReporter, 'filename', __filename);
