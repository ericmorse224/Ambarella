/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const DllModuleFactory = require("./DllModuleFactory");
const DllEntryDependency = require("./dependencies/DllEntryDependency");
const EntryDependency = require("./dependencies/EntryDependency");

/** @typedef {import("./Compiler")***REMOVED*** Compiler */
/** @typedef {string[]***REMOVED*** Entries */
/** @typedef {{ name: string, filename: TODO ***REMOVED******REMOVED*** Options */

const PLUGIN_NAME = "DllEntryPlugin";

class DllEntryPlugin {
	/**
	 * @param {string***REMOVED*** context context
	 * @param {Entries***REMOVED*** entries entry names
	 * @param {Options***REMOVED*** options options
	 */
	constructor(context, entries, options) {
		this.context = context;
		this.entries = entries;
		this.options = options;
	***REMOVED***

	/**
	 * Apply the plugin
	 * @param {Compiler***REMOVED*** compiler the compiler instance
	 * @returns {void***REMOVED***
	 */
	apply(compiler) {
		compiler.hooks.compilation.tap(
			PLUGIN_NAME,
			(compilation, { normalModuleFactory ***REMOVED***) => {
				const dllModuleFactory = new DllModuleFactory();
				compilation.dependencyFactories.set(
					DllEntryDependency,
					dllModuleFactory
				);
				compilation.dependencyFactories.set(
					EntryDependency,
					normalModuleFactory
				);
			***REMOVED***
		);
		compiler.hooks.make.tapAsync(PLUGIN_NAME, (compilation, callback) => {
			compilation.addEntry(
				this.context,
				new DllEntryDependency(
					this.entries.map((e, idx) => {
						const dep = new EntryDependency(e);
						dep.loc = {
							name: this.options.name,
							index: idx
						***REMOVED***;
						return dep;
					***REMOVED***),
					this.options.name
				),
				this.options,
				error => {
					if (error) return callback(error);
					callback();
				***REMOVED***
			);
		***REMOVED***);
	***REMOVED***
***REMOVED***

module.exports = DllEntryPlugin;
