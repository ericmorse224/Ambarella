/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const WebpackError = require("../WebpackError");
const {
	evaluateToString,
	toConstantDependency
***REMOVED*** = require("../javascript/JavascriptParserHelpers");
const makeSerializable = require("../util/makeSerializable");
const RequireIncludeDependency = require("./RequireIncludeDependency");

/** @typedef {import("../Dependency").DependencyLocation***REMOVED*** DependencyLocation */
/** @typedef {import("../javascript/JavascriptParser")***REMOVED*** JavascriptParser */
/** @typedef {import("../javascript/JavascriptParser").Range***REMOVED*** Range */

module.exports = class RequireIncludeDependencyParserPlugin {
	/**
	 * @param {boolean***REMOVED*** warn true: warn about deprecation, false: don't warn
	 */
	constructor(warn) {
		this.warn = warn;
	***REMOVED***

	/**
	 * @param {JavascriptParser***REMOVED*** parser the parser
	 * @returns {void***REMOVED***
	 */
	apply(parser) {
		const { warn ***REMOVED*** = this;
		parser.hooks.call
			.for("require.include")
			.tap("RequireIncludeDependencyParserPlugin", expr => {
				if (expr.arguments.length !== 1) return;
				const param = parser.evaluateExpression(expr.arguments[0]);
				if (!param.isString()) return;

				if (warn) {
					parser.state.module.addWarning(
						new RequireIncludeDeprecationWarning(
							/** @type {DependencyLocation***REMOVED*** */ (expr.loc)
						)
					);
				***REMOVED***

				const dep = new RequireIncludeDependency(
					/** @type {string***REMOVED*** */ (param.string),
					/** @type {Range***REMOVED*** */ (expr.range)
				);
				dep.loc = /** @type {DependencyLocation***REMOVED*** */ (expr.loc);
				parser.state.current.addDependency(dep);
				return true;
			***REMOVED***);
		parser.hooks.evaluateTypeof
			.for("require.include")
			.tap("RequireIncludePlugin", expr => {
				if (warn) {
					parser.state.module.addWarning(
						new RequireIncludeDeprecationWarning(
							/** @type {DependencyLocation***REMOVED*** */ (expr.loc)
						)
					);
				***REMOVED***
				return evaluateToString("function")(expr);
			***REMOVED***);
		parser.hooks.typeof
			.for("require.include")
			.tap("RequireIncludePlugin", expr => {
				if (warn) {
					parser.state.module.addWarning(
						new RequireIncludeDeprecationWarning(
							/** @type {DependencyLocation***REMOVED*** */ (expr.loc)
						)
					);
				***REMOVED***
				return toConstantDependency(parser, JSON.stringify("function"))(expr);
			***REMOVED***);
	***REMOVED***
***REMOVED***;

class RequireIncludeDeprecationWarning extends WebpackError {
	/**
	 * @param {DependencyLocation***REMOVED*** loc location
	 */
	constructor(loc) {
		super("require.include() is deprecated and will be removed soon.");

		this.name = "RequireIncludeDeprecationWarning";

		this.loc = loc;
	***REMOVED***
***REMOVED***

makeSerializable(
	RequireIncludeDeprecationWarning,
	"webpack/lib/dependencies/RequireIncludeDependencyParserPlugin",
	"RequireIncludeDeprecationWarning"
);
