'use strict';
const valueParser = require('postcss-value-parser');
const minifyWeight = require('./lib/minify-weight');
const minifyFamily = require('./lib/minify-family');
const minifyFont = require('./lib/minify-font');

/**
 * @param {string***REMOVED*** value
 * @return {boolean***REMOVED***
 */
function hasVariableFunction(value) {
  const lowerCasedValue = value.toLowerCase();

  return lowerCasedValue.includes('var(') || lowerCasedValue.includes('env(');
***REMOVED***

/**
 * @param {string***REMOVED*** prop
 * @param {string***REMOVED*** value
 * @param {Options***REMOVED*** opts
 * @return {string***REMOVED***
 */
function transform(prop, value, opts) {
  let lowerCasedProp = prop.toLowerCase();

  if (lowerCasedProp === 'font-weight' && !hasVariableFunction(value)) {
    return minifyWeight(value);
  ***REMOVED*** else if (lowerCasedProp === 'font-family' && !hasVariableFunction(value)) {
    const tree = valueParser(value);

    tree.nodes = minifyFamily(tree.nodes, opts);

    return tree.toString();
  ***REMOVED*** else if (lowerCasedProp === 'font') {
    const tree = valueParser(value);

    tree.nodes = minifyFont(tree.nodes, opts);

    return tree.toString();
  ***REMOVED***

  return value;
***REMOVED***

/** @typedef {{removeAfterKeyword?: boolean, removeDuplicates?: boolean, removeQuotes?: boolean***REMOVED******REMOVED*** Options */

/**
 * @type {import('postcss').PluginCreator<Options>***REMOVED***
 * @param {Options***REMOVED*** opts
 * @return {import('postcss').Plugin***REMOVED***
 */
function pluginCreator(opts) {
  opts = Object.assign(
    {***REMOVED***,
    {
      removeAfterKeyword: false,
      removeDuplicates: true,
      removeQuotes: true,
    ***REMOVED***,
    opts
  );

  return {
    postcssPlugin: 'postcss-minify-font-values',
    prepare() {
      const cache = new Map();
      return {
        OnceExit(css) {
          css.walkDecls(/font/i, (decl) => {
            const value = decl.value;

            if (!value) {
              return;
            ***REMOVED***

            const prop = decl.prop;

            const cacheKey = `${prop***REMOVED***|${value***REMOVED***`;

            if (cache.has(cacheKey)) {
              decl.value = cache.get(cacheKey);

              return;
            ***REMOVED***

            const newValue = transform(prop, value, opts);

            decl.value = newValue;
            cache.set(cacheKey, newValue);
          ***REMOVED***);
        ***REMOVED***,
      ***REMOVED***;
    ***REMOVED***,
  ***REMOVED***;
***REMOVED***

pluginCreator.postcss = true;
module.exports = pluginCreator;
