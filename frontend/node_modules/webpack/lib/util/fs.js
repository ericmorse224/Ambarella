/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const path = require("path");

/** @typedef {import("../../declarations/WebpackOptions").WatchOptions***REMOVED*** WatchOptions */
/** @typedef {import("../FileSystemInfo").FileSystemInfoEntry***REMOVED*** FileSystemInfoEntry */

/**
 * @template T
 * @typedef {object***REMOVED*** IStatsBase
 * @property {() => boolean***REMOVED*** isFile
 * @property {() => boolean***REMOVED*** isDirectory
 * @property {() => boolean***REMOVED*** isBlockDevice
 * @property {() => boolean***REMOVED*** isCharacterDevice
 * @property {() => boolean***REMOVED*** isSymbolicLink
 * @property {() => boolean***REMOVED*** isFIFO
 * @property {() => boolean***REMOVED*** isSocket
 * @property {T***REMOVED*** dev
 * @property {T***REMOVED*** ino
 * @property {T***REMOVED*** mode
 * @property {T***REMOVED*** nlink
 * @property {T***REMOVED*** uid
 * @property {T***REMOVED*** gid
 * @property {T***REMOVED*** rdev
 * @property {T***REMOVED*** size
 * @property {T***REMOVED*** blksize
 * @property {T***REMOVED*** blocks
 * @property {T***REMOVED*** atimeMs
 * @property {T***REMOVED*** mtimeMs
 * @property {T***REMOVED*** ctimeMs
 * @property {T***REMOVED*** birthtimeMs
 * @property {Date***REMOVED*** atime
 * @property {Date***REMOVED*** mtime
 * @property {Date***REMOVED*** ctime
 * @property {Date***REMOVED*** birthtime
 */

/**
 * @typedef {IStatsBase<number>***REMOVED*** IStats
 */

/**
 * @typedef {IStatsBase<bigint> & { atimeNs: bigint, mtimeNs: bigint, ctimeNs: bigint, birthtimeNs: bigint  ***REMOVED******REMOVED*** IBigIntStats
 */

/**
 * @typedef {object***REMOVED*** Dirent
 * @property {() => boolean***REMOVED*** isFile
 * @property {() => boolean***REMOVED*** isDirectory
 * @property {() => boolean***REMOVED*** isBlockDevice
 * @property {() => boolean***REMOVED*** isCharacterDevice
 * @property {() => boolean***REMOVED*** isSymbolicLink
 * @property {() => boolean***REMOVED*** isFIFO
 * @property {() => boolean***REMOVED*** isSocket
 * @property {string***REMOVED*** name
 * @property {string***REMOVED*** path
 */

/** @typedef {string | number | boolean | null***REMOVED*** JsonPrimitive */
/** @typedef {JsonValue[]***REMOVED*** JsonArray */
/** @typedef {{[Key in string]: JsonValue***REMOVED*** & {[Key in string]?: JsonValue | undefined***REMOVED******REMOVED*** JsonObject */
/** @typedef {JsonPrimitive | JsonObject | JsonArray***REMOVED*** JsonValue */

/** @typedef {(err: NodeJS.ErrnoException | null) => void***REMOVED*** NoParamCallback */
/** @typedef {(err: NodeJS.ErrnoException | null, result?: string) => void***REMOVED*** StringCallback */
/** @typedef {(err: NodeJS.ErrnoException | null, result?: Buffer) => void***REMOVED*** BufferCallback */
/** @typedef {(err: NodeJS.ErrnoException | null, result?: string | Buffer) => void***REMOVED*** StringOrBufferCallback */
/** @typedef {(err: NodeJS.ErrnoException | null, result?: string[]) => void***REMOVED*** ReaddirStringCallback */
/** @typedef {(err: NodeJS.ErrnoException | null, result?: Buffer[]) => void***REMOVED*** ReaddirBufferCallback */
/** @typedef {(err: NodeJS.ErrnoException | null, result?: string[] | Buffer[]) => void***REMOVED*** ReaddirStringOrBufferCallback */
/** @typedef {(err: NodeJS.ErrnoException | null, result?: Dirent[]) => void***REMOVED*** ReaddirDirentCallback */
/** @typedef {(err: NodeJS.ErrnoException | null, result?: IStats) => void***REMOVED*** StatsCallback */
/** @typedef {(err: NodeJS.ErrnoException | null, result?: IBigIntStats) => void***REMOVED*** BigIntStatsCallback */
/** @typedef {(err: NodeJS.ErrnoException | null, result?: IStats | IBigIntStats) => void***REMOVED*** StatsOrBigIntStatsCallback */
/** @typedef {(err: NodeJS.ErrnoException | null, result?: number) => void***REMOVED*** NumberCallback */
/** @typedef {(err: NodeJS.ErrnoException | Error | null, result?: JsonObject) => void***REMOVED*** ReadJsonCallback */

/** @typedef {Map<string, FileSystemInfoEntry | "ignore">***REMOVED*** TimeInfoEntries */

/**
 * @typedef {object***REMOVED*** WatcherInfo
 * @property {Set<string> | null***REMOVED*** changes get current aggregated changes that have not yet send to callback
 * @property {Set<string> | null***REMOVED*** removals get current aggregated removals that have not yet send to callback
 * @property {TimeInfoEntries***REMOVED*** fileTimeInfoEntries get info about files
 * @property {TimeInfoEntries***REMOVED*** contextTimeInfoEntries get info about directories
 */

/** @typedef {Set<string>***REMOVED*** Changes */
/** @typedef {Set<string>***REMOVED*** Removals */

// TODO webpack 6 deprecate missing getInfo
/**
 * @typedef {object***REMOVED*** Watcher
 * @property {() => void***REMOVED*** close closes the watcher and all underlying file watchers
 * @property {() => void***REMOVED*** pause closes the watcher, but keeps underlying file watchers alive until the next watch call
 * @property {(() => Changes | null)=***REMOVED*** getAggregatedChanges get current aggregated changes that have not yet send to callback
 * @property {(() => Removals | null)=***REMOVED*** getAggregatedRemovals get current aggregated removals that have not yet send to callback
 * @property {() => TimeInfoEntries***REMOVED*** getFileTimeInfoEntries get info about files
 * @property {() => TimeInfoEntries***REMOVED*** getContextTimeInfoEntries get info about directories
 * @property {() => WatcherInfo=***REMOVED*** getInfo get info about timestamps and changes
 */

/**
 * @callback WatchMethod
 * @param {Iterable<string>***REMOVED*** files watched files
 * @param {Iterable<string>***REMOVED*** directories watched directories
 * @param {Iterable<string>***REMOVED*** missing watched existence entries
 * @param {number***REMOVED*** startTime timestamp of start time
 * @param {WatchOptions***REMOVED*** options options object
 * @param {(err: Error | null, timeInfoEntries1?: TimeInfoEntries, timeInfoEntries2?: TimeInfoEntries, changes?: Changes, removals?: Removals) => void***REMOVED*** callback aggregated callback
 * @param {(value: string, num: number) => void***REMOVED*** callbackUndelayed callback when the first change was detected
 * @returns {Watcher***REMOVED*** a watcher
 */

// TODO webpack 6 make optional methods required and avoid using non standard methods like `join`, `relative`, `dirname`, move IntermediateFileSystemExtras methods to InputFilesystem or OutputFilesystem

/**
 * @typedef {string | Buffer | URL***REMOVED*** PathLike
 */

/**
 * @typedef {PathLike | number***REMOVED*** PathOrFileDescriptor
 */

/**
 * @typedef {object***REMOVED*** ObjectEncodingOptions
 * @property {BufferEncoding | null | undefined=***REMOVED*** encoding
 */

/**
 * @typedef {{
 * (path: PathOrFileDescriptor, options: ({ encoding?: null | undefined, flag?: string | undefined ***REMOVED*** & import("events").Abortable) | undefined | null, callback: BufferCallback): void;
 * (path: PathOrFileDescriptor, options: ({ encoding: BufferEncoding, flag?: string | undefined ***REMOVED*** & import("events").Abortable) | BufferEncoding, callback: StringCallback): void;
 * (path: PathOrFileDescriptor, options: (ObjectEncodingOptions & { flag?: string | undefined ***REMOVED*** & import("events").Abortable) | BufferEncoding | undefined | null, callback: StringOrBufferCallback): void;
 * (path: PathOrFileDescriptor, callback: BufferCallback): void;
 * ***REMOVED******REMOVED*** ReadFile
 */

/**
 * @typedef {{
 * (path: PathOrFileDescriptor, options?: { encoding?: null | undefined, flag?: string | undefined ***REMOVED*** | null): Buffer;
 * (path: PathOrFileDescriptor, options: { encoding: BufferEncoding, flag?: string | undefined ***REMOVED*** | BufferEncoding): string;
 * (path: PathOrFileDescriptor, options?: (ObjectEncodingOptions & { flag?: string | undefined ***REMOVED***) | BufferEncoding | null): string | Buffer;
 * ***REMOVED******REMOVED*** ReadFileSync
 */

/**
 * @typedef {ObjectEncodingOptions | BufferEncoding | undefined | null***REMOVED*** EncodingOption
 */

/**
 * @typedef {'buffer'| { encoding: 'buffer' ***REMOVED******REMOVED*** BufferEncodingOption
 */

/**
 * @typedef {object***REMOVED*** StatOptions
 * @property {(boolean | undefined)=***REMOVED*** bigint
 */

/**
 * @typedef {object***REMOVED*** StatSyncOptions
 * @property {(boolean | undefined)=***REMOVED*** bigint
 * @property {(boolean | undefined)=***REMOVED*** throwIfNoEntry
 */

/**
 * @typedef {{
 * (path: PathLike, options: EncodingOption, callback: StringCallback): void;
 * (path: PathLike, options: BufferEncodingOption, callback: BufferCallback): void;
 * (path: PathLike, options: EncodingOption, callback: StringOrBufferCallback): void;
 * (path: PathLike, callback: StringCallback): void;
 * ***REMOVED******REMOVED*** Readlink
 */

/**
 * @typedef {{
 * (path: PathLike, options?: EncodingOption): string;
 * (path: PathLike, options: BufferEncodingOption): Buffer;
 * (path: PathLike, options?: EncodingOption): string | Buffer;
 * ***REMOVED******REMOVED*** ReadlinkSync
 */

/**
 * @typedef {{
 * (path: PathLike, options: { encoding: BufferEncoding | null, withFileTypes?: false | undefined, recursive?: boolean | undefined ***REMOVED*** | BufferEncoding | undefined | null, callback: ReaddirStringCallback): void;
 * (path: PathLike, options: { encoding: 'buffer', withFileTypes?: false | undefined, recursive?: boolean | undefined ***REMOVED*** | 'buffer', callback: ReaddirBufferCallback): void;
 * (path: PathLike, callback: ReaddirStringCallback): void;
 * (path: PathLike, options: (ObjectEncodingOptions & { withFileTypes?: false | undefined, recursive?: boolean | undefined ***REMOVED***) | BufferEncoding | undefined | null, callback: ReaddirStringOrBufferCallback): void;
 * (path: PathLike, options: ObjectEncodingOptions & { withFileTypes: true, recursive?: boolean | undefined ***REMOVED***, callback: ReaddirDirentCallback): void;
 * ***REMOVED******REMOVED*** Readdir
 */

/**
 * @typedef {{
 * (path: PathLike, options?: { encoding: BufferEncoding | null, withFileTypes?: false | undefined, recursive?: boolean | undefined ***REMOVED*** | BufferEncoding | null): string[];
 * (path: PathLike, options: { encoding: 'buffer', withFileTypes?: false | undefined, recursive?: boolean | undefined ***REMOVED*** | 'buffer'): Buffer[];
 * (path: PathLike, options?: (ObjectEncodingOptions & { withFileTypes?: false | undefined, recursive?: boolean | undefined ***REMOVED***) | BufferEncoding | null): string[] | Buffer[];
 * (path: PathLike, options: ObjectEncodingOptions & { withFileTypes: true, recursive?: boolean | undefined ***REMOVED***): Dirent[];
 * ***REMOVED******REMOVED*** ReaddirSync
 */

/**
 * @typedef {{
 * (path: PathLike, callback: StatsCallback): void;
 * (path: PathLike, options: (StatOptions & { bigint?: false | undefined ***REMOVED***) | undefined, callback: StatsCallback): void;
 * (path: PathLike, options: StatOptions & { bigint: true ***REMOVED***, callback: BigIntStatsCallback): void;
 * (path: PathLike, options: StatOptions | undefined, callback: StatsOrBigIntStatsCallback): void;
 * ***REMOVED******REMOVED*** Stat
 */

/**
 * @typedef {{
 * (path: PathLike, options?: undefined): IStats;
 * (path: PathLike, options?: StatSyncOptions & { bigint?: false | undefined, throwIfNoEntry: false ***REMOVED***): IStats | undefined;
 * (path: PathLike, options: StatSyncOptions & { bigint: true, throwIfNoEntry: false ***REMOVED***): IBigIntStats | undefined;
 * (path: PathLike, options?: StatSyncOptions & { bigint?: false | undefined ***REMOVED***): IStats;
 * (path: PathLike, options: StatSyncOptions & { bigint: true ***REMOVED***): IBigIntStats;
 * (path: PathLike,  options: StatSyncOptions & { bigint: boolean, throwIfNoEntry?: false | undefined ***REMOVED***): IStats | IBigIntStats;
 * (path: PathLike,  options?: StatSyncOptions): IStats | IBigIntStats | undefined;
 * ***REMOVED******REMOVED*** StatSync
 */

/**
 * @typedef {{
 * (path: PathLike, callback: StatsCallback): void;
 * (path: PathLike, options: (StatOptions & { bigint?: false | undefined ***REMOVED***) | undefined, callback: StatsCallback): void;
 * (path: PathLike, options: StatOptions & { bigint: true ***REMOVED***, callback: BigIntStatsCallback): void;
 * (path: PathLike, options: StatOptions | undefined, callback: StatsOrBigIntStatsCallback): void;
 * ***REMOVED******REMOVED*** LStat
 */

/**
 * @typedef {{
 * (path: PathLike, options?: undefined): IStats;
 * (path: PathLike, options?: StatSyncOptions & { bigint?: false | undefined, throwIfNoEntry: false ***REMOVED***): IStats | undefined;
 * (path: PathLike, options: StatSyncOptions & { bigint: true, throwIfNoEntry: false ***REMOVED***): IBigIntStats | undefined;
 * (path: PathLike, options?: StatSyncOptions & { bigint?: false | undefined ***REMOVED***): IStats;
 * (path: PathLike, options: StatSyncOptions & { bigint: true ***REMOVED***): IBigIntStats;
 * (path: PathLike,  options: StatSyncOptions & { bigint: boolean, throwIfNoEntry?: false | undefined ***REMOVED***): IStats | IBigIntStats;
 * (path: PathLike,  options?: StatSyncOptions): IStats | IBigIntStats | undefined;
 * ***REMOVED******REMOVED*** LStatSync
 */

/**
 * @typedef {{
 * (path: PathLike, options: EncodingOption, callback: StringCallback): void;
 * (path: PathLike, options: BufferEncodingOption, callback: BufferCallback): void;
 * (path: PathLike, options: EncodingOption, callback: StringOrBufferCallback): void;
 * (path: PathLike, callback: StringCallback): void;
 * ***REMOVED******REMOVED*** RealPath
 */

/**
 * @typedef {{
 * (path: PathLike, options?: EncodingOption): string;
 * (path: PathLike, options: BufferEncodingOption): Buffer;
 * (path: PathLike, options?: EncodingOption): string | Buffer;
 * ***REMOVED******REMOVED*** RealPathSync
 */

/**
 * @typedef {(pathOrFileDescriptor: PathOrFileDescriptor, callback: ReadJsonCallback) => void***REMOVED*** ReadJson
 */

/**
 * @typedef {(pathOrFileDescriptor: PathOrFileDescriptor) => JsonObject***REMOVED*** ReadJsonSync
 */

/**
 * @typedef {(value?: string | string[] | Set<string>) => void***REMOVED*** Purge
 */

/**
 * @typedef {object***REMOVED*** InputFileSystem
 * @property {ReadFile***REMOVED*** readFile
 * @property {ReadFileSync=***REMOVED*** readFileSync
 * @property {Readlink***REMOVED*** readlink
 * @property {ReadlinkSync=***REMOVED*** readlinkSync
 * @property {Readdir***REMOVED*** readdir
 * @property {ReaddirSync=***REMOVED*** readdirSync
 * @property {Stat***REMOVED*** stat
 * @property {StatSync=***REMOVED*** statSync
 * @property {LStat=***REMOVED*** lstat
 * @property {LStatSync=***REMOVED*** lstatSync
 * @property {RealPath=***REMOVED*** realpath
 * @property {RealPathSync=***REMOVED*** realpathSync
 * @property {ReadJson=***REMOVED*** readJson
 * @property {ReadJsonSync=***REMOVED*** readJsonSync
 * @property {Purge=***REMOVED*** purge
 * @property {((path1: string, path2: string) => string)=***REMOVED*** join
 * @property {((from: string, to: string) => string)=***REMOVED*** relative
 * @property {((dirname: string) => string)=***REMOVED*** dirname
 */

/**
 * @typedef {number | string***REMOVED*** Mode
 */

/**
 * @typedef {(ObjectEncodingOptions & import("events").Abortable & { mode?: Mode | undefined, flag?: string | undefined, flush?: boolean | undefined ***REMOVED***) | BufferEncoding | null***REMOVED*** WriteFileOptions
 */

/**
 * @typedef {{
 * (file: PathOrFileDescriptor, data: string | NodeJS.ArrayBufferView, options: WriteFileOptions, callback: NoParamCallback): void;
 * (file: PathOrFileDescriptor, data: string | NodeJS.ArrayBufferView, callback: NoParamCallback): void;
 * ***REMOVED******REMOVED*** WriteFile
 */

/**
 * @typedef {{ recursive?: boolean | undefined, mode?: Mode | undefined ***REMOVED******REMOVED*** MakeDirectoryOptions
 */

/**
 * @typedef {{
 * (file: PathLike, options: MakeDirectoryOptions & { recursive: true ***REMOVED***, callback: StringCallback): void;
 * (file: PathLike, options: Mode | (MakeDirectoryOptions & { recursive?: false | undefined; ***REMOVED***) | null | undefined, callback: NoParamCallback): void;
 * (file: PathLike, options: Mode | MakeDirectoryOptions | null | undefined, callback: StringCallback): void;
 * (file: PathLike, callback: NoParamCallback): void;
 * ***REMOVED******REMOVED*** Mkdir
 */

/**
 * @typedef {{ maxRetries?: number | undefined, recursive?: boolean | undefined, retryDelay?: number | undefined ***REMOVED******REMOVED*** RmDirOptions
 */

/**
 * @typedef {{
 * (file: PathLike, callback: NoParamCallback): void;
 * (file: PathLike, options: RmDirOptions, callback: NoParamCallback): void;
 * ***REMOVED******REMOVED*** Rmdir
 */

/**
 * @typedef {(pathLike: PathLike, callback: NoParamCallback) => void***REMOVED*** Unlink
 */

/**
 * @typedef {object***REMOVED*** OutputFileSystem
 * @property {WriteFile***REMOVED*** writeFile
 * @property {Mkdir***REMOVED*** mkdir
 * @property {Readdir=***REMOVED*** readdir
 * @property {Rmdir=***REMOVED*** rmdir
 * @property {Unlink=***REMOVED*** unlink
 * @property {Stat***REMOVED*** stat
 * @property {LStat=***REMOVED*** lstat
 * @property {ReadFile***REMOVED*** readFile
 * @property {((path1: string, path2: string) => string)=***REMOVED*** join
 * @property {((from: string, to: string) => string)=***REMOVED*** relative
 * @property {((dirname: string) => string)=***REMOVED*** dirname
 */

/**
 * @typedef {object***REMOVED*** WatchFileSystem
 * @property {WatchMethod***REMOVED*** watch
 */

/**
 * @typedef {{
 * (path: PathLike, options: MakeDirectoryOptions & { recursive: true ***REMOVED***): string | undefined;
 * (path: PathLike, options?: Mode | (MakeDirectoryOptions & { recursive?: false | undefined ***REMOVED***) | null): void;
 * (path: PathLike, options?: Mode | MakeDirectoryOptions | null): string | undefined;
 * ***REMOVED******REMOVED*** MkdirSync
 */

/**
 * @typedef {object***REMOVED*** StreamOptions
 * @property {(string | undefined)=***REMOVED*** flags
 * @property {(BufferEncoding | undefined)***REMOVED*** encoding
 * @property {(number | EXPECTED_ANY | undefined)=***REMOVED*** fd
 * @property {(number | undefined)=***REMOVED*** mode
 * @property {(boolean | undefined)=***REMOVED*** autoClose
 * @property {(boolean | undefined)=***REMOVED*** emitClose
 * @property {(number | undefined)=***REMOVED*** start
 * @property {(AbortSignal | null | undefined)=***REMOVED*** signal
 */

/**
 * @typedef {object***REMOVED*** FSImplementation
 * @property {((...args: EXPECTED_ANY[]) => EXPECTED_ANY)=***REMOVED*** open
 * @property {((...args: EXPECTED_ANY[]) => EXPECTED_ANY)=***REMOVED*** close
 */

/**
 * @typedef {FSImplementation & { write: (...args: EXPECTED_ANY[]) => EXPECTED_ANY; close?: (...args: EXPECTED_ANY[]) => EXPECTED_ANY ***REMOVED******REMOVED*** CreateWriteStreamFSImplementation
 */

/**
 * @typedef {StreamOptions & { fs?: CreateWriteStreamFSImplementation | null | undefined ***REMOVED******REMOVED*** WriteStreamOptions
 */

/**
 * @typedef {(pathLike: PathLike, result?: BufferEncoding | WriteStreamOptions) => NodeJS.WritableStream***REMOVED*** CreateWriteStream
 */

/**
 * @typedef {number | string***REMOVED*** OpenMode
 */

/**
 * @typedef {{
 * (file: PathLike, flags: OpenMode | undefined,  mode: Mode | undefined | null, callback: NumberCallback): void;
 * (file: PathLike, flags: OpenMode | undefined, callback: NumberCallback): void;
 * (file: PathLike, callback: NumberCallback): void;
 * ***REMOVED******REMOVED*** Open
 */

/**
 * @typedef {number | bigint***REMOVED*** ReadPosition
 */

/**
 * @typedef {object***REMOVED*** ReadSyncOptions
 * @property {(number | undefined)=***REMOVED*** offset
 * @property {(number | undefined)=***REMOVED*** length
 * @property {(ReadPosition | null | undefined)=***REMOVED*** position
 */

/**
 * @template {NodeJS.ArrayBufferView***REMOVED*** TBuffer
 * @typedef {object***REMOVED*** ReadAsyncOptions
 * @property {(number | undefined)=***REMOVED*** offset
 * @property {(number | undefined)=***REMOVED*** length
 * @property {(ReadPosition | null | undefined)=***REMOVED*** position
 * @property {TBuffer=***REMOVED*** buffer
 */

/**
 * @template {NodeJS.ArrayBufferView***REMOVED*** [TBuffer=NodeJS.ArrayBufferView]
 * @typedef {{
 * (fd: number, buffer: TBuffer, offset: number, length: number, position: ReadPosition | null, callback: (err: NodeJS.ErrnoException | null, bytesRead: number, buffer: TBuffer) => void): void;
 * (fd: number, options: ReadAsyncOptions<TBuffer>, callback: (err: NodeJS.ErrnoException | null, bytesRead: number, buffer: TBuffer) => void): void;
 * (fd: number, callback: (err: NodeJS.ErrnoException | null, bytesRead: number, buffer: NodeJS.ArrayBufferView) => void): void;
 * ***REMOVED******REMOVED*** Read
 */

/** @typedef {(df: number, callback: NoParamCallback) => void***REMOVED*** Close */

/** @typedef {(a: PathLike, b: PathLike, callback: NoParamCallback) => void***REMOVED*** Rename */

/**
 * @typedef {object***REMOVED*** IntermediateFileSystemExtras
 * @property {MkdirSync***REMOVED*** mkdirSync
 * @property {CreateWriteStream***REMOVED*** createWriteStream
 * @property {Open***REMOVED*** open
 * @property {Read***REMOVED*** read
 * @property {Close***REMOVED*** close
 * @property {Rename***REMOVED*** rename
 */

/** @typedef {InputFileSystem & OutputFileSystem & IntermediateFileSystemExtras***REMOVED*** IntermediateFileSystem */

/**
 * @param {InputFileSystem|OutputFileSystem|undefined***REMOVED*** fs a file system
 * @param {string***REMOVED*** rootPath the root path
 * @param {string***REMOVED*** targetPath the target path
 * @returns {string***REMOVED*** location of targetPath relative to rootPath
 */
const relative = (fs, rootPath, targetPath) => {
	if (fs && fs.relative) {
		return fs.relative(rootPath, targetPath);
	***REMOVED*** else if (path.posix.isAbsolute(rootPath)) {
		return path.posix.relative(rootPath, targetPath);
	***REMOVED*** else if (path.win32.isAbsolute(rootPath)) {
		return path.win32.relative(rootPath, targetPath);
	***REMOVED***
	throw new Error(
		`${rootPath***REMOVED*** is neither a posix nor a windows path, and there is no 'relative' method defined in the file system`
	);
***REMOVED***;
module.exports.relative = relative;

/**
 * @param {InputFileSystem|OutputFileSystem|undefined***REMOVED*** fs a file system
 * @param {string***REMOVED*** rootPath a path
 * @param {string***REMOVED*** filename a filename
 * @returns {string***REMOVED*** the joined path
 */
const join = (fs, rootPath, filename) => {
	if (fs && fs.join) {
		return fs.join(rootPath, filename);
	***REMOVED*** else if (path.posix.isAbsolute(rootPath)) {
		return path.posix.join(rootPath, filename);
	***REMOVED*** else if (path.win32.isAbsolute(rootPath)) {
		return path.win32.join(rootPath, filename);
	***REMOVED***
	throw new Error(
		`${rootPath***REMOVED*** is neither a posix nor a windows path, and there is no 'join' method defined in the file system`
	);
***REMOVED***;
module.exports.join = join;

/**
 * @param {InputFileSystem|OutputFileSystem|undefined***REMOVED*** fs a file system
 * @param {string***REMOVED*** absPath an absolute path
 * @returns {string***REMOVED*** the parent directory of the absolute path
 */
const dirname = (fs, absPath) => {
	if (fs && fs.dirname) {
		return fs.dirname(absPath);
	***REMOVED*** else if (path.posix.isAbsolute(absPath)) {
		return path.posix.dirname(absPath);
	***REMOVED*** else if (path.win32.isAbsolute(absPath)) {
		return path.win32.dirname(absPath);
	***REMOVED***
	throw new Error(
		`${absPath***REMOVED*** is neither a posix nor a windows path, and there is no 'dirname' method defined in the file system`
	);
***REMOVED***;
module.exports.dirname = dirname;

/**
 * @param {OutputFileSystem***REMOVED*** fs a file system
 * @param {string***REMOVED*** p an absolute path
 * @param {(err?: Error) => void***REMOVED*** callback callback function for the error
 * @returns {void***REMOVED***
 */
const mkdirp = (fs, p, callback) => {
	fs.mkdir(p, err => {
		if (err) {
			if (err.code === "ENOENT") {
				const dir = dirname(fs, p);
				if (dir === p) {
					callback(err);
					return;
				***REMOVED***
				mkdirp(fs, dir, err => {
					if (err) {
						callback(err);
						return;
					***REMOVED***
					fs.mkdir(p, err => {
						if (err) {
							if (err.code === "EEXIST") {
								callback();
								return;
							***REMOVED***
							callback(err);
							return;
						***REMOVED***
						callback();
					***REMOVED***);
				***REMOVED***);
				return;
			***REMOVED*** else if (err.code === "EEXIST") {
				callback();
				return;
			***REMOVED***
			callback(err);
			return;
		***REMOVED***
		callback();
	***REMOVED***);
***REMOVED***;
module.exports.mkdirp = mkdirp;

/**
 * @param {IntermediateFileSystem***REMOVED*** fs a file system
 * @param {string***REMOVED*** p an absolute path
 * @returns {void***REMOVED***
 */
const mkdirpSync = (fs, p) => {
	try {
		fs.mkdirSync(p);
	***REMOVED*** catch (err) {
		if (err) {
			if (/** @type {NodeJS.ErrnoException***REMOVED*** */ (err).code === "ENOENT") {
				const dir = dirname(fs, p);
				if (dir === p) {
					throw err;
				***REMOVED***
				mkdirpSync(fs, dir);
				fs.mkdirSync(p);
				return;
			***REMOVED*** else if (/** @type {NodeJS.ErrnoException***REMOVED*** */ (err).code === "EEXIST") {
				return;
			***REMOVED***
			throw err;
		***REMOVED***
	***REMOVED***
***REMOVED***;
module.exports.mkdirpSync = mkdirpSync;

/**
 * @param {InputFileSystem***REMOVED*** fs a file system
 * @param {string***REMOVED*** p an absolute path
 * @param {ReadJsonCallback***REMOVED*** callback callback
 * @returns {void***REMOVED***
 */
const readJson = (fs, p, callback) => {
	if ("readJson" in fs)
		return /** @type {NonNullable<InputFileSystem["readJson"]>***REMOVED*** */ (
			fs.readJson
		)(p, callback);
	fs.readFile(p, (err, buf) => {
		if (err) return callback(err);
		let data;
		try {
			data = JSON.parse(/** @type {Buffer***REMOVED*** */ (buf).toString("utf-8"));
		***REMOVED*** catch (err1) {
			return callback(/** @type {Error***REMOVED*** */ (err1));
		***REMOVED***
		return callback(null, data);
	***REMOVED***);
***REMOVED***;
module.exports.readJson = readJson;

/**
 * @param {InputFileSystem***REMOVED*** fs a file system
 * @param {string***REMOVED*** p an absolute path
 * @param {(err: NodeJS.ErrnoException | Error | null, stats?: IStats | string) => void***REMOVED*** callback callback
 * @returns {void***REMOVED***
 */
const lstatReadlinkAbsolute = (fs, p, callback) => {
	let i = 3;
	const doReadLink = () => {
		fs.readlink(p, (err, target) => {
			if (err && --i > 0) {
				// It might was just changed from symlink to file
				// we retry 2 times to catch this case before throwing the error
				return doStat();
			***REMOVED***
			if (err) return callback(err);
			const value = /** @type {string***REMOVED*** */ (target).toString();
			callback(null, join(fs, dirname(fs, p), value));
		***REMOVED***);
	***REMOVED***;
	const doStat = () => {
		if ("lstat" in fs) {
			return /** @type {NonNullable<InputFileSystem["lstat"]>***REMOVED*** */ (fs.lstat)(
				p,
				(err, stats) => {
					if (err) return callback(err);
					if (/** @type {IStats***REMOVED*** */ (stats).isSymbolicLink()) {
						return doReadLink();
					***REMOVED***
					callback(null, stats);
				***REMOVED***
			);
		***REMOVED***
		return fs.stat(p, callback);
	***REMOVED***;
	if ("lstat" in fs) return doStat();
	doReadLink();
***REMOVED***;
module.exports.lstatReadlinkAbsolute = lstatReadlinkAbsolute;
