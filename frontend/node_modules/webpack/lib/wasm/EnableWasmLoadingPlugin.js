/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

/** @typedef {import("../../declarations/WebpackOptions").LibraryOptions***REMOVED*** LibraryOptions */
/** @typedef {import("../../declarations/WebpackOptions").WasmLoadingType***REMOVED*** WasmLoadingType */
/** @typedef {import("../Compiler")***REMOVED*** Compiler */

/** @type {WeakMap<Compiler, Set<WasmLoadingType>>***REMOVED*** */
const enabledTypes = new WeakMap();

/**
 * @param {Compiler***REMOVED*** compiler compiler instance
 * @returns {Set<WasmLoadingType>***REMOVED*** enabled types
 */
const getEnabledTypes = compiler => {
	let set = enabledTypes.get(compiler);
	if (set === undefined) {
		set = new Set();
		enabledTypes.set(compiler, set);
	***REMOVED***
	return set;
***REMOVED***;

class EnableWasmLoadingPlugin {
	/**
	 * @param {WasmLoadingType***REMOVED*** type library type that should be available
	 */
	constructor(type) {
		this.type = type;
	***REMOVED***

	/**
	 * @param {Compiler***REMOVED*** compiler the compiler instance
	 * @param {WasmLoadingType***REMOVED*** type type of library
	 * @returns {void***REMOVED***
	 */
	static setEnabled(compiler, type) {
		getEnabledTypes(compiler).add(type);
	***REMOVED***

	/**
	 * @param {Compiler***REMOVED*** compiler the compiler instance
	 * @param {WasmLoadingType***REMOVED*** type type of library
	 * @returns {void***REMOVED***
	 */
	static checkEnabled(compiler, type) {
		if (!getEnabledTypes(compiler).has(type)) {
			throw new Error(
				`Library type "${type***REMOVED***" is not enabled. ` +
					"EnableWasmLoadingPlugin need to be used to enable this type of wasm loading. " +
					'This usually happens through the "output.enabledWasmLoadingTypes" option. ' +
					'If you are using a function as entry which sets "wasmLoading", you need to add all potential library types to "output.enabledWasmLoadingTypes". ' +
					`These types are enabled: ${Array.from(
						getEnabledTypes(compiler)
					).join(", ")***REMOVED***`
			);
		***REMOVED***
	***REMOVED***

	/**
	 * Apply the plugin
	 * @param {Compiler***REMOVED*** compiler the compiler instance
	 * @returns {void***REMOVED***
	 */
	apply(compiler) {
		const { type ***REMOVED*** = this;

		// Only enable once
		const enabled = getEnabledTypes(compiler);
		if (enabled.has(type)) return;
		enabled.add(type);

		if (typeof type === "string") {
			switch (type) {
				case "fetch": {
					if (compiler.options.experiments.syncWebAssembly) {
						// TODO webpack 6 remove FetchCompileWasmPlugin
						const FetchCompileWasmPlugin = require("../web/FetchCompileWasmPlugin");
						new FetchCompileWasmPlugin({
							mangleImports: compiler.options.optimization.mangleWasmImports
						***REMOVED***).apply(compiler);
					***REMOVED***

					if (compiler.options.experiments.asyncWebAssembly) {
						const FetchCompileAsyncWasmPlugin = require("../web/FetchCompileAsyncWasmPlugin");
						new FetchCompileAsyncWasmPlugin().apply(compiler);
					***REMOVED***

					break;
				***REMOVED***
				case "async-node": {
					if (compiler.options.experiments.syncWebAssembly) {
						// TODO webpack 6 remove ReadFileCompileWasmPlugin
						const ReadFileCompileWasmPlugin = require("../node/ReadFileCompileWasmPlugin");
						new ReadFileCompileWasmPlugin({
							mangleImports: compiler.options.optimization.mangleWasmImports,
							import:
								compiler.options.output.module &&
								compiler.options.output.environment.dynamicImport
						***REMOVED***).apply(compiler);
					***REMOVED***

					if (compiler.options.experiments.asyncWebAssembly) {
						const ReadFileCompileAsyncWasmPlugin = require("../node/ReadFileCompileAsyncWasmPlugin");
						new ReadFileCompileAsyncWasmPlugin({
							import:
								compiler.options.output.module &&
								compiler.options.output.environment.dynamicImport
						***REMOVED***).apply(compiler);
					***REMOVED***

					break;
				***REMOVED***
				case "universal": {
					const UniversalCompileAsyncWasmPlugin = require("../wasm-async/UniversalCompileAsyncWasmPlugin");
					new UniversalCompileAsyncWasmPlugin().apply(compiler);
					break;
				***REMOVED***
				default:
					throw new Error(`Unsupported wasm loading type ${type***REMOVED***.
Plugins which provide custom wasm loading types must call EnableWasmLoadingPlugin.setEnabled(compiler, type) to disable this error.`);
			***REMOVED***
		***REMOVED*** else {
			// TODO support plugin instances here
			// apply them to the compiler
		***REMOVED***
	***REMOVED***
***REMOVED***

module.exports = EnableWasmLoadingPlugin;
