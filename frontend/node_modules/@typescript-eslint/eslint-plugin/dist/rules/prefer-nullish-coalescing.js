"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; ***REMOVED*** ***REMOVED***;
    ***REMOVED***
    Object.defineProperty(o, k2, desc);
***REMOVED***) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
***REMOVED***));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v ***REMOVED***);
***REMOVED***) : function(o, v) {
    o["default"] = v;
***REMOVED***);
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {***REMOVED***;
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
***REMOVED***;
Object.defineProperty(exports, "__esModule", { value: true ***REMOVED***);
const utils_1 = require("@typescript-eslint/utils");
const tsutils = __importStar(require("tsutils"));
const ts = __importStar(require("typescript"));
const util = __importStar(require("../util"));
exports.default = util.createRule({
    name: 'prefer-nullish-coalescing',
    meta: {
        type: 'suggestion',
        docs: {
            description: 'Enforce using the nullish coalescing operator instead of logical chaining',
            recommended: 'strict',
            requiresTypeChecking: true,
        ***REMOVED***,
        hasSuggestions: true,
        messages: {
            preferNullishOverOr: 'Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.',
            preferNullishOverTernary: 'Prefer using nullish coalescing operator (`??`) instead of a ternary expression, as it is simpler to read.',
            suggestNullish: 'Fix to nullish coalescing operator (`??`).',
            noStrictNullCheck: 'This rule requires the `strictNullChecks` compiler option to be turned on to function correctly.',
        ***REMOVED***,
        schema: [
            {
                type: 'object',
                properties: {
                    allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing: {
                        type: 'boolean',
                    ***REMOVED***,
                    ignoreConditionalTests: {
                        type: 'boolean',
                    ***REMOVED***,
                    ignoreMixedLogicalExpressions: {
                        type: 'boolean',
                    ***REMOVED***,
                    ignorePrimitives: {
                        type: 'object',
                        properties: {
                            bigint: { type: 'boolean' ***REMOVED***,
                            boolean: { type: 'boolean' ***REMOVED***,
                            number: { type: 'boolean' ***REMOVED***,
                            string: { type: 'boolean' ***REMOVED***,
                        ***REMOVED***,
                    ***REMOVED***,
                    ignoreTernaryTests: {
                        type: 'boolean',
                    ***REMOVED***,
                ***REMOVED***,
                additionalProperties: false,
            ***REMOVED***,
        ],
    ***REMOVED***,
    defaultOptions: [
        {
            allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing: false,
            ignoreConditionalTests: true,
            ignoreTernaryTests: true,
            ignoreMixedLogicalExpressions: true,
            ignorePrimitives: {
                bigint: false,
                boolean: false,
                number: false,
                string: false,
            ***REMOVED***,
        ***REMOVED***,
    ],
    create(context, [{ allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing, ignoreConditionalTests, ignoreMixedLogicalExpressions, ignorePrimitives, ignoreTernaryTests, ***REMOVED***,]) {
        const parserServices = util.getParserServices(context);
        const compilerOptions = parserServices.program.getCompilerOptions();
        const sourceCode = context.getSourceCode();
        const checker = parserServices.program.getTypeChecker();
        const isStrictNullChecks = tsutils.isStrictCompilerOptionEnabled(compilerOptions, 'strictNullChecks');
        if (!isStrictNullChecks &&
            allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing !== true) {
            context.report({
                loc: {
                    start: { line: 0, column: 0 ***REMOVED***,
                    end: { line: 0, column: 0 ***REMOVED***,
                ***REMOVED***,
                messageId: 'noStrictNullCheck',
            ***REMOVED***);
        ***REMOVED***
        return {
            ConditionalExpression(node) {
                if (ignoreTernaryTests) {
                    return;
                ***REMOVED***
                let operator;
                let nodesInsideTestExpression = [];
                if (node.test.type === utils_1.AST_NODE_TYPES.BinaryExpression) {
                    nodesInsideTestExpression = [node.test.left, node.test.right];
                    if (node.test.operator === '==' ||
                        node.test.operator === '!=' ||
                        node.test.operator === '===' ||
                        node.test.operator === '!==') {
                        operator = node.test.operator;
                    ***REMOVED***
                ***REMOVED***
                else if (node.test.type === utils_1.AST_NODE_TYPES.LogicalExpression &&
                    node.test.left.type === utils_1.AST_NODE_TYPES.BinaryExpression &&
                    node.test.right.type === utils_1.AST_NODE_TYPES.BinaryExpression) {
                    nodesInsideTestExpression = [
                        node.test.left.left,
                        node.test.left.right,
                        node.test.right.left,
                        node.test.right.right,
                    ];
                    if (node.test.operator === '||') {
                        if (node.test.left.operator === '===' &&
                            node.test.right.operator === '===') {
                            operator = '===';
                        ***REMOVED***
                        else if (((node.test.left.operator === '===' ||
                            node.test.right.operator === '===') &&
                            (node.test.left.operator === '==' ||
                                node.test.right.operator === '==')) ||
                            (node.test.left.operator === '==' &&
                                node.test.right.operator === '==')) {
                            operator = '==';
                        ***REMOVED***
                    ***REMOVED***
                    else if (node.test.operator === '&&') {
                        if (node.test.left.operator === '!==' &&
                            node.test.right.operator === '!==') {
                            operator = '!==';
                        ***REMOVED***
                        else if (((node.test.left.operator === '!==' ||
                            node.test.right.operator === '!==') &&
                            (node.test.left.operator === '!=' ||
                                node.test.right.operator === '!=')) ||
                            (node.test.left.operator === '!=' &&
                                node.test.right.operator === '!=')) {
                            operator = '!=';
                        ***REMOVED***
                    ***REMOVED***
                ***REMOVED***
                if (!operator) {
                    return;
                ***REMOVED***
                let identifier;
                let hasUndefinedCheck = false;
                let hasNullCheck = false;
                // we check that the test only contains null, undefined and the identifier
                for (const testNode of nodesInsideTestExpression) {
                    if (util.isNullLiteral(testNode)) {
                        hasNullCheck = true;
                    ***REMOVED***
                    else if (util.isUndefinedIdentifier(testNode)) {
                        hasUndefinedCheck = true;
                    ***REMOVED***
                    else if ((operator === '!==' || operator === '!=') &&
                        util.isNodeEqual(testNode, node.consequent)) {
                        identifier = testNode;
                    ***REMOVED***
                    else if ((operator === '===' || operator === '==') &&
                        util.isNodeEqual(testNode, node.alternate)) {
                        identifier = testNode;
                    ***REMOVED***
                    else {
                        return;
                    ***REMOVED***
                ***REMOVED***
                if (!identifier) {
                    return;
                ***REMOVED***
                const isFixable = (() => {
                    // it is fixable if we check for both null and undefined, or not if neither
                    if (hasUndefinedCheck === hasNullCheck) {
                        return hasUndefinedCheck;
                    ***REMOVED***
                    // it is fixable if we loosely check for either null or undefined
                    if (operator === '==' || operator === '!=') {
                        return true;
                    ***REMOVED***
                    const tsNode = parserServices.esTreeNodeToTSNodeMap.get(identifier);
                    const type = checker.getTypeAtLocation(tsNode);
                    const flags = util.getTypeFlags(type);
                    if (flags & (ts.TypeFlags.Any | ts.TypeFlags.Unknown)) {
                        return false;
                    ***REMOVED***
                    const hasNullType = (flags & ts.TypeFlags.Null) !== 0;
                    // it is fixable if we check for undefined and the type is not nullable
                    if (hasUndefinedCheck && !hasNullType) {
                        return true;
                    ***REMOVED***
                    const hasUndefinedType = (flags & ts.TypeFlags.Undefined) !== 0;
                    // it is fixable if we check for null and the type can't be undefined
                    return hasNullCheck && !hasUndefinedType;
                ***REMOVED***)();
                if (isFixable) {
                    context.report({
                        node,
                        messageId: 'preferNullishOverTernary',
                        suggest: [
                            {
                                messageId: 'suggestNullish',
                                fix(fixer) {
                                    const [left, right] = operator === '===' || operator === '=='
                                        ? [node.alternate, node.consequent]
                                        : [node.consequent, node.alternate];
                                    return fixer.replaceText(node, `${sourceCode.text.slice(left.range[0], left.range[1])***REMOVED*** ?? ${sourceCode.text.slice(right.range[0], right.range[1])***REMOVED***`);
                                ***REMOVED***,
                            ***REMOVED***,
                        ],
                    ***REMOVED***);
                ***REMOVED***
            ***REMOVED***,
            'LogicalExpression[operator = "||"]'(node) {
                const tsNode = parserServices.esTreeNodeToTSNodeMap.get(node);
                const type = checker.getTypeAtLocation(tsNode.left);
                const isNullish = util.isNullableType(type, { allowUndefined: true ***REMOVED***);
                if (!isNullish) {
                    return;
                ***REMOVED***
                if (ignoreConditionalTests === true && isConditionalTest(node)) {
                    return;
                ***REMOVED***
                const isMixedLogical = isMixedLogicalExpression(node);
                if (ignoreMixedLogicalExpressions === true && isMixedLogical) {
                    return;
                ***REMOVED***
                const ignorableFlags = [
                    ignorePrimitives.bigint && ts.TypeFlags.BigInt,
                    ignorePrimitives.boolean && ts.TypeFlags.BooleanLiteral,
                    ignorePrimitives.number && ts.TypeFlags.Number,
                    ignorePrimitives.string && ts.TypeFlags.String,
                ]
                    .filter((flag) => flag !== undefined)
                    .reduce((previous, flag) => previous | flag, 0);
                if (type.types.some(t => tsutils.isTypeFlagSet(t, ignorableFlags))) {
                    return;
                ***REMOVED***
                const barBarOperator = util.nullThrows(sourceCode.getTokenAfter(node.left, token => token.type === utils_1.AST_TOKEN_TYPES.Punctuator &&
                    token.value === node.operator), util.NullThrowsReasons.MissingToken('operator', node.type));
                function* fix(fixer) {
                    if (node.parent && util.isLogicalOrOperator(node.parent)) {
                        // '&&' and '??' operations cannot be mixed without parentheses (e.g. a && b ?? c)
                        if (node.left.type === utils_1.AST_NODE_TYPES.LogicalExpression &&
                            !util.isLogicalOrOperator(node.left.left)) {
                            yield fixer.insertTextBefore(node.left.right, '(');
                        ***REMOVED***
                        else {
                            yield fixer.insertTextBefore(node.left, '(');
                        ***REMOVED***
                        yield fixer.insertTextAfter(node.right, ')');
                    ***REMOVED***
                    yield fixer.replaceText(barBarOperator, '??');
                ***REMOVED***
                context.report({
                    node: barBarOperator,
                    messageId: 'preferNullishOverOr',
                    suggest: [
                        {
                            messageId: 'suggestNullish',
                            fix,
                        ***REMOVED***,
                    ],
                ***REMOVED***);
            ***REMOVED***,
        ***REMOVED***;
    ***REMOVED***,
***REMOVED***);
function isConditionalTest(node) {
    const parents = new Set([node]);
    let current = node.parent;
    while (current) {
        parents.add(current);
        if ((current.type === utils_1.AST_NODE_TYPES.ConditionalExpression ||
            current.type === utils_1.AST_NODE_TYPES.DoWhileStatement ||
            current.type === utils_1.AST_NODE_TYPES.IfStatement ||
            current.type === utils_1.AST_NODE_TYPES.ForStatement ||
            current.type === utils_1.AST_NODE_TYPES.WhileStatement) &&
            parents.has(current.test)) {
            return true;
        ***REMOVED***
        if ([
            utils_1.AST_NODE_TYPES.ArrowFunctionExpression,
            utils_1.AST_NODE_TYPES.FunctionExpression,
        ].includes(current.type)) {
            /**
             * This is a weird situation like:
             * `if (() => a || b) {***REMOVED***`
             * `if (function () { return a || b ***REMOVED***) {***REMOVED***`
             */
            return false;
        ***REMOVED***
        current = current.parent;
    ***REMOVED***
    return false;
***REMOVED***
function isMixedLogicalExpression(node) {
    const seen = new Set();
    const queue = [node.parent, node.left, node.right];
    for (const current of queue) {
        if (seen.has(current)) {
            continue;
        ***REMOVED***
        seen.add(current);
        if (current && current.type === utils_1.AST_NODE_TYPES.LogicalExpression) {
            if (current.operator === '&&') {
                return true;
            ***REMOVED***
            else if (current.operator === '||') {
                // check the pieces of the node to catch cases like `a || b || c && d`
                queue.push(current.parent, current.left, current.right);
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***
    return false;
***REMOVED***
//# sourceMappingURL=prefer-nullish-coalescing.js.map