"use strict";

const path = require("path");
const os = require("os");
const {
  validate
***REMOVED*** = require("schema-utils");
const {
  throttleAll,
  memoize,
  terserMinify,
  uglifyJsMinify,
  swcMinify,
  esbuildMinify
***REMOVED*** = require("./utils");
const schema = require("./options.json");
const {
  minify
***REMOVED*** = require("./minify");

/** @typedef {import("schema-utils/declarations/validate").Schema***REMOVED*** Schema */
/** @typedef {import("webpack").Compiler***REMOVED*** Compiler */
/** @typedef {import("webpack").Compilation***REMOVED*** Compilation */
/** @typedef {import("webpack").WebpackError***REMOVED*** WebpackError */
/** @typedef {import("webpack").Asset***REMOVED*** Asset */
/** @typedef {import("jest-worker").Worker***REMOVED*** JestWorker */
/** @typedef {import("@jridgewell/trace-mapping").SourceMapInput***REMOVED*** SourceMapInput */
/** @typedef {import("@jridgewell/trace-mapping").TraceMap***REMOVED*** TraceMap */

/** @typedef {RegExp | string***REMOVED*** Rule */
/** @typedef {Rule[] | Rule***REMOVED*** Rules */

/**
 * @callback ExtractCommentsFunction
 * @param {any***REMOVED*** astNode
 * @param {{ value: string, type: 'comment1' | 'comment2' | 'comment3' | 'comment4', pos: number, line: number, col: number ***REMOVED******REMOVED*** comment
 * @returns {boolean***REMOVED***
 */

/**
 * @typedef {boolean | 'all' | 'some' | RegExp | ExtractCommentsFunction***REMOVED*** ExtractCommentsCondition
 */

/**
 * @typedef {string | ((fileData: any) => string)***REMOVED*** ExtractCommentsFilename
 */

/**
 * @typedef {boolean | string | ((commentsFile: string) => string)***REMOVED*** ExtractCommentsBanner
 */

/**
 * @typedef {Object***REMOVED*** ExtractCommentsObject
 * @property {ExtractCommentsCondition***REMOVED*** [condition]
 * @property {ExtractCommentsFilename***REMOVED*** [filename]
 * @property {ExtractCommentsBanner***REMOVED*** [banner]
 */

/**
 * @typedef {ExtractCommentsCondition | ExtractCommentsObject***REMOVED*** ExtractCommentsOptions
 */

/**
 * @typedef {Object***REMOVED*** MinimizedResult
 * @property {string***REMOVED*** code
 * @property {SourceMapInput***REMOVED*** [map]
 * @property {Array<Error | string>***REMOVED*** [errors]
 * @property {Array<Error | string>***REMOVED*** [warnings]
 * @property {Array<string>***REMOVED*** [extractedComments]
 */

/**
 * @typedef {{ [file: string]: string ***REMOVED******REMOVED*** Input
 */

/**
 * @typedef {{ [key: string]: any ***REMOVED******REMOVED*** CustomOptions
 */

/**
 * @template T
 * @typedef {T extends infer U ? U : CustomOptions***REMOVED*** InferDefaultType
 */

/**
 * @template T
 * @typedef {Object***REMOVED*** PredefinedOptions
 * @property {T extends { module?: infer P ***REMOVED*** ? P : boolean | string***REMOVED*** [module]
 * @property {T extends { ecma?: infer P ***REMOVED*** ? P : number | string***REMOVED*** [ecma]
 */

/**
 * @template T
 * @typedef {PredefinedOptions<T> & InferDefaultType<T>***REMOVED*** MinimizerOptions
 */

/**
 * @template T
 * @callback BasicMinimizerImplementation
 * @param {Input***REMOVED*** input
 * @param {SourceMapInput | undefined***REMOVED*** sourceMap
 * @param {MinimizerOptions<T>***REMOVED*** minifyOptions
 * @param {ExtractCommentsOptions | undefined***REMOVED*** extractComments
 * @returns {Promise<MinimizedResult>***REMOVED***
 */

/**
 * @typedef {object***REMOVED*** MinimizeFunctionHelpers
 * @property {() => string | undefined***REMOVED*** [getMinimizerVersion]
 * @property {() => boolean | undefined***REMOVED*** [supportsWorkerThreads]
 */

/**
 * @template T
 * @typedef {BasicMinimizerImplementation<T> & MinimizeFunctionHelpers***REMOVED*** MinimizerImplementation
 */

/**
 * @template T
 * @typedef {Object***REMOVED*** InternalOptions
 * @property {string***REMOVED*** name
 * @property {string***REMOVED*** input
 * @property {SourceMapInput | undefined***REMOVED*** inputSourceMap
 * @property {ExtractCommentsOptions | undefined***REMOVED*** extractComments
 * @property {{ implementation: MinimizerImplementation<T>, options: MinimizerOptions<T> ***REMOVED******REMOVED*** minimizer
 */

/**
 * @template T
 * @typedef {JestWorker & { transform: (options: string) => MinimizedResult, minify: (options: InternalOptions<T>) => MinimizedResult ***REMOVED******REMOVED*** MinimizerWorker
 */

/**
 * @typedef {undefined | boolean | number***REMOVED*** Parallel
 */

/**
 * @typedef {Object***REMOVED*** BasePluginOptions
 * @property {Rules***REMOVED*** [test]
 * @property {Rules***REMOVED*** [include]
 * @property {Rules***REMOVED*** [exclude]
 * @property {ExtractCommentsOptions***REMOVED*** [extractComments]
 * @property {Parallel***REMOVED*** [parallel]
 */

/**
 * @template T
 * @typedef {T extends import("terser").MinifyOptions ? { minify?: MinimizerImplementation<T> | undefined, terserOptions?: MinimizerOptions<T> | undefined ***REMOVED*** : { minify: MinimizerImplementation<T>, terserOptions?: MinimizerOptions<T> | undefined ***REMOVED******REMOVED*** DefinedDefaultMinimizerAndOptions
 */

/**
 * @template T
 * @typedef {BasePluginOptions & { minimizer: { implementation: MinimizerImplementation<T>, options: MinimizerOptions<T> ***REMOVED*** ***REMOVED******REMOVED*** InternalPluginOptions
 */

const getTraceMapping = memoize(() =>
// eslint-disable-next-line global-require
require("@jridgewell/trace-mapping"));
const getSerializeJavascript = memoize(() =>
// eslint-disable-next-line global-require
require("serialize-javascript"));

/**
 * @template [T=import("terser").MinifyOptions]
 */
class TerserPlugin {
  /**
   * @param {BasePluginOptions & DefinedDefaultMinimizerAndOptions<T>***REMOVED*** [options]
   */
  constructor(options) {
    validate( /** @type {Schema***REMOVED*** */schema, options || {***REMOVED***, {
      name: "Terser Plugin",
      baseDataPath: "options"
    ***REMOVED***);

    // TODO make `minimizer` option instead `minify` and `terserOptions` in the next major release, also rename `terserMinify` to `terserMinimize`
    const {
      minify = ( /** @type {MinimizerImplementation<T>***REMOVED*** */terserMinify),
      terserOptions = ( /** @type {MinimizerOptions<T>***REMOVED*** */{***REMOVED***),
      test = /\.[cm]?js(\?.*)?$/i,
      extractComments = true,
      parallel = true,
      include,
      exclude
    ***REMOVED*** = options || {***REMOVED***;

    /**
     * @private
     * @type {InternalPluginOptions<T>***REMOVED***
     */
    this.options = {
      test,
      extractComments,
      parallel,
      include,
      exclude,
      minimizer: {
        implementation: minify,
        options: terserOptions
      ***REMOVED***
    ***REMOVED***;
  ***REMOVED***

  /**
   * @private
   * @param {any***REMOVED*** input
   * @returns {boolean***REMOVED***
   */
  static isSourceMap(input) {
    // All required options for `new TraceMap(...options)`
    // https://github.com/jridgewell/trace-mapping#usage
    return Boolean(input && input.version && input.sources && Array.isArray(input.sources) && typeof input.mappings === "string");
  ***REMOVED***

  /**
   * @private
   * @param {unknown***REMOVED*** warning
   * @param {string***REMOVED*** file
   * @returns {Error***REMOVED***
   */
  static buildWarning(warning, file) {
    /**
     * @type {Error & { hideStack: true, file: string ***REMOVED******REMOVED***
     */
    // @ts-ignore
    const builtWarning = new Error(warning.toString());
    builtWarning.name = "Warning";
    builtWarning.hideStack = true;
    builtWarning.file = file;
    return builtWarning;
  ***REMOVED***

  /**
   * @private
   * @param {any***REMOVED*** error
   * @param {string***REMOVED*** file
   * @param {TraceMap***REMOVED*** [sourceMap]
   * @param {Compilation["requestShortener"]***REMOVED*** [requestShortener]
   * @returns {Error***REMOVED***
   */
  static buildError(error, file, sourceMap, requestShortener) {
    /**
     * @type {Error & { file?: string ***REMOVED******REMOVED***
     */
    let builtError;
    if (typeof error === "string") {
      builtError = new Error(`${file***REMOVED*** from Terser plugin\n${error***REMOVED***`);
      builtError.file = file;
      return builtError;
    ***REMOVED***
    if (error.line) {
      const original = sourceMap && getTraceMapping().originalPositionFor(sourceMap, {
        line: error.line,
        column: error.col
      ***REMOVED***);
      if (original && original.source && requestShortener) {
        builtError = new Error(`${file***REMOVED*** from Terser plugin\n${error.message***REMOVED*** [${requestShortener.shorten(original.source)***REMOVED***:${original.line***REMOVED***,${original.column***REMOVED***][${file***REMOVED***:${error.line***REMOVED***,${error.col***REMOVED***]${error.stack ? `\n${error.stack.split("\n").slice(1).join("\n")***REMOVED***` : ""***REMOVED***`);
        builtError.file = file;
        return builtError;
      ***REMOVED***
      builtError = new Error(`${file***REMOVED*** from Terser plugin\n${error.message***REMOVED*** [${file***REMOVED***:${error.line***REMOVED***,${error.col***REMOVED***]${error.stack ? `\n${error.stack.split("\n").slice(1).join("\n")***REMOVED***` : ""***REMOVED***`);
      builtError.file = file;
      return builtError;
    ***REMOVED***
    if (error.stack) {
      builtError = new Error(`${file***REMOVED*** from Terser plugin\n${typeof error.message !== "undefined" ? error.message : ""***REMOVED***\n${error.stack***REMOVED***`);
      builtError.file = file;
      return builtError;
    ***REMOVED***
    builtError = new Error(`${file***REMOVED*** from Terser plugin\n${error.message***REMOVED***`);
    builtError.file = file;
    return builtError;
  ***REMOVED***

  /**
   * @private
   * @param {Parallel***REMOVED*** parallel
   * @returns {number***REMOVED***
   */
  static getAvailableNumberOfCores(parallel) {
    // In some cases cpus() returns undefined
    // https://github.com/nodejs/node/issues/19022
    const cpus = typeof os.availableParallelism === "function" ? {
      length: os.availableParallelism()
    ***REMOVED*** : os.cpus() || {
      length: 1
    ***REMOVED***;
    return parallel === true || typeof parallel === "undefined" ? cpus.length - 1 : Math.min(parallel || 0, cpus.length - 1);
  ***REMOVED***

  /**
   * @private
   * @param {Compiler***REMOVED*** compiler
   * @param {Compilation***REMOVED*** compilation
   * @param {Record<string, import("webpack").sources.Source>***REMOVED*** assets
   * @param {{availableNumberOfCores: number***REMOVED******REMOVED*** optimizeOptions
   * @returns {Promise<void>***REMOVED***
   */
  async optimize(compiler, compilation, assets, optimizeOptions) {
    const cache = compilation.getCache("TerserWebpackPlugin");
    let numberOfAssets = 0;
    const assetsForMinify = await Promise.all(Object.keys(assets).filter(name => {
      const {
        info
      ***REMOVED*** = /** @type {Asset***REMOVED*** */compilation.getAsset(name);
      if (
      // Skip double minimize assets from child compilation
      info.minimized ||
      // Skip minimizing for extracted comments assets
      info.extractedComments) {
        return false;
      ***REMOVED***
      if (!compiler.webpack.ModuleFilenameHelpers.matchObject.bind(
      // eslint-disable-next-line no-undefined
      undefined, this.options)(name)) {
        return false;
      ***REMOVED***
      return true;
    ***REMOVED***).map(async name => {
      const {
        info,
        source
      ***REMOVED*** = /** @type {Asset***REMOVED*** */
      compilation.getAsset(name);
      const eTag = cache.getLazyHashedEtag(source);
      const cacheItem = cache.getItemCache(name, eTag);
      const output = await cacheItem.getPromise();
      if (!output) {
        numberOfAssets += 1;
      ***REMOVED***
      return {
        name,
        info,
        inputSource: source,
        output,
        cacheItem
      ***REMOVED***;
    ***REMOVED***));
    if (assetsForMinify.length === 0) {
      return;
    ***REMOVED***

    /** @type {undefined | (() => MinimizerWorker<T>)***REMOVED*** */
    let getWorker;
    /** @type {undefined | MinimizerWorker<T>***REMOVED*** */
    let initializedWorker;
    /** @type {undefined | number***REMOVED*** */
    let numberOfWorkers;
    if (optimizeOptions.availableNumberOfCores > 0) {
      // Do not create unnecessary workers when the number of files is less than the available cores, it saves memory
      numberOfWorkers = Math.min(numberOfAssets, optimizeOptions.availableNumberOfCores);
      // eslint-disable-next-line consistent-return
      getWorker = () => {
        if (initializedWorker) {
          return initializedWorker;
        ***REMOVED***

        // eslint-disable-next-line global-require
        const {
          Worker
        ***REMOVED*** = require("jest-worker");
        initializedWorker = /** @type {MinimizerWorker<T>***REMOVED*** */

        new Worker(require.resolve("./minify"), {
          numWorkers: numberOfWorkers,
          enableWorkerThreads: typeof this.options.minimizer.implementation.supportsWorkerThreads !== "undefined" ? this.options.minimizer.implementation.supportsWorkerThreads() !== false : true
        ***REMOVED***);

        // https://github.com/facebook/jest/issues/8872#issuecomment-524822081
        const workerStdout = initializedWorker.getStdout();
        if (workerStdout) {
          workerStdout.on("data", chunk => process.stdout.write(chunk));
        ***REMOVED***
        const workerStderr = initializedWorker.getStderr();
        if (workerStderr) {
          workerStderr.on("data", chunk => process.stderr.write(chunk));
        ***REMOVED***
        return initializedWorker;
      ***REMOVED***;
    ***REMOVED***
    const {
      SourceMapSource,
      ConcatSource,
      RawSource
    ***REMOVED*** = compiler.webpack.sources;

    /** @typedef {{ extractedCommentsSource : import("webpack").sources.RawSource, commentsFilename: string ***REMOVED******REMOVED*** ExtractedCommentsInfo */
    /** @type {Map<string, ExtractedCommentsInfo>***REMOVED*** */
    const allExtractedComments = new Map();
    const scheduledTasks = [];
    for (const asset of assetsForMinify) {
      scheduledTasks.push(async () => {
        const {
          name,
          inputSource,
          info,
          cacheItem
        ***REMOVED*** = asset;
        let {
          output
        ***REMOVED*** = asset;
        if (!output) {
          let input;
          /** @type {SourceMapInput | undefined***REMOVED*** */
          let inputSourceMap;
          const {
            source: sourceFromInputSource,
            map
          ***REMOVED*** = inputSource.sourceAndMap();
          input = sourceFromInputSource;
          if (map) {
            if (!TerserPlugin.isSourceMap(map)) {
              compilation.warnings.push( /** @type {WebpackError***REMOVED*** */
              new Error(`${name***REMOVED*** contains invalid source map`));
            ***REMOVED*** else {
              inputSourceMap = /** @type {SourceMapInput***REMOVED*** */map;
            ***REMOVED***
          ***REMOVED***
          if (Buffer.isBuffer(input)) {
            input = input.toString();
          ***REMOVED***

          /**
           * @type {InternalOptions<T>***REMOVED***
           */
          const options = {
            name,
            input,
            inputSourceMap,
            minimizer: {
              implementation: this.options.minimizer.implementation,
              // @ts-ignore https://github.com/Microsoft/TypeScript/issues/10727
              options: {
                ...this.options.minimizer.options
              ***REMOVED***
            ***REMOVED***,
            extractComments: this.options.extractComments
          ***REMOVED***;
          if (typeof options.minimizer.options.module === "undefined") {
            if (typeof info.javascriptModule !== "undefined") {
              options.minimizer.options.module = /** @type {PredefinedOptions<T>["module"]***REMOVED*** */
              info.javascriptModule;
            ***REMOVED*** else if (/\.mjs(\?.*)?$/i.test(name)) {
              options.minimizer.options.module = /** @type {PredefinedOptions<T>["module"]***REMOVED*** */true;
            ***REMOVED*** else if (/\.cjs(\?.*)?$/i.test(name)) {
              options.minimizer.options.module = /** @type {PredefinedOptions<T>["module"]***REMOVED*** */false;
            ***REMOVED***
          ***REMOVED***
          if (typeof options.minimizer.options.ecma === "undefined") {
            options.minimizer.options.ecma = /** @type {PredefinedOptions<T>["ecma"]***REMOVED*** */

            TerserPlugin.getEcmaVersion(compiler.options.output.environment || {***REMOVED***);
          ***REMOVED***
          try {
            output = await (getWorker ? getWorker().transform(getSerializeJavascript()(options)) : minify(options));
          ***REMOVED*** catch (error) {
            const hasSourceMap = inputSourceMap && TerserPlugin.isSourceMap(inputSourceMap);
            compilation.errors.push( /** @type {WebpackError***REMOVED*** */

            TerserPlugin.buildError(error, name, hasSourceMap ? new (getTraceMapping().TraceMap)( /** @type {SourceMapInput***REMOVED*** */inputSourceMap) :
            // eslint-disable-next-line no-undefined
            undefined,
            // eslint-disable-next-line no-undefined
            hasSourceMap ? compilation.requestShortener : undefined));
            return;
          ***REMOVED***
          if (typeof output.code === "undefined") {
            compilation.errors.push( /** @type {WebpackError***REMOVED*** */

            new Error(`${name***REMOVED*** from Terser plugin\nMinimizer doesn't return result`));
            return;
          ***REMOVED***
          if (output.warnings && output.warnings.length > 0) {
            output.warnings = output.warnings.map(
            /**
             * @param {Error | string***REMOVED*** item
             */
            item => TerserPlugin.buildWarning(item, name));
          ***REMOVED***
          if (output.errors && output.errors.length > 0) {
            const hasSourceMap = inputSourceMap && TerserPlugin.isSourceMap(inputSourceMap);
            output.errors = output.errors.map(
            /**
             * @param {Error | string***REMOVED*** item
             */
            item => TerserPlugin.buildError(item, name, hasSourceMap ? new (getTraceMapping().TraceMap)( /** @type {SourceMapInput***REMOVED*** */inputSourceMap) :
            // eslint-disable-next-line no-undefined
            undefined,
            // eslint-disable-next-line no-undefined
            hasSourceMap ? compilation.requestShortener : undefined));
          ***REMOVED***
          let shebang;
          if ( /** @type {ExtractCommentsObject***REMOVED*** */
          this.options.extractComments.banner !== false && output.extractedComments && output.extractedComments.length > 0 && output.code.startsWith("#!")) {
            const firstNewlinePosition = output.code.indexOf("\n");
            shebang = output.code.substring(0, firstNewlinePosition);
            output.code = output.code.substring(firstNewlinePosition + 1);
          ***REMOVED***
          if (output.map) {
            output.source = new SourceMapSource(output.code, name, output.map, input, /** @type {SourceMapInput***REMOVED*** */inputSourceMap, true);
          ***REMOVED*** else {
            output.source = new RawSource(output.code);
          ***REMOVED***
          if (output.extractedComments && output.extractedComments.length > 0) {
            const commentsFilename = /** @type {ExtractCommentsObject***REMOVED*** */
            this.options.extractComments.filename || "[file].LICENSE.txt[query]";
            let query = "";
            let filename = name;
            const querySplit = filename.indexOf("?");
            if (querySplit >= 0) {
              query = filename.slice(querySplit);
              filename = filename.slice(0, querySplit);
            ***REMOVED***
            const lastSlashIndex = filename.lastIndexOf("/");
            const basename = lastSlashIndex === -1 ? filename : filename.slice(lastSlashIndex + 1);
            const data = {
              filename,
              basename,
              query
            ***REMOVED***;
            output.commentsFilename = compilation.getPath(commentsFilename, data);
            let banner;

            // Add a banner to the original file
            if ( /** @type {ExtractCommentsObject***REMOVED*** */
            this.options.extractComments.banner !== false) {
              banner = /** @type {ExtractCommentsObject***REMOVED*** */
              this.options.extractComments.banner || `For license information please see ${path.relative(path.dirname(name), output.commentsFilename).replace(/\\/g, "/")***REMOVED***`;
              if (typeof banner === "function") {
                banner = banner(output.commentsFilename);
              ***REMOVED***
              if (banner) {
                output.source = new ConcatSource(shebang ? `${shebang***REMOVED***\n` : "", `/*! ${banner***REMOVED*** */\n`, output.source);
              ***REMOVED***
            ***REMOVED***
            const extractedCommentsString = output.extractedComments.sort().join("\n\n");
            output.extractedCommentsSource = new RawSource(`${extractedCommentsString***REMOVED***\n`);
          ***REMOVED***
          await cacheItem.storePromise({
            source: output.source,
            errors: output.errors,
            warnings: output.warnings,
            commentsFilename: output.commentsFilename,
            extractedCommentsSource: output.extractedCommentsSource
          ***REMOVED***);
        ***REMOVED***
        if (output.warnings && output.warnings.length > 0) {
          for (const warning of output.warnings) {
            compilation.warnings.push( /** @type {WebpackError***REMOVED*** */warning);
          ***REMOVED***
        ***REMOVED***
        if (output.errors && output.errors.length > 0) {
          for (const error of output.errors) {
            compilation.errors.push( /** @type {WebpackError***REMOVED*** */error);
          ***REMOVED***
        ***REMOVED***

        /** @type {Record<string, any>***REMOVED*** */
        const newInfo = {
          minimized: true
        ***REMOVED***;
        const {
          source,
          extractedCommentsSource
        ***REMOVED*** = output;

        // Write extracted comments to commentsFilename
        if (extractedCommentsSource) {
          const {
            commentsFilename
          ***REMOVED*** = output;
          newInfo.related = {
            license: commentsFilename
          ***REMOVED***;
          allExtractedComments.set(name, {
            extractedCommentsSource,
            commentsFilename
          ***REMOVED***);
        ***REMOVED***
        compilation.updateAsset(name, source, newInfo);
      ***REMOVED***);
    ***REMOVED***
    const limit = getWorker && numberOfAssets > 0 ? ( /** @type {number***REMOVED*** */numberOfWorkers) : scheduledTasks.length;
    await throttleAll(limit, scheduledTasks);
    if (initializedWorker) {
      await initializedWorker.end();
    ***REMOVED***

    /** @typedef {{ source: import("webpack").sources.Source, commentsFilename: string, from: string ***REMOVED******REMOVED*** ExtractedCommentsInfoWIthFrom */
    await Array.from(allExtractedComments).sort().reduce(
    /**
     * @param {Promise<unknown>***REMOVED*** previousPromise
     * @param {[string, ExtractedCommentsInfo]***REMOVED*** extractedComments
     * @returns {Promise<ExtractedCommentsInfoWIthFrom>***REMOVED***
     */
    async (previousPromise, [from, value]) => {
      const previous = /** @type {ExtractedCommentsInfoWIthFrom | undefined***REMOVED*** **/
      await previousPromise;
      const {
        commentsFilename,
        extractedCommentsSource
      ***REMOVED*** = value;
      if (previous && previous.commentsFilename === commentsFilename) {
        const {
          from: previousFrom,
          source: prevSource
        ***REMOVED*** = previous;
        const mergedName = `${previousFrom***REMOVED***|${from***REMOVED***`;
        const name = `${commentsFilename***REMOVED***|${mergedName***REMOVED***`;
        const eTag = [prevSource, extractedCommentsSource].map(item => cache.getLazyHashedEtag(item)).reduce((previousValue, currentValue) => cache.mergeEtags(previousValue, currentValue));
        let source = await cache.getPromise(name, eTag);
        if (!source) {
          source = new ConcatSource(Array.from(new Set([... /** @type {string***REMOVED****/prevSource.source().split("\n\n"), ... /** @type {string***REMOVED****/extractedCommentsSource.source().split("\n\n")])).join("\n\n"));
          await cache.storePromise(name, eTag, source);
        ***REMOVED***
        compilation.updateAsset(commentsFilename, source);
        return {
          source,
          commentsFilename,
          from: mergedName
        ***REMOVED***;
      ***REMOVED***
      const existingAsset = compilation.getAsset(commentsFilename);
      if (existingAsset) {
        return {
          source: existingAsset.source,
          commentsFilename,
          from: commentsFilename
        ***REMOVED***;
      ***REMOVED***
      compilation.emitAsset(commentsFilename, extractedCommentsSource, {
        extractedComments: true
      ***REMOVED***);
      return {
        source: extractedCommentsSource,
        commentsFilename,
        from
      ***REMOVED***;
    ***REMOVED***, /** @type {Promise<unknown>***REMOVED*** */Promise.resolve());
  ***REMOVED***

  /**
   * @private
   * @param {any***REMOVED*** environment
   * @returns {number***REMOVED***
   */
  static getEcmaVersion(environment) {
    // ES 6th
    if (environment.arrowFunction || environment.const || environment.destructuring || environment.forOf || environment.module) {
      return 2015;
    ***REMOVED***

    // ES 11th
    if (environment.bigIntLiteral || environment.dynamicImport) {
      return 2020;
    ***REMOVED***
    return 5;
  ***REMOVED***

  /**
   * @param {Compiler***REMOVED*** compiler
   * @returns {void***REMOVED***
   */
  apply(compiler) {
    const pluginName = this.constructor.name;
    const availableNumberOfCores = TerserPlugin.getAvailableNumberOfCores(this.options.parallel);
    compiler.hooks.compilation.tap(pluginName, compilation => {
      const hooks = compiler.webpack.javascript.JavascriptModulesPlugin.getCompilationHooks(compilation);
      const data = getSerializeJavascript()({
        minimizer: typeof this.options.minimizer.implementation.getMinimizerVersion !== "undefined" ? this.options.minimizer.implementation.getMinimizerVersion() || "0.0.0" : "0.0.0",
        options: this.options.minimizer.options
      ***REMOVED***);
      hooks.chunkHash.tap(pluginName, (chunk, hash) => {
        hash.update("TerserPlugin");
        hash.update(data);
      ***REMOVED***);
      compilation.hooks.processAssets.tapPromise({
        name: pluginName,
        stage: compiler.webpack.Compilation.PROCESS_ASSETS_STAGE_OPTIMIZE_SIZE,
        additionalAssets: true
      ***REMOVED***, assets => this.optimize(compiler, compilation, assets, {
        availableNumberOfCores
      ***REMOVED***));
      compilation.hooks.statsPrinter.tap(pluginName, stats => {
        stats.hooks.print.for("asset.info.minimized").tap("terser-webpack-plugin", (minimized, {
          green,
          formatFlag
        ***REMOVED***) => minimized ? /** @type {Function***REMOVED*** */green( /** @type {Function***REMOVED*** */formatFlag("minimized")) : "");
      ***REMOVED***);
    ***REMOVED***);
  ***REMOVED***
***REMOVED***
TerserPlugin.terserMinify = terserMinify;
TerserPlugin.uglifyJsMinify = uglifyJsMinify;
TerserPlugin.swcMinify = swcMinify;
TerserPlugin.esbuildMinify = esbuildMinify;
module.exports = TerserPlugin;