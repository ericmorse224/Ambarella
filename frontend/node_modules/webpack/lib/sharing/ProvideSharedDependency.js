/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const Dependency = require("../Dependency");
const makeSerializable = require("../util/makeSerializable");

/** @typedef {import("../serialization/ObjectMiddleware").ObjectDeserializerContext***REMOVED*** ObjectDeserializerContext */
/** @typedef {import("../serialization/ObjectMiddleware").ObjectSerializerContext***REMOVED*** ObjectSerializerContext */

class ProvideSharedDependency extends Dependency {
	/**
	 * @param {string***REMOVED*** shareScope share scope
	 * @param {string***REMOVED*** name module name
	 * @param {string | false***REMOVED*** version version
	 * @param {string***REMOVED*** request request
	 * @param {boolean***REMOVED*** eager true, if this is an eager dependency
	 */
	constructor(shareScope, name, version, request, eager) {
		super();
		this.shareScope = shareScope;
		this.name = name;
		this.version = version;
		this.request = request;
		this.eager = eager;
	***REMOVED***

	get type() {
		return "provide shared module";
	***REMOVED***

	/**
	 * @returns {string | null***REMOVED*** an identifier to merge equal requests
	 */
	getResourceIdentifier() {
		return `provide module (${this.shareScope***REMOVED***) ${this.request***REMOVED*** as ${
			this.name
		***REMOVED*** @ ${this.version***REMOVED***${this.eager ? " (eager)" : ""***REMOVED***`;
	***REMOVED***

	/**
	 * @param {ObjectSerializerContext***REMOVED*** context context
	 */
	serialize(context) {
		context.write(this.shareScope);
		context.write(this.name);
		context.write(this.request);
		context.write(this.version);
		context.write(this.eager);
		super.serialize(context);
	***REMOVED***

	/**
	 * @param {ObjectDeserializerContext***REMOVED*** context context
	 * @returns {ProvideSharedDependency***REMOVED*** deserialize fallback dependency
	 */
	static deserialize(context) {
		const { read ***REMOVED*** = context;
		const obj = new ProvideSharedDependency(
			read(),
			read(),
			read(),
			read(),
			read()
		);
		this.shareScope = context.read();
		obj.deserialize(context);
		return obj;
	***REMOVED***
***REMOVED***

makeSerializable(
	ProvideSharedDependency,
	"webpack/lib/sharing/ProvideSharedDependency"
);

module.exports = ProvideSharedDependency;
