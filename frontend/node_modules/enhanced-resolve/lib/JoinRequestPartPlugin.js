/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

/** @typedef {import("./Resolver")***REMOVED*** Resolver */
/** @typedef {import("./Resolver").ResolveRequest***REMOVED*** ResolveRequest */
/** @typedef {import("./Resolver").ResolveStepHook***REMOVED*** ResolveStepHook */

const namespaceStartCharCode = "@".charCodeAt(0);

module.exports = class JoinRequestPartPlugin {
	/**
	 * @param {string | ResolveStepHook***REMOVED*** source source
	 * @param {string | ResolveStepHook***REMOVED*** target target
	 */
	constructor(source, target) {
		this.source = source;
		this.target = target;
	***REMOVED***

	/**
	 * @param {Resolver***REMOVED*** resolver the resolver
	 * @returns {void***REMOVED***
	 */
	apply(resolver) {
		const target = resolver.ensureHook(this.target);
		resolver
			.getHook(this.source)
			.tapAsync(
				"JoinRequestPartPlugin",
				(request, resolveContext, callback) => {
					const req = request.request || "";
					let i = req.indexOf("/", 3);

					if (i >= 0 && req.charCodeAt(2) === namespaceStartCharCode) {
						i = req.indexOf("/", i + 1);
					***REMOVED***

					/** @type {string***REMOVED*** */
					let moduleName;
					/** @type {string***REMOVED*** */
					let remainingRequest;
					/** @type {boolean***REMOVED*** */
					let fullySpecified;
					if (i < 0) {
						moduleName = req;
						remainingRequest = ".";
						fullySpecified = false;
					***REMOVED*** else {
						moduleName = req.slice(0, i);
						remainingRequest = "." + req.slice(i);
						fullySpecified = /** @type {boolean***REMOVED*** */ (request.fullySpecified);
					***REMOVED***
					/** @type {ResolveRequest***REMOVED*** */
					const obj = {
						...request,
						path: resolver.join(
							/** @type {string***REMOVED*** */
							(request.path),
							moduleName
						),
						relativePath:
							request.relativePath &&
							resolver.join(request.relativePath, moduleName),
						request: remainingRequest,
						fullySpecified
					***REMOVED***;
					resolver.doResolve(target, obj, null, resolveContext, callback);
				***REMOVED***
			);
	***REMOVED***
***REMOVED***;
