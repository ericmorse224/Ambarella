function resolveMemberExpressions(object = {***REMOVED***, property = {***REMOVED***) {
  if (object.type === 'JSXMemberExpression') {
    return `${resolveMemberExpressions(object.object, object.property)***REMOVED***.${property.name***REMOVED***`;
  ***REMOVED***

  return `${object.name***REMOVED***.${property.name***REMOVED***`;
***REMOVED***

/**
 * Returns the tagName associated with a JSXElement.
 */
export default function elementType(node = {***REMOVED***) {
  const { name ***REMOVED*** = node;

  if (node.type === 'JSXOpeningFragment') {
    return '<>';
  ***REMOVED***

  if (!name) {
    throw new Error('The argument provided is not a JSXElement node.');
  ***REMOVED***

  if (name.type === 'JSXMemberExpression') {
    const { object = {***REMOVED***, property = {***REMOVED*** ***REMOVED*** = name;
    return resolveMemberExpressions(object, property);
  ***REMOVED***

  if (name.type === 'JSXNamespacedName') {
    return `${name.namespace.name***REMOVED***:${name.name.name***REMOVED***`;
  ***REMOVED***

  return node.name.name;
***REMOVED***
