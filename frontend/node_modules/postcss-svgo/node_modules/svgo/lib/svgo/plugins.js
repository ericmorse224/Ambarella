'use strict';

const { visit ***REMOVED*** = require('../xast.js');

/**
 * Plugins engine.
 *
 * @module plugins
 *
 * @param {Object***REMOVED*** ast input ast
 * @param {Object***REMOVED*** info extra information
 * @param {Array***REMOVED*** plugins plugins object from config
 * @return {Object***REMOVED*** output ast
 */
const invokePlugins = (ast, info, plugins, overrides, globalOverrides) => {
  for (const plugin of plugins) {
    const override = overrides == null ? null : overrides[plugin.name];
    if (override === false) {
      continue;
    ***REMOVED***
    const params = { ...plugin.params, ...globalOverrides, ...override ***REMOVED***;

    if (plugin.type === 'perItem') {
      ast = perItem(ast, info, plugin, params);
    ***REMOVED***
    if (plugin.type === 'perItemReverse') {
      ast = perItem(ast, info, plugin, params, true);
    ***REMOVED***
    if (plugin.type === 'full') {
      if (plugin.active) {
        ast = plugin.fn(ast, params, info);
      ***REMOVED***
    ***REMOVED***
    if (plugin.type === 'visitor') {
      if (plugin.active) {
        const visitor = plugin.fn(ast, params, info);
        if (visitor != null) {
          visit(ast, visitor);
        ***REMOVED***
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***
  return ast;
***REMOVED***;
exports.invokePlugins = invokePlugins;

/**
 * Direct or reverse per-item loop.
 *
 * @param {Object***REMOVED*** data input data
 * @param {Object***REMOVED*** info extra information
 * @param {Array***REMOVED*** plugins plugins list to process
 * @param {boolean***REMOVED*** [reverse] reverse pass?
 * @return {Object***REMOVED*** output data
 */
function perItem(data, info, plugin, params, reverse) {
  function monkeys(items) {
    items.children = items.children.filter(function (item) {
      // reverse pass
      if (reverse && item.children) {
        monkeys(item);
      ***REMOVED***
      // main filter
      let kept = true;
      if (plugin.active) {
        kept = plugin.fn(item, params, info) !== false;
      ***REMOVED***
      // direct pass
      if (!reverse && item.children) {
        monkeys(item);
      ***REMOVED***
      return kept;
    ***REMOVED***);
    return items;
  ***REMOVED***
  return monkeys(data);
***REMOVED***

const createPreset = ({ name, plugins ***REMOVED***) => {
  return {
    name,
    type: 'full',
    fn: (ast, params, info) => {
      const { floatPrecision, overrides ***REMOVED*** = params;
      const globalOverrides = {***REMOVED***;
      if (floatPrecision != null) {
        globalOverrides.floatPrecision = floatPrecision;
      ***REMOVED***
      if (overrides) {
        for (const [pluginName, override] of Object.entries(overrides)) {
          if (override === true) {
            console.warn(
              `You are trying to enable ${pluginName***REMOVED*** which is not part of preset.\n` +
                `Try to put it before or after preset, for example\n\n` +
                `plugins: [\n` +
                `  {\n` +
                `    name: 'preset-default',\n` +
                `  ***REMOVED***,\n` +
                `  'cleanupListOfValues'\n` +
                `]\n`
            );
          ***REMOVED***
        ***REMOVED***
      ***REMOVED***
      return invokePlugins(ast, info, plugins, overrides, globalOverrides);
    ***REMOVED***,
  ***REMOVED***;
***REMOVED***;
exports.createPreset = createPreset;
