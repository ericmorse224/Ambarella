/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const InitFragment = require("../InitFragment");
const RuntimeGlobals = require("../RuntimeGlobals");
const Template = require("../Template");

/** @typedef {import("webpack-sources").Source***REMOVED*** Source */
/** @typedef {import("../Generator").GenerateContext***REMOVED*** GenerateContext */

/**
 * @extends {InitFragment<GenerateContext>***REMOVED***
 */
class AwaitDependenciesInitFragment extends InitFragment {
	/**
	 * @param {Set<string>***REMOVED*** promises the promises that should be awaited
	 */
	constructor(promises) {
		super(
			undefined,
			InitFragment.STAGE_ASYNC_DEPENDENCIES,
			0,
			"await-dependencies"
		);
		this.promises = promises;
	***REMOVED***

	/**
	 * @param {AwaitDependenciesInitFragment***REMOVED*** other other AwaitDependenciesInitFragment
	 * @returns {AwaitDependenciesInitFragment***REMOVED*** AwaitDependenciesInitFragment
	 */
	merge(other) {
		const promises = new Set(other.promises);
		for (const p of this.promises) {
			promises.add(p);
		***REMOVED***
		return new AwaitDependenciesInitFragment(promises);
	***REMOVED***

	/**
	 * @param {GenerateContext***REMOVED*** context context
	 * @returns {string | Source | undefined***REMOVED*** the source code that will be included as initialization code
	 */
	getContent({ runtimeRequirements ***REMOVED***) {
		runtimeRequirements.add(RuntimeGlobals.module);
		const promises = this.promises;
		if (promises.size === 0) {
			return "";
		***REMOVED***
		if (promises.size === 1) {
			const [p] = promises;
			return Template.asString([
				`var __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([${p***REMOVED***]);`,
				`${p***REMOVED*** = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];`,
				""
			]);
		***REMOVED***
		const sepPromises = Array.from(promises).join(", ");
		// TODO check if destructuring is supported
		return Template.asString([
			`var __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([${sepPromises***REMOVED***]);`,
			`([${sepPromises***REMOVED***] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);`,
			""
		]);
	***REMOVED***
***REMOVED***

module.exports = AwaitDependenciesInitFragment;
