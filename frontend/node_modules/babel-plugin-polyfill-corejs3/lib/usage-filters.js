"use strict";

exports.__esModule = true;
exports.default = canSkipPolyfill;
var _babel = _interopRequireWildcard(require("@babel/core"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; ***REMOVED***)(nodeInterop); ***REMOVED***
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; ***REMOVED*** if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj ***REMOVED***; ***REMOVED*** var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); ***REMOVED*** var newObj = {***REMOVED***; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); ***REMOVED*** else { newObj[key] = obj[key]; ***REMOVED*** ***REMOVED*** ***REMOVED*** newObj.default = obj; if (cache) { cache.set(obj, newObj); ***REMOVED*** return newObj; ***REMOVED***
const {
  types: t
***REMOVED*** = _babel.default || _babel;
function canSkipPolyfill(desc, path) {
  const {
    node,
    parent
  ***REMOVED*** = path;
  switch (desc.name) {
    case "es.string.split":
      {
        if (!t.isCallExpression(parent, {
          callee: node
        ***REMOVED***)) return false;
        if (parent.arguments.length < 1) return true;
        const splitter = parent.arguments[0];
        return t.isStringLiteral(splitter) || t.isTemplateLiteral(splitter);
      ***REMOVED***
  ***REMOVED***
***REMOVED***