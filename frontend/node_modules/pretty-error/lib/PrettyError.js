// Generated by CoffeeScript 1.8.0
var ParsedError, PrettyError, RenderKid, arrayUtils, defaultStyle, instance, isPlainObject, merge, nodePaths, prop, _fn, _i, _len, _ref,
  __slice = [].slice,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; ***REMOVED*** return -1; ***REMOVED***;

isPlainObject = require('lodash/isPlainObject');

defaultStyle = require('./defaultStyle');

ParsedError = require('./ParsedError');

nodePaths = require('./nodePaths');

RenderKid = require('renderkid');

merge = require('lodash/merge');

arrayUtils = {
  pluckByCallback: function(a, cb) {
    var index, removed, value, _i, _len;
    if (a.length < 1) {
      return a;
    ***REMOVED***
    removed = 0;
    for (index = _i = 0, _len = a.length; _i < _len; index = ++_i) {
      value = a[index];
      if (cb(value, index)) {
        removed++;
        continue;
      ***REMOVED***
      if (removed !== 0) {
        a[index - removed] = a[index];
      ***REMOVED***
    ***REMOVED***
    if (removed > 0) {
      a.length = a.length - removed;
    ***REMOVED***
    return a;
  ***REMOVED***,
  pluckOneItem: function(a, item) {
    var index, reached, value, _i, _len;
    if (a.length < 1) {
      return a;
    ***REMOVED***
    reached = false;
    for (index = _i = 0, _len = a.length; _i < _len; index = ++_i) {
      value = a[index];
      if (!reached) {
        if (value === item) {
          reached = true;
          continue;
        ***REMOVED***
      ***REMOVED*** else {
        a[index - 1] = a[index];
      ***REMOVED***
    ***REMOVED***
    if (reached) {
      a.length = a.length - 1;
    ***REMOVED***
    return a;
  ***REMOVED***
***REMOVED***;

instance = null;

module.exports = PrettyError = (function() {
  var self;

  self = PrettyError;

  PrettyError._filters = {
    'module.exports': function(item) {
      if (item.what == null) {
        return;
      ***REMOVED***
      item.what = item.what.replace(/\.module\.exports\./g, ' - ');
    ***REMOVED***
  ***REMOVED***;

  PrettyError._getDefaultStyle = function() {
    return defaultStyle();
  ***REMOVED***;

  PrettyError.start = function() {
    if (instance == null) {
      instance = new self;
      instance.start();
    ***REMOVED***
    return instance;
  ***REMOVED***;

  PrettyError.stop = function() {
    return instance != null ? instance.stop() : void 0;
  ***REMOVED***;

  function PrettyError() {
    this._useColors = true;
    this._maxItems = 50;
    this._packagesToSkip = [];
    this._pathsToSkip = [];
    this._skipCallbacks = [];
    this._filterCallbacks = [];
    this._parsedErrorFilters = [];
    this._aliases = [];
    this._renderer = new RenderKid;
    this._style = self._getDefaultStyle();
    this._renderer.style(this._style);
  ***REMOVED***

  PrettyError.prototype.start = function() {
    var prepeare;
    this._oldPrepareStackTrace = Error.prepareStackTrace;
    prepeare = this._oldPrepareStackTrace || function(exc, frames) {
      var result;
      result = exc.toString();
      frames = frames.map(function(frame) {
        return "  at " + (frame.toString());
      ***REMOVED***);
      return result + "\n" + frames.join("\n");
    ***REMOVED***;
    Error.prepareStackTrace = (function(_this) {
      return function(exc, trace) {
        var stack;
        stack = prepeare.apply(null, arguments);
        return _this.render({
          stack: stack,
          message: exc.toString().replace(/^.*: /, '')
        ***REMOVED***, false);
      ***REMOVED***;
    ***REMOVED***)(this);
    return this;
  ***REMOVED***;

  PrettyError.prototype.stop = function() {
    Error.prepareStackTrace = this._oldPrepareStackTrace;
    return this._oldPrepareStackTrace = null;
  ***REMOVED***;

  PrettyError.prototype.config = function(c) {
    var alias, path, _ref;
    if (c.skipPackages != null) {
      if (c.skipPackages === false) {
        this.unskipAllPackages();
      ***REMOVED*** else {
        this.skipPackage.apply(this, c.skipPackages);
      ***REMOVED***
    ***REMOVED***
    if (c.skipPaths != null) {
      if (c.skipPaths === false) {
        this.unskipAllPaths();
      ***REMOVED*** else {
        this.skipPath.apply(this, c.skipPaths);
      ***REMOVED***
    ***REMOVED***
    if (c.skip != null) {
      if (c.skip === false) {
        this.unskipAll();
      ***REMOVED*** else {
        this.skip.apply(this, c.skip);
      ***REMOVED***
    ***REMOVED***
    if (c.maxItems != null) {
      this.setMaxItems(c.maxItems);
    ***REMOVED***
    if (c.skipNodeFiles === true) {
      this.skipNodeFiles();
    ***REMOVED*** else if (c.skipNodeFiles === false) {
      this.unskipNodeFiles();
    ***REMOVED***
    if (c.filters != null) {
      if (c.filters === false) {
        this.removeAllFilters();
      ***REMOVED*** else {
        this.filter.apply(this, c.filters);
      ***REMOVED***
    ***REMOVED***
    if (c.parsedErrorFilters != null) {
      if (c.parsedErrorFilters === false) {
        this.removeAllParsedErrorFilters();
      ***REMOVED*** else {
        this.filterParsedError.apply(this, c.parsedErrorFilters);
      ***REMOVED***
    ***REMOVED***
    if (c.aliases != null) {
      if (isPlainObject(c.aliases)) {
        _ref = c.aliases;
        for (path in _ref) {
          alias = _ref[path];
          this.alias(path, alias);
        ***REMOVED***
      ***REMOVED*** else if (c.aliases === false) {
        this.removeAllAliases();
      ***REMOVED***
    ***REMOVED***
    return this;
  ***REMOVED***;

  PrettyError.prototype.withoutColors = function() {
    this._useColors = false;
    return this;
  ***REMOVED***;

  PrettyError.prototype.withColors = function() {
    this._useColors = true;
    return this;
  ***REMOVED***;

  PrettyError.prototype.skipPackage = function() {
    var packages, pkg, _i, _len;
    packages = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    for (_i = 0, _len = packages.length; _i < _len; _i++) {
      pkg = packages[_i];
      this._packagesToSkip.push(String(pkg));
    ***REMOVED***
    return this;
  ***REMOVED***;

  PrettyError.prototype.unskipPackage = function() {
    var packages, pkg, _i, _len;
    packages = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    for (_i = 0, _len = packages.length; _i < _len; _i++) {
      pkg = packages[_i];
      arrayUtils.pluckOneItem(this._packagesToSkip, pkg);
    ***REMOVED***
    return this;
  ***REMOVED***;

  PrettyError.prototype.unskipAllPackages = function() {
    this._packagesToSkip.length = 0;
    return this;
  ***REMOVED***;

  PrettyError.prototype.skipPath = function() {
    var path, paths, _i, _len;
    paths = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    for (_i = 0, _len = paths.length; _i < _len; _i++) {
      path = paths[_i];
      this._pathsToSkip.push(path);
    ***REMOVED***
    return this;
  ***REMOVED***;

  PrettyError.prototype.unskipPath = function() {
    var path, paths, _i, _len;
    paths = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    for (_i = 0, _len = paths.length; _i < _len; _i++) {
      path = paths[_i];
      arrayUtils.pluckOneItem(this._pathsToSkip, path);
    ***REMOVED***
    return this;
  ***REMOVED***;

  PrettyError.prototype.unskipAllPaths = function() {
    this._pathsToSkip.length = 0;
    return this;
  ***REMOVED***;

  PrettyError.prototype.skip = function() {
    var callbacks, cb, _i, _len;
    callbacks = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    for (_i = 0, _len = callbacks.length; _i < _len; _i++) {
      cb = callbacks[_i];
      this._skipCallbacks.push(cb);
    ***REMOVED***
    return this;
  ***REMOVED***;

  PrettyError.prototype.unskip = function() {
    var callbacks, cb, _i, _len;
    callbacks = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    for (_i = 0, _len = callbacks.length; _i < _len; _i++) {
      cb = callbacks[_i];
      arrayUtils.pluckOneItem(this._skipCallbacks, cb);
    ***REMOVED***
    return this;
  ***REMOVED***;

  PrettyError.prototype.unskipAll = function() {
    this._skipCallbacks.length = 0;
    return this;
  ***REMOVED***;

  PrettyError.prototype.skipNodeFiles = function() {
    return this.skipPath.apply(this, nodePaths);
  ***REMOVED***;

  PrettyError.prototype.unskipNodeFiles = function() {
    return this.unskipPath.apply(this, nodePaths);
  ***REMOVED***;

  PrettyError.prototype.filter = function() {
    var callbacks, cb, _i, _len;
    callbacks = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    for (_i = 0, _len = callbacks.length; _i < _len; _i++) {
      cb = callbacks[_i];
      this._filterCallbacks.push(cb);
    ***REMOVED***
    return this;
  ***REMOVED***;

  PrettyError.prototype.removeFilter = function() {
    var callbacks, cb, _i, _len;
    callbacks = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    for (_i = 0, _len = callbacks.length; _i < _len; _i++) {
      cb = callbacks[_i];
      arrayUtils.pluckOneItem(this._filterCallbacks, cb);
    ***REMOVED***
    return this;
  ***REMOVED***;

  PrettyError.prototype.removeAllFilters = function() {
    this._filterCallbacks.length = 0;
    return this;
  ***REMOVED***;

  PrettyError.prototype.filterParsedError = function() {
    var callbacks, cb, _i, _len;
    callbacks = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    for (_i = 0, _len = callbacks.length; _i < _len; _i++) {
      cb = callbacks[_i];
      this._parsedErrorFilters.push(cb);
    ***REMOVED***
    return this;
  ***REMOVED***;

  PrettyError.prototype.removeParsedErrorFilter = function() {
    var callbacks, cb, _i, _len;
    callbacks = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    for (_i = 0, _len = callbacks.length; _i < _len; _i++) {
      cb = callbacks[_i];
      arrayUtils.pluckOneItem(this._parsedErrorFilters, cb);
    ***REMOVED***
    return this;
  ***REMOVED***;

  PrettyError.prototype.removeAllParsedErrorFilters = function() {
    this._parsedErrorFilters.length = 0;
    return this;
  ***REMOVED***;

  PrettyError.prototype.setMaxItems = function(maxItems) {
    if (maxItems == null) {
      maxItems = 50;
    ***REMOVED***
    if (maxItems === 0) {
      maxItems = 50;
    ***REMOVED***
    this._maxItems = maxItems | 0;
    return this;
  ***REMOVED***;

  PrettyError.prototype.alias = function(stringOrRx, alias) {
    this._aliases.push({
      stringOrRx: stringOrRx,
      alias: alias
    ***REMOVED***);
    return this;
  ***REMOVED***;

  PrettyError.prototype.removeAlias = function(stringOrRx) {
    arrayUtils.pluckByCallback(this._aliases, function(pair) {
      return pair.stringOrRx === stringOrRx;
    ***REMOVED***);
    return this;
  ***REMOVED***;

  PrettyError.prototype.removeAllAliases = function() {
    this._aliases.length = 0;
    return this;
  ***REMOVED***;

  PrettyError.prototype._getStyle = function() {
    return this._style;
  ***REMOVED***;

  PrettyError.prototype.appendStyle = function(toAppend) {
    merge(this._style, toAppend);
    this._renderer.style(toAppend);
    return this;
  ***REMOVED***;

  PrettyError.prototype._getRenderer = function() {
    return this._renderer;
  ***REMOVED***;

  PrettyError.prototype.render = function(e, logIt, useColors) {
    var obj, rendered;
    if (logIt == null) {
      logIt = false;
    ***REMOVED***
    if (useColors == null) {
      useColors = this._useColors;
    ***REMOVED***
    obj = this.getObject(e);
    rendered = this._renderer.render(obj, useColors);
    if (logIt === true) {
      console.error(rendered);
    ***REMOVED***
    return rendered;
  ***REMOVED***;

  PrettyError.prototype.getObject = function(e) {
    var count, header, i, item, obj, traceItems, _i, _len, _ref;
    if (!(e instanceof ParsedError)) {
      e = new ParsedError(e);
    ***REMOVED***
    this._applyParsedErrorFiltersOn(e);
    header = {
      title: (function() {
        var ret;
        ret = {***REMOVED***;
        if (e.wrapper !== '') {
          ret.wrapper = "" + e.wrapper;
        ***REMOVED***
        ret.kind = e.kind;
        return ret;
      ***REMOVED***)(),
      colon: ':',
      message: String(e.message).trim()
    ***REMOVED***;
    traceItems = [];
    count = -1;
    _ref = e.trace;
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      item = _ref[i];
      if (item == null) {
        continue;
      ***REMOVED***
      if (this._skipOrFilter(item, i) === true) {
        continue;
      ***REMOVED***
      count++;
      if (count > this._maxItems) {
        break;
      ***REMOVED***
      if (typeof item === 'string') {
        traceItems.push({
          item: {
            custom: item
          ***REMOVED***
        ***REMOVED***);
        continue;
      ***REMOVED***
      traceItems.push((function() {
        var markupItem;
        markupItem = {
          item: {
            header: {
              pointer: (function() {
                if (item.file == null) {
                  return '';
                ***REMOVED***
                return {
                  file: item.file,
                  colon: ':',
                  line: item.line
                ***REMOVED***;
              ***REMOVED***)()
            ***REMOVED***,
            footer: (function() {
              var foooter;
              foooter = {
                addr: item.shortenedAddr
              ***REMOVED***;
              if (item.extra != null) {
                foooter.extra = item.extra;
              ***REMOVED***
              return foooter;
            ***REMOVED***)()
          ***REMOVED***
        ***REMOVED***;
        if (typeof item.what === 'string' && item.what.trim().length > 0) {
          markupItem.item.header.what = item.what;
        ***REMOVED***
        return markupItem;
      ***REMOVED***)());
    ***REMOVED***
    obj = {
      'pretty-error': {
        header: header
      ***REMOVED***
    ***REMOVED***;
    if (traceItems.length > 0) {
      obj['pretty-error'].trace = traceItems;
    ***REMOVED***
    return obj;
  ***REMOVED***;

  PrettyError.prototype._skipOrFilter = function(item, itemNumber) {
    var cb, modName, pair, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
    if (typeof item === 'object') {
      if (_ref = item.modName, __indexOf.call(this._packagesToSkip, _ref) >= 0) {
        return true;
      ***REMOVED***
      if (_ref1 = item.path, __indexOf.call(this._pathsToSkip, _ref1) >= 0) {
        return true;
      ***REMOVED***
      _ref2 = item.packages;
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        modName = _ref2[_i];
        if (__indexOf.call(this._packagesToSkip, modName) >= 0) {
          return true;
        ***REMOVED***
      ***REMOVED***
      if (typeof item.shortenedAddr === 'string') {
        _ref3 = this._aliases;
        for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
          pair = _ref3[_j];
          item.shortenedAddr = item.shortenedAddr.replace(pair.stringOrRx, pair.alias);
        ***REMOVED***
      ***REMOVED***
    ***REMOVED***
    _ref4 = this._skipCallbacks;
    for (_k = 0, _len2 = _ref4.length; _k < _len2; _k++) {
      cb = _ref4[_k];
      if (cb(item, itemNumber) === true) {
        return true;
      ***REMOVED***
    ***REMOVED***
    _ref5 = this._filterCallbacks;
    for (_l = 0, _len3 = _ref5.length; _l < _len3; _l++) {
      cb = _ref5[_l];
      cb(item, itemNumber);
    ***REMOVED***
    return false;
  ***REMOVED***;

  PrettyError.prototype._applyParsedErrorFiltersOn = function(error) {
    var cb, _i, _len, _ref;
    _ref = this._parsedErrorFilters;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      cb = _ref[_i];
      cb(error);
    ***REMOVED***
  ***REMOVED***;

  return PrettyError;

***REMOVED***)();

_ref = ['renderer', 'style'];
_fn = function() {
  var methodName;
  methodName = '_get' + prop[0].toUpperCase() + prop.substr(1, prop.length);
  return PrettyError.prototype.__defineGetter__(prop, function() {
    return this[methodName]();
  ***REMOVED***);
***REMOVED***;
for (_i = 0, _len = _ref.length; _i < _len; _i++) {
  prop = _ref[_i];
  _fn();
***REMOVED***
