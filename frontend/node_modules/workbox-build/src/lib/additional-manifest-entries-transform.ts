/*
  Copyright 2019 Google LLC

  Use of this source code is governed by an MIT-style
  license that can be found in the LICENSE file or at
  https://opensource.org/licenses/MIT.
*/

import {errors***REMOVED*** from './errors';
import {ManifestEntry***REMOVED*** from '../types';

type AdditionalManifestEntriesTransform = {
  (manifest: Array<ManifestEntry & {size: number***REMOVED***>): {
    manifest: Array<ManifestEntry & {size: number***REMOVED***>;
    warnings: string[];
  ***REMOVED***;
***REMOVED***;

export function additionalManifestEntriesTransform(
  additionalManifestEntries: Array<ManifestEntry | string>,
): AdditionalManifestEntriesTransform {
  return (manifest: Array<ManifestEntry & {size: number***REMOVED***>) => {
    const warnings: Array<string> = [];
    const stringEntries = new Set<string>();

    for (const additionalEntry of additionalManifestEntries) {
      // Warn about either a string or an object that lacks a revision property.
      // (An object with a revision property set to null is okay.)
      if (typeof additionalEntry === 'string') {
        stringEntries.add(additionalEntry);
        manifest.push({
          revision: null,
          size: 0,
          url: additionalEntry,
        ***REMOVED***);
      ***REMOVED*** else {
        if (additionalEntry && additionalEntry.revision === undefined) {
          stringEntries.add(additionalEntry.url);
        ***REMOVED***
        manifest.push(Object.assign({size: 0***REMOVED***, additionalEntry));
      ***REMOVED***
    ***REMOVED***

    if (stringEntries.size > 0) {
      let urls = '\n';
      for (const stringEntry of stringEntries) {
        urls += `  - ${stringEntry***REMOVED***\n`;
      ***REMOVED***

      warnings.push(errors['string-entry-warning'] + urls);
    ***REMOVED***

    return {
      manifest,
      warnings,
    ***REMOVED***;
  ***REMOVED***;
***REMOVED***
