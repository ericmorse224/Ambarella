/*
  Copyright 2020 Google LLC

  Use of this source code is governed by an MIT-style
  license that can be found in the LICENSE file or at
  https://opensource.org/licenses/MIT.
*/
import { warmStrategyCache ***REMOVED*** from './warmStrategyCache';
import { registerRoute ***REMOVED*** from 'workbox-routing/registerRoute.js';
import { CacheFirst ***REMOVED*** from 'workbox-strategies/CacheFirst.js';
import { CacheableResponsePlugin ***REMOVED*** from 'workbox-cacheable-response/CacheableResponsePlugin.js';
import { ExpirationPlugin ***REMOVED*** from 'workbox-expiration/ExpirationPlugin.js';
import './_version.js';
/**
 * An implementation of the [image caching recipe]{@link https://developers.google.com/web/tools/workbox/guides/common-recipes#caching_images***REMOVED***
 *
 * @memberof workbox-recipes
 *
 * @param {Object***REMOVED*** [options]
 * @param {string***REMOVED*** [options.cacheName] Name for cache. Defaults to images
 * @param {RouteMatchCallback***REMOVED*** [options.matchCallback] Workbox callback function to call to match to. Defaults to request.destination === 'image';
 * @param {number***REMOVED*** [options.maxAgeSeconds] Maximum age, in seconds, that font entries will be cached for. Defaults to 30 days
 * @param {number***REMOVED*** [options.maxEntries] Maximum number of images that will be cached. Defaults to 60
 * @param {WorkboxPlugin[]***REMOVED*** [options.plugins] Additional plugins to use for this recipe
 * @param {string[]***REMOVED*** [options.warmCache] Paths to call to use to warm this cache
 */
function imageCache(options = {***REMOVED***) {
    const defaultMatchCallback = ({ request ***REMOVED***) => request.destination === 'image';
    const cacheName = options.cacheName || 'images';
    const matchCallback = options.matchCallback || defaultMatchCallback;
    const maxAgeSeconds = options.maxAgeSeconds || 30 * 24 * 60 * 60;
    const maxEntries = options.maxEntries || 60;
    const plugins = options.plugins || [];
    plugins.push(new CacheableResponsePlugin({
        statuses: [0, 200],
    ***REMOVED***));
    plugins.push(new ExpirationPlugin({
        maxEntries,
        maxAgeSeconds,
    ***REMOVED***));
    const strategy = new CacheFirst({
        cacheName,
        plugins,
    ***REMOVED***);
    registerRoute(matchCallback, strategy);
    // Warms the cache
    if (options.warmCache) {
        warmStrategyCache({ urls: options.warmCache, strategy ***REMOVED***);
    ***REMOVED***
***REMOVED***
export { imageCache ***REMOVED***;
