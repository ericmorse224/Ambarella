"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
***REMOVED***);
exports.statements = exports.statement = exports.smart = exports.program = exports.expression = void 0;
var _t = require("@babel/types");
const {
  assertExpressionStatement
***REMOVED*** = _t;
function makeStatementFormatter(fn) {
  return {
    code: str => `/* @babel/template */;\n${str***REMOVED***`,
    validate: () => {***REMOVED***,
    unwrap: ast => {
      return fn(ast.program.body.slice(1));
    ***REMOVED***
  ***REMOVED***;
***REMOVED***
const smart = exports.smart = makeStatementFormatter(body => {
  if (body.length > 1) {
    return body;
  ***REMOVED*** else {
    return body[0];
  ***REMOVED***
***REMOVED***);
const statements = exports.statements = makeStatementFormatter(body => body);
const statement = exports.statement = makeStatementFormatter(body => {
  if (body.length === 0) {
    throw new Error("Found nothing to return.");
  ***REMOVED***
  if (body.length > 1) {
    throw new Error("Found multiple statements but wanted one");
  ***REMOVED***
  return body[0];
***REMOVED***);
const expression = exports.expression = {
  code: str => `(\n${str***REMOVED***\n)`,
  validate: ast => {
    if (ast.program.body.length > 1) {
      throw new Error("Found multiple statements but wanted one");
    ***REMOVED***
    if (expression.unwrap(ast).start === 0) {
      throw new Error("Parse result included parens.");
    ***REMOVED***
  ***REMOVED***,
  unwrap: ({
    program
  ***REMOVED***) => {
    const [stmt] = program.body;
    assertExpressionStatement(stmt);
    return stmt.expression;
  ***REMOVED***
***REMOVED***;
const program = exports.program = {
  code: str => str,
  validate: () => {***REMOVED***,
  unwrap: ast => ast.program
***REMOVED***;

//# sourceMappingURL=formatters.js.map
