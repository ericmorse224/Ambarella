"use strict";

exports.__esModule = true;
exports.default = void 0;
const positionMethod = {
  start: 'unshiftContainer',
  end: 'pushContainer'
***REMOVED***;

const addJSXAttribute = ({
  types: t,
  template
***REMOVED***, opts) => {
  function getAttributeValue({
    literal,
    value
  ***REMOVED***) {
    if (typeof value === 'boolean') {
      return t.jsxExpressionContainer(t.booleanLiteral(value));
    ***REMOVED***

    if (typeof value === 'number') {
      return t.jsxExpressionContainer(t.numericLiteral(value));
    ***REMOVED***

    if (typeof value === 'string' && literal) {
      return t.jsxExpressionContainer(template.ast(value).expression);
    ***REMOVED***

    if (typeof value === 'string') {
      return t.stringLiteral(value);
    ***REMOVED***

    return null;
  ***REMOVED***

  function getAttribute({
    spread,
    name,
    value,
    literal
  ***REMOVED***) {
    if (spread) {
      return t.jsxSpreadAttribute(t.identifier(name));
    ***REMOVED***

    return t.jsxAttribute(t.jsxIdentifier(name), getAttributeValue({
      value,
      literal
    ***REMOVED***));
  ***REMOVED***

  return {
    visitor: {
      JSXOpeningElement(path) {
        if (!opts.elements.includes(path.node.name.name)) return;
        opts.attributes.forEach(({
          name,
          value = null,
          spread = false,
          literal = false,
          position = 'end'
        ***REMOVED***) => {
          const method = positionMethod[position];
          const newAttribute = getAttribute({
            spread,
            name,
            value,
            literal
          ***REMOVED***);
          const attributes = path.get('attributes');

          const isEqualAttribute = attribute => {
            if (spread) {
              return attribute.get('argument').isIdentifier({
                name
              ***REMOVED***);
            ***REMOVED***

            return attribute.get('name').isJSXIdentifier({
              name
            ***REMOVED***);
          ***REMOVED***;

          const replaced = attributes.some(attribute => {
            if (!isEqualAttribute(attribute)) return false;
            attribute.replaceWith(newAttribute);
            return true;
          ***REMOVED***);

          if (!replaced) {
            path[method]('attributes', newAttribute);
          ***REMOVED***
        ***REMOVED***);
      ***REMOVED***

    ***REMOVED***
  ***REMOVED***;
***REMOVED***;

var _default = addJSXAttribute;
exports.default = _default;