"use strict";

const conversions = require("webidl-conversions");
const utils = require("./utils.js");

const Blob = require("./Blob.js");
const FilePropertyBag = require("./FilePropertyBag.js");
const implSymbol = utils.implSymbol;
const ctorRegistrySymbol = utils.ctorRegistrySymbol;

const interfaceName = "File";

exports.is = value => {
  return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;
***REMOVED***;
exports.isImpl = value => {
  return utils.isObject(value) && value instanceof Impl.implementation;
***REMOVED***;
exports.convert = (value, { context = "The provided value" ***REMOVED*** = {***REMOVED***) => {
  if (exports.is(value)) {
    return utils.implForWrapper(value);
  ***REMOVED***
  throw new TypeError(`${context***REMOVED*** is not of type 'File'.`);
***REMOVED***;

function makeWrapper(globalObject) {
  if (globalObject[ctorRegistrySymbol] === undefined) {
    throw new Error("Internal error: invalid global object");
  ***REMOVED***

  const ctor = globalObject[ctorRegistrySymbol]["File"];
  if (ctor === undefined) {
    throw new Error("Internal error: constructor File is not installed on the passed global object");
  ***REMOVED***

  return Object.create(ctor.prototype);
***REMOVED***

exports.create = (globalObject, constructorArgs, privateData) => {
  const wrapper = makeWrapper(globalObject);
  return exports.setup(wrapper, globalObject, constructorArgs, privateData);
***REMOVED***;

exports.createImpl = (globalObject, constructorArgs, privateData) => {
  const wrapper = exports.create(globalObject, constructorArgs, privateData);
  return utils.implForWrapper(wrapper);
***REMOVED***;

exports._internalSetup = (wrapper, globalObject) => {
  Blob._internalSetup(wrapper, globalObject);
***REMOVED***;

exports.setup = (wrapper, globalObject, constructorArgs = [], privateData = {***REMOVED***) => {
  privateData.wrapper = wrapper;

  exports._internalSetup(wrapper, globalObject);
  Object.defineProperty(wrapper, implSymbol, {
    value: new Impl.implementation(globalObject, constructorArgs, privateData),
    configurable: true
  ***REMOVED***);

  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;
  if (Impl.init) {
    Impl.init(wrapper[implSymbol]);
  ***REMOVED***
  return wrapper;
***REMOVED***;

exports.new = globalObject => {
  const wrapper = makeWrapper(globalObject);

  exports._internalSetup(wrapper, globalObject);
  Object.defineProperty(wrapper, implSymbol, {
    value: Object.create(Impl.implementation.prototype),
    configurable: true
  ***REMOVED***);

  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;
  if (Impl.init) {
    Impl.init(wrapper[implSymbol]);
  ***REMOVED***
  return wrapper[implSymbol];
***REMOVED***;

const exposed = new Set(["Window", "Worker"]);

exports.install = (globalObject, globalNames) => {
  if (!globalNames.some(globalName => exposed.has(globalName))) {
    return;
  ***REMOVED***

  if (globalObject.Blob === undefined) {
    throw new Error("Internal error: attempting to evaluate File before Blob");
  ***REMOVED***
  class File extends globalObject.Blob {
    constructor(fileBits, fileName) {
      if (arguments.length < 2) {
        throw new TypeError(
          "Failed to construct 'File': 2 arguments required, but only " + arguments.length + " present."
        );
      ***REMOVED***
      const args = [];
      {
        let curArg = arguments[0];
        if (!utils.isObject(curArg)) {
          throw new TypeError("Failed to construct 'File': parameter 1" + " is not an iterable object.");
        ***REMOVED*** else {
          const V = [];
          const tmp = curArg;
          for (let nextItem of tmp) {
            if (Blob.is(nextItem)) {
              nextItem = utils.implForWrapper(nextItem);
            ***REMOVED*** else if (utils.isArrayBuffer(nextItem)) {
            ***REMOVED*** else if (ArrayBuffer.isView(nextItem)) {
            ***REMOVED*** else {
              nextItem = conversions["USVString"](nextItem, {
                context: "Failed to construct 'File': parameter 1" + "'s element"
              ***REMOVED***);
            ***REMOVED***
            V.push(nextItem);
          ***REMOVED***
          curArg = V;
        ***REMOVED***
        args.push(curArg);
      ***REMOVED***
      {
        let curArg = arguments[1];
        curArg = conversions["USVString"](curArg, { context: "Failed to construct 'File': parameter 2" ***REMOVED***);
        args.push(curArg);
      ***REMOVED***
      {
        let curArg = arguments[2];
        curArg = FilePropertyBag.convert(curArg, { context: "Failed to construct 'File': parameter 3" ***REMOVED***);
        args.push(curArg);
      ***REMOVED***
      return exports.setup(Object.create(new.target.prototype), globalObject, args);
    ***REMOVED***

    get name() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new TypeError("'get name' called on an object that is not a valid instance of File.");
      ***REMOVED***

      return esValue[implSymbol]["name"];
    ***REMOVED***

    get lastModified() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new TypeError("'get lastModified' called on an object that is not a valid instance of File.");
      ***REMOVED***

      return esValue[implSymbol]["lastModified"];
    ***REMOVED***
  ***REMOVED***
  Object.defineProperties(File.prototype, {
    name: { enumerable: true ***REMOVED***,
    lastModified: { enumerable: true ***REMOVED***,
    [Symbol.toStringTag]: { value: "File", configurable: true ***REMOVED***
  ***REMOVED***);
  if (globalObject[ctorRegistrySymbol] === undefined) {
    globalObject[ctorRegistrySymbol] = Object.create(null);
  ***REMOVED***
  globalObject[ctorRegistrySymbol][interfaceName] = File;

  Object.defineProperty(globalObject, interfaceName, {
    configurable: true,
    writable: true,
    value: File
  ***REMOVED***);
***REMOVED***;

const Impl = require("../file-api/File-impl.js");
