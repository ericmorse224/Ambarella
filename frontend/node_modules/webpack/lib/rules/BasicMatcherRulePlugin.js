/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

/** @typedef {import("../../declarations/WebpackOptions").RuleSetConditionOrConditions***REMOVED*** RuleSetConditionOrConditions */
/** @typedef {import("../../declarations/WebpackOptions").RuleSetConditionOrConditionsAbsolute***REMOVED*** RuleSetConditionOrConditionsAbsolute */
/** @typedef {import("../../declarations/WebpackOptions").RuleSetLoaderOptions***REMOVED*** RuleSetLoaderOptions */
/** @typedef {import("../../declarations/WebpackOptions").RuleSetRule***REMOVED*** RuleSetRule */
/** @typedef {import("./RuleSetCompiler")***REMOVED*** RuleSetCompiler */
/** @typedef {import("./RuleSetCompiler").RuleCondition***REMOVED*** RuleCondition */

/**
 * @template T
 * @template {T[keyof T]***REMOVED*** V
 * @typedef {import("./RuleSetCompiler").KeysOfTypes<T, V>***REMOVED*** KeysOfTypes
 */

/** @typedef {KeysOfTypes<RuleSetRule, RuleSetConditionOrConditions | RuleSetConditionOrConditionsAbsolute>***REMOVED*** BasicMatcherRuleKeys */

class BasicMatcherRulePlugin {
	/**
	 * @param {BasicMatcherRuleKeys***REMOVED*** ruleProperty the rule property
	 * @param {string=***REMOVED*** dataProperty the data property
	 * @param {boolean=***REMOVED*** invert if true, inverts the condition
	 */
	constructor(ruleProperty, dataProperty, invert) {
		this.ruleProperty = ruleProperty;
		this.dataProperty = dataProperty || ruleProperty;
		this.invert = invert || false;
	***REMOVED***

	/**
	 * @param {RuleSetCompiler***REMOVED*** ruleSetCompiler the rule set compiler
	 * @returns {void***REMOVED***
	 */
	apply(ruleSetCompiler) {
		ruleSetCompiler.hooks.rule.tap(
			"BasicMatcherRulePlugin",
			(path, rule, unhandledProperties, result) => {
				if (unhandledProperties.has(this.ruleProperty)) {
					unhandledProperties.delete(this.ruleProperty);
					const value = rule[this.ruleProperty];
					const condition = ruleSetCompiler.compileCondition(
						`${path***REMOVED***.${this.ruleProperty***REMOVED***`,
						/** @type {RuleSetConditionOrConditions | RuleSetConditionOrConditionsAbsolute***REMOVED*** */
						(value)
					);
					const fn = condition.fn;
					result.conditions.push({
						property: this.dataProperty,
						matchWhenEmpty: this.invert
							? !condition.matchWhenEmpty
							: condition.matchWhenEmpty,
						fn: this.invert ? v => !fn(v) : fn
					***REMOVED***);
				***REMOVED***
			***REMOVED***
		);
	***REMOVED***
***REMOVED***

module.exports = BasicMatcherRulePlugin;
