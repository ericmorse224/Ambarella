/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Ivan Kopeykin @vankop
*/

"use strict";

const makeSerializable = require("../util/makeSerializable");
const CachedConstDependency = require("./CachedConstDependency");
const ExternalModuleInitFragment = require("./ExternalModuleInitFragment");

/** @typedef {import("webpack-sources").ReplaceSource***REMOVED*** ReplaceSource */
/** @typedef {import("../Dependency")***REMOVED*** Dependency */
/** @typedef {import("../Dependency").UpdateHashContext***REMOVED*** UpdateHashContext */
/** @typedef {import("../DependencyTemplate").DependencyTemplateContext***REMOVED*** DependencyTemplateContext */
/** @typedef {import("../javascript/JavascriptModulesPlugin").ChunkRenderContext***REMOVED*** ChunkRenderContext */
/** @typedef {import("../javascript/JavascriptParser").Range***REMOVED*** Range */
/** @typedef {import("../serialization/ObjectMiddleware").ObjectDeserializerContext***REMOVED*** ObjectDeserializerContext */
/** @typedef {import("../serialization/ObjectMiddleware").ObjectSerializerContext***REMOVED*** ObjectSerializerContext */
/** @typedef {import("../util/Hash")***REMOVED*** Hash */

class ExternalModuleDependency extends CachedConstDependency {
	/**
	 * @param {string***REMOVED*** module module
	 * @param {{ name: string, value: string ***REMOVED***[]***REMOVED*** importSpecifiers import specifiers
	 * @param {string | undefined***REMOVED*** defaultImport default import
	 * @param {string***REMOVED*** expression expression
	 * @param {Range***REMOVED*** range range
	 * @param {string***REMOVED*** identifier identifier
	 */
	constructor(
		module,
		importSpecifiers,
		defaultImport,
		expression,
		range,
		identifier
	) {
		super(expression, range, identifier);

		this.importedModule = module;
		this.specifiers = importSpecifiers;
		this.default = defaultImport;
	***REMOVED***

	/**
	 * @returns {string***REMOVED*** hash update
	 */
	_createHashUpdate() {
		return `${this.importedModule***REMOVED***${JSON.stringify(this.specifiers)***REMOVED***${
			this.default || "null"
		***REMOVED***${super._createHashUpdate()***REMOVED***`;
	***REMOVED***

	/**
	 * @param {ObjectSerializerContext***REMOVED*** context context
	 */
	serialize(context) {
		super.serialize(context);
		const { write ***REMOVED*** = context;
		write(this.importedModule);
		write(this.specifiers);
		write(this.default);
	***REMOVED***

	/**
	 * @param {ObjectDeserializerContext***REMOVED*** context context
	 */
	deserialize(context) {
		super.deserialize(context);
		const { read ***REMOVED*** = context;
		this.importedModule = read();
		this.specifiers = read();
		this.default = read();
	***REMOVED***
***REMOVED***

makeSerializable(
	ExternalModuleDependency,
	"webpack/lib/dependencies/ExternalModuleDependency"
);

ExternalModuleDependency.Template = class ExternalModuleDependencyTemplate extends (
	CachedConstDependency.Template
) {
	/**
	 * @param {Dependency***REMOVED*** dependency the dependency for which the template should be applied
	 * @param {ReplaceSource***REMOVED*** source the current replace source which can be modified
	 * @param {DependencyTemplateContext***REMOVED*** templateContext the context object
	 * @returns {void***REMOVED***
	 */
	apply(dependency, source, templateContext) {
		super.apply(dependency, source, templateContext);
		const dep = /** @type {ExternalModuleDependency***REMOVED*** */ (dependency);
		const { chunkInitFragments, runtimeTemplate ***REMOVED*** = templateContext;

		chunkInitFragments.push(
			new ExternalModuleInitFragment(
				`${runtimeTemplate.supportNodePrefixForCoreModules() ? "node:" : ""***REMOVED***${
					dep.importedModule
				***REMOVED***`,
				dep.specifiers,
				dep.default
			)
		);
	***REMOVED***
***REMOVED***;

module.exports = ExternalModuleDependency;
