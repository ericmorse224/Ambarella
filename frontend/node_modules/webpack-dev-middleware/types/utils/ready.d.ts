/// <reference types="node" />
export = ready;
/** @typedef {import("../index.js").IncomingMessage***REMOVED*** IncomingMessage */
/** @typedef {import("../index.js").ServerResponse***REMOVED*** ServerResponse */
/**
 * @template {IncomingMessage***REMOVED*** Request
 * @template {ServerResponse***REMOVED*** Response
 * @param {import("../index.js").Context<Request, Response>***REMOVED*** context
 * @param {(...args: any[]) => any***REMOVED*** callback
 * @param {Request***REMOVED*** [req]
 * @returns {void***REMOVED***
 */
declare function ready<
  Request_1 extends import("http").IncomingMessage,
  Response_1 extends import("../index.js").ServerResponse
>(
  context: import("../index.js").Context<Request_1, Response_1>,
  callback: (...args: any[]) => any,
  req?: Request_1 | undefined
): void;
declare namespace ready {
  export { IncomingMessage, ServerResponse ***REMOVED***;
***REMOVED***
type IncomingMessage = import("../index.js").IncomingMessage;
type ServerResponse = import("../index.js").ServerResponse;
