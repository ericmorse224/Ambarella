'use strict';
const charset = 'charset';
// eslint-disable-next-line no-control-regex
const nonAscii = /[^\x00-\x7F]/;

/**
 * @typedef {{add?: boolean***REMOVED******REMOVED*** Options
 */
/**
 * @type {import('postcss').PluginCreator<Options>***REMOVED***
 * @param {Options***REMOVED*** opts
 * @return {import('postcss').Plugin***REMOVED***
 */
function pluginCreator(opts = {***REMOVED***) {
  return {
    postcssPlugin: 'postcss-normalize-' + charset,

    OnceExit(css, { AtRule ***REMOVED***) {
      /** @type {import('postcss').AtRule | undefined***REMOVED*** */
      let charsetRule;
      /** @type {import('postcss').Node | undefined***REMOVED*** */
      let nonAsciiNode;

      css.walk((node) => {
        if (node.type === 'atrule' && node.name === charset) {
          if (!charsetRule) {
            charsetRule = node;
          ***REMOVED***
          node.remove();
        ***REMOVED*** else if (
          !nonAsciiNode &&
          node.parent === css &&
          nonAscii.test(node.toString())
        ) {
          nonAsciiNode = node;
        ***REMOVED***
      ***REMOVED***);

      if (nonAsciiNode) {
        if (!charsetRule && opts.add !== false) {
          charsetRule = new AtRule({
            name: charset,
            params: '"utf-8"',
          ***REMOVED***);
        ***REMOVED***
        if (charsetRule) {
          charsetRule.source = nonAsciiNode.source;
          css.prepend(charsetRule);
        ***REMOVED***
      ***REMOVED***
    ***REMOVED***,
  ***REMOVED***;
***REMOVED***

pluginCreator.postcss = true;
module.exports = pluginCreator;
