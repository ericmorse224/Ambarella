const MAX_SHORT_STRING = require("./wasm-hash").MAX_SHORT_STRING;

class BatchedHash {
  constructor(hash) {
    this.string = undefined;
    this.encoding = undefined;
    this.hash = hash;
  ***REMOVED***

  /**
   * Update hash {@link https://nodejs.org/api/crypto.html#crypto_hash_update_data_inputencoding***REMOVED***
   * @param {string|Buffer***REMOVED*** data data
   * @param {string=***REMOVED*** inputEncoding data encoding
   * @returns {this***REMOVED*** updated hash
   */
  update(data, inputEncoding) {
    if (this.string !== undefined) {
      if (
        typeof data === "string" &&
        inputEncoding === this.encoding &&
        this.string.length + data.length < MAX_SHORT_STRING
      ) {
        this.string += data;

        return this;
      ***REMOVED***

      this.hash.update(this.string, this.encoding);
      this.string = undefined;
    ***REMOVED***

    if (typeof data === "string") {
      if (
        data.length < MAX_SHORT_STRING &&
        // base64 encoding is not valid since it may contain padding chars
        (!inputEncoding || !inputEncoding.startsWith("ba"))
      ) {
        this.string = data;
        this.encoding = inputEncoding;
      ***REMOVED*** else {
        this.hash.update(data, inputEncoding);
      ***REMOVED***
    ***REMOVED*** else {
      this.hash.update(data);
    ***REMOVED***

    return this;
  ***REMOVED***

  /**
   * Calculates the digest {@link https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding***REMOVED***
   * @param {string=***REMOVED*** encoding encoding of the return value
   * @returns {string|Buffer***REMOVED*** digest
   */
  digest(encoding) {
    if (this.string !== undefined) {
      this.hash.update(this.string, this.encoding);
    ***REMOVED***

    return this.hash.digest(encoding);
  ***REMOVED***
***REMOVED***

module.exports = BatchedHash;
