/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const { ConcatSource ***REMOVED*** = require("webpack-sources");
const RuntimeGlobals = require("../RuntimeGlobals");
const Template = require("../Template");
const ConcatenatedModule = require("../optimize/ConcatenatedModule");
const propertyAccess = require("../util/propertyAccess");
const AbstractLibraryPlugin = require("./AbstractLibraryPlugin");

/** @typedef {import("webpack-sources").Source***REMOVED*** Source */
/** @typedef {import("../../declarations/WebpackOptions").LibraryOptions***REMOVED*** LibraryOptions */
/** @typedef {import("../../declarations/WebpackOptions").LibraryType***REMOVED*** LibraryType */
/** @typedef {import("../Chunk")***REMOVED*** Chunk */
/** @typedef {import("../Compilation").ChunkHashContext***REMOVED*** ChunkHashContext */
/** @typedef {import("../Compiler")***REMOVED*** Compiler */
/** @typedef {import("../Module")***REMOVED*** Module */
/** @typedef {import("../Module").BuildMeta***REMOVED*** BuildMeta */
/** @typedef {import("../javascript/JavascriptModulesPlugin").StartupRenderContext***REMOVED*** StartupRenderContext */
/** @typedef {import("../util/Hash")***REMOVED*** Hash */

/**
 * @template T
 * @typedef {import("./AbstractLibraryPlugin").LibraryContext<T>***REMOVED*** LibraryContext<T>
 */

/**
 * @typedef {object***REMOVED*** ModuleLibraryPluginOptions
 * @property {LibraryType***REMOVED*** type
 */

/**
 * @typedef {object***REMOVED*** ModuleLibraryPluginParsed
 * @property {string***REMOVED*** name
 * @property {string | string[]=***REMOVED*** export
 */

const PLUGIN_NAME = "ModuleLibraryPlugin";

/**
 * @typedef {ModuleLibraryPluginParsed***REMOVED*** T
 * @extends {AbstractLibraryPlugin<ModuleLibraryPluginParsed>***REMOVED***
 */
class ModuleLibraryPlugin extends AbstractLibraryPlugin {
	/**
	 * @param {ModuleLibraryPluginOptions***REMOVED*** options the plugin options
	 */
	constructor(options) {
		super({
			pluginName: "ModuleLibraryPlugin",
			type: options.type
		***REMOVED***);
	***REMOVED***

	/**
	 * Apply the plugin
	 * @param {Compiler***REMOVED*** compiler the compiler instance
	 * @returns {void***REMOVED***
	 */
	apply(compiler) {
		super.apply(compiler);

		compiler.hooks.thisCompilation.tap(PLUGIN_NAME, compilation => {
			const { exportsDefinitions ***REMOVED*** =
				ConcatenatedModule.getCompilationHooks(compilation);
			exportsDefinitions.tap(PLUGIN_NAME, (definitions, module) => {
				// If we have connections not all modules were concatenated, so we need the wrapper
				const connections =
					compilation.moduleGraph.getIncomingConnections(module);

				for (const connection of connections) {
					if (connection.originModule) {
						return false;
					***REMOVED***
				***REMOVED***

				// Runtime and splitting chunks now requires the wrapper too
				for (const chunk of compilation.chunkGraph.getModuleChunksIterable(
					module
				)) {
					if (!chunk.hasRuntime()) {
						return false;
					***REMOVED***
				***REMOVED***

				return true;
			***REMOVED***);
		***REMOVED***);
	***REMOVED***

	/**
	 * @param {LibraryOptions***REMOVED*** library normalized library option
	 * @returns {T | false***REMOVED*** preprocess as needed by overriding
	 */
	parseOptions(library) {
		const { name ***REMOVED*** = library;
		if (name) {
			throw new Error(
				`Library name must be unset. ${AbstractLibraryPlugin.COMMON_LIBRARY_NAME_MESSAGE***REMOVED***`
			);
		***REMOVED***
		const _name = /** @type {string***REMOVED*** */ (name);
		return {
			name: _name,
			export: library.export
		***REMOVED***;
	***REMOVED***

	/**
	 * @param {Source***REMOVED*** source source
	 * @param {Module***REMOVED*** module module
	 * @param {StartupRenderContext***REMOVED*** renderContext render context
	 * @param {LibraryContext<T>***REMOVED*** libraryContext context
	 * @returns {Source***REMOVED*** source with library export
	 */
	renderStartup(
		source,
		module,
		{ moduleGraph, chunk, codeGenerationResults ***REMOVED***,
		{ options, compilation ***REMOVED***
	) {
		const result = new ConcatSource(source);
		const exportsInfo = options.export
			? [
					moduleGraph.getExportInfo(
						module,
						Array.isArray(options.export) ? options.export[0] : options.export
					)
				]
			: moduleGraph.getExportsInfo(module).orderedExports;
		const definitions =
			/** @type {BuildMeta***REMOVED*** */
			(module.buildMeta).exportsFinalName || {***REMOVED***;
		/** @type {string[]***REMOVED*** */
		const shortHandedExports = [];
		/** @type {[string, string][]***REMOVED*** */
		const exports = [];
		const isAsync = moduleGraph.isAsync(module);

		if (isAsync) {
			result.add(
				`${RuntimeGlobals.exports***REMOVED*** = await ${RuntimeGlobals.exports***REMOVED***;\n`
			);
		***REMOVED***

		const varType = compilation.outputOptions.environment.const
			? "const"
			: "var";

		for (const exportInfo of exportsInfo) {
			if (!exportInfo.provided) continue;

			let shouldContinue = false;

			const reexport = exportInfo.findTarget(moduleGraph, _m => true);

			if (reexport) {
				const exp = moduleGraph.getExportsInfo(reexport.module);

				for (const reexportInfo of exp.orderedExports) {
					if (
						reexportInfo.provided === false &&
						reexportInfo.name !== "default" &&
						reexportInfo.name === /** @type {string[]***REMOVED*** */ (reexport.export)[0]
					) {
						shouldContinue = true;
					***REMOVED***
				***REMOVED***
			***REMOVED***

			if (shouldContinue) continue;

			const originalName = exportInfo.name;
			const usedName =
				/** @type {string***REMOVED*** */
				(exportInfo.getUsedName(originalName, chunk.runtime));
			/** @type {string | undefined***REMOVED*** */
			const definition = definitions[usedName];
			const finalName =
				definition ||
				`${RuntimeGlobals.exports***REMOVED***${Template.toIdentifier(originalName)***REMOVED***`;

			if (!definition) {
				result.add(
					`${varType***REMOVED*** ${finalName***REMOVED*** = ${RuntimeGlobals.exports***REMOVED***${propertyAccess([
						usedName
					])***REMOVED***;\n`
				);
			***REMOVED***

			if (
				finalName &&
				(finalName.includes(".") ||
					finalName.includes("[") ||
					finalName.includes("("))
			) {
				if (exportInfo.isReexport()) {
					const { data ***REMOVED*** = codeGenerationResults.get(module, chunk.runtime);
					const topLevelDeclarations =
						(data && data.get("topLevelDeclarations")) ||
						(module.buildInfo && module.buildInfo.topLevelDeclarations);

					if (topLevelDeclarations && topLevelDeclarations.has(originalName)) {
						const name = `${RuntimeGlobals.exports***REMOVED***${Template.toIdentifier(originalName)***REMOVED***`;
						result.add(`${varType***REMOVED*** ${name***REMOVED*** = ${finalName***REMOVED***;\n`);
						shortHandedExports.push(`${name***REMOVED*** as ${originalName***REMOVED***`);
					***REMOVED*** else {
						exports.push([originalName, finalName]);
					***REMOVED***
				***REMOVED*** else {
					exports.push([originalName, finalName]);
				***REMOVED***
			***REMOVED*** else {
				shortHandedExports.push(
					definition && finalName === originalName
						? finalName
						: `${finalName***REMOVED*** as ${originalName***REMOVED***`
				);
			***REMOVED***
		***REMOVED***

		if (shortHandedExports.length > 0) {
			result.add(`export { ${shortHandedExports.join(", ")***REMOVED*** ***REMOVED***;\n`);
		***REMOVED***

		for (const [exportName, final] of exports) {
			result.add(`export ${varType***REMOVED*** ${exportName***REMOVED*** = ${final***REMOVED***;\n`);
		***REMOVED***

		return result;
	***REMOVED***
***REMOVED***

module.exports = ModuleLibraryPlugin;
