'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
***REMOVED***);
exports.default = void 0;

function _assert() {
  const data = _interopRequireDefault(require('assert'));

  _assert = function () {
    return data;
  ***REMOVED***;

  return data;
***REMOVED***

function _console() {
  const data = require('console');

  _console = function () {
    return data;
  ***REMOVED***;

  return data;
***REMOVED***

function _util() {
  const data = require('util');

  _util = function () {
    return data;
  ***REMOVED***;

  return data;
***REMOVED***

function _chalk() {
  const data = _interopRequireDefault(require('chalk'));

  _chalk = function () {
    return data;
  ***REMOVED***;

  return data;
***REMOVED***

function _jestUtil() {
  const data = require('jest-util');

  _jestUtil = function () {
    return data;
  ***REMOVED***;

  return data;
***REMOVED***

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {default: obj***REMOVED***;
***REMOVED***

/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
class BufferedConsole extends _console().Console {
  _buffer = [];
  _counters = {***REMOVED***;
  _timers = {***REMOVED***;
  _groupDepth = 0;
  Console = _console().Console;

  constructor() {
    super({
      write: message => {
        BufferedConsole.write(this._buffer, 'log', message, null);
        return true;
      ***REMOVED***
    ***REMOVED***);
  ***REMOVED***

  static write(buffer, type, message, level) {
    const stackLevel = level != null ? level : 2;
    const rawStack = new (_jestUtil().ErrorWithStack)(
      undefined,
      BufferedConsole.write
    ).stack;
    invariant(rawStack, 'always have a stack trace');
    const origin = rawStack
      .split('\n')
      .slice(stackLevel)
      .filter(Boolean)
      .join('\n');
    buffer.push({
      message,
      origin,
      type
    ***REMOVED***);
    return buffer;
  ***REMOVED***

  _log(type, message) {
    BufferedConsole.write(
      this._buffer,
      type,
      '  '.repeat(this._groupDepth) + message,
      3
    );
  ***REMOVED***

  assert(value, message) {
    try {
      (0, _assert().default)(value, message);
    ***REMOVED*** catch (error) {
      this._log('assert', error.toString());
    ***REMOVED***
  ***REMOVED***

  count(label = 'default') {
    if (!this._counters[label]) {
      this._counters[label] = 0;
    ***REMOVED***

    this._log(
      'count',
      (0, _util().format)(`${label***REMOVED***: ${++this._counters[label]***REMOVED***`)
    );
  ***REMOVED***

  countReset(label = 'default') {
    this._counters[label] = 0;
  ***REMOVED***

  debug(firstArg, ...rest) {
    this._log('debug', (0, _util().format)(firstArg, ...rest));
  ***REMOVED***

  dir(firstArg, options = {***REMOVED***) {
    const representation = (0, _util().inspect)(firstArg, options);

    this._log('dir', (0, _util().formatWithOptions)(options, representation));
  ***REMOVED***

  dirxml(firstArg, ...rest) {
    this._log('dirxml', (0, _util().format)(firstArg, ...rest));
  ***REMOVED***

  error(firstArg, ...rest) {
    this._log('error', (0, _util().format)(firstArg, ...rest));
  ***REMOVED***

  group(title, ...rest) {
    this._groupDepth++;

    if (title || rest.length > 0) {
      this._log(
        'group',
        _chalk().default.bold((0, _util().format)(title, ...rest))
      );
    ***REMOVED***
  ***REMOVED***

  groupCollapsed(title, ...rest) {
    this._groupDepth++;

    if (title || rest.length > 0) {
      this._log(
        'groupCollapsed',
        _chalk().default.bold((0, _util().format)(title, ...rest))
      );
    ***REMOVED***
  ***REMOVED***

  groupEnd() {
    if (this._groupDepth > 0) {
      this._groupDepth--;
    ***REMOVED***
  ***REMOVED***

  info(firstArg, ...rest) {
    this._log('info', (0, _util().format)(firstArg, ...rest));
  ***REMOVED***

  log(firstArg, ...rest) {
    this._log('log', (0, _util().format)(firstArg, ...rest));
  ***REMOVED***

  time(label = 'default') {
    if (this._timers[label]) {
      return;
    ***REMOVED***

    this._timers[label] = new Date();
  ***REMOVED***

  timeEnd(label = 'default') {
    const startTime = this._timers[label];

    if (startTime) {
      const endTime = new Date();
      const time = endTime.getTime() - startTime.getTime();

      this._log(
        'time',
        (0, _util().format)(`${label***REMOVED***: ${(0, _jestUtil().formatTime)(time)***REMOVED***`)
      );

      delete this._timers[label];
    ***REMOVED***
  ***REMOVED***

  timeLog(label = 'default', ...data) {
    const startTime = this._timers[label];

    if (startTime) {
      const endTime = new Date();
      const time = endTime.getTime() - startTime.getTime();

      this._log(
        'time',
        (0, _util().format)(
          `${label***REMOVED***: ${(0, _jestUtil().formatTime)(time)***REMOVED***`,
          ...data
        )
      );
    ***REMOVED***
  ***REMOVED***

  warn(firstArg, ...rest) {
    this._log('warn', (0, _util().format)(firstArg, ...rest));
  ***REMOVED***

  getBuffer() {
    return this._buffer.length ? this._buffer : undefined;
  ***REMOVED***
***REMOVED***

exports.default = BufferedConsole;

function invariant(condition, message) {
  if (!condition) {
    throw new Error(message);
  ***REMOVED***
***REMOVED***
