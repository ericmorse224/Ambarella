/*
  Copyright 2020 Google LLC

  Use of this source code is governed by an MIT-style
  license that can be found in the LICENSE file or at
  https://opensource.org/licenses/MIT.
*/
import { warmStrategyCache ***REMOVED*** from './warmStrategyCache';
import { registerRoute ***REMOVED*** from 'workbox-routing/registerRoute.js';
import { StaleWhileRevalidate ***REMOVED*** from 'workbox-strategies/StaleWhileRevalidate.js';
import { CacheableResponsePlugin ***REMOVED*** from 'workbox-cacheable-response/CacheableResponsePlugin.js';
import './_version.js';
/**
 * An implementation of the [CSS and JavaScript files recipe]{@link https://developers.google.com/web/tools/workbox/guides/common-recipes#cache_css_and_javascript_files***REMOVED***
 *
 * @memberof workbox-recipes
 *
 * @param {Object***REMOVED*** [options]
 * @param {string***REMOVED*** [options.cacheName] Name for cache. Defaults to static-resources
 * @param {RouteMatchCallback***REMOVED*** [options.matchCallback] Workbox callback function to call to match to. Defaults to request.destination === 'style' || request.destination === 'script' || request.destination === 'worker';
 * @param {WorkboxPlugin[]***REMOVED*** [options.plugins] Additional plugins to use for this recipe
 * @param {string[]***REMOVED*** [options.warmCache] Paths to call to use to warm this cache
 */
function staticResourceCache(options = {***REMOVED***) {
    const defaultMatchCallback = ({ request ***REMOVED***) => request.destination === 'style' ||
        request.destination === 'script' ||
        request.destination === 'worker';
    const cacheName = options.cacheName || 'static-resources';
    const matchCallback = options.matchCallback || defaultMatchCallback;
    const plugins = options.plugins || [];
    plugins.push(new CacheableResponsePlugin({
        statuses: [0, 200],
    ***REMOVED***));
    const strategy = new StaleWhileRevalidate({
        cacheName,
        plugins,
    ***REMOVED***);
    registerRoute(matchCallback, strategy);
    // Warms the cache
    if (options.warmCache) {
        warmStrategyCache({ urls: options.warmCache, strategy ***REMOVED***);
    ***REMOVED***
***REMOVED***
export { staticResourceCache ***REMOVED***;
