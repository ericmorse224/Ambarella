'use strict';

var test = require('tape');

var hasNames = require('../');

test('named functions', function (t) {
	function f() {***REMOVED*** // eslint-disable-line func-style
	var g = function h() {***REMOVED***;

	t.equal(typeof hasNames, 'function', 'is a function');
	t.equal(hasNames(), f.name === 'f' && g.name === 'h', 'functions have names or not as expected');

	t.end();
***REMOVED***);

var oDP = Object.defineProperty;
if (oDP) {
	try {
		oDP({***REMOVED***, 'a', { value: 1 ***REMOVED***);
	***REMOVED*** catch (e) {
		oDP = null;
	***REMOVED***
***REMOVED***

test('functionsHaveConfigurableNames', function (t) {
	t.equal(typeof hasNames.functionsHaveConfigurableNames, 'function', 'is a function');

	if (hasNames()) {
		var fn = function f() {***REMOVED***;
		if (oDP) {
			try {
				oDP(fn, 'name', { configurable: true, value: 'foo' ***REMOVED***);
			***REMOVED*** catch (e) {***REMOVED***
			if (fn.name === 'f') {
				t.equal(hasNames.functionsHaveConfigurableNames(), false, 'function names are not configurable');
			***REMOVED*** else if (fn.name === 'foo') {
				t.equal(hasNames.functionsHaveConfigurableNames(), true, 'function names are not configurable');
			***REMOVED*** else {
				t.fail('functions have names, but something surprising has happened. Please report this!');
			***REMOVED***
		***REMOVED*** else {
			t.equal(hasNames.functionsHaveConfigurableNames(), false, 'function names are not configurable');
		***REMOVED***
	***REMOVED*** else {
		t.equal(hasNames.functionsHaveConfigurableNames(), false, 'functions do not have names');
	***REMOVED***

	t.end();
***REMOVED***);

test('boundFunctionsHaveNames', function (t) {
	t.equal(typeof hasNames.boundFunctionsHaveNames, 'function', 'is a function');

	var fn = function f() {***REMOVED***;
	if (typeof fn.bind !== 'function') {
		t.equal(hasNames.boundFunctionsHaveNames(), false, 'bound functions do not have names, because .bind does not exist');
	***REMOVED*** else if (hasNames()) {
		t.equal(hasNames.boundFunctionsHaveNames(), fn.bind().name !== '', 'bound functions have names');
	***REMOVED*** else {
		t.equal(hasNames.boundFunctionsHaveNames(), false, 'bound functions do not have names, because none do');
	***REMOVED***

	t.end();
***REMOVED***);
