/*
	MIT License http://www.opensource.org/licenses/mit-license.php
*/

"use strict";

const RuntimeGlobals = require("../RuntimeGlobals");
const Template = require("../Template");
const HelperRuntimeModule = require("./HelperRuntimeModule");

/** @typedef {import("../Compilation")***REMOVED*** Compilation */
/** @typedef {import("../Module").ReadOnlyRuntimeRequirements***REMOVED*** ReadOnlyRuntimeRequirements */

class GetTrustedTypesPolicyRuntimeModule extends HelperRuntimeModule {
	/**
	 * @param {ReadOnlyRuntimeRequirements***REMOVED*** runtimeRequirements runtime requirements
	 */
	constructor(runtimeRequirements) {
		super("trusted types policy");
		this.runtimeRequirements = runtimeRequirements;
	***REMOVED***

	/**
	 * @returns {string | null***REMOVED*** runtime code
	 */
	generate() {
		const compilation = /** @type {Compilation***REMOVED*** */ (this.compilation);
		const { runtimeTemplate, outputOptions ***REMOVED*** = compilation;
		const { trustedTypes ***REMOVED*** = outputOptions;
		const fn = RuntimeGlobals.getTrustedTypesPolicy;
		const wrapPolicyCreationInTryCatch = trustedTypes
			? trustedTypes.onPolicyCreationFailure === "continue"
			: false;

		return Template.asString([
			"var policy;",
			`${fn***REMOVED*** = ${runtimeTemplate.basicFunction("", [
				"// Create Trusted Type policy if Trusted Types are available and the policy doesn't exist yet.",
				"if (policy === undefined) {",
				Template.indent([
					"policy = {",
					Template.indent(
						[
							...(this.runtimeRequirements.has(RuntimeGlobals.createScript)
								? [
										`createScript: ${runtimeTemplate.returningFunction(
											"script",
											"script"
										)***REMOVED***`
									]
								: []),
							...(this.runtimeRequirements.has(RuntimeGlobals.createScriptUrl)
								? [
										`createScriptURL: ${runtimeTemplate.returningFunction(
											"url",
											"url"
										)***REMOVED***`
									]
								: [])
						].join(",\n")
					),
					"***REMOVED***;",
					...(trustedTypes
						? [
								'if (typeof trustedTypes !== "undefined" && trustedTypes.createPolicy) {',
								Template.indent([
									...(wrapPolicyCreationInTryCatch ? ["try {"] : []),
									...[
										`policy = trustedTypes.createPolicy(${JSON.stringify(
											trustedTypes.policyName
										)***REMOVED***, policy);`
									].map(line =>
										wrapPolicyCreationInTryCatch ? Template.indent(line) : line
									),
									...(wrapPolicyCreationInTryCatch
										? [
												"***REMOVED*** catch (e) {",
												Template.indent([
													`console.warn('Could not create trusted-types policy ${JSON.stringify(
														trustedTypes.policyName
													)***REMOVED***');`
												]),
												"***REMOVED***"
											]
										: [])
								]),
								"***REMOVED***"
							]
						: [])
				]),
				"***REMOVED***",
				"return policy;"
			])***REMOVED***;`
		]);
	***REMOVED***
***REMOVED***

module.exports = GetTrustedTypesPolicyRuntimeModule;
