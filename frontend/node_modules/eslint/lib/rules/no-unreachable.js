/**
 * @fileoverview Checks for unreachable code due to return, throws, break, and continue.
 * @author Joel Feenstra
 */
"use strict";

//------------------------------------------------------------------------------
// Helpers
//------------------------------------------------------------------------------

/**
 * @typedef {Object***REMOVED*** ConstructorInfo
 * @property {ConstructorInfo | null***REMOVED*** upper Info about the constructor that encloses this constructor.
 * @property {boolean***REMOVED*** hasSuperCall The flag about having `super()` expressions.
 */

/**
 * Checks whether or not a given variable declarator has the initializer.
 * @param {ASTNode***REMOVED*** node A VariableDeclarator node to check.
 * @returns {boolean***REMOVED*** `true` if the node has the initializer.
 */
function isInitialized(node) {
	return Boolean(node.init);
***REMOVED***

/**
 * Checks all segments in a set and returns true if all are unreachable.
 * @param {Set<CodePathSegment>***REMOVED*** segments The segments to check.
 * @returns {boolean***REMOVED*** True if all segments are unreachable; false otherwise.
 */
function areAllSegmentsUnreachable(segments) {
	for (const segment of segments) {
		if (segment.reachable) {
			return false;
		***REMOVED***
	***REMOVED***

	return true;
***REMOVED***

/**
 * The class to distinguish consecutive unreachable statements.
 */
class ConsecutiveRange {
	constructor(sourceCode) {
		this.sourceCode = sourceCode;
		this.startNode = null;
		this.endNode = null;
	***REMOVED***

	/**
	 * The location object of this range.
	 * @type {Object***REMOVED***
	 */
	get location() {
		return {
			start: this.startNode.loc.start,
			end: this.endNode.loc.end,
		***REMOVED***;
	***REMOVED***

	/**
	 * `true` if this range is empty.
	 * @type {boolean***REMOVED***
	 */
	get isEmpty() {
		return !(this.startNode && this.endNode);
	***REMOVED***

	/**
	 * Checks whether the given node is inside of this range.
	 * @param {ASTNode|Token***REMOVED*** node The node to check.
	 * @returns {boolean***REMOVED*** `true` if the node is inside of this range.
	 */
	contains(node) {
		return (
			node.range[0] >= this.startNode.range[0] &&
			node.range[1] <= this.endNode.range[1]
		);
	***REMOVED***

	/**
	 * Checks whether the given node is consecutive to this range.
	 * @param {ASTNode***REMOVED*** node The node to check.
	 * @returns {boolean***REMOVED*** `true` if the node is consecutive to this range.
	 */
	isConsecutive(node) {
		return this.contains(this.sourceCode.getTokenBefore(node));
	***REMOVED***

	/**
	 * Merges the given node to this range.
	 * @param {ASTNode***REMOVED*** node The node to merge.
	 * @returns {void***REMOVED***
	 */
	merge(node) {
		this.endNode = node;
	***REMOVED***

	/**
	 * Resets this range by the given node or null.
	 * @param {ASTNode|null***REMOVED*** node The node to reset, or null.
	 * @returns {void***REMOVED***
	 */
	reset(node) {
		this.startNode = this.endNode = node;
	***REMOVED***
***REMOVED***

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

/** @type {import('../types').Rule.RuleModule***REMOVED*** */
module.exports = {
	meta: {
		type: "problem",

		docs: {
			description:
				"Disallow unreachable code after `return`, `throw`, `continue`, and `break` statements",
			recommended: true,
			url: "https://eslint.org/docs/latest/rules/no-unreachable",
		***REMOVED***,

		schema: [],

		messages: {
			unreachableCode: "Unreachable code.",
		***REMOVED***,
	***REMOVED***,

	create(context) {
		/** @type {ConstructorInfo | null***REMOVED*** */
		let constructorInfo = null;

		/** @type {ConsecutiveRange***REMOVED*** */
		const range = new ConsecutiveRange(context.sourceCode);

		/** @type {Array<Set<CodePathSegment>>***REMOVED*** */
		const codePathSegments = [];

		/** @type {Set<CodePathSegment>***REMOVED*** */
		let currentCodePathSegments = new Set();

		/**
		 * Reports a given node if it's unreachable.
		 * @param {ASTNode***REMOVED*** node A statement node to report.
		 * @returns {void***REMOVED***
		 */
		function reportIfUnreachable(node) {
			let nextNode = null;

			if (
				node &&
				(node.type === "PropertyDefinition" ||
					areAllSegmentsUnreachable(currentCodePathSegments))
			) {
				// Store this statement to distinguish consecutive statements.
				if (range.isEmpty) {
					range.reset(node);
					return;
				***REMOVED***

				// Skip if this statement is inside of the current range.
				if (range.contains(node)) {
					return;
				***REMOVED***

				// Merge if this statement is consecutive to the current range.
				if (range.isConsecutive(node)) {
					range.merge(node);
					return;
				***REMOVED***

				nextNode = node;
			***REMOVED***

			/*
			 * Report the current range since this statement is reachable or is
			 * not consecutive to the current range.
			 */
			if (!range.isEmpty) {
				context.report({
					messageId: "unreachableCode",
					loc: range.location,
					node: range.startNode,
				***REMOVED***);
			***REMOVED***

			// Update the current range.
			range.reset(nextNode);
		***REMOVED***

		return {
			// Manages the current code path.
			onCodePathStart() {
				codePathSegments.push(currentCodePathSegments);
				currentCodePathSegments = new Set();
			***REMOVED***,

			onCodePathEnd() {
				currentCodePathSegments = codePathSegments.pop();
			***REMOVED***,

			onUnreachableCodePathSegmentStart(segment) {
				currentCodePathSegments.add(segment);
			***REMOVED***,

			onUnreachableCodePathSegmentEnd(segment) {
				currentCodePathSegments.delete(segment);
			***REMOVED***,

			onCodePathSegmentEnd(segment) {
				currentCodePathSegments.delete(segment);
			***REMOVED***,

			onCodePathSegmentStart(segment) {
				currentCodePathSegments.add(segment);
			***REMOVED***,

			// Registers for all statement nodes (excludes FunctionDeclaration).
			BlockStatement: reportIfUnreachable,
			BreakStatement: reportIfUnreachable,
			ClassDeclaration: reportIfUnreachable,
			ContinueStatement: reportIfUnreachable,
			DebuggerStatement: reportIfUnreachable,
			DoWhileStatement: reportIfUnreachable,
			ExpressionStatement: reportIfUnreachable,
			ForInStatement: reportIfUnreachable,
			ForOfStatement: reportIfUnreachable,
			ForStatement: reportIfUnreachable,
			IfStatement: reportIfUnreachable,
			ImportDeclaration: reportIfUnreachable,
			LabeledStatement: reportIfUnreachable,
			ReturnStatement: reportIfUnreachable,
			SwitchStatement: reportIfUnreachable,
			ThrowStatement: reportIfUnreachable,
			TryStatement: reportIfUnreachable,

			VariableDeclaration(node) {
				if (
					node.kind !== "var" ||
					node.declarations.some(isInitialized)
				) {
					reportIfUnreachable(node);
				***REMOVED***
			***REMOVED***,

			WhileStatement: reportIfUnreachable,
			WithStatement: reportIfUnreachable,
			ExportNamedDeclaration: reportIfUnreachable,
			ExportDefaultDeclaration: reportIfUnreachable,
			ExportAllDeclaration: reportIfUnreachable,

			"Program:exit"() {
				reportIfUnreachable();
			***REMOVED***,

			/*
			 * Instance fields defined in a subclass are never created if the constructor of the subclass
			 * doesn't call `super()`, so their definitions are unreachable code.
			 */
			"MethodDefinition[kind='constructor']"() {
				constructorInfo = {
					upper: constructorInfo,
					hasSuperCall: false,
				***REMOVED***;
			***REMOVED***,
			"MethodDefinition[kind='constructor']:exit"(node) {
				const { hasSuperCall ***REMOVED*** = constructorInfo;

				constructorInfo = constructorInfo.upper;

				// skip typescript constructors without the body
				if (!node.value.body) {
					return;
				***REMOVED***

				const classDefinition = node.parent.parent;

				if (classDefinition.superClass && !hasSuperCall) {
					for (const element of classDefinition.body.body) {
						if (
							element.type === "PropertyDefinition" &&
							!element.static
						) {
							reportIfUnreachable(element);
						***REMOVED***
					***REMOVED***
				***REMOVED***
			***REMOVED***,
			"CallExpression > Super.callee"() {
				if (constructorInfo) {
					constructorInfo.hasSuperCall = true;
				***REMOVED***
			***REMOVED***,
		***REMOVED***;
	***REMOVED***,
***REMOVED***;
