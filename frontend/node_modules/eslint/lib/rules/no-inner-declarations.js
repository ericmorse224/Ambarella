/**
 * @fileoverview Rule to enforce declarations in program or function body root.
 * @author Brandon Mills
 */

"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const astUtils = require("./utils/ast-utils");

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

const validParent = new Set([
	"Program",
	"StaticBlock",
	"ExportNamedDeclaration",
	"ExportDefaultDeclaration",
]);
const validBlockStatementParent = new Set([
	"FunctionDeclaration",
	"FunctionExpression",
	"ArrowFunctionExpression",
]);

/**
 * Finds the nearest enclosing context where this rule allows declarations and returns its description.
 * @param {ASTNode***REMOVED*** node Node to search from.
 * @returns {string***REMOVED*** Description. One of "program", "function body", "class static block body".
 */
function getAllowedBodyDescription(node) {
	let { parent ***REMOVED*** = node;

	while (parent) {
		if (parent.type === "StaticBlock") {
			return "class static block body";
		***REMOVED***

		if (astUtils.isFunction(parent)) {
			return "function body";
		***REMOVED***

		({ parent ***REMOVED*** = parent);
	***REMOVED***

	return "program";
***REMOVED***

/** @type {import('../types').Rule.RuleModule***REMOVED*** */
module.exports = {
	meta: {
		type: "problem",

		defaultOptions: ["functions", { blockScopedFunctions: "allow" ***REMOVED***],

		docs: {
			description:
				"Disallow variable or `function` declarations in nested blocks",
			recommended: false,
			url: "https://eslint.org/docs/latest/rules/no-inner-declarations",
		***REMOVED***,

		schema: [
			{
				enum: ["functions", "both"],
			***REMOVED***,
			{
				type: "object",
				properties: {
					blockScopedFunctions: {
						enum: ["allow", "disallow"],
					***REMOVED***,
				***REMOVED***,
				additionalProperties: false,
			***REMOVED***,
		],

		messages: {
			moveDeclToRoot: "Move {{type***REMOVED******REMOVED*** declaration to {{body***REMOVED******REMOVED*** root.",
		***REMOVED***,
	***REMOVED***,

	create(context) {
		const both = context.options[0] === "both";
		const { blockScopedFunctions ***REMOVED*** = context.options[1];

		const sourceCode = context.sourceCode;
		const ecmaVersion = context.languageOptions.ecmaVersion;

		/**
		 * Ensure that a given node is at a program or function body's root.
		 * @param {ASTNode***REMOVED*** node Declaration node to check.
		 * @returns {void***REMOVED***
		 */
		function check(node) {
			const parent = node.parent;

			if (
				parent.type === "BlockStatement" &&
				validBlockStatementParent.has(parent.parent.type)
			) {
				return;
			***REMOVED***

			if (validParent.has(parent.type)) {
				return;
			***REMOVED***

			context.report({
				node,
				messageId: "moveDeclToRoot",
				data: {
					type:
						node.type === "FunctionDeclaration"
							? "function"
							: "variable",
					body: getAllowedBodyDescription(node),
				***REMOVED***,
			***REMOVED***);
		***REMOVED***

		return {
			FunctionDeclaration(node) {
				const isInStrictCode = sourceCode.getScope(node).upper.isStrict;

				if (
					blockScopedFunctions === "allow" &&
					ecmaVersion >= 2015 &&
					isInStrictCode
				) {
					return;
				***REMOVED***

				check(node);
			***REMOVED***,
			VariableDeclaration(node) {
				if (both && node.kind === "var") {
					check(node);
				***REMOVED***
			***REMOVED***,
		***REMOVED***;
	***REMOVED***,
***REMOVED***;
