/**
 * @fileoverview Enforce lang attribute has a valid value.
 * @author Ethan Cohen
 */

// -----------------------------------------------------------------------------
// Requirements
// -----------------------------------------------------------------------------

import { RuleTester ***REMOVED*** from 'eslint';
import parserOptionsMapper from '../../__util__/parserOptionsMapper';
import parsers from '../../__util__/helpers/parsers';
import rule from '../../../src/rules/lang';

// -----------------------------------------------------------------------------
// Tests
// -----------------------------------------------------------------------------

const ruleTester = new RuleTester();

const expectedError = {
  message: 'lang attribute must have a valid value.',
  type: 'JSXAttribute',
***REMOVED***;

const componentsSettings = {
  'jsx-a11y': {
    polymorphicPropName: 'as',
    components: {
      Foo: 'html',
    ***REMOVED***,
  ***REMOVED***,
***REMOVED***;

ruleTester.run('lang', rule, {
  valid: parsers.all([].concat(
    { code: '<div />;' ***REMOVED***,
    { code: '<div foo="bar" />;' ***REMOVED***,
    { code: '<div lang="foo" />;' ***REMOVED***,
    { code: '<html lang="en" />' ***REMOVED***,
    { code: '<html lang="en-US" />' ***REMOVED***,
    { code: '<html lang="zh-Hans" />' ***REMOVED***,
    { code: '<html lang="zh-Hant-HK" />' ***REMOVED***,
    { code: '<html lang="zh-yue-Hant" />' ***REMOVED***,
    { code: '<html lang="ja-Latn" />' ***REMOVED***,
    { code: '<html lang={foo***REMOVED*** />' ***REMOVED***,
    { code: '<HTML lang="foo" />' ***REMOVED***,
    { code: '<Foo lang={undefined***REMOVED*** />' ***REMOVED***,
    { code: '<Foo lang="en" />', settings: componentsSettings ***REMOVED***,
    { code: '<Box as="html" lang="en"  />', settings: componentsSettings ***REMOVED***,
  )).map(parserOptionsMapper),
  invalid: parsers.all([].concat(
    { code: '<html lang="foo" />', errors: [expectedError] ***REMOVED***,
    { code: '<html lang="zz-LL" />', errors: [expectedError] ***REMOVED***,
    { code: '<html lang={undefined***REMOVED*** />', errors: [expectedError] ***REMOVED***,
    { code: '<Foo lang={undefined***REMOVED*** />', settings: componentsSettings, errors: [expectedError] ***REMOVED***,
    { code: '<Box as="html" lang="foo" />', settings: componentsSettings, errors: [expectedError] ***REMOVED***,
  )).map(parserOptionsMapper),
***REMOVED***);
