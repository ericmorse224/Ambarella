/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const ChunkGraph = require("./ChunkGraph");
const Entrypoint = require("./Entrypoint");
const { intersect ***REMOVED*** = require("./util/SetHelpers");
const SortableSet = require("./util/SortableSet");
const StringXor = require("./util/StringXor");
const {
	compareModulesByIdentifier,
	compareChunkGroupsByIndex,
	compareModulesById
***REMOVED*** = require("./util/comparators");
const { createArrayToSetDeprecationSet ***REMOVED*** = require("./util/deprecation");
const { mergeRuntime ***REMOVED*** = require("./util/runtime");

/** @typedef {import("webpack-sources").Source***REMOVED*** Source */
/** @typedef {import("./ChunkGraph").ChunkFilterPredicate***REMOVED*** ChunkFilterPredicate */
/** @typedef {import("./ChunkGraph").ChunkSizeOptions***REMOVED*** ChunkSizeOptions */
/** @typedef {import("./ChunkGraph").ModuleFilterPredicate***REMOVED*** ModuleFilterPredicate */
/** @typedef {import("./ChunkGraph").ModuleId***REMOVED*** ModuleId */
/** @typedef {import("./ChunkGroup")***REMOVED*** ChunkGroup */
/** @typedef {import("./ChunkGroup").ChunkGroupOptions***REMOVED*** ChunkGroupOptions */
/** @typedef {import("./Compilation")***REMOVED*** Compilation */
/** @typedef {import("./Compilation").AssetInfo***REMOVED*** AssetInfo */
/** @typedef {import("./Entrypoint").EntryOptions***REMOVED*** EntryOptions */
/** @typedef {import("./Module")***REMOVED*** Module */
/** @typedef {import("./ModuleGraph")***REMOVED*** ModuleGraph */
/** @typedef {import("./TemplatedPathPlugin").TemplatePath***REMOVED*** TemplatePath */
/** @typedef {import("./util/Hash")***REMOVED*** Hash */
/** @typedef {import("./util/runtime").RuntimeSpec***REMOVED*** RuntimeSpec */

/** @typedef {string | null***REMOVED*** ChunkName */
/** @typedef {number | string***REMOVED*** ChunkId */
/** @typedef {SortableSet<string>***REMOVED*** IdNameHints */

const ChunkFilesSet = createArrayToSetDeprecationSet("chunk.files");

/**
 * @typedef {object***REMOVED*** WithId an object who has an id property *
 * @property {string | number***REMOVED*** id the id of the object
 */

/**
 * @deprecated
 * @typedef {object***REMOVED*** ChunkMaps
 * @property {Record<string | number, string>***REMOVED*** hash
 * @property {Record<string | number, Record<string, string>>***REMOVED*** contentHash
 * @property {Record<string | number, string>***REMOVED*** name
 */

/**
 * @deprecated
 * @typedef {object***REMOVED*** ChunkModuleMaps
 * @property {Record<string|number, (string|number)[]>***REMOVED*** id
 * @property {Record<string|number, string>***REMOVED*** hash
 */

let debugId = 1000;

/**
 * A Chunk is a unit of encapsulation for Modules.
 * Chunks are "rendered" into bundles that get emitted when the build completes.
 */
class Chunk {
	/**
	 * @param {ChunkName=***REMOVED*** name of chunk being created, is optional (for subclasses)
	 * @param {boolean***REMOVED*** backCompat enable backward-compatibility
	 */
	constructor(name, backCompat = true) {
		/** @type {ChunkId | null***REMOVED*** */
		this.id = null;
		/** @type {ChunkId[] | null***REMOVED*** */
		this.ids = null;
		/** @type {number***REMOVED*** */
		this.debugId = debugId++;
		/** @type {ChunkName | undefined***REMOVED*** */
		this.name = name;
		/** @type {IdNameHints***REMOVED*** */
		this.idNameHints = new SortableSet();
		/** @type {boolean***REMOVED*** */
		this.preventIntegration = false;
		/** @type {TemplatePath | undefined***REMOVED*** */
		this.filenameTemplate = undefined;
		/** @type {TemplatePath | undefined***REMOVED*** */
		this.cssFilenameTemplate = undefined;
		/**
		 * @private
		 * @type {SortableSet<ChunkGroup>***REMOVED***
		 */
		this._groups = new SortableSet(undefined, compareChunkGroupsByIndex);
		/** @type {RuntimeSpec***REMOVED*** */
		this.runtime = undefined;
		/** @type {Set<string>***REMOVED*** */
		this.files = backCompat ? new ChunkFilesSet() : new Set();
		/** @type {Set<string>***REMOVED*** */
		this.auxiliaryFiles = new Set();
		/** @type {boolean***REMOVED*** */
		this.rendered = false;
		/** @type {string=***REMOVED*** */
		this.hash = undefined;
		/** @type {Record<string, string>***REMOVED*** */
		this.contentHash = Object.create(null);
		/** @type {string=***REMOVED*** */
		this.renderedHash = undefined;
		/** @type {string=***REMOVED*** */
		this.chunkReason = undefined;
		/** @type {boolean***REMOVED*** */
		this.extraAsync = false;
	***REMOVED***

	// TODO remove in webpack 6
	// BACKWARD-COMPAT START
	get entryModule() {
		const entryModules = Array.from(
			ChunkGraph.getChunkGraphForChunk(
				this,
				"Chunk.entryModule",
				"DEP_WEBPACK_CHUNK_ENTRY_MODULE"
			).getChunkEntryModulesIterable(this)
		);
		if (entryModules.length === 0) {
			return undefined;
		***REMOVED*** else if (entryModules.length === 1) {
			return entryModules[0];
		***REMOVED***

		throw new Error(
			"Module.entryModule: Multiple entry modules are not supported by the deprecated API (Use the new ChunkGroup API)"
		);
	***REMOVED***

	/**
	 * @returns {boolean***REMOVED*** true, if the chunk contains an entry module
	 */
	hasEntryModule() {
		return (
			ChunkGraph.getChunkGraphForChunk(
				this,
				"Chunk.hasEntryModule",
				"DEP_WEBPACK_CHUNK_HAS_ENTRY_MODULE"
			).getNumberOfEntryModules(this) > 0
		);
	***REMOVED***

	/**
	 * @param {Module***REMOVED*** module the module
	 * @returns {boolean***REMOVED*** true, if the chunk could be added
	 */
	addModule(module) {
		const chunkGraph = ChunkGraph.getChunkGraphForChunk(
			this,
			"Chunk.addModule",
			"DEP_WEBPACK_CHUNK_ADD_MODULE"
		);
		if (chunkGraph.isModuleInChunk(module, this)) return false;
		chunkGraph.connectChunkAndModule(this, module);
		return true;
	***REMOVED***

	/**
	 * @param {Module***REMOVED*** module the module
	 * @returns {void***REMOVED***
	 */
	removeModule(module) {
		ChunkGraph.getChunkGraphForChunk(
			this,
			"Chunk.removeModule",
			"DEP_WEBPACK_CHUNK_REMOVE_MODULE"
		).disconnectChunkAndModule(this, module);
	***REMOVED***

	/**
	 * @returns {number***REMOVED*** the number of module which are contained in this chunk
	 */
	getNumberOfModules() {
		return ChunkGraph.getChunkGraphForChunk(
			this,
			"Chunk.getNumberOfModules",
			"DEP_WEBPACK_CHUNK_GET_NUMBER_OF_MODULES"
		).getNumberOfChunkModules(this);
	***REMOVED***

	get modulesIterable() {
		const chunkGraph = ChunkGraph.getChunkGraphForChunk(
			this,
			"Chunk.modulesIterable",
			"DEP_WEBPACK_CHUNK_MODULES_ITERABLE"
		);
		return chunkGraph.getOrderedChunkModulesIterable(
			this,
			compareModulesByIdentifier
		);
	***REMOVED***

	/**
	 * @param {Chunk***REMOVED*** otherChunk the chunk to compare with
	 * @returns {-1|0|1***REMOVED*** the comparison result
	 */
	compareTo(otherChunk) {
		const chunkGraph = ChunkGraph.getChunkGraphForChunk(
			this,
			"Chunk.compareTo",
			"DEP_WEBPACK_CHUNK_COMPARE_TO"
		);
		return chunkGraph.compareChunks(this, otherChunk);
	***REMOVED***

	/**
	 * @param {Module***REMOVED*** module the module
	 * @returns {boolean***REMOVED*** true, if the chunk contains the module
	 */
	containsModule(module) {
		return ChunkGraph.getChunkGraphForChunk(
			this,
			"Chunk.containsModule",
			"DEP_WEBPACK_CHUNK_CONTAINS_MODULE"
		).isModuleInChunk(module, this);
	***REMOVED***

	/**
	 * @returns {Module[]***REMOVED*** the modules for this chunk
	 */
	getModules() {
		return ChunkGraph.getChunkGraphForChunk(
			this,
			"Chunk.getModules",
			"DEP_WEBPACK_CHUNK_GET_MODULES"
		).getChunkModules(this);
	***REMOVED***

	/**
	 * @returns {void***REMOVED***
	 */
	remove() {
		const chunkGraph = ChunkGraph.getChunkGraphForChunk(
			this,
			"Chunk.remove",
			"DEP_WEBPACK_CHUNK_REMOVE"
		);
		chunkGraph.disconnectChunk(this);
		this.disconnectFromGroups();
	***REMOVED***

	/**
	 * @param {Module***REMOVED*** module the module
	 * @param {Chunk***REMOVED*** otherChunk the target chunk
	 * @returns {void***REMOVED***
	 */
	moveModule(module, otherChunk) {
		const chunkGraph = ChunkGraph.getChunkGraphForChunk(
			this,
			"Chunk.moveModule",
			"DEP_WEBPACK_CHUNK_MOVE_MODULE"
		);
		chunkGraph.disconnectChunkAndModule(this, module);
		chunkGraph.connectChunkAndModule(otherChunk, module);
	***REMOVED***

	/**
	 * @param {Chunk***REMOVED*** otherChunk the other chunk
	 * @returns {boolean***REMOVED*** true, if the specified chunk has been integrated
	 */
	integrate(otherChunk) {
		const chunkGraph = ChunkGraph.getChunkGraphForChunk(
			this,
			"Chunk.integrate",
			"DEP_WEBPACK_CHUNK_INTEGRATE"
		);
		if (chunkGraph.canChunksBeIntegrated(this, otherChunk)) {
			chunkGraph.integrateChunks(this, otherChunk);
			return true;
		***REMOVED***

		return false;
	***REMOVED***

	/**
	 * @param {Chunk***REMOVED*** otherChunk the other chunk
	 * @returns {boolean***REMOVED*** true, if chunks could be integrated
	 */
	canBeIntegrated(otherChunk) {
		const chunkGraph = ChunkGraph.getChunkGraphForChunk(
			this,
			"Chunk.canBeIntegrated",
			"DEP_WEBPACK_CHUNK_CAN_BE_INTEGRATED"
		);
		return chunkGraph.canChunksBeIntegrated(this, otherChunk);
	***REMOVED***

	/**
	 * @returns {boolean***REMOVED*** true, if this chunk contains no module
	 */
	isEmpty() {
		const chunkGraph = ChunkGraph.getChunkGraphForChunk(
			this,
			"Chunk.isEmpty",
			"DEP_WEBPACK_CHUNK_IS_EMPTY"
		);
		return chunkGraph.getNumberOfChunkModules(this) === 0;
	***REMOVED***

	/**
	 * @returns {number***REMOVED*** total size of all modules in this chunk
	 */
	modulesSize() {
		const chunkGraph = ChunkGraph.getChunkGraphForChunk(
			this,
			"Chunk.modulesSize",
			"DEP_WEBPACK_CHUNK_MODULES_SIZE"
		);
		return chunkGraph.getChunkModulesSize(this);
	***REMOVED***

	/**
	 * @param {ChunkSizeOptions***REMOVED*** options options object
	 * @returns {number***REMOVED*** total size of this chunk
	 */
	size(options = {***REMOVED***) {
		const chunkGraph = ChunkGraph.getChunkGraphForChunk(
			this,
			"Chunk.size",
			"DEP_WEBPACK_CHUNK_SIZE"
		);
		return chunkGraph.getChunkSize(this, options);
	***REMOVED***

	/**
	 * @param {Chunk***REMOVED*** otherChunk the other chunk
	 * @param {ChunkSizeOptions***REMOVED*** options options object
	 * @returns {number***REMOVED*** total size of the chunk or false if the chunk can't be integrated
	 */
	integratedSize(otherChunk, options) {
		const chunkGraph = ChunkGraph.getChunkGraphForChunk(
			this,
			"Chunk.integratedSize",
			"DEP_WEBPACK_CHUNK_INTEGRATED_SIZE"
		);
		return chunkGraph.getIntegratedChunksSize(this, otherChunk, options);
	***REMOVED***

	/**
	 * @param {ModuleFilterPredicate***REMOVED*** filterFn function used to filter modules
	 * @returns {ChunkModuleMaps***REMOVED*** module map information
	 */
	getChunkModuleMaps(filterFn) {
		const chunkGraph = ChunkGraph.getChunkGraphForChunk(
			this,
			"Chunk.getChunkModuleMaps",
			"DEP_WEBPACK_CHUNK_GET_CHUNK_MODULE_MAPS"
		);
		/** @type {Record<string|number, (string|number)[]>***REMOVED*** */
		const chunkModuleIdMap = Object.create(null);
		/** @type {Record<string|number, string>***REMOVED*** */
		const chunkModuleHashMap = Object.create(null);

		for (const asyncChunk of this.getAllAsyncChunks()) {
			/** @type {ChunkId[] | undefined***REMOVED*** */
			let array;
			for (const module of chunkGraph.getOrderedChunkModulesIterable(
				asyncChunk,
				compareModulesById(chunkGraph)
			)) {
				if (filterFn(module)) {
					if (array === undefined) {
						array = [];
						chunkModuleIdMap[/** @type {ChunkId***REMOVED*** */ (asyncChunk.id)] = array;
					***REMOVED***
					const moduleId =
						/** @type {ModuleId***REMOVED*** */
						(chunkGraph.getModuleId(module));
					array.push(moduleId);
					chunkModuleHashMap[moduleId] = chunkGraph.getRenderedModuleHash(
						module,
						undefined
					);
				***REMOVED***
			***REMOVED***
		***REMOVED***

		return {
			id: chunkModuleIdMap,
			hash: chunkModuleHashMap
		***REMOVED***;
	***REMOVED***

	/**
	 * @param {ModuleFilterPredicate***REMOVED*** filterFn predicate function used to filter modules
	 * @param {ChunkFilterPredicate=***REMOVED*** filterChunkFn predicate function used to filter chunks
	 * @returns {boolean***REMOVED*** return true if module exists in graph
	 */
	hasModuleInGraph(filterFn, filterChunkFn) {
		const chunkGraph = ChunkGraph.getChunkGraphForChunk(
			this,
			"Chunk.hasModuleInGraph",
			"DEP_WEBPACK_CHUNK_HAS_MODULE_IN_GRAPH"
		);
		return chunkGraph.hasModuleInGraph(this, filterFn, filterChunkFn);
	***REMOVED***

	/**
	 * @deprecated
	 * @param {boolean***REMOVED*** realHash whether the full hash or the rendered hash is to be used
	 * @returns {ChunkMaps***REMOVED*** the chunk map information
	 */
	getChunkMaps(realHash) {
		/** @type {Record<string|number, string>***REMOVED*** */
		const chunkHashMap = Object.create(null);
		/** @type {Record<string|number, Record<string, string>>***REMOVED*** */
		const chunkContentHashMap = Object.create(null);
		/** @type {Record<string|number, string>***REMOVED*** */
		const chunkNameMap = Object.create(null);

		for (const chunk of this.getAllAsyncChunks()) {
			const id = /** @type {ChunkId***REMOVED*** */ (chunk.id);
			chunkHashMap[id] =
				/** @type {string***REMOVED*** */
				(realHash ? chunk.hash : chunk.renderedHash);
			for (const key of Object.keys(chunk.contentHash)) {
				if (!chunkContentHashMap[key]) {
					chunkContentHashMap[key] = Object.create(null);
				***REMOVED***
				chunkContentHashMap[key][id] = chunk.contentHash[key];
			***REMOVED***
			if (chunk.name) {
				chunkNameMap[id] = chunk.name;
			***REMOVED***
		***REMOVED***

		return {
			hash: chunkHashMap,
			contentHash: chunkContentHashMap,
			name: chunkNameMap
		***REMOVED***;
	***REMOVED***
	// BACKWARD-COMPAT END

	/**
	 * @returns {boolean***REMOVED*** whether or not the Chunk will have a runtime
	 */
	hasRuntime() {
		for (const chunkGroup of this._groups) {
			if (
				chunkGroup instanceof Entrypoint &&
				chunkGroup.getRuntimeChunk() === this
			) {
				return true;
			***REMOVED***
		***REMOVED***
		return false;
	***REMOVED***

	/**
	 * @returns {boolean***REMOVED*** whether or not this chunk can be an initial chunk
	 */
	canBeInitial() {
		for (const chunkGroup of this._groups) {
			if (chunkGroup.isInitial()) return true;
		***REMOVED***
		return false;
	***REMOVED***

	/**
	 * @returns {boolean***REMOVED*** whether this chunk can only be an initial chunk
	 */
	isOnlyInitial() {
		if (this._groups.size <= 0) return false;
		for (const chunkGroup of this._groups) {
			if (!chunkGroup.isInitial()) return false;
		***REMOVED***
		return true;
	***REMOVED***

	/**
	 * @returns {EntryOptions | undefined***REMOVED*** the entry options for this chunk
	 */
	getEntryOptions() {
		for (const chunkGroup of this._groups) {
			if (chunkGroup instanceof Entrypoint) {
				return chunkGroup.options;
			***REMOVED***
		***REMOVED***
		return undefined;
	***REMOVED***

	/**
	 * @param {ChunkGroup***REMOVED*** chunkGroup the chunkGroup the chunk is being added
	 * @returns {void***REMOVED***
	 */
	addGroup(chunkGroup) {
		this._groups.add(chunkGroup);
	***REMOVED***

	/**
	 * @param {ChunkGroup***REMOVED*** chunkGroup the chunkGroup the chunk is being removed from
	 * @returns {void***REMOVED***
	 */
	removeGroup(chunkGroup) {
		this._groups.delete(chunkGroup);
	***REMOVED***

	/**
	 * @param {ChunkGroup***REMOVED*** chunkGroup the chunkGroup to check
	 * @returns {boolean***REMOVED*** returns true if chunk has chunkGroup reference and exists in chunkGroup
	 */
	isInGroup(chunkGroup) {
		return this._groups.has(chunkGroup);
	***REMOVED***

	/**
	 * @returns {number***REMOVED*** the amount of groups that the said chunk is in
	 */
	getNumberOfGroups() {
		return this._groups.size;
	***REMOVED***

	/**
	 * @returns {SortableSet<ChunkGroup>***REMOVED*** the chunkGroups that the said chunk is referenced in
	 */
	get groupsIterable() {
		this._groups.sort();
		return this._groups;
	***REMOVED***

	/**
	 * @returns {void***REMOVED***
	 */
	disconnectFromGroups() {
		for (const chunkGroup of this._groups) {
			chunkGroup.removeChunk(this);
		***REMOVED***
	***REMOVED***

	/**
	 * @param {Chunk***REMOVED*** newChunk the new chunk that will be split out of
	 * @returns {void***REMOVED***
	 */
	split(newChunk) {
		for (const chunkGroup of this._groups) {
			chunkGroup.insertChunk(newChunk, this);
			newChunk.addGroup(chunkGroup);
		***REMOVED***
		for (const idHint of this.idNameHints) {
			newChunk.idNameHints.add(idHint);
		***REMOVED***
		newChunk.runtime = mergeRuntime(newChunk.runtime, this.runtime);
	***REMOVED***

	/**
	 * @param {Hash***REMOVED*** hash hash (will be modified)
	 * @param {ChunkGraph***REMOVED*** chunkGraph the chunk graph
	 * @returns {void***REMOVED***
	 */
	updateHash(hash, chunkGraph) {
		hash.update(
			`${this.id***REMOVED*** ${this.ids ? this.ids.join() : ""***REMOVED*** ${this.name || ""***REMOVED*** `
		);
		const xor = new StringXor();
		for (const m of chunkGraph.getChunkModulesIterable(this)) {
			xor.add(chunkGraph.getModuleHash(m, this.runtime));
		***REMOVED***
		xor.updateHash(hash);
		const entryModules =
			chunkGraph.getChunkEntryModulesWithChunkGroupIterable(this);
		for (const [m, chunkGroup] of entryModules) {
			hash.update(
				`entry${chunkGraph.getModuleId(m)***REMOVED***${
					/** @type {ChunkGroup***REMOVED*** */ (chunkGroup).id
				***REMOVED***`
			);
		***REMOVED***
	***REMOVED***

	/**
	 * @returns {Set<Chunk>***REMOVED*** a set of all the async chunks
	 */
	getAllAsyncChunks() {
		const queue = new Set();
		const chunks = new Set();

		const initialChunks = intersect(
			Array.from(this.groupsIterable, g => new Set(g.chunks))
		);

		const initialQueue = new Set(this.groupsIterable);

		for (const chunkGroup of initialQueue) {
			for (const child of chunkGroup.childrenIterable) {
				if (child instanceof Entrypoint) {
					initialQueue.add(child);
				***REMOVED*** else {
					queue.add(child);
				***REMOVED***
			***REMOVED***
		***REMOVED***

		for (const chunkGroup of queue) {
			for (const chunk of chunkGroup.chunks) {
				if (!initialChunks.has(chunk)) {
					chunks.add(chunk);
				***REMOVED***
			***REMOVED***
			for (const child of chunkGroup.childrenIterable) {
				queue.add(child);
			***REMOVED***
		***REMOVED***

		return chunks;
	***REMOVED***

	/**
	 * @returns {Set<Chunk>***REMOVED*** a set of all the initial chunks (including itself)
	 */
	getAllInitialChunks() {
		const chunks = new Set();
		const queue = new Set(this.groupsIterable);
		for (const group of queue) {
			if (group.isInitial()) {
				for (const c of group.chunks) chunks.add(c);
				for (const g of group.childrenIterable) queue.add(g);
			***REMOVED***
		***REMOVED***
		return chunks;
	***REMOVED***

	/**
	 * @returns {Set<Chunk>***REMOVED*** a set of all the referenced chunks (including itself)
	 */
	getAllReferencedChunks() {
		const queue = new Set(this.groupsIterable);
		const chunks = new Set();

		for (const chunkGroup of queue) {
			for (const chunk of chunkGroup.chunks) {
				chunks.add(chunk);
			***REMOVED***
			for (const child of chunkGroup.childrenIterable) {
				queue.add(child);
			***REMOVED***
		***REMOVED***

		return chunks;
	***REMOVED***

	/**
	 * @returns {Set<Entrypoint>***REMOVED*** a set of all the referenced entrypoints
	 */
	getAllReferencedAsyncEntrypoints() {
		const queue = new Set(this.groupsIterable);
		const entrypoints = new Set();

		for (const chunkGroup of queue) {
			for (const entrypoint of chunkGroup.asyncEntrypointsIterable) {
				entrypoints.add(entrypoint);
			***REMOVED***
			for (const child of chunkGroup.childrenIterable) {
				queue.add(child);
			***REMOVED***
		***REMOVED***

		return entrypoints;
	***REMOVED***

	/**
	 * @returns {boolean***REMOVED*** true, if the chunk references async chunks
	 */
	hasAsyncChunks() {
		const queue = new Set();

		const initialChunks = intersect(
			Array.from(this.groupsIterable, g => new Set(g.chunks))
		);

		for (const chunkGroup of this.groupsIterable) {
			for (const child of chunkGroup.childrenIterable) {
				queue.add(child);
			***REMOVED***
		***REMOVED***

		for (const chunkGroup of queue) {
			for (const chunk of chunkGroup.chunks) {
				if (!initialChunks.has(chunk)) {
					return true;
				***REMOVED***
			***REMOVED***
			for (const child of chunkGroup.childrenIterable) {
				queue.add(child);
			***REMOVED***
		***REMOVED***

		return false;
	***REMOVED***

	/**
	 * @param {ChunkGraph***REMOVED*** chunkGraph the chunk graph
	 * @param {ChunkFilterPredicate=***REMOVED*** filterFn function used to filter chunks
	 * @returns {Record<string, ChunkId[]>***REMOVED*** a record object of names to lists of child ids(?)
	 */
	getChildIdsByOrders(chunkGraph, filterFn) {
		/** @type {Map<string, {order: number, group: ChunkGroup***REMOVED***[]>***REMOVED*** */
		const lists = new Map();
		for (const group of this.groupsIterable) {
			if (group.chunks[group.chunks.length - 1] === this) {
				for (const childGroup of group.childrenIterable) {
					for (const key of Object.keys(childGroup.options)) {
						if (key.endsWith("Order")) {
							const name = key.slice(0, key.length - "Order".length);
							let list = lists.get(name);
							if (list === undefined) {
								list = [];
								lists.set(name, list);
							***REMOVED***
							list.push({
								order:
									/** @type {number***REMOVED*** */
									(
										childGroup.options[
											/** @type {keyof ChunkGroupOptions***REMOVED*** */
											(key)
										]
									),
								group: childGroup
							***REMOVED***);
						***REMOVED***
					***REMOVED***
				***REMOVED***
			***REMOVED***
		***REMOVED***
		/** @type {Record<string, (string | number)[]>***REMOVED*** */
		const result = Object.create(null);
		for (const [name, list] of lists) {
			list.sort((a, b) => {
				const cmp = b.order - a.order;
				if (cmp !== 0) return cmp;
				return a.group.compareTo(chunkGraph, b.group);
			***REMOVED***);
			/** @type {Set<ChunkId>***REMOVED*** */
			const chunkIdSet = new Set();
			for (const item of list) {
				for (const chunk of item.group.chunks) {
					if (filterFn && !filterFn(chunk, chunkGraph)) continue;
					chunkIdSet.add(/** @type {ChunkId***REMOVED*** */ (chunk.id));
				***REMOVED***
			***REMOVED***
			if (chunkIdSet.size > 0) {
				result[name] = Array.from(chunkIdSet);
			***REMOVED***
		***REMOVED***
		return result;
	***REMOVED***

	/**
	 * @param {ChunkGraph***REMOVED*** chunkGraph the chunk graph
	 * @param {string***REMOVED*** type option name
	 * @returns {{ onChunks: Chunk[], chunks: Set<Chunk> ***REMOVED***[] | undefined***REMOVED*** referenced chunks for a specific type
	 */
	getChildrenOfTypeInOrder(chunkGraph, type) {
		const list = [];
		for (const group of this.groupsIterable) {
			for (const childGroup of group.childrenIterable) {
				const order =
					childGroup.options[/** @type {keyof ChunkGroupOptions***REMOVED*** */ (type)];
				if (order === undefined) continue;
				list.push({
					order,
					group,
					childGroup
				***REMOVED***);
			***REMOVED***
		***REMOVED***
		if (list.length === 0) return;
		list.sort((a, b) => {
			const cmp =
				/** @type {number***REMOVED*** */ (b.order) - /** @type {number***REMOVED*** */ (a.order);
			if (cmp !== 0) return cmp;
			return a.group.compareTo(chunkGraph, b.group);
		***REMOVED***);
		const result = [];
		let lastEntry;
		for (const { group, childGroup ***REMOVED*** of list) {
			if (lastEntry && lastEntry.onChunks === group.chunks) {
				for (const chunk of childGroup.chunks) {
					lastEntry.chunks.add(chunk);
				***REMOVED***
			***REMOVED*** else {
				result.push(
					(lastEntry = {
						onChunks: group.chunks,
						chunks: new Set(childGroup.chunks)
					***REMOVED***)
				);
			***REMOVED***
		***REMOVED***
		return result;
	***REMOVED***

	/**
	 * @param {ChunkGraph***REMOVED*** chunkGraph the chunk graph
	 * @param {boolean=***REMOVED*** includeDirectChildren include direct children (by default only children of async children are included)
	 * @param {ChunkFilterPredicate=***REMOVED*** filterFn function used to filter chunks
	 * @returns {Record<string|number, Record<string, (string | number)[]>>***REMOVED*** a record object of names to lists of child ids(?) by chunk id
	 */
	getChildIdsByOrdersMap(chunkGraph, includeDirectChildren, filterFn) {
		/** @type {Record<string|number, Record<string, (string | number)[]>>***REMOVED*** */
		const chunkMaps = Object.create(null);

		/**
		 * @param {Chunk***REMOVED*** chunk a chunk
		 * @returns {void***REMOVED***
		 */
		const addChildIdsByOrdersToMap = chunk => {
			const data = chunk.getChildIdsByOrders(chunkGraph, filterFn);
			for (const key of Object.keys(data)) {
				let chunkMap = chunkMaps[key];
				if (chunkMap === undefined) {
					chunkMaps[key] = chunkMap = Object.create(null);
				***REMOVED***
				chunkMap[/** @type {ChunkId***REMOVED*** */ (chunk.id)] = data[key];
			***REMOVED***
		***REMOVED***;

		if (includeDirectChildren) {
			/** @type {Set<Chunk>***REMOVED*** */
			const chunks = new Set();
			for (const chunkGroup of this.groupsIterable) {
				for (const chunk of chunkGroup.chunks) {
					chunks.add(chunk);
				***REMOVED***
			***REMOVED***
			for (const chunk of chunks) {
				addChildIdsByOrdersToMap(chunk);
			***REMOVED***
		***REMOVED***

		for (const chunk of this.getAllAsyncChunks()) {
			addChildIdsByOrdersToMap(chunk);
		***REMOVED***

		return chunkMaps;
	***REMOVED***

	/**
	 * @param {ChunkGraph***REMOVED*** chunkGraph the chunk graph
	 * @param {string***REMOVED*** type option name
	 * @param {boolean=***REMOVED*** includeDirectChildren include direct children (by default only children of async children are included)
	 * @param {ChunkFilterPredicate=***REMOVED*** filterFn function used to filter chunks
	 * @returns {boolean***REMOVED*** true when the child is of type order, otherwise false
	 */
	hasChildByOrder(chunkGraph, type, includeDirectChildren, filterFn) {
		if (includeDirectChildren) {
			/** @type {Set<Chunk>***REMOVED*** */
			const chunks = new Set();
			for (const chunkGroup of this.groupsIterable) {
				for (const chunk of chunkGroup.chunks) {
					chunks.add(chunk);
				***REMOVED***
			***REMOVED***
			for (const chunk of chunks) {
				const data = chunk.getChildIdsByOrders(chunkGraph, filterFn);
				if (data[type] !== undefined) return true;
			***REMOVED***
		***REMOVED***

		for (const chunk of this.getAllAsyncChunks()) {
			const data = chunk.getChildIdsByOrders(chunkGraph, filterFn);
			if (data[type] !== undefined) return true;
		***REMOVED***

		return false;
	***REMOVED***
***REMOVED***

module.exports = Chunk;
