{"version":3,"file":"workbox-strategies.prod.js","sources":["../_version.js","../StrategyHandler.js","../Strategy.js","../plugins/cacheOkAndOpaquePlugin.js","../CacheFirst.js","../CacheOnly.js","../NetworkFirst.js","../NetworkOnly.js","../StaleWhileRevalidate.js"],"sourcesContent":["\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:strategies:6.5.4'] && _();\n***REMOVED***\ncatch (e) { ***REMOVED***\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert ***REMOVED*** from 'workbox-core/_private/assert.js';\nimport { cacheMatchIgnoreParams ***REMOVED*** from 'workbox-core/_private/cacheMatchIgnoreParams.js';\nimport { Deferred ***REMOVED*** from 'workbox-core/_private/Deferred.js';\nimport { executeQuotaErrorCallbacks ***REMOVED*** from 'workbox-core/_private/executeQuotaErrorCallbacks.js';\nimport { getFriendlyURL ***REMOVED*** from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger ***REMOVED*** from 'workbox-core/_private/logger.js';\nimport { timeout ***REMOVED*** from 'workbox-core/_private/timeout.js';\nimport { WorkboxError ***REMOVED*** from 'workbox-core/_private/WorkboxError.js';\nimport './_version.js';\nfunction toRequest(input) {\n    return typeof input === 'string' ? new Request(input) : input;\n***REMOVED***\n/**\n * A class created every time a Strategy instance instance calls\n * {@link workbox-strategies.Strategy~handle***REMOVED*** or\n * {@link workbox-strategies.Strategy~handleAll***REMOVED*** that wraps all fetch and\n * cache actions around plugin callbacks and keeps track of when the strategy\n * is \"done\" (i.e. all added `event.waitUntil()` promises have resolved).\n *\n * @memberof workbox-strategies\n */\nclass StrategyHandler {\n    /**\n     * Creates a new instance associated with the passed strategy and event\n     * that's handling the request.\n     *\n     * The constructor also initializes the state that will be passed to each of\n     * the plugins handling this request.\n     *\n     * @param {workbox-strategies.Strategy***REMOVED*** strategy\n     * @param {Object***REMOVED*** options\n     * @param {Request|string***REMOVED*** options.request A request to run this strategy for.\n     * @param {ExtendableEvent***REMOVED*** options.event The event associated with the\n     *     request.\n     * @param {URL***REMOVED*** [options.url]\n     * @param {****REMOVED*** [options.params] The return value from the\n     *     {@link workbox-routing~matchCallback***REMOVED*** (if applicable).\n     */\n    constructor(strategy, options) {\n        this._cacheKeys = {***REMOVED***;\n        /**\n         * The request the strategy is performing (passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * @name request\n         * @instance\n         * @type {Request***REMOVED***\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        /**\n         * The event associated with this request.\n         * @name event\n         * @instance\n         * @type {ExtendableEvent***REMOVED***\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        /**\n         * A `URL` instance of `request.url` (if passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * Note: the `url` param will be present if the strategy was invoked\n         * from a workbox `Route` object.\n         * @name url\n         * @instance\n         * @type {URL|undefined***REMOVED***\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        /**\n         * A `param` value (if passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * Note: the `param` param will be present if the strategy was invoked\n         * from a workbox `Route` object and the\n         * {@link workbox-routing~matchCallback***REMOVED*** returned\n         * a truthy value (it will be that value).\n         * @name params\n         * @instance\n         * @type {*|undefined***REMOVED***\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(options.event, ExtendableEvent, {\n                moduleName: 'workbox-strategies',\n                className: 'StrategyHandler',\n                funcName: 'constructor',\n                paramName: 'options.event',\n            ***REMOVED***);\n        ***REMOVED***\n        Object.assign(this, options);\n        this.event = options.event;\n        this._strategy = strategy;\n        this._handlerDeferred = new Deferred();\n        this._extendLifetimePromises = [];\n        // Copy the plugins list (since it's mutable on the strategy),\n        // so any mutations don't affect this handler instance.\n        this._plugins = [...strategy.plugins];\n        this._pluginStateMap = new Map();\n        for (const plugin of this._plugins) {\n            this._pluginStateMap.set(plugin, {***REMOVED***);\n        ***REMOVED***\n        this.event.waitUntil(this._handlerDeferred.promise);\n    ***REMOVED***\n    /**\n     * Fetches a given request (and invokes any applicable plugin callback\n     * methods) using the `fetchOptions` (for non-navigation requests) and\n     * `plugins` defined on the `Strategy` object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - `requestWillFetch()`\n     * - `fetchDidSucceed()`\n     * - `fetchDidFail()`\n     *\n     * @param {Request|string***REMOVED*** input The URL or request to fetch.\n     * @return {Promise<Response>***REMOVED***\n     */\n    async fetch(input) {\n        const { event ***REMOVED*** = this;\n        let request = toRequest(input);\n        if (request.mode === 'navigate' &&\n            event instanceof FetchEvent &&\n            event.preloadResponse) {\n            const possiblePreloadResponse = (await event.preloadResponse);\n            if (possiblePreloadResponse) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.log(`Using a preloaded navigation response for ` +\n                        `'${getFriendlyURL(request.url)***REMOVED***'`);\n                ***REMOVED***\n                return possiblePreloadResponse;\n            ***REMOVED***\n        ***REMOVED***\n        // If there is a fetchDidFail plugin, we need to save a clone of the\n        // original request before it's either modified by a requestWillFetch\n        // plugin or before the original request's body is consumed via fetch().\n        const originalRequest = this.hasCallback('fetchDidFail')\n            ? request.clone()\n            : null;\n        try {\n            for (const cb of this.iterateCallbacks('requestWillFetch')) {\n                request = await cb({ request: request.clone(), event ***REMOVED***);\n            ***REMOVED***\n        ***REMOVED***\n        catch (err) {\n            if (err instanceof Error) {\n                throw new WorkboxError('plugin-error-request-will-fetch', {\n                    thrownErrorMessage: err.message,\n                ***REMOVED***);\n            ***REMOVED***\n        ***REMOVED***\n        // The request can be altered by plugins with `requestWillFetch` making\n        // the original request (most likely from a `fetch` event) different\n        // from the Request we make. Pass both to `fetchDidFail` to aid debugging.\n        const pluginFilteredRequest = request.clone();\n        try {\n            let fetchResponse;\n            // See https://github.com/GoogleChrome/workbox/issues/1796\n            fetchResponse = await fetch(request, request.mode === 'navigate' ? undefined : this._strategy.fetchOptions);\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Network request for ` +\n                    `'${getFriendlyURL(request.url)***REMOVED***' returned a response with ` +\n                    `status '${fetchResponse.status***REMOVED***'.`);\n            ***REMOVED***\n            for (const callback of this.iterateCallbacks('fetchDidSucceed')) {\n                fetchResponse = await callback({\n                    event,\n                    request: pluginFilteredRequest,\n                    response: fetchResponse,\n                ***REMOVED***);\n            ***REMOVED***\n            return fetchResponse;\n        ***REMOVED***\n        catch (error) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.log(`Network request for ` +\n                    `'${getFriendlyURL(request.url)***REMOVED***' threw an error.`, error);\n            ***REMOVED***\n            // `originalRequest` will only exist if a `fetchDidFail` callback\n            // is being used (see above).\n            if (originalRequest) {\n                await this.runCallbacks('fetchDidFail', {\n                    error: error,\n                    event,\n                    originalRequest: originalRequest.clone(),\n                    request: pluginFilteredRequest.clone(),\n                ***REMOVED***);\n            ***REMOVED***\n            throw error;\n        ***REMOVED***\n    ***REMOVED***\n    /**\n     * Calls `this.fetch()` and (in the background) runs `this.cachePut()` on\n     * the response generated by `this.fetch()`.\n     *\n     * The call to `this.cachePut()` automatically invokes `this.waitUntil()`,\n     * so you do not have to manually call `waitUntil()` on the event.\n     *\n     * @param {Request|string***REMOVED*** input The request or URL to fetch and cache.\n     * @return {Promise<Response>***REMOVED***\n     */\n    async fetchAndCachePut(input) {\n        const response = await this.fetch(input);\n        const responseClone = response.clone();\n        void this.waitUntil(this.cachePut(input, responseClone));\n        return response;\n    ***REMOVED***\n    /**\n     * Matches a request from the cache (and invokes any applicable plugin\n     * callback methods) using the `cacheName`, `matchOptions`, and `plugins`\n     * defined on the strategy object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - cacheKeyWillByUsed()\n     * - cachedResponseWillByUsed()\n     *\n     * @param {Request|string***REMOVED*** key The Request or URL to use as the cache key.\n     * @return {Promise<Response|undefined>***REMOVED*** A matching response, if found.\n     */\n    async cacheMatch(key) {\n        const request = toRequest(key);\n        let cachedResponse;\n        const { cacheName, matchOptions ***REMOVED*** = this._strategy;\n        const effectiveRequest = await this.getCacheKey(request, 'read');\n        const multiMatchOptions = Object.assign(Object.assign({***REMOVED***, matchOptions), { cacheName ***REMOVED***);\n        cachedResponse = await caches.match(effectiveRequest, multiMatchOptions);\n        if (process.env.NODE_ENV !== 'production') {\n            if (cachedResponse) {\n                logger.debug(`Found a cached response in '${cacheName***REMOVED***'.`);\n            ***REMOVED***\n            else {\n                logger.debug(`No cached response found in '${cacheName***REMOVED***'.`);\n            ***REMOVED***\n        ***REMOVED***\n        for (const callback of this.iterateCallbacks('cachedResponseWillBeUsed')) {\n            cachedResponse =\n                (await callback({\n                    cacheName,\n                    matchOptions,\n                    cachedResponse,\n                    request: effectiveRequest,\n                    event: this.event,\n                ***REMOVED***)) || undefined;\n        ***REMOVED***\n        return cachedResponse;\n    ***REMOVED***\n    /**\n     * Puts a request/response pair in the cache (and invokes any applicable\n     * plugin callback methods) using the `cacheName` and `plugins` defined on\n     * the strategy object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - cacheKeyWillByUsed()\n     * - cacheWillUpdate()\n     * - cacheDidUpdate()\n     *\n     * @param {Request|string***REMOVED*** key The request or URL to use as the cache key.\n     * @param {Response***REMOVED*** response The response to cache.\n     * @return {Promise<boolean>***REMOVED*** `false` if a cacheWillUpdate caused the response\n     * not be cached, and `true` otherwise.\n     */\n    async cachePut(key, response) {\n        const request = toRequest(key);\n        // Run in the next task to avoid blocking other cache reads.\n        // https://github.com/w3c/ServiceWorker/issues/1397\n        await timeout(0);\n        const effectiveRequest = await this.getCacheKey(request, 'write');\n        if (process.env.NODE_ENV !== 'production') {\n            if (effectiveRequest.method && effectiveRequest.method !== 'GET') {\n                throw new WorkboxError('attempt-to-cache-non-get-request', {\n                    url: getFriendlyURL(effectiveRequest.url),\n                    method: effectiveRequest.method,\n                ***REMOVED***);\n            ***REMOVED***\n            // See https://github.com/GoogleChrome/workbox/issues/2818\n            const vary = response.headers.get('Vary');\n            if (vary) {\n                logger.debug(`The response for ${getFriendlyURL(effectiveRequest.url)***REMOVED*** ` +\n                    `has a 'Vary: ${vary***REMOVED***' header. ` +\n                    `Consider setting the {ignoreVary: true***REMOVED*** option on your strategy ` +\n                    `to ensure cache matching and deletion works as expected.`);\n            ***REMOVED***\n        ***REMOVED***\n        if (!response) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.error(`Cannot cache non-existent response for ` +\n                    `'${getFriendlyURL(effectiveRequest.url)***REMOVED***'.`);\n            ***REMOVED***\n            throw new WorkboxError('cache-put-with-no-response', {\n                url: getFriendlyURL(effectiveRequest.url),\n            ***REMOVED***);\n        ***REMOVED***\n        const responseToCache = await this._ensureResponseSafeToCache(response);\n        if (!responseToCache) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Response '${getFriendlyURL(effectiveRequest.url)***REMOVED***' ` +\n                    `will not be cached.`, responseToCache);\n            ***REMOVED***\n            return false;\n        ***REMOVED***\n        const { cacheName, matchOptions ***REMOVED*** = this._strategy;\n        const cache = await self.caches.open(cacheName);\n        const hasCacheUpdateCallback = this.hasCallback('cacheDidUpdate');\n        const oldResponse = hasCacheUpdateCallback\n            ? await cacheMatchIgnoreParams(\n            // TODO(philipwalton): the `__WB_REVISION__` param is a precaching\n            // feature. Consider into ways to only add this behavior if using\n            // precaching.\n            cache, effectiveRequest.clone(), ['__WB_REVISION__'], matchOptions)\n            : null;\n        if (process.env.NODE_ENV !== 'production') {\n            logger.debug(`Updating the '${cacheName***REMOVED***' cache with a new Response ` +\n                `for ${getFriendlyURL(effectiveRequest.url)***REMOVED***.`);\n        ***REMOVED***\n        try {\n            await cache.put(effectiveRequest, hasCacheUpdateCallback ? responseToCache.clone() : responseToCache);\n        ***REMOVED***\n        catch (error) {\n            if (error instanceof Error) {\n                // See https://developer.mozilla.org/en-US/docs/Web/API/DOMException#exception-QuotaExceededError\n                if (error.name === 'QuotaExceededError') {\n                    await executeQuotaErrorCallbacks();\n                ***REMOVED***\n                throw error;\n            ***REMOVED***\n        ***REMOVED***\n        for (const callback of this.iterateCallbacks('cacheDidUpdate')) {\n            await callback({\n                cacheName,\n                oldResponse,\n                newResponse: responseToCache.clone(),\n                request: effectiveRequest,\n                event: this.event,\n            ***REMOVED***);\n        ***REMOVED***\n        return true;\n    ***REMOVED***\n    /**\n     * Checks the list of plugins for the `cacheKeyWillBeUsed` callback, and\n     * executes any of those callbacks found in sequence. The final `Request`\n     * object returned by the last plugin is treated as the cache key for cache\n     * reads and/or writes. If no `cacheKeyWillBeUsed` plugin callbacks have\n     * been registered, the passed request is returned unmodified\n     *\n     * @param {Request***REMOVED*** request\n     * @param {string***REMOVED*** mode\n     * @return {Promise<Request>***REMOVED***\n     */\n    async getCacheKey(request, mode) {\n        const key = `${request.url***REMOVED*** | ${mode***REMOVED***`;\n        if (!this._cacheKeys[key]) {\n            let effectiveRequest = request;\n            for (const callback of this.iterateCallbacks('cacheKeyWillBeUsed')) {\n                effectiveRequest = toRequest(await callback({\n                    mode,\n                    request: effectiveRequest,\n                    event: this.event,\n                    // params has a type any can't change right now.\n                    params: this.params, // eslint-disable-line\n                ***REMOVED***));\n            ***REMOVED***\n            this._cacheKeys[key] = effectiveRequest;\n        ***REMOVED***\n        return this._cacheKeys[key];\n    ***REMOVED***\n    /**\n     * Returns true if the strategy has at least one plugin with the given\n     * callback.\n     *\n     * @param {string***REMOVED*** name The name of the callback to check for.\n     * @return {boolean***REMOVED***\n     */\n    hasCallback(name) {\n        for (const plugin of this._strategy.plugins) {\n            if (name in plugin) {\n                return true;\n            ***REMOVED***\n        ***REMOVED***\n        return false;\n    ***REMOVED***\n    /**\n     * Runs all plugin callbacks matching the given name, in order, passing the\n     * given param object (merged ith the current plugin state) as the only\n     * argument.\n     *\n     * Note: since this method runs all plugins, it's not suitable for cases\n     * where the return value of a callback needs to be applied prior to calling\n     * the next callback. See\n     * {@link workbox-strategies.StrategyHandler#iterateCallbacks***REMOVED***\n     * below for how to handle that case.\n     *\n     * @param {string***REMOVED*** name The name of the callback to run within each plugin.\n     * @param {Object***REMOVED*** param The object to pass as the first (and only) param\n     *     when executing each callback. This object will be merged with the\n     *     current plugin state prior to callback execution.\n     */\n    async runCallbacks(name, param) {\n        for (const callback of this.iterateCallbacks(name)) {\n            // TODO(philipwalton): not sure why `any` is needed. It seems like\n            // this should work with `as WorkboxPluginCallbackParam[C]`.\n            await callback(param);\n        ***REMOVED***\n    ***REMOVED***\n    /**\n     * Accepts a callback and returns an iterable of matching plugin callbacks,\n     * where each callback is wrapped with the current handler state (i.e. when\n     * you call each callback, whatever object parameter you pass it will\n     * be merged with the plugin's current state).\n     *\n     * @param {string***REMOVED*** name The name fo the callback to run\n     * @return {Array<Function>***REMOVED***\n     */\n    *iterateCallbacks(name) {\n        for (const plugin of this._strategy.plugins) {\n            if (typeof plugin[name] === 'function') {\n                const state = this._pluginStateMap.get(plugin);\n                const statefulCallback = (param) => {\n                    const statefulParam = Object.assign(Object.assign({***REMOVED***, param), { state ***REMOVED***);\n                    // TODO(philipwalton): not sure why `any` is needed. It seems like\n                    // this should work with `as WorkboxPluginCallbackParam[C]`.\n                    return plugin[name](statefulParam);\n                ***REMOVED***;\n                yield statefulCallback;\n            ***REMOVED***\n        ***REMOVED***\n    ***REMOVED***\n    /**\n     * Adds a promise to the\n     * [extend lifetime promises]{@link https://w3c.github.io/ServiceWorker/#extendableevent-extend-lifetime-promises***REMOVED***\n     * of the event event associated with the request being handled (usually a\n     * `FetchEvent`).\n     *\n     * Note: you can await\n     * {@link workbox-strategies.StrategyHandler~doneWaiting***REMOVED***\n     * to know when all added promises have settled.\n     *\n     * @param {Promise***REMOVED*** promise A promise to add to the extend lifetime promises\n     *     of the event that triggered the request.\n     */\n    waitUntil(promise) {\n        this._extendLifetimePromises.push(promise);\n        return promise;\n    ***REMOVED***\n    /**\n     * Returns a promise that resolves once all promises passed to\n     * {@link workbox-strategies.StrategyHandler~waitUntil***REMOVED***\n     * have settled.\n     *\n     * Note: any work done after `doneWaiting()` settles should be manually\n     * passed to an event's `waitUntil()` method (not this handler's\n     * `waitUntil()` method), otherwise the service worker thread my be killed\n     * prior to your work completing.\n     */\n    async doneWaiting() {\n        let promise;\n        while ((promise = this._extendLifetimePromises.shift())) {\n            await promise;\n        ***REMOVED***\n    ***REMOVED***\n    /**\n     * Stops running the strategy and immediately resolves any pending\n     * `waitUntil()` promises.\n     */\n    destroy() {\n        this._handlerDeferred.resolve(null);\n    ***REMOVED***\n    /**\n     * This method will call cacheWillUpdate on the available plugins (or use\n     * status === 200) to determine if the Response is safe and valid to cache.\n     *\n     * @param {Request***REMOVED*** options.request\n     * @param {Response***REMOVED*** options.response\n     * @return {Promise<Response|undefined>***REMOVED***\n     *\n     * @private\n     */\n    async _ensureResponseSafeToCache(response) {\n        let responseToCache = response;\n        let pluginsUsed = false;\n        for (const callback of this.iterateCallbacks('cacheWillUpdate')) {\n            responseToCache =\n                (await callback({\n                    request: this.request,\n                    response: responseToCache,\n                    event: this.event,\n                ***REMOVED***)) || undefined;\n            pluginsUsed = true;\n            if (!responseToCache) {\n                break;\n            ***REMOVED***\n        ***REMOVED***\n        if (!pluginsUsed) {\n            if (responseToCache && responseToCache.status !== 200) {\n                responseToCache = undefined;\n            ***REMOVED***\n            if (process.env.NODE_ENV !== 'production') {\n                if (responseToCache) {\n                    if (responseToCache.status !== 200) {\n                        if (responseToCache.status === 0) {\n                            logger.warn(`The response for '${this.request.url***REMOVED***' ` +\n                                `is an opaque response. The caching strategy that you're ` +\n                                `using will not cache opaque responses by default.`);\n                        ***REMOVED***\n                        else {\n                            logger.debug(`The response for '${this.request.url***REMOVED***' ` +\n                                `returned a status code of '${response.status***REMOVED***' and won't ` +\n                                `be cached as a result.`);\n                        ***REMOVED***\n                    ***REMOVED***\n                ***REMOVED***\n            ***REMOVED***\n        ***REMOVED***\n        return responseToCache;\n    ***REMOVED***\n***REMOVED***\nexport { StrategyHandler ***REMOVED***;\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { cacheNames ***REMOVED*** from 'workbox-core/_private/cacheNames.js';\nimport { WorkboxError ***REMOVED*** from 'workbox-core/_private/WorkboxError.js';\nimport { logger ***REMOVED*** from 'workbox-core/_private/logger.js';\nimport { getFriendlyURL ***REMOVED*** from 'workbox-core/_private/getFriendlyURL.js';\nimport { StrategyHandler ***REMOVED*** from './StrategyHandler.js';\nimport './_version.js';\n/**\n * An abstract base class that all other strategy classes must extend from:\n *\n * @memberof workbox-strategies\n */\nclass Strategy {\n    /**\n     * Creates a new instance of the strategy and sets all documented option\n     * properties as public instance properties.\n     *\n     * Note: if a custom strategy class extends the base Strategy class and does\n     * not need more than these properties, it does not need to define its own\n     * constructor.\n     *\n     * @param {Object***REMOVED*** [options]\n     * @param {string***REMOVED*** [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to the cache names provided by\n     * {@link workbox-core.cacheNames***REMOVED***.\n     * @param {Array<Object>***REMOVED*** [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins***REMOVED***\n     * to use in conjunction with this caching strategy.\n     * @param {Object***REMOVED*** [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {Object***REMOVED*** [options.matchOptions] The\n     * [`CacheQueryOptions`]{@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions***REMOVED***\n     * for any `cache.match()` or `cache.put()` calls made by this strategy.\n     */\n    constructor(options = {***REMOVED***) {\n        /**\n         * Cache name to store and retrieve\n         * requests. Defaults to the cache names provided by\n         * {@link workbox-core.cacheNames***REMOVED***.\n         *\n         * @type {string***REMOVED***\n         */\n        this.cacheName = cacheNames.getRuntimeName(options.cacheName);\n        /**\n         * The list\n         * [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins***REMOVED***\n         * used by this strategy.\n         *\n         * @type {Array<Object>***REMOVED***\n         */\n        this.plugins = options.plugins || [];\n        /**\n         * Values passed along to the\n         * [`init`]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters***REMOVED***\n         * of all fetch() requests made by this strategy.\n         *\n         * @type {Object***REMOVED***\n         */\n        this.fetchOptions = options.fetchOptions;\n        /**\n         * The\n         * [`CacheQueryOptions`]{@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions***REMOVED***\n         * for any `cache.match()` or `cache.put()` calls made by this strategy.\n         *\n         * @type {Object***REMOVED***\n         */\n        this.matchOptions = options.matchOptions;\n    ***REMOVED***\n    /**\n     * Perform a request strategy and returns a `Promise` that will resolve with\n     * a `Response`, invoking all relevant plugin callbacks.\n     *\n     * When a strategy instance is registered with a Workbox\n     * {@link workbox-routing.Route***REMOVED***, this method is automatically\n     * called when the route matches.\n     *\n     * Alternatively, this method can be used in a standalone `FetchEvent`\n     * listener by passing it to `event.respondWith()`.\n     *\n     * @param {FetchEvent|Object***REMOVED*** options A `FetchEvent` or an object with the\n     *     properties listed below.\n     * @param {Request|string***REMOVED*** options.request A request to run this strategy for.\n     * @param {ExtendableEvent***REMOVED*** options.event The event associated with the\n     *     request.\n     * @param {URL***REMOVED*** [options.url]\n     * @param {****REMOVED*** [options.params]\n     */\n    handle(options) {\n        const [responseDone] = this.handleAll(options);\n        return responseDone;\n    ***REMOVED***\n    /**\n     * Similar to {@link workbox-strategies.Strategy~handle***REMOVED***, but\n     * instead of just returning a `Promise` that resolves to a `Response` it\n     * it will return an tuple of `[response, done]` promises, where the former\n     * (`response`) is equivalent to what `handle()` returns, and the latter is a\n     * Promise that will resolve once any promises that were added to\n     * `event.waitUntil()` as part of performing the strategy have completed.\n     *\n     * You can await the `done` promise to ensure any extra work performed by\n     * the strategy (usually caching responses) completes successfully.\n     *\n     * @param {FetchEvent|Object***REMOVED*** options A `FetchEvent` or an object with the\n     *     properties listed below.\n     * @param {Request|string***REMOVED*** options.request A request to run this strategy for.\n     * @param {ExtendableEvent***REMOVED*** options.event The event associated with the\n     *     request.\n     * @param {URL***REMOVED*** [options.url]\n     * @param {****REMOVED*** [options.params]\n     * @return {Array<Promise>***REMOVED*** A tuple of [response, done]\n     *     promises that can be used to determine when the response resolves as\n     *     well as when the handler has completed all its work.\n     */\n    handleAll(options) {\n        // Allow for flexible options to be passed.\n        if (options instanceof FetchEvent) {\n            options = {\n                event: options,\n                request: options.request,\n            ***REMOVED***;\n        ***REMOVED***\n        const event = options.event;\n        const request = typeof options.request === 'string'\n            ? new Request(options.request)\n            : options.request;\n        const params = 'params' in options ? options.params : undefined;\n        const handler = new StrategyHandler(this, { event, request, params ***REMOVED***);\n        const responseDone = this._getResponse(handler, request, event);\n        const handlerDone = this._awaitComplete(responseDone, handler, request, event);\n        // Return an array of promises, suitable for use with Promise.all().\n        return [responseDone, handlerDone];\n    ***REMOVED***\n    async _getResponse(handler, request, event) {\n        await handler.runCallbacks('handlerWillStart', { event, request ***REMOVED***);\n        let response = undefined;\n        try {\n            response = await this._handle(request, handler);\n            // The \"official\" Strategy subclasses all throw this error automatically,\n            // but in case a third-party Strategy doesn't, ensure that we have a\n            // consistent failure when there's no response or an error response.\n            if (!response || response.type === 'error') {\n                throw new WorkboxError('no-response', { url: request.url ***REMOVED***);\n            ***REMOVED***\n        ***REMOVED***\n        catch (error) {\n            if (error instanceof Error) {\n                for (const callback of handler.iterateCallbacks('handlerDidError')) {\n                    response = await callback({ error, event, request ***REMOVED***);\n                    if (response) {\n                        break;\n                    ***REMOVED***\n                ***REMOVED***\n            ***REMOVED***\n            if (!response) {\n                throw error;\n            ***REMOVED***\n            else if (process.env.NODE_ENV !== 'production') {\n                logger.log(`While responding to '${getFriendlyURL(request.url)***REMOVED***', ` +\n                    `an ${error instanceof Error ? error.toString() : ''***REMOVED*** error occurred. Using a fallback response provided by ` +\n                    `a handlerDidError plugin.`);\n            ***REMOVED***\n        ***REMOVED***\n        for (const callback of handler.iterateCallbacks('handlerWillRespond')) {\n            response = await callback({ event, request, response ***REMOVED***);\n        ***REMOVED***\n        return response;\n    ***REMOVED***\n    async _awaitComplete(responseDone, handler, request, event) {\n        let response;\n        let error;\n        try {\n            response = await responseDone;\n        ***REMOVED***\n        catch (error) {\n            // Ignore errors, as response errors should be caught via the `response`\n            // promise above. The `done` promise will only throw for errors in\n            // promises passed to `handler.waitUntil()`.\n        ***REMOVED***\n        try {\n            await handler.runCallbacks('handlerDidRespond', {\n                event,\n                request,\n                response,\n            ***REMOVED***);\n            await handler.doneWaiting();\n        ***REMOVED***\n        catch (waitUntilError) {\n            if (waitUntilError instanceof Error) {\n                error = waitUntilError;\n            ***REMOVED***\n        ***REMOVED***\n        await handler.runCallbacks('handlerDidComplete', {\n            event,\n            request,\n            response,\n            error: error,\n        ***REMOVED***);\n        handler.destroy();\n        if (error) {\n            throw error;\n        ***REMOVED***\n    ***REMOVED***\n***REMOVED***\nexport { Strategy ***REMOVED***;\n/**\n * Classes extending the `Strategy` based class should implement this method,\n * and leverage the {@link workbox-strategies.StrategyHandler***REMOVED***\n * arg to perform all fetching and cache logic, which will ensure all relevant\n * cache, cache options, fetch options and plugins are used (per the current\n * strategy instance).\n *\n * @name _handle\n * @instance\n * @abstract\n * @function\n * @param {Request***REMOVED*** request\n * @param {workbox-strategies.StrategyHandler***REMOVED*** handler\n * @return {Promise<Response>***REMOVED***\n *\n * @memberof workbox-strategies.Strategy\n */\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nexport const cacheOkAndOpaquePlugin = {\n    /**\n     * Returns a valid response (to allow caching) if the status is 200 (OK) or\n     * 0 (opaque).\n     *\n     * @param {Object***REMOVED*** options\n     * @param {Response***REMOVED*** options.response\n     * @return {Response|null***REMOVED***\n     *\n     * @private\n     */\n    cacheWillUpdate: async ({ response ***REMOVED***) => {\n        if (response.status === 200 || response.status === 0) {\n            return response;\n        ***REMOVED***\n        return null;\n    ***REMOVED***,\n***REMOVED***;\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert ***REMOVED*** from 'workbox-core/_private/assert.js';\nimport { logger ***REMOVED*** from 'workbox-core/_private/logger.js';\nimport { WorkboxError ***REMOVED*** from 'workbox-core/_private/WorkboxError.js';\nimport { Strategy ***REMOVED*** from './Strategy.js';\nimport { messages ***REMOVED*** from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a [cache-first](https://developer.chrome.com/docs/workbox/caching-strategies-overview/#cache-first-falling-back-to-network)\n * request strategy.\n *\n * A cache first strategy is useful for assets that have been revisioned,\n * such as URLs like `/styles/example.a8f5f1.css`, since they\n * can be cached for long periods of time.\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-strategies\n */\nclass CacheFirst extends Strategy {\n    /**\n     * @private\n     * @param {Request|string***REMOVED*** request A request to run this strategy for.\n     * @param {workbox-strategies.StrategyHandler***REMOVED*** handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>***REMOVED***\n     */\n    async _handle(request, handler) {\n        const logs = [];\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: this.constructor.name,\n                funcName: 'makeRequest',\n                paramName: 'request',\n            ***REMOVED***);\n        ***REMOVED***\n        let response = await handler.cacheMatch(request);\n        let error = undefined;\n        if (!response) {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`No response found in the '${this.cacheName***REMOVED***' cache. ` +\n                    `Will respond with a network request.`);\n            ***REMOVED***\n            try {\n                response = await handler.fetchAndCachePut(request);\n            ***REMOVED***\n            catch (err) {\n                if (err instanceof Error) {\n                    error = err;\n                ***REMOVED***\n            ***REMOVED***\n            if (process.env.NODE_ENV !== 'production') {\n                if (response) {\n                    logs.push(`Got response from network.`);\n                ***REMOVED***\n                else {\n                    logs.push(`Unable to get a response from the network.`);\n                ***REMOVED***\n            ***REMOVED***\n        ***REMOVED***\n        else {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`Found a cached response in the '${this.cacheName***REMOVED***' cache.`);\n            ***REMOVED***\n        ***REMOVED***\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n            for (const log of logs) {\n                logger.log(log);\n            ***REMOVED***\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        ***REMOVED***\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url, error ***REMOVED***);\n        ***REMOVED***\n        return response;\n    ***REMOVED***\n***REMOVED***\nexport { CacheFirst ***REMOVED***;\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert ***REMOVED*** from 'workbox-core/_private/assert.js';\nimport { logger ***REMOVED*** from 'workbox-core/_private/logger.js';\nimport { WorkboxError ***REMOVED*** from 'workbox-core/_private/WorkboxError.js';\nimport { Strategy ***REMOVED*** from './Strategy.js';\nimport { messages ***REMOVED*** from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a [cache-only](https://developer.chrome.com/docs/workbox/caching-strategies-overview/#cache-only)\n * request strategy.\n *\n * This class is useful if you want to take advantage of any\n * [Workbox plugins](https://developer.chrome.com/docs/workbox/using-plugins/).\n *\n * If there is no cache match, this will throw a `WorkboxError` exception.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-strategies\n */\nclass CacheOnly extends Strategy {\n    /**\n     * @private\n     * @param {Request|string***REMOVED*** request A request to run this strategy for.\n     * @param {workbox-strategies.StrategyHandler***REMOVED*** handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>***REMOVED***\n     */\n    async _handle(request, handler) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: this.constructor.name,\n                funcName: 'makeRequest',\n                paramName: 'request',\n            ***REMOVED***);\n        ***REMOVED***\n        const response = await handler.cacheMatch(request);\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n            if (response) {\n                logger.log(`Found a cached response in the '${this.cacheName***REMOVED***' ` + `cache.`);\n                messages.printFinalResponse(response);\n            ***REMOVED***\n            else {\n                logger.log(`No response found in the '${this.cacheName***REMOVED***' cache.`);\n            ***REMOVED***\n            logger.groupEnd();\n        ***REMOVED***\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url ***REMOVED***);\n        ***REMOVED***\n        return response;\n    ***REMOVED***\n***REMOVED***\nexport { CacheOnly ***REMOVED***;\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert ***REMOVED*** from 'workbox-core/_private/assert.js';\nimport { logger ***REMOVED*** from 'workbox-core/_private/logger.js';\nimport { WorkboxError ***REMOVED*** from 'workbox-core/_private/WorkboxError.js';\nimport { cacheOkAndOpaquePlugin ***REMOVED*** from './plugins/cacheOkAndOpaquePlugin.js';\nimport { Strategy ***REMOVED*** from './Strategy.js';\nimport { messages ***REMOVED*** from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [network first](https://developer.chrome.com/docs/workbox/caching-strategies-overview/#network-first-falling-back-to-cache)\n * request strategy.\n *\n * By default, this strategy will cache responses with a 200 status code as\n * well as [opaque responses](https://developer.chrome.com/docs/workbox/caching-resources-during-runtime/#opaque-responses).\n * Opaque responses are are cross-origin requests where the response doesn't\n * support [CORS](https://enable-cors.org/).\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-strategies\n */\nclass NetworkFirst extends Strategy {\n    /**\n     * @param {Object***REMOVED*** [options]\n     * @param {string***REMOVED*** [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to cache names provided by\n     * {@link workbox-core.cacheNames***REMOVED***.\n     * @param {Array<Object>***REMOVED*** [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins***REMOVED***\n     * to use in conjunction with this caching strategy.\n     * @param {Object***REMOVED*** [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {Object***REMOVED*** [options.matchOptions] [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n     * @param {number***REMOVED*** [options.networkTimeoutSeconds] If set, any network requests\n     * that fail to respond within the timeout will fallback to the cache.\n     *\n     * This option can be used to combat\n     * \"[lie-fi]{@link https://developers.google.com/web/fundamentals/performance/poor-connectivity/#lie-fi***REMOVED***\"\n     * scenarios.\n     */\n    constructor(options = {***REMOVED***) {\n        super(options);\n        // If this instance contains no plugins with a 'cacheWillUpdate' callback,\n        // prepend the `cacheOkAndOpaquePlugin` plugin to the plugins list.\n        if (!this.plugins.some((p) => 'cacheWillUpdate' in p)) {\n            this.plugins.unshift(cacheOkAndOpaquePlugin);\n        ***REMOVED***\n        this._networkTimeoutSeconds = options.networkTimeoutSeconds || 0;\n        if (process.env.NODE_ENV !== 'production') {\n            if (this._networkTimeoutSeconds) {\n                assert.isType(this._networkTimeoutSeconds, 'number', {\n                    moduleName: 'workbox-strategies',\n                    className: this.constructor.name,\n                    funcName: 'constructor',\n                    paramName: 'networkTimeoutSeconds',\n                ***REMOVED***);\n            ***REMOVED***\n        ***REMOVED***\n    ***REMOVED***\n    /**\n     * @private\n     * @param {Request|string***REMOVED*** request A request to run this strategy for.\n     * @param {workbox-strategies.StrategyHandler***REMOVED*** handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>***REMOVED***\n     */\n    async _handle(request, handler) {\n        const logs = [];\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: this.constructor.name,\n                funcName: 'handle',\n                paramName: 'makeRequest',\n            ***REMOVED***);\n        ***REMOVED***\n        const promises = [];\n        let timeoutId;\n        if (this._networkTimeoutSeconds) {\n            const { id, promise ***REMOVED*** = this._getTimeoutPromise({ request, logs, handler ***REMOVED***);\n            timeoutId = id;\n            promises.push(promise);\n        ***REMOVED***\n        const networkPromise = this._getNetworkPromise({\n            timeoutId,\n            request,\n            logs,\n            handler,\n        ***REMOVED***);\n        promises.push(networkPromise);\n        const response = await handler.waitUntil((async () => {\n            // Promise.race() will resolve as soon as the first promise resolves.\n            return ((await handler.waitUntil(Promise.race(promises))) ||\n                // If Promise.race() resolved with null, it might be due to a network\n                // timeout + a cache miss. If that were to happen, we'd rather wait until\n                // the networkPromise resolves instead of returning null.\n                // Note that it's fine to await an already-resolved promise, so we don't\n                // have to check to see if it's still \"in flight\".\n                (await networkPromise));\n        ***REMOVED***)());\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n            for (const log of logs) {\n                logger.log(log);\n            ***REMOVED***\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        ***REMOVED***\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url ***REMOVED***);\n        ***REMOVED***\n        return response;\n    ***REMOVED***\n    /**\n     * @param {Object***REMOVED*** options\n     * @param {Request***REMOVED*** options.request\n     * @param {Array***REMOVED*** options.logs A reference to the logs array\n     * @param {Event***REMOVED*** options.event\n     * @return {Promise<Response>***REMOVED***\n     *\n     * @private\n     */\n    _getTimeoutPromise({ request, logs, handler, ***REMOVED***) {\n        let timeoutId;\n        const timeoutPromise = new Promise((resolve) => {\n            const onNetworkTimeout = async () => {\n                if (process.env.NODE_ENV !== 'production') {\n                    logs.push(`Timing out the network response at ` +\n                        `${this._networkTimeoutSeconds***REMOVED*** seconds.`);\n                ***REMOVED***\n                resolve(await handler.cacheMatch(request));\n            ***REMOVED***;\n            timeoutId = setTimeout(onNetworkTimeout, this._networkTimeoutSeconds * 1000);\n        ***REMOVED***);\n        return {\n            promise: timeoutPromise,\n            id: timeoutId,\n        ***REMOVED***;\n    ***REMOVED***\n    /**\n     * @param {Object***REMOVED*** options\n     * @param {number|undefined***REMOVED*** options.timeoutId\n     * @param {Request***REMOVED*** options.request\n     * @param {Array***REMOVED*** options.logs A reference to the logs Array.\n     * @param {Event***REMOVED*** options.event\n     * @return {Promise<Response>***REMOVED***\n     *\n     * @private\n     */\n    async _getNetworkPromise({ timeoutId, request, logs, handler, ***REMOVED***) {\n        let error;\n        let response;\n        try {\n            response = await handler.fetchAndCachePut(request);\n        ***REMOVED***\n        catch (fetchError) {\n            if (fetchError instanceof Error) {\n                error = fetchError;\n            ***REMOVED***\n        ***REMOVED***\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n        ***REMOVED***\n        if (process.env.NODE_ENV !== 'production') {\n            if (response) {\n                logs.push(`Got response from network.`);\n            ***REMOVED***\n            else {\n                logs.push(`Unable to get a response from the network. Will respond ` +\n                    `with a cached response.`);\n            ***REMOVED***\n        ***REMOVED***\n        if (error || !response) {\n            response = await handler.cacheMatch(request);\n            if (process.env.NODE_ENV !== 'production') {\n                if (response) {\n                    logs.push(`Found a cached response in the '${this.cacheName***REMOVED***'` + ` cache.`);\n                ***REMOVED***\n                else {\n                    logs.push(`No response found in the '${this.cacheName***REMOVED***' cache.`);\n                ***REMOVED***\n            ***REMOVED***\n        ***REMOVED***\n        return response;\n    ***REMOVED***\n***REMOVED***\nexport { NetworkFirst ***REMOVED***;\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert ***REMOVED*** from 'workbox-core/_private/assert.js';\nimport { logger ***REMOVED*** from 'workbox-core/_private/logger.js';\nimport { timeout ***REMOVED*** from 'workbox-core/_private/timeout.js';\nimport { WorkboxError ***REMOVED*** from 'workbox-core/_private/WorkboxError.js';\nimport { Strategy ***REMOVED*** from './Strategy.js';\nimport { messages ***REMOVED*** from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [network-only](https://developer.chrome.com/docs/workbox/caching-strategies-overview/#network-only)\n * request strategy.\n *\n * This class is useful if you want to take advantage of any\n * [Workbox plugins](https://developer.chrome.com/docs/workbox/using-plugins/).\n *\n * If the network request fails, this will throw a `WorkboxError` exception.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-strategies\n */\nclass NetworkOnly extends Strategy {\n    /**\n     * @param {Object***REMOVED*** [options]\n     * @param {Array<Object>***REMOVED*** [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins***REMOVED***\n     * to use in conjunction with this caching strategy.\n     * @param {Object***REMOVED*** [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {number***REMOVED*** [options.networkTimeoutSeconds] If set, any network requests\n     * that fail to respond within the timeout will result in a network error.\n     */\n    constructor(options = {***REMOVED***) {\n        super(options);\n        this._networkTimeoutSeconds = options.networkTimeoutSeconds || 0;\n    ***REMOVED***\n    /**\n     * @private\n     * @param {Request|string***REMOVED*** request A request to run this strategy for.\n     * @param {workbox-strategies.StrategyHandler***REMOVED*** handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>***REMOVED***\n     */\n    async _handle(request, handler) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: this.constructor.name,\n                funcName: '_handle',\n                paramName: 'request',\n            ***REMOVED***);\n        ***REMOVED***\n        let error = undefined;\n        let response;\n        try {\n            const promises = [\n                handler.fetch(request),\n            ];\n            if (this._networkTimeoutSeconds) {\n                const timeoutPromise = timeout(this._networkTimeoutSeconds * 1000);\n                promises.push(timeoutPromise);\n            ***REMOVED***\n            response = await Promise.race(promises);\n            if (!response) {\n                throw new Error(`Timed out the network response after ` +\n                    `${this._networkTimeoutSeconds***REMOVED*** seconds.`);\n            ***REMOVED***\n        ***REMOVED***\n        catch (err) {\n            if (err instanceof Error) {\n                error = err;\n            ***REMOVED***\n        ***REMOVED***\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n            if (response) {\n                logger.log(`Got response from network.`);\n            ***REMOVED***\n            else {\n                logger.log(`Unable to get a response from the network.`);\n            ***REMOVED***\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        ***REMOVED***\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url, error ***REMOVED***);\n        ***REMOVED***\n        return response;\n    ***REMOVED***\n***REMOVED***\nexport { NetworkOnly ***REMOVED***;\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert ***REMOVED*** from 'workbox-core/_private/assert.js';\nimport { logger ***REMOVED*** from 'workbox-core/_private/logger.js';\nimport { WorkboxError ***REMOVED*** from 'workbox-core/_private/WorkboxError.js';\nimport { cacheOkAndOpaquePlugin ***REMOVED*** from './plugins/cacheOkAndOpaquePlugin.js';\nimport { Strategy ***REMOVED*** from './Strategy.js';\nimport { messages ***REMOVED*** from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [stale-while-revalidate](https://developer.chrome.com/docs/workbox/caching-strategies-overview/#stale-while-revalidate)\n * request strategy.\n *\n * Resources are requested from both the cache and the network in parallel.\n * The strategy will respond with the cached version if available, otherwise\n * wait for the network response. The cache is updated with the network response\n * with each successful request.\n *\n * By default, this strategy will cache responses with a 200 status code as\n * well as [opaque responses](https://developer.chrome.com/docs/workbox/caching-resources-during-runtime/#opaque-responses).\n * Opaque responses are cross-origin requests where the response doesn't\n * support [CORS](https://enable-cors.org/).\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-strategies\n */\nclass StaleWhileRevalidate extends Strategy {\n    /**\n     * @param {Object***REMOVED*** [options]\n     * @param {string***REMOVED*** [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to cache names provided by\n     * {@link workbox-core.cacheNames***REMOVED***.\n     * @param {Array<Object>***REMOVED*** [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins***REMOVED***\n     * to use in conjunction with this caching strategy.\n     * @param {Object***REMOVED*** [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {Object***REMOVED*** [options.matchOptions] [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n     */\n    constructor(options = {***REMOVED***) {\n        super(options);\n        // If this instance contains no plugins with a 'cacheWillUpdate' callback,\n        // prepend the `cacheOkAndOpaquePlugin` plugin to the plugins list.\n        if (!this.plugins.some((p) => 'cacheWillUpdate' in p)) {\n            this.plugins.unshift(cacheOkAndOpaquePlugin);\n        ***REMOVED***\n    ***REMOVED***\n    /**\n     * @private\n     * @param {Request|string***REMOVED*** request A request to run this strategy for.\n     * @param {workbox-strategies.StrategyHandler***REMOVED*** handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>***REMOVED***\n     */\n    async _handle(request, handler) {\n        const logs = [];\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: this.constructor.name,\n                funcName: 'handle',\n                paramName: 'request',\n            ***REMOVED***);\n        ***REMOVED***\n        const fetchAndCachePromise = handler.fetchAndCachePut(request).catch(() => {\n            // Swallow this error because a 'no-response' error will be thrown in\n            // main handler return flow. This will be in the `waitUntil()` flow.\n        ***REMOVED***);\n        void handler.waitUntil(fetchAndCachePromise);\n        let response = await handler.cacheMatch(request);\n        let error;\n        if (response) {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`Found a cached response in the '${this.cacheName***REMOVED***'` +\n                    ` cache. Will update with the network response in the background.`);\n            ***REMOVED***\n        ***REMOVED***\n        else {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`No response found in the '${this.cacheName***REMOVED***' cache. ` +\n                    `Will wait for the network response.`);\n            ***REMOVED***\n            try {\n                // NOTE(philipwalton): Really annoying that we have to type cast here.\n                // https://github.com/microsoft/TypeScript/issues/20006\n                response = (await fetchAndCachePromise);\n            ***REMOVED***\n            catch (err) {\n                if (err instanceof Error) {\n                    error = err;\n                ***REMOVED***\n            ***REMOVED***\n        ***REMOVED***\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n            for (const log of logs) {\n                logger.log(log);\n            ***REMOVED***\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        ***REMOVED***\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url, error ***REMOVED***);\n        ***REMOVED***\n        return response;\n    ***REMOVED***\n***REMOVED***\nexport { StaleWhileRevalidate ***REMOVED***;\n"],"names":["self","_","e","toRequest","input","Request","StrategyHandler","constructor","strategy","options","_cacheKeys","Object","assign","this","event","_strategy","_handlerDeferred","Deferred","_extendLifetimePromises","_plugins","plugins","_pluginStateMap","Map","plugin","set","waitUntil","promise","request","mode","FetchEvent","preloadResponse","possiblePreloadResponse","originalRequest","hasCallback","clone","cb","iterateCallbacks","err","Error","WorkboxError","thrownErrorMessage","message","pluginFilteredRequest","fetchResponse","fetch","undefined","fetchOptions","callback","response","error","runCallbacks","responseClone","cachePut","key","cachedResponse","cacheName","matchOptions","effectiveRequest","getCacheKey","multiMatchOptions","caches","match","timeout","url","getFriendlyURL","responseToCache","_ensureResponseSafeToCache","cache","open","hasCacheUpdateCallback","oldResponse","cacheMatchIgnoreParams","put","name","executeQuotaErrorCallbacks","newResponse","params","param","state","get","statefulCallback","statefulParam","push","shift","destroy","resolve","pluginsUsed","status","Strategy","cacheNames","getRuntimeName","handle","responseDone","handleAll","handler","_getResponse","_awaitComplete","_handle","type","doneWaiting","waitUntilError","cacheOkAndOpaquePlugin","cacheWillUpdate","async","cacheMatch","fetchAndCachePut","some","p","unshift","_networkTimeoutSeconds","networkTimeoutSeconds","logs","promises","timeoutId","id","_getTimeoutPromise","networkPromise","_getNetworkPromise","Promise","race","setTimeout","fetchError","clearTimeout","timeoutPromise","fetchAndCachePromise","catch"],"mappings":"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"***REMOVED***