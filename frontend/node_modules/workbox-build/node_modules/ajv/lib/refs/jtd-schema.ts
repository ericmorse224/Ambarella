import {SchemaObject***REMOVED*** from "../types"

type MetaSchema = (root: boolean) => SchemaObject

const shared: MetaSchema = (root) => {
  const sch: SchemaObject = {
    nullable: {type: "boolean"***REMOVED***,
    metadata: {
      optionalProperties: {
        union: {elements: {ref: "schema"***REMOVED******REMOVED***,
      ***REMOVED***,
      additionalProperties: true,
    ***REMOVED***,
  ***REMOVED***
  if (root) sch.definitions = {values: {ref: "schema"***REMOVED******REMOVED***
  return sch
***REMOVED***

const emptyForm: MetaSchema = (root) => ({
  optionalProperties: shared(root),
***REMOVED***)

const refForm: MetaSchema = (root) => ({
  properties: {
    ref: {type: "string"***REMOVED***,
  ***REMOVED***,
  optionalProperties: shared(root),
***REMOVED***)

const typeForm: MetaSchema = (root) => ({
  properties: {
    type: {
      enum: [
        "boolean",
        "timestamp",
        "string",
        "float32",
        "float64",
        "int8",
        "uint8",
        "int16",
        "uint16",
        "int32",
        "uint32",
      ],
    ***REMOVED***,
  ***REMOVED***,
  optionalProperties: shared(root),
***REMOVED***)

const enumForm: MetaSchema = (root) => ({
  properties: {
    enum: {elements: {type: "string"***REMOVED******REMOVED***,
  ***REMOVED***,
  optionalProperties: shared(root),
***REMOVED***)

const elementsForm: MetaSchema = (root) => ({
  properties: {
    elements: {ref: "schema"***REMOVED***,
  ***REMOVED***,
  optionalProperties: shared(root),
***REMOVED***)

const propertiesForm: MetaSchema = (root) => ({
  properties: {
    properties: {values: {ref: "schema"***REMOVED******REMOVED***,
  ***REMOVED***,
  optionalProperties: {
    optionalProperties: {values: {ref: "schema"***REMOVED******REMOVED***,
    additionalProperties: {type: "boolean"***REMOVED***,
    ...shared(root),
  ***REMOVED***,
***REMOVED***)

const optionalPropertiesForm: MetaSchema = (root) => ({
  properties: {
    optionalProperties: {values: {ref: "schema"***REMOVED******REMOVED***,
  ***REMOVED***,
  optionalProperties: {
    additionalProperties: {type: "boolean"***REMOVED***,
    ...shared(root),
  ***REMOVED***,
***REMOVED***)

const discriminatorForm: MetaSchema = (root) => ({
  properties: {
    discriminator: {type: "string"***REMOVED***,
    mapping: {
      values: {
        metadata: {
          union: [propertiesForm(false), optionalPropertiesForm(false)],
        ***REMOVED***,
      ***REMOVED***,
    ***REMOVED***,
  ***REMOVED***,
  optionalProperties: shared(root),
***REMOVED***)

const valuesForm: MetaSchema = (root) => ({
  properties: {
    values: {ref: "schema"***REMOVED***,
  ***REMOVED***,
  optionalProperties: shared(root),
***REMOVED***)

const schema: MetaSchema = (root) => ({
  metadata: {
    union: [
      emptyForm,
      refForm,
      typeForm,
      enumForm,
      elementsForm,
      propertiesForm,
      optionalPropertiesForm,
      discriminatorForm,
      valuesForm,
    ].map((s) => s(root)),
  ***REMOVED***,
***REMOVED***)

const jtdMetaSchema: SchemaObject = {
  definitions: {
    schema: schema(false),
  ***REMOVED***,
  ...schema(true),
***REMOVED***

export default jtdMetaSchema
