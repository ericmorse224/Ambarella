/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

/** @typedef {import("../../declarations/WebpackOptions").RuleSetConditionOrConditions***REMOVED*** RuleSetConditionOrConditions */
/** @typedef {import("../../declarations/WebpackOptions").RuleSetRule***REMOVED*** RuleSetRule */
/** @typedef {import("./RuleSetCompiler")***REMOVED*** RuleSetCompiler */
/** @typedef {import("./RuleSetCompiler").EffectData***REMOVED*** EffectData */
/** @typedef {import("./RuleSetCompiler").RuleCondition***REMOVED*** RuleCondition */
/** @typedef {import("./RuleSetCompiler").RuleConditionFunction***REMOVED*** RuleConditionFunction */

/**
 * @template T
 * @template {T[keyof T]***REMOVED*** V
 * @typedef {import("./RuleSetCompiler").KeysOfTypes<T, V>***REMOVED*** KeysOfTypes
 */

/** @typedef {KeysOfTypes<RuleSetRule, { [k: string]: RuleSetConditionOrConditions ***REMOVED***>***REMOVED*** ObjectMatcherRuleKeys */

class ObjectMatcherRulePlugin {
	/**
	 * @param {ObjectMatcherRuleKeys***REMOVED*** ruleProperty the rule property
	 * @param {keyof EffectData=***REMOVED*** dataProperty the data property
	 * @param {RuleConditionFunction=***REMOVED*** additionalConditionFunction need to check
	 */
	constructor(ruleProperty, dataProperty, additionalConditionFunction) {
		this.ruleProperty = ruleProperty;
		this.dataProperty = dataProperty || ruleProperty;
		this.additionalConditionFunction = additionalConditionFunction;
	***REMOVED***

	/**
	 * @param {RuleSetCompiler***REMOVED*** ruleSetCompiler the rule set compiler
	 * @returns {void***REMOVED***
	 */
	apply(ruleSetCompiler) {
		const { ruleProperty, dataProperty ***REMOVED*** = this;
		ruleSetCompiler.hooks.rule.tap(
			"ObjectMatcherRulePlugin",
			(path, rule, unhandledProperties, result) => {
				if (unhandledProperties.has(ruleProperty)) {
					unhandledProperties.delete(ruleProperty);
					const value =
						/** @type {Record<string, RuleSetConditionOrConditions>***REMOVED*** */
						(rule[ruleProperty]);
					for (const property of Object.keys(value)) {
						const nestedDataProperties = property.split(".");
						const condition = ruleSetCompiler.compileCondition(
							`${path***REMOVED***.${ruleProperty***REMOVED***.${property***REMOVED***`,
							value[property]
						);
						if (this.additionalConditionFunction) {
							result.conditions.push({
								property: [dataProperty],
								matchWhenEmpty: condition.matchWhenEmpty,
								fn: this.additionalConditionFunction
							***REMOVED***);
						***REMOVED***
						result.conditions.push({
							property: [dataProperty, ...nestedDataProperties],
							matchWhenEmpty: condition.matchWhenEmpty,
							fn: condition.fn
						***REMOVED***);
					***REMOVED***
				***REMOVED***
			***REMOVED***
		);
	***REMOVED***
***REMOVED***

module.exports = ObjectMatcherRulePlugin;
