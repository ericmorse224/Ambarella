/*
	MIT License http://www.opensource.org/licenses/mit-license.php
*/

"use strict";

const RuntimeGlobals = require("../RuntimeGlobals");
const RuntimeModule = require("../RuntimeModule");
const Template = require("../Template");

/** @typedef {import("../Compilation")***REMOVED*** Compilation */
/** @typedef {import("../Module").ReadOnlyRuntimeRequirements***REMOVED*** ReadOnlyRuntimeRequirements */

class EnsureChunkRuntimeModule extends RuntimeModule {
	/**
	 * @param {ReadOnlyRuntimeRequirements***REMOVED*** runtimeRequirements runtime requirements
	 */
	constructor(runtimeRequirements) {
		super("ensure chunk");
		this.runtimeRequirements = runtimeRequirements;
	***REMOVED***

	/**
	 * @returns {string | null***REMOVED*** runtime code
	 */
	generate() {
		const compilation = /** @type {Compilation***REMOVED*** */ (this.compilation);
		const { runtimeTemplate ***REMOVED*** = compilation;
		// Check if there are non initial chunks which need to be imported using require-ensure
		if (this.runtimeRequirements.has(RuntimeGlobals.ensureChunkHandlers)) {
			const withFetchPriority = this.runtimeRequirements.has(
				RuntimeGlobals.hasFetchPriority
			);
			const handlers = RuntimeGlobals.ensureChunkHandlers;
			return Template.asString([
				`${handlers***REMOVED*** = {***REMOVED***;`,
				"// This file contains only the entry chunk.",
				"// The chunk loading function for additional chunks",
				`${RuntimeGlobals.ensureChunk***REMOVED*** = ${runtimeTemplate.basicFunction(
					`chunkId${withFetchPriority ? ", fetchPriority" : ""***REMOVED***`,
					[
						`return Promise.all(Object.keys(${handlers***REMOVED***).reduce(${runtimeTemplate.basicFunction(
							"promises, key",
							[
								`${handlers***REMOVED***[key](chunkId, promises${
									withFetchPriority ? ", fetchPriority" : ""
								***REMOVED***);`,
								"return promises;"
							]
						)***REMOVED***, []));`
					]
				)***REMOVED***;`
			]);
		***REMOVED***
		// There ensureChunk is used somewhere in the tree, so we need an empty requireEnsure
		// function. This can happen with multiple entrypoints.
		return Template.asString([
			"// The chunk loading function for additional chunks",
			"// Since all referenced chunks are already included",
			"// in this file, this function is empty here.",
			`${RuntimeGlobals.ensureChunk***REMOVED*** = ${runtimeTemplate.returningFunction(
				"Promise.resolve()"
			)***REMOVED***;`
		]);
	***REMOVED***
***REMOVED***

module.exports = EnsureChunkRuntimeModule;
