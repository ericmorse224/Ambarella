/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Ivan Kopeykin @vankop
*/

"use strict";

const WebpackError = require("./WebpackError");
const CURRENT_METHOD_REGEXP = /at ([a-zA-Z0-9_.]*)/;

/**
 * @param {string=***REMOVED*** method method name
 * @returns {string***REMOVED*** message
 */
function createMessage(method) {
	return `Abstract method${method ? ` ${method***REMOVED***` : ""***REMOVED***. Must be overridden.`;
***REMOVED***

/**
 * @constructor
 */
function Message() {
	/** @type {string | undefined***REMOVED*** */
	this.stack = undefined;
	Error.captureStackTrace(this);
	/** @type {RegExpMatchArray | null***REMOVED*** */
	const match =
		/** @type {string***REMOVED*** */
		(/** @type {unknown***REMOVED*** */ (this.stack))
			.split("\n")[3]
			.match(CURRENT_METHOD_REGEXP);

	this.message = match && match[1] ? createMessage(match[1]) : createMessage();
***REMOVED***

/**
 * Error for abstract method
 * @example
 * ```js
 * class FooClass {
 *     abstractMethod() {
 *         throw new AbstractMethodError(); // error message: Abstract method FooClass.abstractMethod. Must be overridden.
 *     ***REMOVED***
 * ***REMOVED***
 * ```
 */
class AbstractMethodError extends WebpackError {
	constructor() {
		super(new Message().message);
		this.name = "AbstractMethodError";
	***REMOVED***
***REMOVED***

module.exports = AbstractMethodError;
