/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const ModuleNotFoundError = require("../ModuleNotFoundError");
const RuntimeGlobals = require("../RuntimeGlobals");
const WebpackError = require("../WebpackError");
const { parseOptions ***REMOVED*** = require("../container/options");
const LazySet = require("../util/LazySet");
const createSchemaValidation = require("../util/create-schema-validation");
const { parseRange ***REMOVED*** = require("../util/semver");
const ConsumeSharedFallbackDependency = require("./ConsumeSharedFallbackDependency");
const ConsumeSharedModule = require("./ConsumeSharedModule");
const ConsumeSharedRuntimeModule = require("./ConsumeSharedRuntimeModule");
const ProvideForSharedDependency = require("./ProvideForSharedDependency");
const { resolveMatchedConfigs ***REMOVED*** = require("./resolveMatchedConfigs");
const {
	isRequiredVersion,
	getDescriptionFile,
	getRequiredVersionFromDescriptionFile
***REMOVED*** = require("./utils");

/** @typedef {import("../../declarations/plugins/sharing/ConsumeSharedPlugin").ConsumeSharedPluginOptions***REMOVED*** ConsumeSharedPluginOptions */
/** @typedef {import("../../declarations/plugins/sharing/ConsumeSharedPlugin").ConsumesConfig***REMOVED*** ConsumesConfig */
/** @typedef {import("../Compiler")***REMOVED*** Compiler */
/** @typedef {import("../ResolverFactory").ResolveOptionsWithDependencyType***REMOVED*** ResolveOptionsWithDependencyType */
/** @typedef {import("../util/semver").SemVerRange***REMOVED*** SemVerRange */
/** @typedef {import("./ConsumeSharedModule").ConsumeOptions***REMOVED*** ConsumeOptions */
/** @typedef {import("./utils").DescriptionFile***REMOVED*** DescriptionFile */

const validate = createSchemaValidation(
	require("../../schemas/plugins/sharing/ConsumeSharedPlugin.check.js"),
	() => require("../../schemas/plugins/sharing/ConsumeSharedPlugin.json"),
	{
		name: "Consume Shared Plugin",
		baseDataPath: "options"
	***REMOVED***
);

/** @type {ResolveOptionsWithDependencyType***REMOVED*** */
const RESOLVE_OPTIONS = { dependencyType: "esm" ***REMOVED***;
const PLUGIN_NAME = "ConsumeSharedPlugin";

class ConsumeSharedPlugin {
	/**
	 * @param {ConsumeSharedPluginOptions***REMOVED*** options options
	 */
	constructor(options) {
		if (typeof options !== "string") {
			validate(options);
		***REMOVED***

		/** @type {[string, ConsumeOptions][]***REMOVED*** */
		this._consumes = parseOptions(
			options.consumes,
			(item, key) => {
				if (Array.isArray(item)) throw new Error("Unexpected array in options");
				/** @type {ConsumeOptions***REMOVED*** */
				const result =
					item === key || !isRequiredVersion(item)
						? // item is a request/key
							{
								import: key,
								shareScope: options.shareScope || "default",
								shareKey: key,
								requiredVersion: undefined,
								packageName: undefined,
								strictVersion: false,
								singleton: false,
								eager: false
							***REMOVED***
						: // key is a request/key
							// item is a version
							{
								import: key,
								shareScope: options.shareScope || "default",
								shareKey: key,
								requiredVersion: parseRange(item),
								strictVersion: true,
								packageName: undefined,
								singleton: false,
								eager: false
							***REMOVED***;
				return result;
			***REMOVED***,
			(item, key) => ({
				import: item.import === false ? undefined : item.import || key,
				shareScope: item.shareScope || options.shareScope || "default",
				shareKey: item.shareKey || key,
				requiredVersion:
					typeof item.requiredVersion === "string"
						? parseRange(item.requiredVersion)
						: item.requiredVersion,
				strictVersion:
					typeof item.strictVersion === "boolean"
						? item.strictVersion
						: item.import !== false && !item.singleton,
				packageName: item.packageName,
				singleton: Boolean(item.singleton),
				eager: Boolean(item.eager)
			***REMOVED***)
		);
	***REMOVED***

	/**
	 * Apply the plugin
	 * @param {Compiler***REMOVED*** compiler the compiler instance
	 * @returns {void***REMOVED***
	 */
	apply(compiler) {
		compiler.hooks.thisCompilation.tap(
			PLUGIN_NAME,
			(compilation, { normalModuleFactory ***REMOVED***) => {
				compilation.dependencyFactories.set(
					ConsumeSharedFallbackDependency,
					normalModuleFactory
				);

				/** @type {Map<string, ConsumeOptions>***REMOVED*** */
				let unresolvedConsumes;
				/** @type {Map<string, ConsumeOptions>***REMOVED*** */
				let resolvedConsumes;
				/** @type {Map<string, ConsumeOptions>***REMOVED*** */
				let prefixedConsumes;
				const promise = resolveMatchedConfigs(compilation, this._consumes).then(
					({ resolved, unresolved, prefixed ***REMOVED***) => {
						resolvedConsumes = resolved;
						unresolvedConsumes = unresolved;
						prefixedConsumes = prefixed;
					***REMOVED***
				);

				const resolver = compilation.resolverFactory.get(
					"normal",
					RESOLVE_OPTIONS
				);

				/**
				 * @param {string***REMOVED*** context issuer directory
				 * @param {string***REMOVED*** request request
				 * @param {ConsumeOptions***REMOVED*** config options
				 * @returns {Promise<ConsumeSharedModule>***REMOVED*** create module
				 */
				const createConsumeSharedModule = (context, request, config) => {
					/**
					 * @param {string***REMOVED*** details details
					 */
					const requiredVersionWarning = details => {
						const error = new WebpackError(
							`No required version specified and unable to automatically determine one. ${details***REMOVED***`
						);
						error.file = `shared module ${request***REMOVED***`;
						compilation.warnings.push(error);
					***REMOVED***;
					const directFallback =
						config.import &&
						/^(\.\.?(\/|$)|\/|[A-Za-z]:|\\\\)/.test(config.import);
					return Promise.all([
						new Promise(
							/**
							 * @param {(value?: string) => void***REMOVED*** resolve resolve
							 */
							resolve => {
								if (!config.import) {
									resolve();
									return;
								***REMOVED***
								const resolveContext = {
									/** @type {LazySet<string>***REMOVED*** */
									fileDependencies: new LazySet(),
									/** @type {LazySet<string>***REMOVED*** */
									contextDependencies: new LazySet(),
									/** @type {LazySet<string>***REMOVED*** */
									missingDependencies: new LazySet()
								***REMOVED***;
								resolver.resolve(
									{***REMOVED***,
									directFallback ? compiler.context : context,
									config.import,
									resolveContext,
									(err, result) => {
										compilation.contextDependencies.addAll(
											resolveContext.contextDependencies
										);
										compilation.fileDependencies.addAll(
											resolveContext.fileDependencies
										);
										compilation.missingDependencies.addAll(
											resolveContext.missingDependencies
										);
										if (err) {
											compilation.errors.push(
												new ModuleNotFoundError(null, err, {
													name: `resolving fallback for shared module ${request***REMOVED***`
												***REMOVED***)
											);
											return resolve();
										***REMOVED***
										resolve(/** @type {string***REMOVED*** */ (result));
									***REMOVED***
								);
							***REMOVED***
						),
						new Promise(
							/**
							 * @param {(value?: SemVerRange) => void***REMOVED*** resolve resolve
							 */
							resolve => {
								if (config.requiredVersion !== undefined) {
									resolve(/** @type {SemVerRange***REMOVED*** */ (config.requiredVersion));
									return;
								***REMOVED***
								let packageName = config.packageName;
								if (packageName === undefined) {
									if (/^(\/|[A-Za-z]:|\\\\)/.test(request)) {
										// For relative or absolute requests we don't automatically use a packageName.
										// If wished one can specify one with the packageName option.
										resolve();
										return;
									***REMOVED***
									const match = /^((?:@[^\\/]+[\\/])?[^\\/]+)/.exec(request);
									if (!match) {
										requiredVersionWarning(
											"Unable to extract the package name from request."
										);
										resolve();
										return;
									***REMOVED***
									packageName = match[0];
								***REMOVED***

								getDescriptionFile(
									compilation.inputFileSystem,
									context,
									["package.json"],
									(err, result, checkedDescriptionFilePaths) => {
										if (err) {
											requiredVersionWarning(
												`Unable to read description file: ${err***REMOVED***`
											);
											return resolve();
										***REMOVED***
										const { data ***REMOVED*** =
											/** @type {DescriptionFile***REMOVED*** */
											(result || {***REMOVED***);
										if (!data) {
											if (checkedDescriptionFilePaths) {
												requiredVersionWarning(
													[
														`Unable to find required version for "${packageName***REMOVED***" in description file/s`,
														checkedDescriptionFilePaths.join("\n"),
														"It need to be in dependencies, devDependencies or peerDependencies."
													].join("\n")
												);
											***REMOVED*** else {
												requiredVersionWarning(
													`Unable to find description file in ${context***REMOVED***.`
												);
											***REMOVED***

											return resolve();
										***REMOVED***
										if (data.name === packageName) {
											// Package self-referencing
											return resolve();
										***REMOVED***
										const requiredVersion =
											getRequiredVersionFromDescriptionFile(data, packageName);

										if (requiredVersion) {
											return resolve(parseRange(requiredVersion));
										***REMOVED***

										resolve();
									***REMOVED***,
									result => {
										if (!result) return false;
										const maybeRequiredVersion =
											getRequiredVersionFromDescriptionFile(
												result.data,
												packageName
											);
										return (
											result.data.name === packageName ||
											typeof maybeRequiredVersion === "string"
										);
									***REMOVED***
								);
							***REMOVED***
						)
					]).then(
						([importResolved, requiredVersion]) =>
							new ConsumeSharedModule(
								directFallback ? compiler.context : context,
								{
									...config,
									importResolved,
									import: importResolved ? config.import : undefined,
									requiredVersion
								***REMOVED***
							)
					);
				***REMOVED***;

				normalModuleFactory.hooks.factorize.tapPromise(
					PLUGIN_NAME,
					({ context, request, dependencies ***REMOVED***) =>
						// wait for resolving to be complete
						promise.then(() => {
							if (
								dependencies[0] instanceof ConsumeSharedFallbackDependency ||
								dependencies[0] instanceof ProvideForSharedDependency
							) {
								return;
							***REMOVED***
							const match = unresolvedConsumes.get(request);
							if (match !== undefined) {
								return createConsumeSharedModule(context, request, match);
							***REMOVED***
							for (const [prefix, options] of prefixedConsumes) {
								if (request.startsWith(prefix)) {
									const remainder = request.slice(prefix.length);
									return createConsumeSharedModule(context, request, {
										...options,
										import: options.import
											? options.import + remainder
											: undefined,
										shareKey: options.shareKey + remainder
									***REMOVED***);
								***REMOVED***
							***REMOVED***
						***REMOVED***)
				);
				normalModuleFactory.hooks.createModule.tapPromise(
					PLUGIN_NAME,
					({ resource ***REMOVED***, { context, dependencies ***REMOVED***) => {
						if (
							dependencies[0] instanceof ConsumeSharedFallbackDependency ||
							dependencies[0] instanceof ProvideForSharedDependency
						) {
							return Promise.resolve();
						***REMOVED***
						const options = resolvedConsumes.get(
							/** @type {string***REMOVED*** */ (resource)
						);
						if (options !== undefined) {
							return createConsumeSharedModule(
								context,
								/** @type {string***REMOVED*** */ (resource),
								options
							);
						***REMOVED***
						return Promise.resolve();
					***REMOVED***
				);
				compilation.hooks.additionalTreeRuntimeRequirements.tap(
					PLUGIN_NAME,
					(chunk, set) => {
						set.add(RuntimeGlobals.module);
						set.add(RuntimeGlobals.moduleCache);
						set.add(RuntimeGlobals.moduleFactoriesAddOnly);
						set.add(RuntimeGlobals.shareScopeMap);
						set.add(RuntimeGlobals.initializeSharing);
						set.add(RuntimeGlobals.hasOwnProperty);
						compilation.addRuntimeModule(
							chunk,
							new ConsumeSharedRuntimeModule(set)
						);
					***REMOVED***
				);
			***REMOVED***
		);
	***REMOVED***
***REMOVED***

module.exports = ConsumeSharedPlugin;
