/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

/** @typedef {import("webpack-sources").ReplaceSource***REMOVED*** ReplaceSource */
/** @typedef {import("./ChunkGraph")***REMOVED*** ChunkGraph */
/** @typedef {import("./CodeGenerationResults")***REMOVED*** CodeGenerationResults */
/** @typedef {import("./ConcatenationScope")***REMOVED*** ConcatenationScope */
/** @typedef {import("./Dependency")***REMOVED*** Dependency */
/** @typedef {import("./Dependency").RuntimeSpec***REMOVED*** RuntimeSpec */
/** @typedef {import("./DependencyTemplates")***REMOVED*** DependencyTemplates */
/** @typedef {import("./Generator").GenerateContext***REMOVED*** GenerateContext */
/** @typedef {import("./Module")***REMOVED*** Module */
/** @typedef {import("./Module").RuntimeRequirements***REMOVED*** RuntimeRequirements */
/** @typedef {import("./ModuleGraph")***REMOVED*** ModuleGraph */
/** @typedef {import("./RuntimeTemplate")***REMOVED*** RuntimeTemplate */

/**
 * @template T
 * @typedef {import("./InitFragment")<T>***REMOVED*** InitFragment
 */

/**
 * @typedef {object***REMOVED*** DependencyTemplateContext
 * @property {RuntimeTemplate***REMOVED*** runtimeTemplate the runtime template
 * @property {DependencyTemplates***REMOVED*** dependencyTemplates the dependency templates
 * @property {ModuleGraph***REMOVED*** moduleGraph the module graph
 * @property {ChunkGraph***REMOVED*** chunkGraph the chunk graph
 * @property {RuntimeRequirements***REMOVED*** runtimeRequirements the requirements for runtime
 * @property {Module***REMOVED*** module current module
 * @property {RuntimeSpec***REMOVED*** runtime current runtimes, for which code is generated
 * @property {InitFragment<GenerateContext>[]***REMOVED*** initFragments mutable array of init fragments for the current module
 * @property {ConcatenationScope=***REMOVED*** concatenationScope when in a concatenated module, information about other concatenated modules
 * @property {CodeGenerationResults***REMOVED*** codeGenerationResults the code generation results
 * @property {InitFragment<GenerateContext>[]***REMOVED*** chunkInitFragments chunkInitFragments
 */

/**
 * @typedef {object***REMOVED*** CssDependencyTemplateContextExtras
 * @property {CssData***REMOVED*** cssData the css exports data
 */

/**
 * @typedef {object***REMOVED*** CssData
 * @property {boolean***REMOVED*** esModule whether export __esModule
 * @property {Map<string, string>***REMOVED*** exports the css exports
 */

/** @typedef {DependencyTemplateContext & CssDependencyTemplateContextExtras***REMOVED*** CssDependencyTemplateContext */

class DependencyTemplate {
	/* istanbul ignore next */
	/**
	 * @abstract
	 * @param {Dependency***REMOVED*** dependency the dependency for which the template should be applied
	 * @param {ReplaceSource***REMOVED*** source the current replace source which can be modified
	 * @param {DependencyTemplateContext***REMOVED*** templateContext the context object
	 * @returns {void***REMOVED***
	 */
	apply(dependency, source, templateContext) {
		const AbstractMethodError = require("./AbstractMethodError");
		throw new AbstractMethodError();
	***REMOVED***
***REMOVED***

module.exports = DependencyTemplate;
