/**
 * @fileoverview Rule to flag dangling underscores in variable declarations.
 * @author Matt DuVall <http://www.mattduvall.com>
 */

"use strict";

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

/** @type {import('../types').Rule.RuleModule***REMOVED*** */
module.exports = {
	meta: {
		type: "suggestion",

		defaultOptions: [
			{
				allow: [],
				allowAfterSuper: false,
				allowAfterThis: false,
				allowAfterThisConstructor: false,
				allowFunctionParams: true,
				allowInArrayDestructuring: true,
				allowInObjectDestructuring: true,
				enforceInClassFields: false,
				enforceInMethodNames: false,
			***REMOVED***,
		],

		docs: {
			description: "Disallow dangling underscores in identifiers",
			recommended: false,
			frozen: true,
			url: "https://eslint.org/docs/latest/rules/no-underscore-dangle",
		***REMOVED***,

		schema: [
			{
				type: "object",
				properties: {
					allow: {
						type: "array",
						items: {
							type: "string",
						***REMOVED***,
					***REMOVED***,
					allowAfterThis: {
						type: "boolean",
					***REMOVED***,
					allowAfterSuper: {
						type: "boolean",
					***REMOVED***,
					allowAfterThisConstructor: {
						type: "boolean",
					***REMOVED***,
					enforceInMethodNames: {
						type: "boolean",
					***REMOVED***,
					allowFunctionParams: {
						type: "boolean",
					***REMOVED***,
					enforceInClassFields: {
						type: "boolean",
					***REMOVED***,
					allowInArrayDestructuring: {
						type: "boolean",
					***REMOVED***,
					allowInObjectDestructuring: {
						type: "boolean",
					***REMOVED***,
				***REMOVED***,
				additionalProperties: false,
			***REMOVED***,
		],

		messages: {
			unexpectedUnderscore:
				"Unexpected dangling '_' in '{{identifier***REMOVED******REMOVED***'.",
		***REMOVED***,
	***REMOVED***,

	create(context) {
		const [
			{
				allow,
				allowAfterSuper,
				allowAfterThis,
				allowAfterThisConstructor,
				allowFunctionParams,
				allowInArrayDestructuring,
				allowInObjectDestructuring,
				enforceInClassFields,
				enforceInMethodNames,
			***REMOVED***,
		] = context.options;
		const sourceCode = context.sourceCode;

		//-------------------------------------------------------------------------
		// Helpers
		//-------------------------------------------------------------------------

		/**
		 * Check if identifier is present inside the allowed option
		 * @param {string***REMOVED*** identifier name of the node
		 * @returns {boolean***REMOVED*** true if its is present
		 * @private
		 */
		function isAllowed(identifier) {
			return allow.includes(identifier);
		***REMOVED***

		/**
		 * Check if identifier has a dangling underscore
		 * @param {string***REMOVED*** identifier name of the node
		 * @returns {boolean***REMOVED*** true if its is present
		 * @private
		 */
		function hasDanglingUnderscore(identifier) {
			const len = identifier.length;

			return (
				identifier !== "_" &&
				(identifier[0] === "_" || identifier[len - 1] === "_")
			);
		***REMOVED***

		/**
		 * Check if identifier is a special case member expression
		 * @param {string***REMOVED*** identifier name of the node
		 * @returns {boolean***REMOVED*** true if its is a special case
		 * @private
		 */
		function isSpecialCaseIdentifierForMemberExpression(identifier) {
			return identifier === "__proto__";
		***REMOVED***

		/**
		 * Check if identifier is a special case variable expression
		 * @param {string***REMOVED*** identifier name of the node
		 * @returns {boolean***REMOVED*** true if its is a special case
		 * @private
		 */
		function isSpecialCaseIdentifierInVariableExpression(identifier) {
			// Checks for the underscore library usage here
			return identifier === "_";
		***REMOVED***

		/**
		 * Check if a node is a member reference of this.constructor
		 * @param {ASTNode***REMOVED*** node node to evaluate
		 * @returns {boolean***REMOVED*** true if it is a reference on this.constructor
		 * @private
		 */
		function isThisConstructorReference(node) {
			return (
				node.object.type === "MemberExpression" &&
				node.object.property.name === "constructor" &&
				node.object.object.type === "ThisExpression"
			);
		***REMOVED***

		/**
		 * Check if function parameter has a dangling underscore.
		 * @param {ASTNode***REMOVED*** node function node to evaluate
		 * @returns {void***REMOVED***
		 * @private
		 */
		function checkForDanglingUnderscoreInFunctionParameters(node) {
			if (!allowFunctionParams) {
				node.params.forEach(param => {
					const { type ***REMOVED*** = param;
					let nodeToCheck;

					if (type === "RestElement") {
						nodeToCheck = param.argument;
					***REMOVED*** else if (type === "AssignmentPattern") {
						nodeToCheck = param.left;
					***REMOVED*** else {
						nodeToCheck = param;
					***REMOVED***

					if (nodeToCheck.type === "Identifier") {
						const identifier = nodeToCheck.name;

						if (
							hasDanglingUnderscore(identifier) &&
							!isAllowed(identifier)
						) {
							context.report({
								node: param,
								messageId: "unexpectedUnderscore",
								data: {
									identifier,
								***REMOVED***,
							***REMOVED***);
						***REMOVED***
					***REMOVED***
				***REMOVED***);
			***REMOVED***
		***REMOVED***

		/**
		 * Check if function has a dangling underscore
		 * @param {ASTNode***REMOVED*** node node to evaluate
		 * @returns {void***REMOVED***
		 * @private
		 */
		function checkForDanglingUnderscoreInFunction(node) {
			if (node.type === "FunctionDeclaration" && node.id) {
				const identifier = node.id.name;

				if (
					typeof identifier !== "undefined" &&
					hasDanglingUnderscore(identifier) &&
					!isAllowed(identifier)
				) {
					context.report({
						node,
						messageId: "unexpectedUnderscore",
						data: {
							identifier,
						***REMOVED***,
					***REMOVED***);
				***REMOVED***
			***REMOVED***
			checkForDanglingUnderscoreInFunctionParameters(node);
		***REMOVED***

		/**
		 * Check if variable expression has a dangling underscore
		 * @param {ASTNode***REMOVED*** node node to evaluate
		 * @returns {void***REMOVED***
		 * @private
		 */
		function checkForDanglingUnderscoreInVariableExpression(node) {
			sourceCode.getDeclaredVariables(node).forEach(variable => {
				const definition = variable.defs.find(def => def.node === node);
				const identifierNode = definition.name;
				const identifier = identifierNode.name;
				let parent = identifierNode.parent;

				while (
					![
						"VariableDeclarator",
						"ArrayPattern",
						"ObjectPattern",
					].includes(parent.type)
				) {
					parent = parent.parent;
				***REMOVED***

				if (
					hasDanglingUnderscore(identifier) &&
					!isSpecialCaseIdentifierInVariableExpression(identifier) &&
					!isAllowed(identifier) &&
					!(
						allowInArrayDestructuring &&
						parent.type === "ArrayPattern"
					) &&
					!(
						allowInObjectDestructuring &&
						parent.type === "ObjectPattern"
					)
				) {
					context.report({
						node,
						messageId: "unexpectedUnderscore",
						data: {
							identifier,
						***REMOVED***,
					***REMOVED***);
				***REMOVED***
			***REMOVED***);
		***REMOVED***

		/**
		 * Check if member expression has a dangling underscore
		 * @param {ASTNode***REMOVED*** node node to evaluate
		 * @returns {void***REMOVED***
		 * @private
		 */
		function checkForDanglingUnderscoreInMemberExpression(node) {
			const identifier = node.property.name,
				isMemberOfThis = node.object.type === "ThisExpression",
				isMemberOfSuper = node.object.type === "Super",
				isMemberOfThisConstructor = isThisConstructorReference(node);

			if (
				typeof identifier !== "undefined" &&
				hasDanglingUnderscore(identifier) &&
				!(isMemberOfThis && allowAfterThis) &&
				!(isMemberOfSuper && allowAfterSuper) &&
				!(isMemberOfThisConstructor && allowAfterThisConstructor) &&
				!isSpecialCaseIdentifierForMemberExpression(identifier) &&
				!isAllowed(identifier)
			) {
				context.report({
					node,
					messageId: "unexpectedUnderscore",
					data: {
						identifier,
					***REMOVED***,
				***REMOVED***);
			***REMOVED***
		***REMOVED***

		/**
		 * Check if method declaration or method property has a dangling underscore
		 * @param {ASTNode***REMOVED*** node node to evaluate
		 * @returns {void***REMOVED***
		 * @private
		 */
		function checkForDanglingUnderscoreInMethod(node) {
			const identifier = node.key.name;
			const isMethod =
				node.type === "MethodDefinition" ||
				(node.type === "Property" && node.method);

			if (
				typeof identifier !== "undefined" &&
				enforceInMethodNames &&
				isMethod &&
				hasDanglingUnderscore(identifier) &&
				!isAllowed(identifier)
			) {
				context.report({
					node,
					messageId: "unexpectedUnderscore",
					data: {
						identifier:
							node.key.type === "PrivateIdentifier"
								? `#${identifier***REMOVED***`
								: identifier,
					***REMOVED***,
				***REMOVED***);
			***REMOVED***
		***REMOVED***

		/**
		 * Check if a class field has a dangling underscore
		 * @param {ASTNode***REMOVED*** node node to evaluate
		 * @returns {void***REMOVED***
		 * @private
		 */
		function checkForDanglingUnderscoreInClassField(node) {
			const identifier = node.key.name;

			if (
				typeof identifier !== "undefined" &&
				hasDanglingUnderscore(identifier) &&
				enforceInClassFields &&
				!isAllowed(identifier)
			) {
				context.report({
					node,
					messageId: "unexpectedUnderscore",
					data: {
						identifier:
							node.key.type === "PrivateIdentifier"
								? `#${identifier***REMOVED***`
								: identifier,
					***REMOVED***,
				***REMOVED***);
			***REMOVED***
		***REMOVED***

		//--------------------------------------------------------------------------
		// Public API
		//--------------------------------------------------------------------------

		return {
			FunctionDeclaration: checkForDanglingUnderscoreInFunction,
			VariableDeclarator: checkForDanglingUnderscoreInVariableExpression,
			MemberExpression: checkForDanglingUnderscoreInMemberExpression,
			MethodDefinition: checkForDanglingUnderscoreInMethod,
			PropertyDefinition: checkForDanglingUnderscoreInClassField,
			Property: checkForDanglingUnderscoreInMethod,
			FunctionExpression: checkForDanglingUnderscoreInFunction,
			ArrowFunctionExpression: checkForDanglingUnderscoreInFunction,
		***REMOVED***;
	***REMOVED***,
***REMOVED***;
