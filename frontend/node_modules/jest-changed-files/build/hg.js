'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
***REMOVED***);
exports.default = void 0;

function path() {
  const data = _interopRequireWildcard(require('path'));

  path = function () {
    return data;
  ***REMOVED***;

  return data;
***REMOVED***

function _execa() {
  const data = _interopRequireDefault(require('execa'));

  _execa = function () {
    return data;
  ***REMOVED***;

  return data;
***REMOVED***

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {default: obj***REMOVED***;
***REMOVED***

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== 'function') return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  ***REMOVED***)(nodeInterop);
***REMOVED***

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  ***REMOVED***
  if (obj === null || (typeof obj !== 'object' && typeof obj !== 'function')) {
    return {default: obj***REMOVED***;
  ***REMOVED***
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  ***REMOVED***
  var newObj = {***REMOVED***;
  var hasPropertyDescriptor =
    Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== 'default' && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor
        ? Object.getOwnPropertyDescriptor(obj, key)
        : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      ***REMOVED*** else {
        newObj[key] = obj[key];
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  ***REMOVED***
  return newObj;
***REMOVED***

/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */
const env = {...process.env, HGPLAIN: '1'***REMOVED***;
const adapter = {
  findChangedFiles: async (cwd, options) => {
    var _options$includePaths;

    const includePaths =
      (_options$includePaths = options.includePaths) !== null &&
      _options$includePaths !== void 0
        ? _options$includePaths
        : [];
    const args = ['status', '-amnu'];

    if (options.withAncestor) {
      args.push('--rev', 'min((!public() & ::.)+.)^');
    ***REMOVED*** else if (options.changedSince) {
      args.push('--rev', `ancestor(., ${options.changedSince***REMOVED***)`);
    ***REMOVED*** else if (options.lastCommit === true) {
      args.push('--change', '.');
    ***REMOVED***

    args.push(...includePaths);
    let result;

    try {
      result = await (0, _execa().default)('hg', args, {
        cwd,
        env
      ***REMOVED***);
    ***REMOVED*** catch (e) {
      // TODO: Should we keep the original `message`?
      e.message = e.stderr;
      throw e;
    ***REMOVED***

    return result.stdout
      .split('\n')
      .filter(s => s !== '')
      .map(changedPath => path().resolve(cwd, changedPath));
  ***REMOVED***,
  getRoot: async cwd => {
    try {
      const result = await (0, _execa().default)('hg', ['root'], {
        cwd,
        env
      ***REMOVED***);
      return result.stdout;
    ***REMOVED*** catch {
      return null;
    ***REMOVED***
  ***REMOVED***
***REMOVED***;
var _default = adapter;
exports.default = _default;
