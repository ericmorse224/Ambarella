"use strict";

/** @typedef {import("./index.js").MinimizedResult***REMOVED*** MinimizedResult */

/** @typedef {import("source-map").RawSourceMap***REMOVED*** RawSourceMap */

/** @typedef {import("./index.js").InternalResult***REMOVED*** InternalResult */

/**
 * @template T
 * @param {import("./index.js").InternalOptions<T>***REMOVED*** options
 * @returns {Promise<InternalResult>***REMOVED***
 */
const minify = async options => {
  const minifyFns = Array.isArray(options.minimizer.implementation) ? options.minimizer.implementation : [options.minimizer.implementation];
  /** @type {InternalResult***REMOVED*** */

  const result = {
    outputs: [],
    warnings: [],
    errors: []
  ***REMOVED***;
  let needSourceMap = false;

  for (let i = 0; i <= minifyFns.length - 1; i++) {
    const minifyFn = minifyFns[i];
    const minifyOptions = Array.isArray(options.minimizer.options) ? options.minimizer.options[i] : options.minimizer.options;
    const prevResult = result.outputs.length > 0 ? result.outputs[result.outputs.length - 1] : {
      code: options.input,
      map: options.inputSourceMap
    ***REMOVED***;
    const {
      code,
      map
    ***REMOVED*** = prevResult; // eslint-disable-next-line no-await-in-loop

    const minifyResult = await minifyFn({
      [options.name]: code
    ***REMOVED***, map, minifyOptions);

    if (typeof minifyResult.code !== "string") {
      throw new Error("minimizer function doesn't return the 'code' property or result is not a string value");
    ***REMOVED***

    if (minifyResult.map) {
      needSourceMap = true;
    ***REMOVED***

    if (minifyResult.errors) {
      result.errors = result.errors.concat(minifyResult.errors);
    ***REMOVED***

    if (minifyResult.warnings) {
      result.warnings = result.warnings.concat(minifyResult.warnings);
    ***REMOVED***

    result.outputs.push({
      code: minifyResult.code,
      map: minifyResult.map
    ***REMOVED***);
  ***REMOVED***

  if (!needSourceMap) {
    result.outputs = [result.outputs[result.outputs.length - 1]];
  ***REMOVED***

  return result;
***REMOVED***;
/**
 * @param {string***REMOVED*** options
 * @returns {Promise<InternalResult>***REMOVED***
 */


async function transform(options) {
  // 'use strict' => this === undefined (Clean Scope)
  // Safer for possible security issues, albeit not critical at all here
  // eslint-disable-next-line no-new-func, no-param-reassign
  const evaluatedOptions = new Function("exports", "require", "module", "__filename", "__dirname", `'use strict'\nreturn ${options***REMOVED***`)(exports, require, module, __filename, __dirname);
  return minify(evaluatedOptions);
***REMOVED***

module.exports = {
  minify,
  transform
***REMOVED***;