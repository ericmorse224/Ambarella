const color = require('kleur');
const Prompt = require('./prompt');
const { cursor, erase ***REMOVED*** = require('sisteransi');
const { style, figures, clear, lines ***REMOVED*** = require('../util');

const isNumber = /[0-9]/;
const isDef = any => any !== undefined;
const round = (number, precision) => {
  let factor = Math.pow(10, precision);
  return Math.round(number * factor) / factor;
***REMOVED***

/**
 * NumberPrompt Base Element
 * @param {Object***REMOVED*** opts Options
 * @param {String***REMOVED*** opts.message Message
 * @param {String***REMOVED*** [opts.style='default'] Render style
 * @param {Number***REMOVED*** [opts.initial] Default value
 * @param {Number***REMOVED*** [opts.max=+Infinity] Max value
 * @param {Number***REMOVED*** [opts.min=-Infinity] Min value
 * @param {Boolean***REMOVED*** [opts.float=false] Parse input as floats
 * @param {Number***REMOVED*** [opts.round=2] Round floats to x decimals
 * @param {Number***REMOVED*** [opts.increment=1] Number to increment by when using arrow-keys
 * @param {Function***REMOVED*** [opts.validate] Validate function
 * @param {Stream***REMOVED*** [opts.stdin] The Readable stream to listen to
 * @param {Stream***REMOVED*** [opts.stdout] The Writable stream to write readline data to
 * @param {String***REMOVED*** [opts.error] The invalid error label
 */
class NumberPrompt extends Prompt {
  constructor(opts={***REMOVED***) {
    super(opts);
    this.transform = style.render(opts.style);
    this.msg = opts.message;
    this.initial = isDef(opts.initial) ? opts.initial : '';
    this.float = !!opts.float;
    this.round = opts.round || 2;
    this.inc = opts.increment || 1;
    this.min = isDef(opts.min) ? opts.min : -Infinity;
    this.max = isDef(opts.max) ? opts.max : Infinity;
    this.errorMsg = opts.error || `Please Enter A Valid Value`;
    this.validator = opts.validate || (() => true);
    this.color = `cyan`;
    this.value = ``;
    this.typed = ``;
    this.lastHit = 0;
    this.render();
  ***REMOVED***

  set value(v) {
    if (!v && v !== 0) {
      this.placeholder = true;
      this.rendered = color.gray(this.transform.render(`${this.initial***REMOVED***`));
      this._value = ``;
    ***REMOVED*** else {
      this.placeholder = false;
      this.rendered = this.transform.render(`${round(v, this.round)***REMOVED***`);
      this._value = round(v, this.round);
    ***REMOVED***
    this.fire();
  ***REMOVED***

  get value() {
    return this._value;
  ***REMOVED***

  parse(x) {
    return this.float ? parseFloat(x) : parseInt(x);
  ***REMOVED***

  valid(c) {
    return c === `-` || c === `.` && this.float || isNumber.test(c)
  ***REMOVED***

  reset() {
    this.typed = ``;
    this.value = ``;
    this.fire();
    this.render();
  ***REMOVED***

  exit() {
    this.abort();
  ***REMOVED***

  abort() {
    let x = this.value;
    this.value = x !== `` ? x : this.initial;
    this.done = this.aborted = true;
    this.error = false;
    this.fire();
    this.render();
    this.out.write(`\n`);
    this.close();
  ***REMOVED***

  async validate() {
    let valid = await this.validator(this.value);
    if (typeof valid === `string`) {
      this.errorMsg = valid;
      valid = false;
    ***REMOVED***
    this.error = !valid;
  ***REMOVED***

  async submit() {
    await this.validate();
    if (this.error) {
      this.color = `red`;
      this.fire();
      this.render();
      return;
    ***REMOVED***
    let x = this.value;
    this.value = x !== `` ? x : this.initial;
    this.done = true;
    this.aborted = false;
    this.error = false;
    this.fire();
    this.render();
    this.out.write(`\n`);
    this.close();
  ***REMOVED***

  up() {
    this.typed = ``;
    if(this.value === '') {
      this.value = this.min - this.inc;
    ***REMOVED***
    if (this.value >= this.max) return this.bell();
    this.value += this.inc;
    this.color = `cyan`;
    this.fire();
    this.render();
  ***REMOVED***

  down() {
    this.typed = ``;
    if(this.value === '') {
      this.value = this.min + this.inc;
    ***REMOVED***
    if (this.value <= this.min) return this.bell();
    this.value -= this.inc;
    this.color = `cyan`;
    this.fire();
    this.render();
  ***REMOVED***

  delete() {
    let val = this.value.toString();
    if (val.length === 0) return this.bell();
    this.value = this.parse((val = val.slice(0, -1))) || ``;
    if (this.value !== '' && this.value < this.min) {
      this.value = this.min;
    ***REMOVED***
    this.color = `cyan`;
    this.fire();
    this.render();
  ***REMOVED***

  next() {
    this.value = this.initial;
    this.fire();
    this.render();
  ***REMOVED***

  _(c, key) {
    if (!this.valid(c)) return this.bell();

    const now = Date.now();
    if (now - this.lastHit > 1000) this.typed = ``; // 1s elapsed
    this.typed += c;
    this.lastHit = now;
    this.color = `cyan`;

    if (c === `.`) return this.fire();

    this.value = Math.min(this.parse(this.typed), this.max);
    if (this.value > this.max) this.value = this.max;
    if (this.value < this.min) this.value = this.min;
    this.fire();
    this.render();
  ***REMOVED***

  render() {
    if (this.closed) return;
    if (!this.firstRender) {
      if (this.outputError)
        this.out.write(cursor.down(lines(this.outputError, this.out.columns) - 1) + clear(this.outputError, this.out.columns));
      this.out.write(clear(this.outputText, this.out.columns));
    ***REMOVED***
    super.render();
    this.outputError = '';

    // Print prompt
    this.outputText = [
      style.symbol(this.done, this.aborted),
      color.bold(this.msg),
      style.delimiter(this.done),
      !this.done || (!this.done && !this.placeholder)
          ? color[this.color]().underline(this.rendered) : this.rendered
    ].join(` `);

    // Print error
    if (this.error) {
      this.outputError += this.errorMsg.split(`\n`)
          .reduce((a, l, i) => a + `\n${i ? ` ` : figures.pointerSmall***REMOVED*** ${color.red().italic(l)***REMOVED***`, ``);
    ***REMOVED***

    this.out.write(erase.line + cursor.to(0) + this.outputText + cursor.save + this.outputError + cursor.restore);
  ***REMOVED***
***REMOVED***

module.exports = NumberPrompt;
