'use strict';
const CommentRemover = require('./lib/commentRemover');
const commentParser = require('./lib/commentParser');

/** @typedef {object***REMOVED*** Options
 *  @property {boolean=***REMOVED*** removeAll
 *  @property {boolean=***REMOVED*** removeAllButFirst
 *  @property {(s: string) => boolean=***REMOVED*** remove
 */
/**
 * @type {import('postcss').PluginCreator<Options>***REMOVED***
 * @param {Options***REMOVED*** opts
 * @return {import('postcss').Plugin***REMOVED***
 */
function pluginCreator(opts = {***REMOVED***) {
  const remover = new CommentRemover(opts);
  const matcherCache = new Map();
  const replacerCache = new Map();

  /**
   * @param {string***REMOVED*** source
   * @return {[number, number, number][]***REMOVED***
   */
  function matchesComments(source) {
    if (matcherCache.has(source)) {
      return matcherCache.get(source);
    ***REMOVED***

    const result = commentParser(source).filter(([type]) => type);

    matcherCache.set(source, result);

    return result;
  ***REMOVED***

  /**
   * @param {string***REMOVED*** source
   * @param {(s: string) => string[]***REMOVED*** space
   * @return {string***REMOVED***
   */
  function replaceComments(source, space, separator = ' ') {
    const key = source + '@|@' + separator;

    if (replacerCache.has(key)) {
      return replacerCache.get(key);
    ***REMOVED***
    const parsed = commentParser(source).reduce((value, [type, start, end]) => {
      const contents = source.slice(start, end);

      if (!type) {
        return value + contents;
      ***REMOVED***

      if (remover.canRemove(contents)) {
        return value + separator;
      ***REMOVED***

      return `${value***REMOVED***/*${contents***REMOVED****/`;
    ***REMOVED***, '');

    const result = space(parsed).join(' ');

    replacerCache.set(key, result);

    return result;
  ***REMOVED***

  return {
    postcssPlugin: 'postcss-discard-comments',

    OnceExit(css, { list ***REMOVED***) {
      css.walk((node) => {
        if (node.type === 'comment' && remover.canRemove(node.text)) {
          node.remove();

          return;
        ***REMOVED***

        if (typeof node.raws.between === 'string') {
          node.raws.between = replaceComments(node.raws.between, list.space);
        ***REMOVED***

        if (node.type === 'decl') {
          if (node.raws.value && node.raws.value.raw) {
            if (node.raws.value.value === node.value) {
              node.value = replaceComments(node.raws.value.raw, list.space);
            ***REMOVED*** else {
              node.value = replaceComments(node.value, list.space);
            ***REMOVED***

            /** @type {null | {value: string, raw: string***REMOVED******REMOVED*** */ (
              node.raws.value
            ) = null;
          ***REMOVED***

          if (node.raws.important) {
            node.raws.important = replaceComments(
              node.raws.important,
              list.space
            );

            const b = matchesComments(node.raws.important);

            node.raws.important = b.length ? node.raws.important : '!important';
          ***REMOVED*** else {
            node.value = replaceComments(node.value, list.space);
          ***REMOVED***

          return;
        ***REMOVED***

        if (
          node.type === 'rule' &&
          node.raws.selector &&
          node.raws.selector.raw
        ) {
          node.raws.selector.raw = replaceComments(
            node.raws.selector.raw,
            list.space,
            ''
          );

          return;
        ***REMOVED***

        if (node.type === 'atrule') {
          if (node.raws.afterName) {
            const commentsReplaced = replaceComments(
              node.raws.afterName,
              list.space
            );

            if (!commentsReplaced.length) {
              node.raws.afterName = commentsReplaced + ' ';
            ***REMOVED*** else {
              node.raws.afterName = ' ' + commentsReplaced + ' ';
            ***REMOVED***
          ***REMOVED***

          if (node.raws.params && node.raws.params.raw) {
            node.raws.params.raw = replaceComments(
              node.raws.params.raw,
              list.space
            );
          ***REMOVED***
        ***REMOVED***
      ***REMOVED***);
    ***REMOVED***,
  ***REMOVED***;
***REMOVED***

pluginCreator.postcss = true;
module.exports = pluginCreator;
