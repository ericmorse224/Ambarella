/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const { ConcatSource, PrefixSource ***REMOVED*** = require("webpack-sources");
const { WEBPACK_MODULE_TYPE_RUNTIME ***REMOVED*** = require("./ModuleTypeConstants");
const RuntimeGlobals = require("./RuntimeGlobals");

/** @typedef {import("webpack-sources").Source***REMOVED*** Source */
/** @typedef {import("../declarations/WebpackOptions").Output***REMOVED*** OutputOptions */
/** @typedef {import("./Chunk")***REMOVED*** Chunk */
/** @typedef {import("./ChunkGraph")***REMOVED*** ChunkGraph */
/** @typedef {import("./ChunkGraph").ModuleId***REMOVED*** ModuleId */
/** @typedef {import("./CodeGenerationResults")***REMOVED*** CodeGenerationResults */
/** @typedef {import("./Compilation").AssetInfo***REMOVED*** AssetInfo */
/** @typedef {import("./Compilation").PathData***REMOVED*** PathData */
/** @typedef {import("./DependencyTemplates")***REMOVED*** DependencyTemplates */
/** @typedef {import("./Module")***REMOVED*** Module */
/** @typedef {import("./ModuleGraph")***REMOVED*** ModuleGraph */
/** @typedef {import("./ModuleTemplate")***REMOVED*** ModuleTemplate */
/** @typedef {import("./RuntimeModule")***REMOVED*** RuntimeModule */
/** @typedef {import("./RuntimeTemplate")***REMOVED*** RuntimeTemplate */
/** @typedef {import("./TemplatedPathPlugin").TemplatePath***REMOVED*** TemplatePath */
/** @typedef {import("./javascript/JavascriptModulesPlugin").ChunkRenderContext***REMOVED*** ChunkRenderContext */
/** @typedef {import("./javascript/JavascriptModulesPlugin").RenderContext***REMOVED*** RenderContext */

const START_LOWERCASE_ALPHABET_CODE = "a".charCodeAt(0);
const START_UPPERCASE_ALPHABET_CODE = "A".charCodeAt(0);
const DELTA_A_TO_Z = "z".charCodeAt(0) - START_LOWERCASE_ALPHABET_CODE + 1;
const NUMBER_OF_IDENTIFIER_START_CHARS = DELTA_A_TO_Z * 2 + 2; // a-z A-Z _ $
const NUMBER_OF_IDENTIFIER_CONTINUATION_CHARS =
	NUMBER_OF_IDENTIFIER_START_CHARS + 10; // a-z A-Z _ $ 0-9
const FUNCTION_CONTENT_REGEX = /^function\s?\(\)\s?\{\r?\n?|\r?\n?\***REMOVED***$/g;
const INDENT_MULTILINE_REGEX = /^\t/gm;
const LINE_SEPARATOR_REGEX = /\r?\n/g;
const IDENTIFIER_NAME_REPLACE_REGEX = /^([^a-zA-Z$_])/;
const IDENTIFIER_ALPHA_NUMERIC_NAME_REPLACE_REGEX = /[^a-zA-Z0-9$]+/g;
const COMMENT_END_REGEX = /\*\//g;
const PATH_NAME_NORMALIZE_REPLACE_REGEX = /[^a-zA-Z0-9_!§$()=\-^°]+/g;
const MATCH_PADDED_HYPHENS_REPLACE_REGEX = /^-|-$/g;

/**
 * @typedef {object***REMOVED*** RenderManifestOptions
 * @property {Chunk***REMOVED*** chunk the chunk used to render
 * @property {string***REMOVED*** hash
 * @property {string***REMOVED*** fullHash
 * @property {OutputOptions***REMOVED*** outputOptions
 * @property {CodeGenerationResults***REMOVED*** codeGenerationResults
 * @property {{javascript: ModuleTemplate***REMOVED******REMOVED*** moduleTemplates
 * @property {DependencyTemplates***REMOVED*** dependencyTemplates
 * @property {RuntimeTemplate***REMOVED*** runtimeTemplate
 * @property {ModuleGraph***REMOVED*** moduleGraph
 * @property {ChunkGraph***REMOVED*** chunkGraph
 */

/** @typedef {RenderManifestEntryTemplated | RenderManifestEntryStatic***REMOVED*** RenderManifestEntry */

/**
 * @typedef {object***REMOVED*** RenderManifestEntryTemplated
 * @property {() => Source***REMOVED*** render
 * @property {TemplatePath***REMOVED*** filenameTemplate
 * @property {PathData=***REMOVED*** pathOptions
 * @property {AssetInfo=***REMOVED*** info
 * @property {string***REMOVED*** identifier
 * @property {string=***REMOVED*** hash
 * @property {boolean=***REMOVED*** auxiliary
 */

/**
 * @typedef {object***REMOVED*** RenderManifestEntryStatic
 * @property {() => Source***REMOVED*** render
 * @property {string***REMOVED*** filename
 * @property {AssetInfo***REMOVED*** info
 * @property {string***REMOVED*** identifier
 * @property {string=***REMOVED*** hash
 * @property {boolean=***REMOVED*** auxiliary
 */

/**
 * @typedef {object***REMOVED*** HasId
 * @property {number | string***REMOVED*** id
 */

/**
 * @typedef {(module: Module) => boolean***REMOVED*** ModuleFilterPredicate
 */

class Template {
	/**
	 * @template {EXPECTED_FUNCTION***REMOVED*** T
	 * @param {T***REMOVED*** fn a runtime function (.runtime.js) "template"
	 * @returns {string***REMOVED*** the updated and normalized function string
	 */
	static getFunctionContent(fn) {
		return fn
			.toString()
			.replace(FUNCTION_CONTENT_REGEX, "")
			.replace(INDENT_MULTILINE_REGEX, "")
			.replace(LINE_SEPARATOR_REGEX, "\n");
	***REMOVED***

	/**
	 * @param {string***REMOVED*** str the string converted to identifier
	 * @returns {string***REMOVED*** created identifier
	 */
	static toIdentifier(str) {
		if (typeof str !== "string") return "";
		return str
			.replace(IDENTIFIER_NAME_REPLACE_REGEX, "_$1")
			.replace(IDENTIFIER_ALPHA_NUMERIC_NAME_REPLACE_REGEX, "_");
	***REMOVED***

	/**
	 * @param {string***REMOVED*** str string to be converted to commented in bundle code
	 * @returns {string***REMOVED*** returns a commented version of string
	 */
	static toComment(str) {
		if (!str) return "";
		return `/*! ${str.replace(COMMENT_END_REGEX, "* /")***REMOVED*** */`;
	***REMOVED***

	/**
	 * @param {string***REMOVED*** str string to be converted to "normal comment"
	 * @returns {string***REMOVED*** returns a commented version of string
	 */
	static toNormalComment(str) {
		if (!str) return "";
		return `/* ${str.replace(COMMENT_END_REGEX, "* /")***REMOVED*** */`;
	***REMOVED***

	/**
	 * @param {string***REMOVED*** str string path to be normalized
	 * @returns {string***REMOVED*** normalized bundle-safe path
	 */
	static toPath(str) {
		if (typeof str !== "string") return "";
		return str
			.replace(PATH_NAME_NORMALIZE_REPLACE_REGEX, "-")
			.replace(MATCH_PADDED_HYPHENS_REPLACE_REGEX, "");
	***REMOVED***

	// map number to a single character a-z, A-Z or multiple characters if number is too big
	/**
	 * @param {number***REMOVED*** n number to convert to ident
	 * @returns {string***REMOVED*** returns single character ident
	 */
	static numberToIdentifier(n) {
		if (n >= NUMBER_OF_IDENTIFIER_START_CHARS) {
			// use multiple letters
			return (
				Template.numberToIdentifier(n % NUMBER_OF_IDENTIFIER_START_CHARS) +
				Template.numberToIdentifierContinuation(
					Math.floor(n / NUMBER_OF_IDENTIFIER_START_CHARS)
				)
			);
		***REMOVED***

		// lower case
		if (n < DELTA_A_TO_Z) {
			return String.fromCharCode(START_LOWERCASE_ALPHABET_CODE + n);
		***REMOVED***
		n -= DELTA_A_TO_Z;

		// upper case
		if (n < DELTA_A_TO_Z) {
			return String.fromCharCode(START_UPPERCASE_ALPHABET_CODE + n);
		***REMOVED***

		if (n === DELTA_A_TO_Z) return "_";
		return "$";
	***REMOVED***

	/**
	 * @param {number***REMOVED*** n number to convert to ident
	 * @returns {string***REMOVED*** returns single character ident
	 */
	static numberToIdentifierContinuation(n) {
		if (n >= NUMBER_OF_IDENTIFIER_CONTINUATION_CHARS) {
			// use multiple letters
			return (
				Template.numberToIdentifierContinuation(
					n % NUMBER_OF_IDENTIFIER_CONTINUATION_CHARS
				) +
				Template.numberToIdentifierContinuation(
					Math.floor(n / NUMBER_OF_IDENTIFIER_CONTINUATION_CHARS)
				)
			);
		***REMOVED***

		// lower case
		if (n < DELTA_A_TO_Z) {
			return String.fromCharCode(START_LOWERCASE_ALPHABET_CODE + n);
		***REMOVED***
		n -= DELTA_A_TO_Z;

		// upper case
		if (n < DELTA_A_TO_Z) {
			return String.fromCharCode(START_UPPERCASE_ALPHABET_CODE + n);
		***REMOVED***
		n -= DELTA_A_TO_Z;

		// numbers
		if (n < 10) {
			return `${n***REMOVED***`;
		***REMOVED***

		if (n === 10) return "_";
		return "$";
	***REMOVED***

	/**
	 * @param {string | string[]***REMOVED*** s string to convert to identity
	 * @returns {string***REMOVED*** converted identity
	 */
	static indent(s) {
		if (Array.isArray(s)) {
			return s.map(Template.indent).join("\n");
		***REMOVED***
		const str = s.trimEnd();
		if (!str) return "";
		const ind = str[0] === "\n" ? "" : "\t";
		return ind + str.replace(/\n([^\n])/g, "\n\t$1");
	***REMOVED***

	/**
	 * @param {string|string[]***REMOVED*** s string to create prefix for
	 * @param {string***REMOVED*** prefix prefix to compose
	 * @returns {string***REMOVED*** returns new prefix string
	 */
	static prefix(s, prefix) {
		const str = Template.asString(s).trim();
		if (!str) return "";
		const ind = str[0] === "\n" ? "" : prefix;
		return ind + str.replace(/\n([^\n])/g, `\n${prefix***REMOVED***$1`);
	***REMOVED***

	/**
	 * @param {string|string[]***REMOVED*** str string or string collection
	 * @returns {string***REMOVED*** returns a single string from array
	 */
	static asString(str) {
		if (Array.isArray(str)) {
			return str.join("\n");
		***REMOVED***
		return str;
	***REMOVED***

	/**
	 * @typedef {object***REMOVED*** WithId
	 * @property {string | number***REMOVED*** id
	 */

	/**
	 * @param {WithId[]***REMOVED*** modules a collection of modules to get array bounds for
	 * @returns {[number, number] | false***REMOVED*** returns the upper and lower array bounds
	 * or false if not every module has a number based id
	 */
	static getModulesArrayBounds(modules) {
		let maxId = -Infinity;
		let minId = Infinity;
		for (const module of modules) {
			const moduleId = module.id;
			if (typeof moduleId !== "number") return false;
			if (maxId < moduleId) maxId = moduleId;
			if (minId > moduleId) minId = moduleId;
		***REMOVED***
		if (minId < 16 + String(minId).length) {
			// add minId x ',' instead of 'Array(minId).concat(…)'
			minId = 0;
		***REMOVED***
		// start with -1 because the first module needs no comma
		let objectOverhead = -1;
		for (const module of modules) {
			// module id + colon + comma
			objectOverhead += `${module.id***REMOVED***`.length + 2;
		***REMOVED***
		// number of commas, or when starting non-zero the length of Array(minId).concat()
		const arrayOverhead = minId === 0 ? maxId : 16 + `${minId***REMOVED***`.length + maxId;
		return arrayOverhead < objectOverhead ? [minId, maxId] : false;
	***REMOVED***

	/**
	 * @param {ChunkRenderContext***REMOVED*** renderContext render context
	 * @param {Module[]***REMOVED*** modules modules to render (should be ordered by identifier)
	 * @param {(module: Module) => Source | null***REMOVED*** renderModule function to render a module
	 * @param {string=***REMOVED*** prefix applying prefix strings
	 * @returns {Source | null***REMOVED*** rendered chunk modules in a Source object or null if no modules
	 */
	static renderChunkModules(renderContext, modules, renderModule, prefix = "") {
		const { chunkGraph ***REMOVED*** = renderContext;
		const source = new ConcatSource();
		if (modules.length === 0) {
			return null;
		***REMOVED***
		/** @type {{id: string|number, source: Source|string***REMOVED***[]***REMOVED*** */
		const allModules = modules.map(module => ({
			id: /** @type {ModuleId***REMOVED*** */ (chunkGraph.getModuleId(module)),
			source: renderModule(module) || "false"
		***REMOVED***));
		const bounds = Template.getModulesArrayBounds(allModules);
		if (bounds) {
			// Render a spare array
			const minId = bounds[0];
			const maxId = bounds[1];
			if (minId !== 0) {
				source.add(`Array(${minId***REMOVED***).concat(`);
			***REMOVED***
			source.add("[\n");
			/** @type {Map<string|number, {id: string|number, source: Source|string***REMOVED***>***REMOVED*** */
			const modules = new Map();
			for (const module of allModules) {
				modules.set(module.id, module);
			***REMOVED***
			for (let idx = minId; idx <= maxId; idx++) {
				const module = modules.get(idx);
				if (idx !== minId) {
					source.add(",\n");
				***REMOVED***
				source.add(`/* ${idx***REMOVED*** */`);
				if (module) {
					source.add("\n");
					source.add(module.source);
				***REMOVED***
			***REMOVED***
			source.add(`\n${prefix***REMOVED***]`);
			if (minId !== 0) {
				source.add(")");
			***REMOVED***
		***REMOVED*** else {
			// Render an object
			source.add("{\n");
			for (let i = 0; i < allModules.length; i++) {
				const module = allModules[i];
				if (i !== 0) {
					source.add(",\n");
				***REMOVED***
				source.add(`\n/***/ ${JSON.stringify(module.id)***REMOVED***:\n`);
				source.add(module.source);
			***REMOVED***
			source.add(`\n\n${prefix***REMOVED******REMOVED***`);
		***REMOVED***
		return source;
	***REMOVED***

	/**
	 * @param {RuntimeModule[]***REMOVED*** runtimeModules array of runtime modules in order
	 * @param {RenderContext & { codeGenerationResults?: CodeGenerationResults ***REMOVED******REMOVED*** renderContext render context
	 * @returns {Source***REMOVED*** rendered runtime modules in a Source object
	 */
	static renderRuntimeModules(runtimeModules, renderContext) {
		const source = new ConcatSource();
		for (const module of runtimeModules) {
			const codeGenerationResults = renderContext.codeGenerationResults;
			let runtimeSource;
			if (codeGenerationResults) {
				runtimeSource = codeGenerationResults.getSource(
					module,
					renderContext.chunk.runtime,
					WEBPACK_MODULE_TYPE_RUNTIME
				);
			***REMOVED*** else {
				const codeGenResult = module.codeGeneration({
					chunkGraph: renderContext.chunkGraph,
					dependencyTemplates: renderContext.dependencyTemplates,
					moduleGraph: renderContext.moduleGraph,
					runtimeTemplate: renderContext.runtimeTemplate,
					runtime: renderContext.chunk.runtime,
					codeGenerationResults
				***REMOVED***);
				if (!codeGenResult) continue;
				runtimeSource = codeGenResult.sources.get("runtime");
			***REMOVED***
			if (runtimeSource) {
				source.add(`${Template.toNormalComment(module.identifier())***REMOVED***\n`);
				if (!module.shouldIsolate()) {
					source.add(runtimeSource);
					source.add("\n\n");
				***REMOVED*** else if (renderContext.runtimeTemplate.supportsArrowFunction()) {
					source.add("(() => {\n");
					source.add(new PrefixSource("\t", runtimeSource));
					source.add("\n***REMOVED***)();\n\n");
				***REMOVED*** else {
					source.add("!function() {\n");
					source.add(new PrefixSource("\t", runtimeSource));
					source.add("\n***REMOVED***();\n\n");
				***REMOVED***
			***REMOVED***
		***REMOVED***
		return source;
	***REMOVED***

	/**
	 * @param {RuntimeModule[]***REMOVED*** runtimeModules array of runtime modules in order
	 * @param {RenderContext***REMOVED*** renderContext render context
	 * @returns {Source***REMOVED*** rendered chunk runtime modules in a Source object
	 */
	static renderChunkRuntimeModules(runtimeModules, renderContext) {
		return new PrefixSource(
			"/******/ ",
			new ConcatSource(
				`function(${RuntimeGlobals.require***REMOVED***) { // webpackRuntimeModules\n`,
				this.renderRuntimeModules(runtimeModules, renderContext),
				"***REMOVED***\n"
			)
		);
	***REMOVED***
***REMOVED***

module.exports = Template;
module.exports.NUMBER_OF_IDENTIFIER_START_CHARS =
	NUMBER_OF_IDENTIFIER_START_CHARS;
module.exports.NUMBER_OF_IDENTIFIER_CONTINUATION_CHARS =
	NUMBER_OF_IDENTIFIER_CONTINUATION_CHARS;
