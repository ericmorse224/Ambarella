'use strict';

var GetIntrinsic = require('../GetIntrinsic.js');

var $construct = GetIntrinsic('%Reflect.construct%', true);

var DefinePropertyOrThrow = require('./DefinePropertyOrThrow');
try {
	DefinePropertyOrThrow({***REMOVED***, '', { '[[Get]]': function () {***REMOVED*** ***REMOVED***);
***REMOVED*** catch (e) {
	// Accessor properties aren't supported
	DefinePropertyOrThrow = null;
***REMOVED***

// https://262.ecma-international.org/6.0/#sec-isconstructor

if (DefinePropertyOrThrow && $construct) {
	var isConstructorMarker = {***REMOVED***;
	var badArrayLike = {***REMOVED***;
	DefinePropertyOrThrow(badArrayLike, 'length', {
		'[[Get]]': function () {
			throw isConstructorMarker;
		***REMOVED***,
		'[[Enumerable]]': true
	***REMOVED***);

	module.exports = function IsConstructor(argument) {
		try {
			// `Reflect.construct` invokes `IsConstructor(target)` before `Get(args, 'length')`:
			$construct(argument, badArrayLike);
		***REMOVED*** catch (err) {
			return err === isConstructorMarker;
		***REMOVED***
	***REMOVED***;
***REMOVED*** else {
	module.exports = function IsConstructor(argument) {
		// unfortunately there's no way to truly check this without try/catch `new argument` in old environments
		return typeof argument === 'function' && !!argument.prototype;
	***REMOVED***;
***REMOVED***
