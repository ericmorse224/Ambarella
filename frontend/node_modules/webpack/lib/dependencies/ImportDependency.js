/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const Dependency = require("../Dependency");
const makeSerializable = require("../util/makeSerializable");
const ModuleDependency = require("./ModuleDependency");

/** @typedef {import("webpack-sources").ReplaceSource***REMOVED*** ReplaceSource */
/** @typedef {import("../AsyncDependenciesBlock")***REMOVED*** AsyncDependenciesBlock */
/** @typedef {import("../Dependency").ReferencedExport***REMOVED*** ReferencedExport */
/** @typedef {import("../DependencyTemplate").DependencyTemplateContext***REMOVED*** DependencyTemplateContext */
/** @typedef {import("../Module")***REMOVED*** Module */
/** @typedef {import("../Module").BuildMeta***REMOVED*** BuildMeta */
/** @typedef {import("../ModuleGraph")***REMOVED*** ModuleGraph */
/** @typedef {import("../javascript/JavascriptParser").ImportAttributes***REMOVED*** ImportAttributes */
/** @typedef {import("../javascript/JavascriptParser").Range***REMOVED*** Range */
/** @typedef {import("../serialization/ObjectMiddleware").ObjectDeserializerContext***REMOVED*** ObjectDeserializerContext */
/** @typedef {import("../serialization/ObjectMiddleware").ObjectSerializerContext***REMOVED*** ObjectSerializerContext */
/** @typedef {import("../util/runtime").RuntimeSpec***REMOVED*** RuntimeSpec */

class ImportDependency extends ModuleDependency {
	/**
	 * @param {string***REMOVED*** request the request
	 * @param {Range***REMOVED*** range expression range
	 * @param {(string[][] | null)=***REMOVED*** referencedExports list of referenced exports
	 * @param {ImportAttributes=***REMOVED*** attributes import attributes
	 */
	constructor(request, range, referencedExports, attributes) {
		super(request);
		this.range = range;
		this.referencedExports = referencedExports;
		this.assertions = attributes;
	***REMOVED***

	get type() {
		return "import()";
	***REMOVED***

	get category() {
		return "esm";
	***REMOVED***

	/**
	 * Returns list of exports referenced by this dependency
	 * @param {ModuleGraph***REMOVED*** moduleGraph module graph
	 * @param {RuntimeSpec***REMOVED*** runtime the runtime for which the module is analysed
	 * @returns {(string[] | ReferencedExport)[]***REMOVED*** referenced exports
	 */
	getReferencedExports(moduleGraph, runtime) {
		if (!this.referencedExports) return Dependency.EXPORTS_OBJECT_REFERENCED;
		const refs = [];
		for (const referencedExport of this.referencedExports) {
			if (referencedExport[0] === "default") {
				const selfModule =
					/** @type {Module***REMOVED*** */
					(moduleGraph.getParentModule(this));
				const importedModule =
					/** @type {Module***REMOVED*** */
					(moduleGraph.getModule(this));
				const exportsType = importedModule.getExportsType(
					moduleGraph,
					/** @type {BuildMeta***REMOVED*** */
					(selfModule.buildMeta).strictHarmonyModule
				);
				if (
					exportsType === "default-only" ||
					exportsType === "default-with-named"
				) {
					return Dependency.EXPORTS_OBJECT_REFERENCED;
				***REMOVED***
			***REMOVED***
			refs.push({
				name: referencedExport,
				canMangle: false
			***REMOVED***);
		***REMOVED***
		return refs;
	***REMOVED***

	/**
	 * @param {ObjectSerializerContext***REMOVED*** context context
	 */
	serialize(context) {
		context.write(this.range);
		context.write(this.referencedExports);
		context.write(this.assertions);
		super.serialize(context);
	***REMOVED***

	/**
	 * @param {ObjectDeserializerContext***REMOVED*** context context
	 */
	deserialize(context) {
		this.range = context.read();
		this.referencedExports = context.read();
		this.assertions = context.read();
		super.deserialize(context);
	***REMOVED***
***REMOVED***

makeSerializable(ImportDependency, "webpack/lib/dependencies/ImportDependency");

ImportDependency.Template = class ImportDependencyTemplate extends (
	ModuleDependency.Template
) {
	/**
	 * @param {Dependency***REMOVED*** dependency the dependency for which the template should be applied
	 * @param {ReplaceSource***REMOVED*** source the current replace source which can be modified
	 * @param {DependencyTemplateContext***REMOVED*** templateContext the context object
	 * @returns {void***REMOVED***
	 */
	apply(
		dependency,
		source,
		{ runtimeTemplate, module, moduleGraph, chunkGraph, runtimeRequirements ***REMOVED***
	) {
		const dep = /** @type {ImportDependency***REMOVED*** */ (dependency);
		const block = /** @type {AsyncDependenciesBlock***REMOVED*** */ (
			moduleGraph.getParentBlock(dep)
		);
		const content = runtimeTemplate.moduleNamespacePromise({
			chunkGraph,
			block,
			module: /** @type {Module***REMOVED*** */ (moduleGraph.getModule(dep)),
			request: dep.request,
			strict: /** @type {BuildMeta***REMOVED*** */ (module.buildMeta).strictHarmonyModule,
			message: "import()",
			runtimeRequirements
		***REMOVED***);

		source.replace(dep.range[0], dep.range[1] - 1, content);
	***REMOVED***
***REMOVED***;

module.exports = ImportDependency;
