/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const PrefetchDependency = require("./dependencies/PrefetchDependency");

/** @typedef {import("./Compiler")***REMOVED*** Compiler */

const PLUGIN_NAME = "PrefetchPlugin";

class PrefetchPlugin {
	/**
	 * @param {string***REMOVED*** context context or request if context is not set
	 * @param {string=***REMOVED*** request request
	 */
	constructor(context, request) {
		if (request) {
			this.context = context;
			this.request = request;
		***REMOVED*** else {
			this.context = null;
			this.request = context;
		***REMOVED***
	***REMOVED***

	/**
	 * Apply the plugin
	 * @param {Compiler***REMOVED*** compiler the compiler instance
	 * @returns {void***REMOVED***
	 */
	apply(compiler) {
		compiler.hooks.compilation.tap(
			PLUGIN_NAME,
			(compilation, { normalModuleFactory ***REMOVED***) => {
				compilation.dependencyFactories.set(
					PrefetchDependency,
					normalModuleFactory
				);
			***REMOVED***
		);
		compiler.hooks.make.tapAsync(PLUGIN_NAME, (compilation, callback) => {
			compilation.addModuleChain(
				this.context || compiler.context,
				new PrefetchDependency(this.request),
				err => {
					callback(err);
				***REMOVED***
			);
		***REMOVED***);
	***REMOVED***
***REMOVED***

module.exports = PrefetchPlugin;
