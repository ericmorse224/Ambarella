"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; ***REMOVED***; ***REMOVED*** else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; ***REMOVED***; ***REMOVED*** return _typeof(obj); ***REMOVED***

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); ***REMOVED*** ***REMOVED***

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); ***REMOVED*** ***REMOVED***

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; ***REMOVED***

// Generated by CoffeeScript 2.5.1
var Rule, StyleSheet;
Rule = require('./Rule');

module.exports = StyleSheet = function () {
  var self;

  var StyleSheet = /*#__PURE__*/function () {
    function StyleSheet() {
      _classCallCheck(this, StyleSheet);

      this._rulesBySelector = {***REMOVED***;
    ***REMOVED***

    _createClass(StyleSheet, [{
      key: "setRule",
      value: function setRule(selector, styles) {
        var key, val;

        if (typeof selector === 'string') {
          this._setRule(selector, styles);
        ***REMOVED*** else if (_typeof(selector) === 'object') {
          for (key in selector) {
            val = selector[key];

            this._setRule(key, val);
          ***REMOVED***
        ***REMOVED***

        return this;
      ***REMOVED***
    ***REMOVED***, {
      key: "_setRule",
      value: function _setRule(s, styles) {
        var i, len, ref, selector;
        ref = self.splitSelectors(s);

        for (i = 0, len = ref.length; i < len; i++) {
          selector = ref[i];

          this._setSingleRule(selector, styles);
        ***REMOVED***

        return this;
      ***REMOVED***
    ***REMOVED***, {
      key: "_setSingleRule",
      value: function _setSingleRule(s, styles) {
        var rule, selector;
        selector = self.normalizeSelector(s);

        if (!(rule = this._rulesBySelector[selector])) {
          rule = new Rule(selector);
          this._rulesBySelector[selector] = rule;
        ***REMOVED***

        rule.setStyles(styles);
        return this;
      ***REMOVED***
    ***REMOVED***, {
      key: "getRulesFor",
      value: function getRulesFor(el) {
        var ref, rule, rules, selector;
        rules = [];
        ref = this._rulesBySelector;

        for (selector in ref) {
          rule = ref[selector];

          if (rule.selector.matches(el)) {
            rules.push(rule);
          ***REMOVED***
        ***REMOVED***

        return rules;
      ***REMOVED***
    ***REMOVED***], [{
      key: "normalizeSelector",
      value: function normalizeSelector(selector) {
        return selector.replace(/[\s]+/g, ' ').replace(/[\s]*([>\,\+]{1***REMOVED***)[\s]*/g, '$1').trim();
      ***REMOVED***
    ***REMOVED***, {
      key: "splitSelectors",
      value: function splitSelectors(s) {
        return s.trim().split(',');
      ***REMOVED***
    ***REMOVED***]);

    return StyleSheet;
  ***REMOVED***();

  ;
  self = StyleSheet;
  return StyleSheet;
***REMOVED***.call(void 0);