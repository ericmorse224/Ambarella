/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const { STAGE_BASIC ***REMOVED*** = require("../OptimizationStages");

/** @typedef {import("../Chunk")***REMOVED*** Chunk */
/** @typedef {import("../ChunkGroup")***REMOVED*** ChunkGroup */
/** @typedef {import("../Compiler")***REMOVED*** Compiler */

class EnsureChunkConditionsPlugin {
	/**
	 * Apply the plugin
	 * @param {Compiler***REMOVED*** compiler the compiler instance
	 * @returns {void***REMOVED***
	 */
	apply(compiler) {
		compiler.hooks.compilation.tap(
			"EnsureChunkConditionsPlugin",
			compilation => {
				/**
				 * @param {Iterable<Chunk>***REMOVED*** chunks the chunks
				 */
				const handler = chunks => {
					const chunkGraph = compilation.chunkGraph;
					// These sets are hoisted here to save memory
					// They are cleared at the end of every loop
					/** @type {Set<Chunk>***REMOVED*** */
					const sourceChunks = new Set();
					/** @type {Set<ChunkGroup>***REMOVED*** */
					const chunkGroups = new Set();
					for (const module of compilation.modules) {
						if (!module.hasChunkCondition()) continue;
						for (const chunk of chunkGraph.getModuleChunksIterable(module)) {
							if (!module.chunkCondition(chunk, compilation)) {
								sourceChunks.add(chunk);
								for (const group of chunk.groupsIterable) {
									chunkGroups.add(group);
								***REMOVED***
							***REMOVED***
						***REMOVED***
						if (sourceChunks.size === 0) continue;
						/** @type {Set<Chunk>***REMOVED*** */
						const targetChunks = new Set();
						chunkGroupLoop: for (const chunkGroup of chunkGroups) {
							// Can module be placed in a chunk of this group?
							for (const chunk of chunkGroup.chunks) {
								if (module.chunkCondition(chunk, compilation)) {
									targetChunks.add(chunk);
									continue chunkGroupLoop;
								***REMOVED***
							***REMOVED***
							// We reached the entrypoint: fail
							if (chunkGroup.isInitial()) {
								throw new Error(
									`Cannot fulfil chunk condition of ${module.identifier()***REMOVED***`
								);
							***REMOVED***
							// Try placing in all parents
							for (const group of chunkGroup.parentsIterable) {
								chunkGroups.add(group);
							***REMOVED***
						***REMOVED***
						for (const sourceChunk of sourceChunks) {
							chunkGraph.disconnectChunkAndModule(sourceChunk, module);
						***REMOVED***
						for (const targetChunk of targetChunks) {
							chunkGraph.connectChunkAndModule(targetChunk, module);
						***REMOVED***
						sourceChunks.clear();
						chunkGroups.clear();
					***REMOVED***
				***REMOVED***;
				compilation.hooks.optimizeChunks.tap(
					{
						name: "EnsureChunkConditionsPlugin",
						stage: STAGE_BASIC
					***REMOVED***,
					handler
				);
			***REMOVED***
		);
	***REMOVED***
***REMOVED***
module.exports = EnsureChunkConditionsPlugin;
