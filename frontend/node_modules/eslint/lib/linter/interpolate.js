/**
 * @fileoverview Interpolate keys from an object into a string with {{ ***REMOVED******REMOVED*** markers.
 * @author Jed Fox
 */

"use strict";

//------------------------------------------------------------------------------
// Public Interface
//------------------------------------------------------------------------------

/**
 * Returns a global expression matching placeholders in messages.
 * @returns {RegExp***REMOVED*** Global regular expression matching placeholders
 */
function getPlaceholderMatcher() {
	return /\{\{([^{***REMOVED***]+?)\***REMOVED***\***REMOVED***/gu;
***REMOVED***

/**
 * Replaces {{ placeholders ***REMOVED******REMOVED*** in the message with the provided data.
 * Does not replace placeholders not available in the data.
 * @param {string***REMOVED*** text Original message with potential placeholders
 * @param {Record<string, string>***REMOVED*** data Map of placeholder name to its value
 * @returns {string***REMOVED*** Message with replaced placeholders
 */
function interpolate(text, data) {
	if (!data) {
		return text;
	***REMOVED***

	const matcher = getPlaceholderMatcher();

	// Substitution content for any {{ ***REMOVED******REMOVED*** markers.
	return text.replace(matcher, (fullMatch, termWithWhitespace) => {
		const term = termWithWhitespace.trim();

		if (term in data) {
			return data[term];
		***REMOVED***

		// Preserve old behavior: If parameter name not provided, don't replace it.
		return fullMatch;
	***REMOVED***);
***REMOVED***

module.exports = {
	getPlaceholderMatcher,
	interpolate,
***REMOVED***;
