"use strict";

const fs = require("fs");

const path = require("path");
/** @typedef {import("webpack").Compiler***REMOVED*** Compiler */

/** @typedef {import("webpack").MultiCompiler***REMOVED*** MultiCompiler */

/** @typedef {import("webpack").Compilation***REMOVED*** Compilation */

/** @typedef {import("../index.js").IncomingMessage***REMOVED*** IncomingMessage */

/** @typedef {import("../index.js").ServerResponse***REMOVED*** ServerResponse */

/**
 * @template {IncomingMessage***REMOVED*** Request
 * @template {ServerResponse***REMOVED*** Response
 * @param {import("../index.js").Context<Request, Response>***REMOVED*** context
 */


function setupWriteToDisk(context) {
  /**
   * @type {Compiler[]***REMOVED***
   */
  const compilers =
  /** @type {MultiCompiler***REMOVED*** */
  context.compiler.compilers || [context.compiler];

  for (const compiler of compilers) {
    compiler.hooks.emit.tap("DevMiddleware",
    /**
     * @param {Compilation***REMOVED*** compilation
     */
    compilation => {
      // @ts-ignore
      if (compiler.hasWebpackDevMiddlewareAssetEmittedCallback) {
        return;
      ***REMOVED***

      compiler.hooks.assetEmitted.tapAsync("DevMiddleware", (file, info, callback) => {
        /**
         * @type {string***REMOVED***
         */
        let targetPath;
        /**
         * @type {Buffer***REMOVED***
         */

        let content; // webpack@5

        if (info.compilation) {
          ({
            targetPath,
            content
          ***REMOVED*** = info);
        ***REMOVED*** else {
          let targetFile = file;
          const queryStringIdx = targetFile.indexOf("?");

          if (queryStringIdx >= 0) {
            targetFile = targetFile.slice(0, queryStringIdx);
          ***REMOVED***

          let {
            outputPath
          ***REMOVED*** = compiler;
          outputPath = compilation.getPath(outputPath, {***REMOVED***); // @ts-ignore

          content = info;
          targetPath = path.join(outputPath, targetFile);
        ***REMOVED***

        const {
          writeToDisk: filter
        ***REMOVED*** = context.options;
        const allowWrite = filter && typeof filter === "function" ? filter(targetPath) : true;

        if (!allowWrite) {
          return callback();
        ***REMOVED***

        const dir = path.dirname(targetPath);
        const name = compiler.options.name ? `Child "${compiler.options.name***REMOVED***": ` : "";
        return fs.mkdir(dir, {
          recursive: true
        ***REMOVED***, mkdirError => {
          if (mkdirError) {
            context.logger.error(`${name***REMOVED***Unable to write "${dir***REMOVED***" directory to disk:\n${mkdirError***REMOVED***`);
            return callback(mkdirError);
          ***REMOVED***

          return fs.writeFile(targetPath, content, writeFileError => {
            if (writeFileError) {
              context.logger.error(`${name***REMOVED***Unable to write "${targetPath***REMOVED***" asset to disk:\n${writeFileError***REMOVED***`);
              return callback(writeFileError);
            ***REMOVED***

            context.logger.log(`${name***REMOVED***Asset written to disk: "${targetPath***REMOVED***"`);
            return callback();
          ***REMOVED***);
        ***REMOVED***);
      ***REMOVED***); // @ts-ignore

      compiler.hasWebpackDevMiddlewareAssetEmittedCallback = true;
    ***REMOVED***);
  ***REMOVED***
***REMOVED***

module.exports = setupWriteToDisk;