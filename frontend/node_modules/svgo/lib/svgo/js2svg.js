'use strict';

var EOL = require('os').EOL,
    textElem = require('../../plugins/_collections.js').elemsGroups.textContent.concat('title');

var defaults = {
    doctypeStart: '<!DOCTYPE',
    doctypeEnd: '>',
    procInstStart: '<?',
    procInstEnd: '?>',
    tagOpenStart: '<',
    tagOpenEnd: '>',
    tagCloseStart: '</',
    tagCloseEnd: '>',
    tagShortStart: '<',
    tagShortEnd: '/>',
    attrStart: '="',
    attrEnd: '"',
    commentStart: '<!--',
    commentEnd: '-->',
    cdataStart: '<![CDATA[',
    cdataEnd: ']]>',
    textStart: '',
    textEnd: '',
    indent: 4,
    regEntities: /[&'"<>]/g,
    regValEntities: /[&"<>]/g,
    encodeEntity: encodeEntity,
    pretty: false,
    useShortTags: true
***REMOVED***;

var entities = {
      '&': '&amp;',
      '\'': '&apos;',
      '"': '&quot;',
      '>': '&gt;',
      '<': '&lt;',
    ***REMOVED***;

/**
 * Convert SVG-as-JS object to SVG (XML) string.
 *
 * @param {Object***REMOVED*** data input data
 * @param {Object***REMOVED*** config config
 *
 * @return {Object***REMOVED*** output data
 */
module.exports = function(data, config) {

    return new JS2SVG(config).convert(data);

***REMOVED***;

function JS2SVG(config) {

    if (config) {
        this.config = Object.assign({***REMOVED***, defaults, config);
    ***REMOVED*** else {
        this.config = Object.assign({***REMOVED***, defaults);
    ***REMOVED***

    var indent = this.config.indent;
    if (typeof indent == 'number' && !isNaN(indent)) {
        this.config.indent = (indent < 0) ? '\t' : ' '.repeat(indent);
    ***REMOVED*** else if (typeof indent != 'string') {
        this.config.indent = '    ';
    ***REMOVED***

    if (this.config.pretty) {
        this.config.doctypeEnd += EOL;
        this.config.procInstEnd += EOL;
        this.config.commentEnd += EOL;
        this.config.cdataEnd += EOL;
        this.config.tagShortEnd += EOL;
        this.config.tagOpenEnd += EOL;
        this.config.tagCloseEnd += EOL;
        this.config.textEnd += EOL;
    ***REMOVED***

    this.indentLevel = 0;
    this.textContext = null;

***REMOVED***

function encodeEntity(char) {
    return entities[char];
***REMOVED***

/**
 * Start conversion.
 *
 * @param {Object***REMOVED*** data input data
 *
 * @return {String***REMOVED***
 */
JS2SVG.prototype.convert = function(data) {

    var svg = '';

    if (data.content) {

        this.indentLevel++;

        data.content.forEach(function(item) {

            if (item.elem) {
               svg += this.createElem(item);
            ***REMOVED*** else if (item.text) {
               svg += this.createText(item.text);
            ***REMOVED*** else if (item.doctype) {
                svg += this.createDoctype(item.doctype);
            ***REMOVED*** else if (item.processinginstruction) {
                svg += this.createProcInst(item.processinginstruction);
            ***REMOVED*** else if (item.comment) {
                svg += this.createComment(item.comment);
            ***REMOVED*** else if (item.cdata) {
                svg += this.createCDATA(item.cdata);
            ***REMOVED***

        ***REMOVED***, this);

    ***REMOVED***

    this.indentLevel--;

    return {
        data: svg,
        info: {
            width: this.width,
            height: this.height
        ***REMOVED***
    ***REMOVED***;

***REMOVED***;

/**
 * Create indent string in accordance with the current node level.
 *
 * @return {String***REMOVED***
 */
JS2SVG.prototype.createIndent = function() {

    var indent = '';

    if (this.config.pretty && !this.textContext) {
        indent = this.config.indent.repeat(this.indentLevel - 1);
    ***REMOVED***

    return indent;

***REMOVED***;

/**
 * Create doctype tag.
 *
 * @param {String***REMOVED*** doctype doctype body string
 *
 * @return {String***REMOVED***
 */
JS2SVG.prototype.createDoctype = function(doctype) {

    return  this.config.doctypeStart +
            doctype +
            this.config.doctypeEnd;

***REMOVED***;

/**
 * Create XML Processing Instruction tag.
 *
 * @param {Object***REMOVED*** instruction instruction object
 *
 * @return {String***REMOVED***
 */
JS2SVG.prototype.createProcInst = function(instruction) {

    return  this.config.procInstStart +
            instruction.name +
            ' ' +
            instruction.body +
            this.config.procInstEnd;

***REMOVED***;

/**
 * Create comment tag.
 *
 * @param {String***REMOVED*** comment comment body
 *
 * @return {String***REMOVED***
 */
JS2SVG.prototype.createComment = function(comment) {

    return  this.config.commentStart +
            comment +
            this.config.commentEnd;

***REMOVED***;

/**
 * Create CDATA section.
 *
 * @param {String***REMOVED*** cdata CDATA body
 *
 * @return {String***REMOVED***
 */
JS2SVG.prototype.createCDATA = function(cdata) {

    return  this.createIndent() +
            this.config.cdataStart +
            cdata +
            this.config.cdataEnd;

***REMOVED***;

/**
 * Create element tag.
 *
 * @param {Object***REMOVED*** data element object
 *
 * @return {String***REMOVED***
 */
JS2SVG.prototype.createElem = function(data) {

    // beautiful injection for obtaining SVG information :)
    if (
        data.isElem('svg') &&
        data.hasAttr('width') &&
        data.hasAttr('height')
    ) {
        this.width = data.attr('width').value;
        this.height = data.attr('height').value;
    ***REMOVED***

    // empty element and short tag
    if (data.isEmpty()) {
        if (this.config.useShortTags) {
            return this.createIndent() +
                   this.config.tagShortStart +
                   data.elem +
                   this.createAttrs(data) +
                   this.config.tagShortEnd;
        ***REMOVED*** else {
            return this.createIndent() +
                   this.config.tagShortStart +
                   data.elem +
                   this.createAttrs(data) +
                   this.config.tagOpenEnd +
                   this.config.tagCloseStart +
                   data.elem +
                   this.config.tagCloseEnd;
        ***REMOVED***
    // non-empty element
    ***REMOVED*** else {
        var tagOpenStart = this.config.tagOpenStart,
            tagOpenEnd = this.config.tagOpenEnd,
            tagCloseStart = this.config.tagCloseStart,
            tagCloseEnd = this.config.tagCloseEnd,
            openIndent = this.createIndent(),
            textIndent = '',
            processedData = '',
            dataEnd = '';

        if (this.textContext) {
            tagOpenStart = defaults.tagOpenStart;
            tagOpenEnd = defaults.tagOpenEnd;
            tagCloseStart = defaults.tagCloseStart;
            tagCloseEnd = defaults.tagCloseEnd;
            openIndent = '';
        ***REMOVED*** else if (data.isElem(textElem)) {
            if (this.config.pretty) {
                textIndent += openIndent + this.config.indent;
            ***REMOVED***
            this.textContext = data;
        ***REMOVED***

        processedData += this.convert(data).data;

        if (this.textContext == data) {
            this.textContext = null;
            if (this.config.pretty) dataEnd = EOL;
        ***REMOVED***

        return  openIndent +
                tagOpenStart +
                data.elem +
                this.createAttrs(data) +
                tagOpenEnd +
                textIndent +
                processedData +
                dataEnd +
                this.createIndent() +
                tagCloseStart +
                data.elem +
                tagCloseEnd;

    ***REMOVED***

***REMOVED***;

/**
 * Create element attributes.
 *
 * @param {Object***REMOVED*** elem attributes object
 *
 * @return {String***REMOVED***
 */
JS2SVG.prototype.createAttrs = function(elem) {

    var attrs = '';

    elem.eachAttr(function(attr) {

        if (attr.value !== undefined) {
            attrs +=    ' ' +
                        attr.name +
                        this.config.attrStart +
                        String(attr.value).replace(this.config.regValEntities, this.config.encodeEntity) +
                        this.config.attrEnd;
        ***REMOVED***
        else {
            attrs +=    ' ' +
                        attr.name;
        ***REMOVED***


    ***REMOVED***, this);

    return attrs;

***REMOVED***;

/**
 * Create text node.
 *
 * @param {String***REMOVED*** text text
 *
 * @return {String***REMOVED***
 */
JS2SVG.prototype.createText = function(text) {

    return  this.createIndent() +
            this.config.textStart +
            text.replace(this.config.regEntities, this.config.encodeEntity) +
            (this.textContext ? '' : this.config.textEnd);

***REMOVED***;
