/**
 * @fileoverview unix-style formatter.
 * @author oshi-shinobu
 */
"use strict";

//------------------------------------------------------------------------------
// Helper Functions
//------------------------------------------------------------------------------

/**
 * Returns a canonical error level string based upon the error message passed in.
 * @param {Object***REMOVED*** message Individual error message provided by eslint
 * @returns {string***REMOVED*** Error level string
 */
function getMessageType(message) {
    if (message.fatal || message.severity === 2) {
        return "Error";
    ***REMOVED***
    return "Warning";

***REMOVED***


//------------------------------------------------------------------------------
// Public Interface
//------------------------------------------------------------------------------

module.exports = function(results) {

    let output = "",
        total = 0;

    results.forEach(result => {

        const messages = result.messages;

        total += messages.length;

        messages.forEach(message => {

            output += `${result.filePath***REMOVED***:`;
            output += `${message.line || 0***REMOVED***:`;
            output += `${message.column || 0***REMOVED***:`;
            output += ` ${message.message***REMOVED*** `;
            output += `[${getMessageType(message)***REMOVED***${message.ruleId ? `/${message.ruleId***REMOVED***` : ""***REMOVED***]`;
            output += "\n";

        ***REMOVED***);

    ***REMOVED***);

    if (total > 0) {
        output += `\n${total***REMOVED*** problem${total !== 1 ? "s" : ""***REMOVED***`;
    ***REMOVED***

    return output;
***REMOVED***;
