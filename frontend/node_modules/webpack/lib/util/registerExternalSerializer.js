/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const { register ***REMOVED*** = require("./serialization");

const Position = require("acorn").Position;
const SourceLocation = require("acorn").SourceLocation;
const ValidationError = require("schema-utils").ValidationError;
const {
	CachedSource,
	ConcatSource,
	OriginalSource,
	PrefixSource,
	RawSource,
	ReplaceSource,
	SourceMapSource
***REMOVED*** = require("webpack-sources");

/** @typedef {import("acorn").Position***REMOVED*** Position */
/** @typedef {import("../Dependency").RealDependencyLocation***REMOVED*** RealDependencyLocation */
/** @typedef {import("../Dependency").SourcePosition***REMOVED*** SourcePosition */
/** @typedef {import("../serialization/ObjectMiddleware").ObjectDeserializerContext***REMOVED*** ObjectDeserializerContext */
/** @typedef {import("../serialization/ObjectMiddleware").ObjectSerializerContext***REMOVED*** ObjectSerializerContext */

const CURRENT_MODULE = "webpack/lib/util/registerExternalSerializer";

register(
	CachedSource,
	CURRENT_MODULE,
	"webpack-sources/CachedSource",
	new (class CachedSourceSerializer {
		/**
		 * @param {CachedSource***REMOVED*** source the cached source to be serialized
		 * @param {ObjectSerializerContext***REMOVED*** context context
		 * @returns {void***REMOVED***
		 */
		serialize(source, { write, writeLazy ***REMOVED***) {
			if (writeLazy) {
				writeLazy(source.originalLazy());
			***REMOVED*** else {
				write(source.original());
			***REMOVED***
			write(source.getCachedData());
		***REMOVED***

		/**
		 * @param {ObjectDeserializerContext***REMOVED*** context context
		 * @returns {CachedSource***REMOVED*** cached source
		 */
		deserialize({ read ***REMOVED***) {
			const source = read();
			const cachedData = read();
			return new CachedSource(source, cachedData);
		***REMOVED***
	***REMOVED***)()
);

register(
	RawSource,
	CURRENT_MODULE,
	"webpack-sources/RawSource",
	new (class RawSourceSerializer {
		/**
		 * @param {RawSource***REMOVED*** source the raw source to be serialized
		 * @param {ObjectSerializerContext***REMOVED*** context context
		 * @returns {void***REMOVED***
		 */
		serialize(source, { write ***REMOVED***) {
			write(source.buffer());
			write(!source.isBuffer());
		***REMOVED***

		/**
		 * @param {ObjectDeserializerContext***REMOVED*** context context
		 * @returns {RawSource***REMOVED*** raw source
		 */
		deserialize({ read ***REMOVED***) {
			const source = read();
			const convertToString = read();
			return new RawSource(source, convertToString);
		***REMOVED***
	***REMOVED***)()
);

register(
	ConcatSource,
	CURRENT_MODULE,
	"webpack-sources/ConcatSource",
	new (class ConcatSourceSerializer {
		/**
		 * @param {ConcatSource***REMOVED*** source the concat source to be serialized
		 * @param {ObjectSerializerContext***REMOVED*** context context
		 * @returns {void***REMOVED***
		 */
		serialize(source, { write ***REMOVED***) {
			write(source.getChildren());
		***REMOVED***

		/**
		 * @param {ObjectDeserializerContext***REMOVED*** context context
		 * @returns {ConcatSource***REMOVED*** concat source
		 */
		deserialize({ read ***REMOVED***) {
			const source = new ConcatSource();
			source.addAllSkipOptimizing(read());
			return source;
		***REMOVED***
	***REMOVED***)()
);

register(
	PrefixSource,
	CURRENT_MODULE,
	"webpack-sources/PrefixSource",
	new (class PrefixSourceSerializer {
		/**
		 * @param {PrefixSource***REMOVED*** source the prefix source to be serialized
		 * @param {ObjectSerializerContext***REMOVED*** context context
		 * @returns {void***REMOVED***
		 */
		serialize(source, { write ***REMOVED***) {
			write(source.getPrefix());
			write(source.original());
		***REMOVED***

		/**
		 * @param {ObjectDeserializerContext***REMOVED*** context context
		 * @returns {PrefixSource***REMOVED*** prefix source
		 */
		deserialize({ read ***REMOVED***) {
			return new PrefixSource(read(), read());
		***REMOVED***
	***REMOVED***)()
);

register(
	ReplaceSource,
	CURRENT_MODULE,
	"webpack-sources/ReplaceSource",
	new (class ReplaceSourceSerializer {
		/**
		 * @param {ReplaceSource***REMOVED*** source the replace source to be serialized
		 * @param {ObjectSerializerContext***REMOVED*** context context
		 * @returns {void***REMOVED***
		 */
		serialize(source, { write ***REMOVED***) {
			write(source.original());
			write(source.getName());
			const replacements = source.getReplacements();
			write(replacements.length);
			for (const repl of replacements) {
				write(repl.start);
				write(repl.end);
			***REMOVED***
			for (const repl of replacements) {
				write(repl.content);
				write(repl.name);
			***REMOVED***
		***REMOVED***

		/**
		 * @param {ObjectDeserializerContext***REMOVED*** context context
		 * @returns {ReplaceSource***REMOVED*** replace source
		 */
		deserialize({ read ***REMOVED***) {
			const source = new ReplaceSource(read(), read());
			const len = read();
			const startEndBuffer = [];
			for (let i = 0; i < len; i++) {
				startEndBuffer.push(read(), read());
			***REMOVED***
			let j = 0;
			for (let i = 0; i < len; i++) {
				source.replace(
					startEndBuffer[j++],
					startEndBuffer[j++],
					read(),
					read()
				);
			***REMOVED***
			return source;
		***REMOVED***
	***REMOVED***)()
);

register(
	OriginalSource,
	CURRENT_MODULE,
	"webpack-sources/OriginalSource",
	new (class OriginalSourceSerializer {
		/**
		 * @param {OriginalSource***REMOVED*** source the original source to be serialized
		 * @param {ObjectSerializerContext***REMOVED*** context context
		 * @returns {void***REMOVED***
		 */
		serialize(source, { write ***REMOVED***) {
			write(source.buffer());
			write(source.getName());
		***REMOVED***

		/**
		 * @param {ObjectDeserializerContext***REMOVED*** context context
		 * @returns {OriginalSource***REMOVED*** original source
		 */
		deserialize({ read ***REMOVED***) {
			const buffer = read();
			const name = read();
			return new OriginalSource(buffer, name);
		***REMOVED***
	***REMOVED***)()
);

register(
	SourceLocation,
	CURRENT_MODULE,
	"acorn/SourceLocation",
	new (class SourceLocationSerializer {
		/**
		 * @param {SourceLocation***REMOVED*** loc the location to be serialized
		 * @param {ObjectSerializerContext***REMOVED*** context context
		 * @returns {void***REMOVED***
		 */
		serialize(loc, { write ***REMOVED***) {
			write(loc.start.line);
			write(loc.start.column);
			write(loc.end.line);
			write(loc.end.column);
		***REMOVED***

		/**
		 * @param {ObjectDeserializerContext***REMOVED*** context context
		 * @returns {RealDependencyLocation***REMOVED*** location
		 */
		deserialize({ read ***REMOVED***) {
			return {
				start: {
					line: read(),
					column: read()
				***REMOVED***,
				end: {
					line: read(),
					column: read()
				***REMOVED***
			***REMOVED***;
		***REMOVED***
	***REMOVED***)()
);

register(
	Position,
	CURRENT_MODULE,
	"acorn/Position",
	new (class PositionSerializer {
		/**
		 * @param {Position***REMOVED*** pos the position to be serialized
		 * @param {ObjectSerializerContext***REMOVED*** context context
		 * @returns {void***REMOVED***
		 */
		serialize(pos, { write ***REMOVED***) {
			write(pos.line);
			write(pos.column);
		***REMOVED***

		/**
		 * @param {ObjectDeserializerContext***REMOVED*** context context
		 * @returns {SourcePosition***REMOVED*** position
		 */
		deserialize({ read ***REMOVED***) {
			return {
				line: read(),
				column: read()
			***REMOVED***;
		***REMOVED***
	***REMOVED***)()
);

register(
	SourceMapSource,
	CURRENT_MODULE,
	"webpack-sources/SourceMapSource",
	new (class SourceMapSourceSerializer {
		/**
		 * @param {SourceMapSource***REMOVED*** source the source map source to be serialized
		 * @param {ObjectSerializerContext***REMOVED*** context context
		 * @returns {void***REMOVED***
		 */
		serialize(source, { write ***REMOVED***) {
			write(source.getArgsAsBuffers());
		***REMOVED***

		/**
		 * @param {ObjectDeserializerContext***REMOVED*** context context
		 * @returns {SourceMapSource***REMOVED*** source source map source
		 */
		deserialize({ read ***REMOVED***) {
			// @ts-expect-error
			return new SourceMapSource(...read());
		***REMOVED***
	***REMOVED***)()
);

register(
	ValidationError,
	CURRENT_MODULE,
	"schema-utils/ValidationError",
	new (class ValidationErrorSerializer {
		/**
		 * @param {ValidationError***REMOVED*** error the source map source to be serialized
		 * @param {ObjectSerializerContext***REMOVED*** context context
		 * @returns {void***REMOVED***
		 */
		serialize(error, { write ***REMOVED***) {
			write(error.errors);
			write(error.schema);
			write({
				name: error.headerName,
				baseDataPath: error.baseDataPath,
				postFormatter: error.postFormatter
			***REMOVED***);
		***REMOVED***

		/**
		 * @param {ObjectDeserializerContext***REMOVED*** context context
		 * @returns {ValidationError***REMOVED*** error
		 */
		deserialize({ read ***REMOVED***) {
			return new ValidationError(read(), read(), read());
		***REMOVED***
	***REMOVED***)()
);
