"use strict";
Object.defineProperty(exports, "__esModule", { value: true ***REMOVED***);
const sequences = {***REMOVED***;
const DEFAULTS = {
    timestamp: () => () => Date.now(),
    datetime: () => () => new Date().toISOString(),
    date: () => () => new Date().toISOString().slice(0, 10),
    time: () => () => new Date().toISOString().slice(11),
    random: () => () => Math.random(),
    randomint: (args) => {
        var _a;
        const max = (_a = args === null || args === void 0 ? void 0 : args.max) !== null && _a !== void 0 ? _a : 2;
        return () => Math.floor(Math.random() * max);
    ***REMOVED***,
    seq: (args) => {
        var _a;
        const name = (_a = args === null || args === void 0 ? void 0 : args.name) !== null && _a !== void 0 ? _a : "";
        sequences[name] || (sequences[name] = 0);
        return () => sequences[name]++;
    ***REMOVED***,
***REMOVED***;
const getDef = Object.assign(_getDef, { DEFAULTS ***REMOVED***);
function _getDef() {
    return {
        keyword: "dynamicDefaults",
        type: "object",
        schemaType: ["string", "object"],
        modifying: true,
        valid: true,
        compile(schema, _parentSchema, it) {
            if (!it.opts.useDefaults || it.compositeRule)
                return () => true;
            const fs = {***REMOVED***;
            for (const key in schema)
                fs[key] = getDefault(schema[key]);
            const empty = it.opts.useDefaults === "empty";
            return (data) => {
                for (const prop in schema) {
                    if (data[prop] === undefined || (empty && (data[prop] === null || data[prop] === ""))) {
                        data[prop] = fs[prop]();
                    ***REMOVED***
                ***REMOVED***
                return true;
            ***REMOVED***;
        ***REMOVED***,
        metaSchema: {
            type: "object",
            additionalProperties: {
                anyOf: [
                    { type: "string" ***REMOVED***,
                    {
                        type: "object",
                        additionalProperties: false,
                        required: ["func", "args"],
                        properties: {
                            func: { type: "string" ***REMOVED***,
                            args: { type: "object" ***REMOVED***,
                        ***REMOVED***,
                    ***REMOVED***,
                ],
            ***REMOVED***,
        ***REMOVED***,
    ***REMOVED***;
***REMOVED***
function getDefault(d) {
    return typeof d == "object" ? getObjDefault(d) : getStrDefault(d);
***REMOVED***
function getObjDefault({ func, args ***REMOVED***) {
    const def = DEFAULTS[func];
    assertDefined(func, def);
    return def(args);
***REMOVED***
function getStrDefault(d = "") {
    const def = DEFAULTS[d];
    assertDefined(d, def);
    return def();
***REMOVED***
function assertDefined(name, def) {
    if (!def)
        throw new Error(`invalid "dynamicDefaults" keyword property value: ${name***REMOVED***`);
***REMOVED***
exports.default = getDef;
module.exports = getDef;
//# sourceMappingURL=dynamicDefaults.js.map