"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
***REMOVED***);
exports.default = _wrapAsyncGenerator;
var _OverloadYield = require("./OverloadYield.js");
function _wrapAsyncGenerator(fn) {
  return function () {
    return new AsyncGenerator(fn.apply(this, arguments));
  ***REMOVED***;
***REMOVED***
function AsyncGenerator(gen) {
  var front, back;
  function send(key, arg) {
    return new Promise(function (resolve, reject) {
      var request = {
        key: key,
        arg: arg,
        resolve: resolve,
        reject: reject,
        next: null
      ***REMOVED***;
      if (back) {
        back = back.next = request;
      ***REMOVED*** else {
        front = back = request;
        resume(key, arg);
      ***REMOVED***
    ***REMOVED***);
  ***REMOVED***
  function resume(key, arg) {
    try {
      var result = gen[key](arg);
      var value = result.value;
      var overloaded = value instanceof _OverloadYield.default;
      Promise.resolve(overloaded ? value.v : value).then(function (arg) {
        if (overloaded) {
          var nextKey = key === "return" ? "return" : "next";
          if (!value.k || arg.done) {
            return resume(nextKey, arg);
          ***REMOVED*** else {
            arg = gen[nextKey](arg).value;
          ***REMOVED***
        ***REMOVED***
        settle(result.done ? "return" : "normal", arg);
      ***REMOVED***, function (err) {
        resume("throw", err);
      ***REMOVED***);
    ***REMOVED*** catch (err) {
      settle("throw", err);
    ***REMOVED***
  ***REMOVED***
  function settle(type, value) {
    switch (type) {
      case "return":
        front.resolve({
          value: value,
          done: true
        ***REMOVED***);
        break;
      case "throw":
        front.reject(value);
        break;
      default:
        front.resolve({
          value: value,
          done: false
        ***REMOVED***);
        break;
    ***REMOVED***
    front = front.next;
    if (front) {
      resume(front.key, front.arg);
    ***REMOVED*** else {
      back = null;
    ***REMOVED***
  ***REMOVED***
  this._invoke = send;
  if (typeof gen.return !== "function") {
    this.return = undefined;
  ***REMOVED***
***REMOVED***
AsyncGenerator.prototype[typeof Symbol === "function" && Symbol.asyncIterator || "@@asyncIterator"] = function () {
  return this;
***REMOVED***;
AsyncGenerator.prototype.next = function (arg) {
  return this._invoke("next", arg);
***REMOVED***;
AsyncGenerator.prototype.throw = function (arg) {
  return this._invoke("throw", arg);
***REMOVED***;
AsyncGenerator.prototype.return = function (arg) {
  return this._invoke("return", arg);
***REMOVED***;

//# sourceMappingURL=wrapAsyncGenerator.js.map
