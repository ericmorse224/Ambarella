import type {CodeKeywordDefinition***REMOVED*** from "../../types"
import type {KeywordCxt***REMOVED*** from "../../compile/validate"
import {_, getProperty, Code***REMOVED*** from "../../compile/codegen"
import N from "../../compile/names"
import {SchemaEnv, compileSchema***REMOVED*** from "../../compile"
import {getValidate***REMOVED*** from "../core/ref"

const def: CodeKeywordDefinition = {
  keyword: "$dynamicAnchor",
  schemaType: "string",
  code: (cxt) => dynamicAnchor(cxt, cxt.schema),
***REMOVED***

export function dynamicAnchor(cxt: KeywordCxt, anchor: string): void {
  const {gen, it***REMOVED*** = cxt
  it.schemaEnv.root.dynamicAnchors[anchor] = true
  const v = _`${N.dynamicAnchors***REMOVED***${getProperty(anchor)***REMOVED***`
  const validate = it.errSchemaPath === "#" ? it.validateName : _getValidate(cxt)
  gen.if(_`!${v***REMOVED***`, () => gen.assign(v, validate))
***REMOVED***

function _getValidate(cxt: KeywordCxt): Code {
  const {schemaEnv, schema, self***REMOVED*** = cxt.it
  const {root, baseId, localRefs, meta***REMOVED*** = schemaEnv.root
  const {schemaId***REMOVED*** = self.opts
  const sch = new SchemaEnv({schema, schemaId, root, baseId, localRefs, meta***REMOVED***)
  compileSchema.call(self, sch)
  return getValidate(cxt, sch)
***REMOVED***

export default def
