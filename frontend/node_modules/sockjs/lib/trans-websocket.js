// Generated by CoffeeScript 1.12.7
(function() {
  var FayeWebsocket, RawWebsocketSessionReceiver, Transport, WebSocketReceiver, transport, utils,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; ***REMOVED*** function ctor() { this.constructor = child; ***REMOVED*** ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; ***REMOVED***,
    hasProp = {***REMOVED***.hasOwnProperty;

  FayeWebsocket = require('faye-websocket');

  utils = require('./utils');

  transport = require('./transport');

  exports.app = {
    _websocket_check: function(req, connection, head) {
      if (!FayeWebsocket.isWebSocket(req)) {
        throw {
          status: 400,
          message: 'Not a valid websocket request'
        ***REMOVED***;
      ***REMOVED***
    ***REMOVED***,
    sockjs_websocket: function(req, connection, head) {
      var ws;
      this._websocket_check(req, connection, head);
      ws = new FayeWebsocket(req, connection, head, null, this.options.faye_server_options);
      ws.onopen = (function(_this) {
        return function() {
          return transport.registerNoSession(req, _this, new WebSocketReceiver(ws, connection));
        ***REMOVED***;
      ***REMOVED***)(this);
      return true;
    ***REMOVED***,
    raw_websocket: function(req, connection, head) {
      var ver, ws;
      this._websocket_check(req, connection, head);
      ver = req.headers['sec-websocket-version'] || '';
      if (['8', '13'].indexOf(ver) === -1) {
        throw {
          status: 400,
          message: 'Only supported WebSocket protocol is RFC 6455.'
        ***REMOVED***;
      ***REMOVED***
      ws = new FayeWebsocket(req, connection, head, null, this.options.faye_server_options);
      ws.onopen = (function(_this) {
        return function() {
          return new RawWebsocketSessionReceiver(req, connection, _this, ws);
        ***REMOVED***;
      ***REMOVED***)(this);
      return true;
    ***REMOVED***
  ***REMOVED***;

  WebSocketReceiver = (function(superClass) {
    extend(WebSocketReceiver, superClass);

    WebSocketReceiver.prototype.protocol = "websocket";

    function WebSocketReceiver(ws1, connection1) {
      var x;
      this.ws = ws1;
      this.connection = connection1;
      try {
        this.connection.setKeepAlive(true, 5000);
        this.connection.setNoDelay(true);
      ***REMOVED*** catch (error) {
        x = error;
      ***REMOVED***
      this.ws.addEventListener('message', (function(_this) {
        return function(m) {
          return _this.didMessage(m.data);
        ***REMOVED***;
      ***REMOVED***)(this));
      this.heartbeat_cb = (function(_this) {
        return function() {
          return _this.heartbeat_timeout();
        ***REMOVED***;
      ***REMOVED***)(this);
      WebSocketReceiver.__super__.constructor.call(this, this.connection);
    ***REMOVED***

    WebSocketReceiver.prototype.setUp = function() {
      WebSocketReceiver.__super__.setUp.apply(this, arguments);
      return this.ws.addEventListener('close', this.thingy_end_cb);
    ***REMOVED***;

    WebSocketReceiver.prototype.tearDown = function() {
      this.ws.removeEventListener('close', this.thingy_end_cb);
      return WebSocketReceiver.__super__.tearDown.apply(this, arguments);
    ***REMOVED***;

    WebSocketReceiver.prototype.didMessage = function(payload) {
      var i, len, message, msg, results, x;
      if (this.ws && this.session && payload.length > 0) {
        try {
          message = JSON.parse(payload);
        ***REMOVED*** catch (error) {
          x = error;
          return this.didClose(3000, 'Broken framing.');
        ***REMOVED***
        if (payload[0] === '[') {
          results = [];
          for (i = 0, len = message.length; i < len; i++) {
            msg = message[i];
            results.push(this.session.didMessage(msg));
          ***REMOVED***
          return results;
        ***REMOVED*** else {
          return this.session.didMessage(message);
        ***REMOVED***
      ***REMOVED***
    ***REMOVED***;

    WebSocketReceiver.prototype.doSendFrame = function(payload) {
      var x;
      if (this.ws) {
        try {
          this.ws.send(payload);
          return true;
        ***REMOVED*** catch (error) {
          x = error;
        ***REMOVED***
      ***REMOVED***
      return false;
    ***REMOVED***;

    WebSocketReceiver.prototype.didClose = function(status, reason) {
      var x;
      if (status == null) {
        status = 1000;
      ***REMOVED***
      if (reason == null) {
        reason = "Normal closure";
      ***REMOVED***
      WebSocketReceiver.__super__.didClose.apply(this, arguments);
      try {
        this.ws.close(status, reason, false);
      ***REMOVED*** catch (error) {
        x = error;
      ***REMOVED***
      this.ws = null;
      return this.connection = null;
    ***REMOVED***;

    WebSocketReceiver.prototype.heartbeat = function() {
      var hto_ref, supportsHeartbeats;
      supportsHeartbeats = this.ws.ping(null, function() {
        return clearTimeout(hto_ref);
      ***REMOVED***);
      if (supportsHeartbeats) {
        return hto_ref = setTimeout(this.heartbeat_cb, 10000);
      ***REMOVED*** else {
        return WebSocketReceiver.__super__.heartbeat.apply(this, arguments);
      ***REMOVED***
    ***REMOVED***;

    WebSocketReceiver.prototype.heartbeat_timeout = function() {
      if (this.session != null) {
        return this.session.close(3000, 'No response from heartbeat');
      ***REMOVED***
    ***REMOVED***;

    return WebSocketReceiver;

  ***REMOVED***)(transport.GenericReceiver);

  Transport = transport.Transport;

  RawWebsocketSessionReceiver = (function(superClass) {
    extend(RawWebsocketSessionReceiver, superClass);

    function RawWebsocketSessionReceiver(req, conn, server, ws1) {
      this.ws = ws1;
      this.prefix = server.options.prefix;
      this.readyState = Transport.OPEN;
      this.recv = {
        connection: conn,
        protocol: "websocket-raw"
      ***REMOVED***;
      this.connection = new transport.SockJSConnection(this);
      this.decorateConnection(req);
      server.emit('connection', this.connection);
      this._end_cb = (function(_this) {
        return function() {
          return _this.didClose();
        ***REMOVED***;
      ***REMOVED***)(this);
      this.ws.addEventListener('close', this._end_cb);
      this._message_cb = (function(_this) {
        return function(m) {
          return _this.didMessage(m);
        ***REMOVED***;
      ***REMOVED***)(this);
      this.ws.addEventListener('message', this._message_cb);
    ***REMOVED***

    RawWebsocketSessionReceiver.prototype.didMessage = function(m) {
      if (this.readyState === Transport.OPEN) {
        this.connection.emit('data', m.data);
      ***REMOVED***
    ***REMOVED***;

    RawWebsocketSessionReceiver.prototype.send = function(payload) {
      if (this.readyState !== Transport.OPEN) {
        return false;
      ***REMOVED***
      this.ws.send(payload);
      return true;
    ***REMOVED***;

    RawWebsocketSessionReceiver.prototype.close = function(status, reason) {
      if (status == null) {
        status = 1000;
      ***REMOVED***
      if (reason == null) {
        reason = "Normal closure";
      ***REMOVED***
      if (this.readyState !== Transport.OPEN) {
        return false;
      ***REMOVED***
      this.readyState = Transport.CLOSING;
      this.ws.close(status, reason, false);
      return true;
    ***REMOVED***;

    RawWebsocketSessionReceiver.prototype.didClose = function() {
      var x;
      if (!this.ws) {
        return;
      ***REMOVED***
      this.ws.removeEventListener('message', this._message_cb);
      this.ws.removeEventListener('close', this._end_cb);
      try {
        this.ws.close(1000, "Normal closure", false);
      ***REMOVED*** catch (error) {
        x = error;
      ***REMOVED***
      this.ws = null;
      this.readyState = Transport.CLOSED;
      this.connection.emit('end');
      this.connection.emit('close');
      return this.connection = null;
    ***REMOVED***;

    return RawWebsocketSessionReceiver;

  ***REMOVED***)(transport.Session);

***REMOVED***).call(this);
