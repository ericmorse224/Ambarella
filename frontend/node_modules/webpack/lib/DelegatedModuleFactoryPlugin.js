/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const DelegatedModule = require("./DelegatedModule");

/** @typedef {import("../declarations/plugins/DllReferencePlugin").DllReferencePluginOptions***REMOVED*** DllReferencePluginOptions */
/** @typedef {import("../declarations/plugins/DllReferencePlugin").DllReferencePluginOptionsContent***REMOVED*** DllReferencePluginOptionsContent */
/** @typedef {import("./DelegatedModule").DelegatedModuleSourceRequest***REMOVED*** DelegatedModuleSourceRequest */
/** @typedef {import("./DelegatedModule").DelegatedModuleType***REMOVED*** DelegatedModuleType */
/** @typedef {import("./NormalModuleFactory")***REMOVED*** NormalModuleFactory */
/** @typedef {import("./util/identifier").AssociatedObjectForCache***REMOVED*** AssociatedObjectForCache */

/**
 * @typedef {object***REMOVED*** Options
 * @property {DelegatedModuleSourceRequest***REMOVED*** source source
 * @property {NonNullable<DllReferencePluginOptions["context"]>***REMOVED*** context absolute context path to which lib ident is relative to
 * @property {DllReferencePluginOptionsContent***REMOVED*** content content
 * @property {DllReferencePluginOptions["type"]***REMOVED*** type type
 * @property {DllReferencePluginOptions["extensions"]***REMOVED*** extensions extensions
 * @property {DllReferencePluginOptions["scope"]***REMOVED*** scope scope
 * @property {AssociatedObjectForCache=***REMOVED*** associatedObjectForCache object for caching
 */

class DelegatedModuleFactoryPlugin {
	/**
	 * @param {Options***REMOVED*** options options
	 */
	constructor(options) {
		this.options = options;
		options.type = options.type || "require";
		options.extensions = options.extensions || ["", ".js", ".json", ".wasm"];
	***REMOVED***

	/**
	 * @param {NormalModuleFactory***REMOVED*** normalModuleFactory the normal module factory
	 * @returns {void***REMOVED***
	 */
	apply(normalModuleFactory) {
		const scope = this.options.scope;
		if (scope) {
			normalModuleFactory.hooks.factorize.tapAsync(
				"DelegatedModuleFactoryPlugin",
				(data, callback) => {
					const [dependency] = data.dependencies;
					const { request ***REMOVED*** = dependency;
					if (request && request.startsWith(`${scope***REMOVED***/`)) {
						const innerRequest = `.${request.slice(scope.length)***REMOVED***`;
						let resolved;
						if (innerRequest in this.options.content) {
							resolved = this.options.content[innerRequest];
							return callback(
								null,
								new DelegatedModule(
									this.options.source,
									resolved,
									/** @type {DelegatedModuleType***REMOVED*** */
									(this.options.type),
									innerRequest,
									request
								)
							);
						***REMOVED***
						const extensions =
							/** @type {string[]***REMOVED*** */
							(this.options.extensions);
						for (let i = 0; i < extensions.length; i++) {
							const extension = extensions[i];
							const requestPlusExt = innerRequest + extension;
							if (requestPlusExt in this.options.content) {
								resolved = this.options.content[requestPlusExt];
								return callback(
									null,
									new DelegatedModule(
										this.options.source,
										resolved,
										/** @type {DelegatedModuleType***REMOVED*** */
										(this.options.type),
										requestPlusExt,
										request + extension
									)
								);
							***REMOVED***
						***REMOVED***
					***REMOVED***
					return callback();
				***REMOVED***
			);
		***REMOVED*** else {
			normalModuleFactory.hooks.module.tap(
				"DelegatedModuleFactoryPlugin",
				module => {
					const request = module.libIdent(this.options);
					if (request && request in this.options.content) {
						const resolved = this.options.content[request];
						return new DelegatedModule(
							this.options.source,
							resolved,
							/** @type {DelegatedModuleType***REMOVED*** */
							(this.options.type),
							request,
							module
						);
					***REMOVED***
					return module;
				***REMOVED***
			);
		***REMOVED***
	***REMOVED***
***REMOVED***
module.exports = DelegatedModuleFactoryPlugin;
