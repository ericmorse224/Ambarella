{
  "definitions": {
    "AmdContainer": {
      "description": "Add a container for define/require functions in the AMD module.",
      "type": "string",
      "minLength": 1
    ***REMOVED***,
    "AuxiliaryComment": {
      "description": "Add a comment in the UMD wrapper.",
      "anyOf": [
        {
          "description": "Append the same comment above each import style.",
          "type": "string"
        ***REMOVED***,
        {
          "$ref": "#/definitions/LibraryCustomUmdCommentObject"
        ***REMOVED***
      ]
    ***REMOVED***,
    "EntryRuntime": {
      "description": "The name of the runtime chunk. If set a runtime chunk with this name is created or an existing entrypoint is used as runtime.",
      "anyOf": [
        {
          "enum": [false]
        ***REMOVED***,
        {
          "type": "string",
          "minLength": 1
        ***REMOVED***
      ]
    ***REMOVED***,
    "Exposes": {
      "description": "Modules that should be exposed by this container. When provided, property name is used as public name, otherwise public name is automatically inferred from request.",
      "anyOf": [
        {
          "type": "array",
          "items": {
            "description": "Modules that should be exposed by this container.",
            "anyOf": [
              {
                "$ref": "#/definitions/ExposesItem"
              ***REMOVED***,
              {
                "$ref": "#/definitions/ExposesObject"
              ***REMOVED***
            ]
          ***REMOVED***
        ***REMOVED***,
        {
          "$ref": "#/definitions/ExposesObject"
        ***REMOVED***
      ]
    ***REMOVED***,
    "ExposesConfig": {
      "description": "Advanced configuration for modules that should be exposed by this container.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "import": {
          "description": "Request to a module that should be exposed by this container.",
          "anyOf": [
            {
              "$ref": "#/definitions/ExposesItem"
            ***REMOVED***,
            {
              "$ref": "#/definitions/ExposesItems"
            ***REMOVED***
          ]
        ***REMOVED***,
        "name": {
          "description": "Custom chunk name for the exposed module.",
          "type": "string"
        ***REMOVED***
      ***REMOVED***,
      "required": ["import"]
    ***REMOVED***,
    "ExposesItem": {
      "description": "Module that should be exposed by this container.",
      "type": "string",
      "minLength": 1
    ***REMOVED***,
    "ExposesItems": {
      "description": "Modules that should be exposed by this container.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/ExposesItem"
      ***REMOVED***
    ***REMOVED***,
    "ExposesObject": {
      "description": "Modules that should be exposed by this container. Property names are used as public paths.",
      "type": "object",
      "additionalProperties": {
        "description": "Modules that should be exposed by this container.",
        "anyOf": [
          {
            "$ref": "#/definitions/ExposesConfig"
          ***REMOVED***,
          {
            "$ref": "#/definitions/ExposesItem"
          ***REMOVED***,
          {
            "$ref": "#/definitions/ExposesItems"
          ***REMOVED***
        ]
      ***REMOVED***
    ***REMOVED***,
    "LibraryCustomUmdCommentObject": {
      "description": "Set explicit comments for `commonjs`, `commonjs2`, `amd`, and `root`.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "amd": {
          "description": "Set comment for `amd` section in UMD.",
          "type": "string"
        ***REMOVED***,
        "commonjs": {
          "description": "Set comment for `commonjs` (exports) section in UMD.",
          "type": "string"
        ***REMOVED***,
        "commonjs2": {
          "description": "Set comment for `commonjs2` (module.exports) section in UMD.",
          "type": "string"
        ***REMOVED***,
        "root": {
          "description": "Set comment for `root` (global variable) section in UMD.",
          "type": "string"
        ***REMOVED***
      ***REMOVED***
    ***REMOVED***,
    "LibraryCustomUmdObject": {
      "description": "Description object for all UMD variants of the library name.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "amd": {
          "description": "Name of the exposed AMD library in the UMD.",
          "type": "string",
          "minLength": 1
        ***REMOVED***,
        "commonjs": {
          "description": "Name of the exposed commonjs export in the UMD.",
          "type": "string",
          "minLength": 1
        ***REMOVED***,
        "root": {
          "description": "Name of the property exposed globally by a UMD library.",
          "anyOf": [
            {
              "type": "array",
              "items": {
                "description": "Part of the name of the property exposed globally by a UMD library.",
                "type": "string",
                "minLength": 1
              ***REMOVED***
            ***REMOVED***,
            {
              "type": "string",
              "minLength": 1
            ***REMOVED***
          ]
        ***REMOVED***
      ***REMOVED***
    ***REMOVED***,
    "LibraryExport": {
      "description": "Specify which export should be exposed as library.",
      "anyOf": [
        {
          "type": "array",
          "items": {
            "description": "Part of the export that should be exposed as library.",
            "type": "string",
            "minLength": 1
          ***REMOVED***
        ***REMOVED***,
        {
          "type": "string",
          "minLength": 1
        ***REMOVED***
      ]
    ***REMOVED***,
    "LibraryName": {
      "description": "The name of the library (some types allow unnamed libraries too).",
      "anyOf": [
        {
          "type": "array",
          "items": {
            "description": "A part of the library name.",
            "type": "string",
            "minLength": 1
          ***REMOVED***,
          "minItems": 1
        ***REMOVED***,
        {
          "type": "string",
          "minLength": 1
        ***REMOVED***,
        {
          "$ref": "#/definitions/LibraryCustomUmdObject"
        ***REMOVED***
      ]
    ***REMOVED***,
    "LibraryOptions": {
      "description": "Options for library.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "amdContainer": {
          "$ref": "#/definitions/AmdContainer"
        ***REMOVED***,
        "auxiliaryComment": {
          "$ref": "#/definitions/AuxiliaryComment"
        ***REMOVED***,
        "export": {
          "$ref": "#/definitions/LibraryExport"
        ***REMOVED***,
        "name": {
          "$ref": "#/definitions/LibraryName"
        ***REMOVED***,
        "type": {
          "$ref": "#/definitions/LibraryType"
        ***REMOVED***,
        "umdNamedDefine": {
          "$ref": "#/definitions/UmdNamedDefine"
        ***REMOVED***
      ***REMOVED***,
      "required": ["type"]
    ***REMOVED***,
    "LibraryType": {
      "description": "Type of library (types included by default are 'var', 'module', 'assign', 'assign-properties', 'this', 'window', 'self', 'global', 'commonjs', 'commonjs2', 'commonjs-module', 'commonjs-static', 'amd', 'amd-require', 'umd', 'umd2', 'jsonp', 'system', but others might be added by plugins).",
      "anyOf": [
        {
          "enum": [
            "var",
            "module",
            "assign",
            "assign-properties",
            "this",
            "window",
            "self",
            "global",
            "commonjs",
            "commonjs2",
            "commonjs-module",
            "commonjs-static",
            "amd",
            "amd-require",
            "umd",
            "umd2",
            "jsonp",
            "system"
          ]
        ***REMOVED***,
        {
          "type": "string"
        ***REMOVED***
      ]
    ***REMOVED***,
    "UmdNamedDefine": {
      "description": "If `output.libraryTarget` is set to umd and `output.library` is set, setting this to true will name the AMD module.",
      "type": "boolean"
    ***REMOVED***
  ***REMOVED***,
  "title": "ContainerPluginOptions",
  "type": "object",
  "additionalProperties": false,
  "properties": {
    "exposes": {
      "$ref": "#/definitions/Exposes"
    ***REMOVED***,
    "filename": {
      "description": "The filename for this container relative path inside the `output.path` directory.",
      "type": "string",
      "absolutePath": false,
      "minLength": 1
    ***REMOVED***,
    "library": {
      "$ref": "#/definitions/LibraryOptions"
    ***REMOVED***,
    "name": {
      "description": "The name for this container.",
      "type": "string",
      "minLength": 1
    ***REMOVED***,
    "runtime": {
      "$ref": "#/definitions/EntryRuntime"
    ***REMOVED***,
    "shareScope": {
      "description": "The name of the share scope which is shared with the host (defaults to 'default').",
      "type": "string",
      "minLength": 1
    ***REMOVED***
  ***REMOVED***,
  "required": ["name", "exposes"]
***REMOVED***
