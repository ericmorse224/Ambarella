/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const { SyncWaterfallHook ***REMOVED*** = require("tapable");
const util = require("util");
const RuntimeGlobals = require("./RuntimeGlobals");
const memoize = require("./util/memoize");

/** @typedef {import("tapable").Tap***REMOVED*** Tap */
/** @typedef {import("webpack-sources").ConcatSource***REMOVED*** ConcatSource */
/** @typedef {import("webpack-sources").Source***REMOVED*** Source */
/** @typedef {import("../declarations/WebpackOptions").Output***REMOVED*** OutputOptions */
/** @typedef {import("./ModuleTemplate")***REMOVED*** ModuleTemplate */
/** @typedef {import("./Chunk")***REMOVED*** Chunk */
/** @typedef {import("./Compilation")***REMOVED*** Compilation */
/** @typedef {import("./Compilation").AssetInfo***REMOVED*** AssetInfo */
/** @typedef {import("./Compilation").InterpolatedPathAndAssetInfo***REMOVED*** InterpolatedPathAndAssetInfo */
/** @typedef {import("./Module")***REMOVED*** Module***REMOVED*** */
/** @typedef {import("./util/Hash")***REMOVED*** Hash***REMOVED*** */
/** @typedef {import("./DependencyTemplates")***REMOVED*** DependencyTemplates***REMOVED*** */
/** @typedef {import("./javascript/JavascriptModulesPlugin").RenderContext***REMOVED*** RenderContext***REMOVED*** */
/** @typedef {import("./javascript/JavascriptModulesPlugin").RenderBootstrapContext***REMOVED*** RenderBootstrapContext***REMOVED*** */
/** @typedef {import("./javascript/JavascriptModulesPlugin").ChunkHashContext***REMOVED*** ChunkHashContext***REMOVED*** */
/** @typedef {import("./RuntimeTemplate")***REMOVED*** RuntimeTemplate***REMOVED*** */
/** @typedef {import("./ModuleGraph")***REMOVED*** ModuleGraph***REMOVED*** */
/** @typedef {import("./ChunkGraph")***REMOVED*** ChunkGraph***REMOVED*** */
/** @typedef {import("./Template").RenderManifestOptions***REMOVED*** RenderManifestOptions***REMOVED*** */
/** @typedef {import("./Template").RenderManifestEntry***REMOVED*** RenderManifestEntry***REMOVED*** */
/** @typedef {import("./TemplatedPathPlugin").TemplatePath***REMOVED*** TemplatePath***REMOVED*** */
/** @typedef {import("./TemplatedPathPlugin").PathData***REMOVED*** PathData***REMOVED*** */
/**
 * @template T
 * @typedef {import("tapable").IfSet<T>***REMOVED*** IfSet
 */

const getJavascriptModulesPlugin = memoize(() =>
	require("./javascript/JavascriptModulesPlugin")
);
const getJsonpTemplatePlugin = memoize(() =>
	require("./web/JsonpTemplatePlugin")
);
const getLoadScriptRuntimeModule = memoize(() =>
	require("./runtime/LoadScriptRuntimeModule")
);

// TODO webpack 6 remove this class
class MainTemplate {
	/**
	 * @param {OutputOptions***REMOVED*** outputOptions output options for the MainTemplate
	 * @param {Compilation***REMOVED*** compilation the compilation
	 */
	constructor(outputOptions, compilation) {
		/** @type {OutputOptions***REMOVED*** */
		this._outputOptions = outputOptions || {***REMOVED***;
		this.hooks = Object.freeze({
			renderManifest: {
				tap: util.deprecate(
					/**
					 * @template AdditionalOptions
					 * @param {string | Tap & IfSet<AdditionalOptions>***REMOVED*** options options
					 * @param {(renderManifestEntries: RenderManifestEntry[], renderManifestOptions: RenderManifestOptions) => RenderManifestEntry[]***REMOVED*** fn fn
					 */
					(options, fn) => {
						compilation.hooks.renderManifest.tap(
							options,
							(entries, options) => {
								if (!options.chunk.hasRuntime()) return entries;
								return fn(entries, options);
							***REMOVED***
						);
					***REMOVED***,
					"MainTemplate.hooks.renderManifest is deprecated (use Compilation.hooks.renderManifest instead)",
					"DEP_WEBPACK_MAIN_TEMPLATE_RENDER_MANIFEST"
				)
			***REMOVED***,
			modules: {
				tap: () => {
					throw new Error(
						"MainTemplate.hooks.modules has been removed (there is no replacement, please create an issue to request that)"
					);
				***REMOVED***
			***REMOVED***,
			moduleObj: {
				tap: () => {
					throw new Error(
						"MainTemplate.hooks.moduleObj has been removed (there is no replacement, please create an issue to request that)"
					);
				***REMOVED***
			***REMOVED***,
			require: {
				tap: util.deprecate(
					/**
					 * @template AdditionalOptions
					 * @param {string | Tap & IfSet<AdditionalOptions>***REMOVED*** options options
					 * @param {(value: string, renderBootstrapContext: RenderBootstrapContext) => string***REMOVED*** fn fn
					 */
					(options, fn) => {
						getJavascriptModulesPlugin()
							.getCompilationHooks(compilation)
							.renderRequire.tap(options, fn);
					***REMOVED***,
					"MainTemplate.hooks.require is deprecated (use JavascriptModulesPlugin.getCompilationHooks().renderRequire instead)",
					"DEP_WEBPACK_MAIN_TEMPLATE_REQUIRE"
				)
			***REMOVED***,
			beforeStartup: {
				tap: () => {
					throw new Error(
						"MainTemplate.hooks.beforeStartup has been removed (use RuntimeGlobals.startupOnlyBefore instead)"
					);
				***REMOVED***
			***REMOVED***,
			startup: {
				tap: () => {
					throw new Error(
						"MainTemplate.hooks.startup has been removed (use RuntimeGlobals.startup instead)"
					);
				***REMOVED***
			***REMOVED***,
			afterStartup: {
				tap: () => {
					throw new Error(
						"MainTemplate.hooks.afterStartup has been removed (use RuntimeGlobals.startupOnlyAfter instead)"
					);
				***REMOVED***
			***REMOVED***,
			render: {
				tap: util.deprecate(
					/**
					 * @template AdditionalOptions
					 * @param {string | Tap & IfSet<AdditionalOptions>***REMOVED*** options options
					 * @param {(source: Source, chunk: Chunk, hash: string | undefined, moduleTemplate: ModuleTemplate, dependencyTemplates: DependencyTemplates) => Source***REMOVED*** fn fn
					 */
					(options, fn) => {
						getJavascriptModulesPlugin()
							.getCompilationHooks(compilation)
							.render.tap(options, (source, renderContext) => {
								if (
									renderContext.chunkGraph.getNumberOfEntryModules(
										renderContext.chunk
									) === 0 ||
									!renderContext.chunk.hasRuntime()
								) {
									return source;
								***REMOVED***
								return fn(
									source,
									renderContext.chunk,
									compilation.hash,
									compilation.moduleTemplates.javascript,
									compilation.dependencyTemplates
								);
							***REMOVED***);
					***REMOVED***,
					"MainTemplate.hooks.render is deprecated (use JavascriptModulesPlugin.getCompilationHooks().render instead)",
					"DEP_WEBPACK_MAIN_TEMPLATE_RENDER"
				)
			***REMOVED***,
			renderWithEntry: {
				tap: util.deprecate(
					/**
					 * @template AdditionalOptions
					 * @param {string | Tap & IfSet<AdditionalOptions>***REMOVED*** options options
					 * @param {(source: Source, chunk: Chunk, hash: string | undefined) => Source***REMOVED*** fn fn
					 */
					(options, fn) => {
						getJavascriptModulesPlugin()
							.getCompilationHooks(compilation)
							.render.tap(options, (source, renderContext) => {
								if (
									renderContext.chunkGraph.getNumberOfEntryModules(
										renderContext.chunk
									) === 0 ||
									!renderContext.chunk.hasRuntime()
								) {
									return source;
								***REMOVED***
								return fn(source, renderContext.chunk, compilation.hash);
							***REMOVED***);
					***REMOVED***,
					"MainTemplate.hooks.renderWithEntry is deprecated (use JavascriptModulesPlugin.getCompilationHooks().render instead)",
					"DEP_WEBPACK_MAIN_TEMPLATE_RENDER_WITH_ENTRY"
				)
			***REMOVED***,
			assetPath: {
				tap: util.deprecate(
					/**
					 * @template AdditionalOptions
					 * @param {string | Tap & IfSet<AdditionalOptions>***REMOVED*** options options
					 * @param {(value: string, path: PathData, assetInfo: AssetInfo | undefined) => string***REMOVED*** fn fn
					 */
					(options, fn) => {
						compilation.hooks.assetPath.tap(options, fn);
					***REMOVED***,
					"MainTemplate.hooks.assetPath is deprecated (use Compilation.hooks.assetPath instead)",
					"DEP_WEBPACK_MAIN_TEMPLATE_ASSET_PATH"
				),
				call: util.deprecate(
					/**
					 * @param {TemplatePath***REMOVED*** filename used to get asset path with hash
					 * @param {PathData***REMOVED*** options context data
					 * @returns {string***REMOVED*** interpolated path
					 */
					(filename, options) => compilation.getAssetPath(filename, options),
					"MainTemplate.hooks.assetPath is deprecated (use Compilation.hooks.assetPath instead)",
					"DEP_WEBPACK_MAIN_TEMPLATE_ASSET_PATH"
				)
			***REMOVED***,
			hash: {
				tap: util.deprecate(
					/**
					 * @template AdditionalOptions
					 * @param {string | Tap & IfSet<AdditionalOptions>***REMOVED*** options options
					 * @param {(hash: Hash) => void***REMOVED*** fn fn
					 */
					(options, fn) => {
						compilation.hooks.fullHash.tap(options, fn);
					***REMOVED***,
					"MainTemplate.hooks.hash is deprecated (use Compilation.hooks.fullHash instead)",
					"DEP_WEBPACK_MAIN_TEMPLATE_HASH"
				)
			***REMOVED***,
			hashForChunk: {
				tap: util.deprecate(
					/**
					 * @template AdditionalOptions
					 * @param {string | Tap & IfSet<AdditionalOptions>***REMOVED*** options options
					 * @param {(hash: Hash, chunk: Chunk) => void***REMOVED*** fn fn
					 */
					(options, fn) => {
						getJavascriptModulesPlugin()
							.getCompilationHooks(compilation)
							.chunkHash.tap(options, (chunk, hash) => {
								if (!chunk.hasRuntime()) return;
								return fn(hash, chunk);
							***REMOVED***);
					***REMOVED***,
					"MainTemplate.hooks.hashForChunk is deprecated (use JavascriptModulesPlugin.getCompilationHooks().chunkHash instead)",
					"DEP_WEBPACK_MAIN_TEMPLATE_HASH_FOR_CHUNK"
				)
			***REMOVED***,
			globalHashPaths: {
				tap: util.deprecate(
					() => {***REMOVED***,
					"MainTemplate.hooks.globalHashPaths has been removed (it's no longer needed)",
					"DEP_WEBPACK_MAIN_TEMPLATE_HASH_FOR_CHUNK"
				)
			***REMOVED***,
			globalHash: {
				tap: util.deprecate(
					() => {***REMOVED***,
					"MainTemplate.hooks.globalHash has been removed (it's no longer needed)",
					"DEP_WEBPACK_MAIN_TEMPLATE_HASH_FOR_CHUNK"
				)
			***REMOVED***,
			hotBootstrap: {
				tap: () => {
					throw new Error(
						"MainTemplate.hooks.hotBootstrap has been removed (use your own RuntimeModule instead)"
					);
				***REMOVED***
			***REMOVED***,

			// for compatibility:
			/** @type {SyncWaterfallHook<[string, Chunk, string, ModuleTemplate, DependencyTemplates]>***REMOVED*** */
			bootstrap: new SyncWaterfallHook([
				"source",
				"chunk",
				"hash",
				"moduleTemplate",
				"dependencyTemplates"
			]),
			/** @type {SyncWaterfallHook<[string, Chunk, string]>***REMOVED*** */
			localVars: new SyncWaterfallHook(["source", "chunk", "hash"]),
			/** @type {SyncWaterfallHook<[string, Chunk, string]>***REMOVED*** */
			requireExtensions: new SyncWaterfallHook(["source", "chunk", "hash"]),
			/** @type {SyncWaterfallHook<[string, Chunk, string, string]>***REMOVED*** */
			requireEnsure: new SyncWaterfallHook([
				"source",
				"chunk",
				"hash",
				"chunkIdExpression"
			]),
			get jsonpScript() {
				const hooks =
					getLoadScriptRuntimeModule().getCompilationHooks(compilation);
				return hooks.createScript;
			***REMOVED***,
			get linkPrefetch() {
				const hooks = getJsonpTemplatePlugin().getCompilationHooks(compilation);
				return hooks.linkPrefetch;
			***REMOVED***,
			get linkPreload() {
				const hooks = getJsonpTemplatePlugin().getCompilationHooks(compilation);
				return hooks.linkPreload;
			***REMOVED***
		***REMOVED***);

		this.renderCurrentHashCode = util.deprecate(
			/**
			 * @deprecated
			 * @param {string***REMOVED*** hash the hash
			 * @param {number=***REMOVED*** length length of the hash
			 * @returns {string***REMOVED*** generated code
			 */
			(hash, length) => {
				if (length) {
					return `${RuntimeGlobals.getFullHash***REMOVED*** ? ${
						RuntimeGlobals.getFullHash
					***REMOVED***().slice(0, ${length***REMOVED***) : ${hash.slice(0, length)***REMOVED***`;
				***REMOVED***
				return `${RuntimeGlobals.getFullHash***REMOVED*** ? ${RuntimeGlobals.getFullHash***REMOVED***() : ${hash***REMOVED***`;
			***REMOVED***,
			"MainTemplate.renderCurrentHashCode is deprecated (use RuntimeGlobals.getFullHash runtime function instead)",
			"DEP_WEBPACK_MAIN_TEMPLATE_RENDER_CURRENT_HASH_CODE"
		);

		this.getPublicPath = util.deprecate(
			/**
			 * @param {PathData***REMOVED*** options context data
			 * @returns {string***REMOVED*** interpolated path
			 */ options =>
				compilation.getAssetPath(
					/** @type {string***REMOVED*** */
					(compilation.outputOptions.publicPath),
					options
				),
			"MainTemplate.getPublicPath is deprecated (use Compilation.getAssetPath(compilation.outputOptions.publicPath, options) instead)",
			"DEP_WEBPACK_MAIN_TEMPLATE_GET_PUBLIC_PATH"
		);

		this.getAssetPath = util.deprecate(
			/**
			 * @param {TemplatePath***REMOVED*** path used to get asset path with hash
			 * @param {PathData***REMOVED*** options context data
			 * @returns {string***REMOVED*** interpolated path
			 */
			(path, options) => compilation.getAssetPath(path, options),
			"MainTemplate.getAssetPath is deprecated (use Compilation.getAssetPath instead)",
			"DEP_WEBPACK_MAIN_TEMPLATE_GET_ASSET_PATH"
		);

		this.getAssetPathWithInfo = util.deprecate(
			/**
			 * @param {TemplatePath***REMOVED*** path used to get asset path with hash
			 * @param {PathData***REMOVED*** options context data
			 * @returns {InterpolatedPathAndAssetInfo***REMOVED*** interpolated path and asset info
			 */
			(path, options) => compilation.getAssetPathWithInfo(path, options),
			"MainTemplate.getAssetPathWithInfo is deprecated (use Compilation.getAssetPath instead)",
			"DEP_WEBPACK_MAIN_TEMPLATE_GET_ASSET_PATH_WITH_INFO"
		);
	***REMOVED***
***REMOVED***

Object.defineProperty(MainTemplate.prototype, "requireFn", {
	get: util.deprecate(
		() => RuntimeGlobals.require,
		`MainTemplate.requireFn is deprecated (use "${RuntimeGlobals.require***REMOVED***")`,
		"DEP_WEBPACK_MAIN_TEMPLATE_REQUIRE_FN"
	)
***REMOVED***);

Object.defineProperty(MainTemplate.prototype, "outputOptions", {
	get: util.deprecate(
		/**
		 * @this {MainTemplate***REMOVED***
		 * @returns {OutputOptions***REMOVED*** output options
		 */
		function () {
			return this._outputOptions;
		***REMOVED***,
		"MainTemplate.outputOptions is deprecated (use Compilation.outputOptions instead)",
		"DEP_WEBPACK_MAIN_TEMPLATE_OUTPUT_OPTIONS"
	)
***REMOVED***);

module.exports = MainTemplate;
