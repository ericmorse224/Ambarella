/**
 * @fileoverview `ConfigDependency` class.
 *
 * `ConfigDependency` class expresses a loaded parser or plugin.
 *
 * If the parser or plugin was loaded successfully, it has `definition` property
 * and `filePath` property. Otherwise, it has `error` property.
 *
 * When `JSON.stringify()` converted a `ConfigDependency` object to a JSON, it
 * omits `definition` property.
 *
 * `ConfigArrayFactory` creates `ConfigDependency` objects when it loads parsers
 * or plugins.
 *
 * @author Toru Nagashima <https://github.com/mysticatea>
 */

import util from "util";

/**
 * The class is to store parsers or plugins.
 * This class hides the loaded object from `JSON.stringify()` and `console.log`.
 * @template T
 */
class ConfigDependency {

    /**
     * Initialize this instance.
     * @param {Object***REMOVED*** data The dependency data.
     * @param {T***REMOVED*** [data.definition] The dependency if the loading succeeded.
     * @param {T***REMOVED*** [data.original] The original, non-normalized dependency if the loading succeeded.
     * @param {Error***REMOVED*** [data.error] The error object if the loading failed.
     * @param {string***REMOVED*** [data.filePath] The actual path to the dependency if the loading succeeded.
     * @param {string***REMOVED*** data.id The ID of this dependency.
     * @param {string***REMOVED*** data.importerName The name of the config file which loads this dependency.
     * @param {string***REMOVED*** data.importerPath The path to the config file which loads this dependency.
     */
    constructor({
        definition = null,
        original = null,
        error = null,
        filePath = null,
        id,
        importerName,
        importerPath
    ***REMOVED***) {

        /**
         * The loaded dependency if the loading succeeded.
         * @type {T|null***REMOVED***
         */
        this.definition = definition;

        /**
         * The original dependency as loaded directly from disk if the loading succeeded.
         * @type {T|null***REMOVED***
         */
        this.original = original;

        /**
         * The error object if the loading failed.
         * @type {Error|null***REMOVED***
         */
        this.error = error;

        /**
         * The loaded dependency if the loading succeeded.
         * @type {string|null***REMOVED***
         */
        this.filePath = filePath;

        /**
         * The ID of this dependency.
         * @type {string***REMOVED***
         */
        this.id = id;

        /**
         * The name of the config file which loads this dependency.
         * @type {string***REMOVED***
         */
        this.importerName = importerName;

        /**
         * The path to the config file which loads this dependency.
         * @type {string***REMOVED***
         */
        this.importerPath = importerPath;
    ***REMOVED***

    // eslint-disable-next-line jsdoc/require-description
    /**
     * @returns {Object***REMOVED*** a JSON compatible object.
     */
    toJSON() {
        const obj = this[util.inspect.custom]();

        // Display `error.message` (`Error#message` is unenumerable).
        if (obj.error instanceof Error) {
            obj.error = { ...obj.error, message: obj.error.message ***REMOVED***;
        ***REMOVED***

        return obj;
    ***REMOVED***

    // eslint-disable-next-line jsdoc/require-description
    /**
     * @returns {Object***REMOVED*** an object to display by `console.log()`.
     */
    [util.inspect.custom]() {
        const {
            definition: _ignore1, // eslint-disable-line no-unused-vars
            original: _ignore2, // eslint-disable-line no-unused-vars
            ...obj
        ***REMOVED*** = this;

        return obj;
    ***REMOVED***
***REMOVED***

/** @typedef {ConfigDependency<import("../../shared/types").Parser>***REMOVED*** DependentParser */
/** @typedef {ConfigDependency<import("../../shared/types").Plugin>***REMOVED*** DependentPlugin */

export { ConfigDependency ***REMOVED***;
