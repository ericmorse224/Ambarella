/*
  Copyright 2018 Google LLC

  Use of this source code is governed by an MIT-style
  license that can be found in the LICENSE file or at
  https://opensource.org/licenses/MIT.
*/
import { assert ***REMOVED*** from 'workbox-core/_private/assert.js';
import { logger ***REMOVED*** from 'workbox-core/_private/logger.js';
import { Route ***REMOVED*** from './Route.js';
import './_version.js';
/**
 * RegExpRoute makes it easy to create a regular expression based
 * {@link workbox-routing.Route***REMOVED***.
 *
 * For same-origin requests the RegExp only needs to match part of the URL. For
 * requests against third-party servers, you must define a RegExp that matches
 * the start of the URL.
 *
 * @memberof workbox-routing
 * @extends workbox-routing.Route
 */
class RegExpRoute extends Route {
    /**
     * If the regular expression contains
     * [capture groups]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#grouping-back-references***REMOVED***,
     * the captured values will be passed to the
     * {@link workbox-routing~handlerCallback***REMOVED*** `params`
     * argument.
     *
     * @param {RegExp***REMOVED*** regExp The regular expression to match against URLs.
     * @param {workbox-routing~handlerCallback***REMOVED*** handler A callback
     * function that returns a Promise resulting in a Response.
     * @param {string***REMOVED*** [method='GET'] The HTTP method to match the Route
     * against.
     */
    constructor(regExp, handler, method) {
        if (process.env.NODE_ENV !== 'production') {
            assert.isInstance(regExp, RegExp, {
                moduleName: 'workbox-routing',
                className: 'RegExpRoute',
                funcName: 'constructor',
                paramName: 'pattern',
            ***REMOVED***);
        ***REMOVED***
        const match = ({ url ***REMOVED***) => {
            const result = regExp.exec(url.href);
            // Return immediately if there's no match.
            if (!result) {
                return;
            ***REMOVED***
            // Require that the match start at the first character in the URL string
            // if it's a cross-origin request.
            // See https://github.com/GoogleChrome/workbox/issues/281 for the context
            // behind this behavior.
            if (url.origin !== location.origin && result.index !== 0) {
                if (process.env.NODE_ENV !== 'production') {
                    logger.debug(`The regular expression '${regExp.toString()***REMOVED***' only partially matched ` +
                        `against the cross-origin URL '${url.toString()***REMOVED***'. RegExpRoute's will only ` +
                        `handle cross-origin requests if they match the entire URL.`);
                ***REMOVED***
                return;
            ***REMOVED***
            // If the route matches, but there aren't any capture groups defined, then
            // this will return [], which is truthy and therefore sufficient to
            // indicate a match.
            // If there are capture groups, then it will return their values.
            return result.slice(1);
        ***REMOVED***;
        super(match, handler, method);
    ***REMOVED***
***REMOVED***
export { RegExpRoute ***REMOVED***;
