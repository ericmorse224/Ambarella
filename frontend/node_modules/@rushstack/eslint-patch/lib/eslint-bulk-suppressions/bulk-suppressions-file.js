"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod ***REMOVED***;
***REMOVED***;
Object.defineProperty(exports, "__esModule", { value: true ***REMOVED***);
exports.getSuppressionsConfigForEslintrcFolderPath = getSuppressionsConfigForEslintrcFolderPath;
exports.getAllBulkSuppressionsConfigsByEslintrcFolderPath = getAllBulkSuppressionsConfigsByEslintrcFolderPath;
exports.writeSuppressionsJsonToFile = writeSuppressionsJsonToFile;
exports.deleteBulkSuppressionsFileInEslintrcFolder = deleteBulkSuppressionsFileInEslintrcFolder;
exports.serializeSuppression = serializeSuppression;
const fs_1 = __importDefault(require("fs"));
const constants_1 = require("./constants");
const IS_RUNNING_IN_VSCODE = process.env[constants_1.VSCODE_PID_ENV_VAR_NAME] !== undefined;
const TEN_SECONDS_MS = 10 * 1000;
const SUPPRESSIONS_JSON_FILENAME = '.eslint-bulk-suppressions.json';
function throwIfAnythingOtherThanNotExistError(e) {
    if ((e === null || e === void 0 ? void 0 : e.code) !== 'ENOENT') {
        // Throw an error if any other error than file not found
        throw e;
    ***REMOVED***
***REMOVED***
const suppressionsJsonByFolderPath = new Map();
function getSuppressionsConfigForEslintrcFolderPath(eslintrcFolderPath) {
    const cachedSuppressionsConfig = suppressionsJsonByFolderPath.get(eslintrcFolderPath);
    let shouldLoad;
    let suppressionsConfig;
    if (cachedSuppressionsConfig) {
        shouldLoad = IS_RUNNING_IN_VSCODE && cachedSuppressionsConfig.readTime < Date.now() - TEN_SECONDS_MS;
        suppressionsConfig = cachedSuppressionsConfig.suppressionsConfig;
    ***REMOVED***
    else {
        shouldLoad = true;
    ***REMOVED***
    if (shouldLoad) {
        const suppressionsPath = `${eslintrcFolderPath***REMOVED***/${SUPPRESSIONS_JSON_FILENAME***REMOVED***`;
        let rawJsonFile;
        try {
            rawJsonFile = fs_1.default.readFileSync(suppressionsPath).toString();
        ***REMOVED***
        catch (e) {
            throwIfAnythingOtherThanNotExistError(e);
        ***REMOVED***
        if (!rawJsonFile) {
            suppressionsConfig = {
                serializedSuppressions: new Set(),
                jsonObject: { suppressions: [] ***REMOVED***,
                newSerializedSuppressions: new Set(),
                newJsonObject: { suppressions: [] ***REMOVED***
            ***REMOVED***;
        ***REMOVED***
        else {
            const jsonObject = JSON.parse(rawJsonFile);
            validateSuppressionsJson(jsonObject);
            const serializedSuppressions = new Set();
            for (const suppression of jsonObject.suppressions) {
                serializedSuppressions.add(serializeSuppression(suppression));
            ***REMOVED***
            suppressionsConfig = {
                serializedSuppressions,
                jsonObject,
                newSerializedSuppressions: new Set(),
                newJsonObject: { suppressions: [] ***REMOVED***
            ***REMOVED***;
        ***REMOVED***
        suppressionsJsonByFolderPath.set(eslintrcFolderPath, { readTime: Date.now(), suppressionsConfig ***REMOVED***);
    ***REMOVED***
    return suppressionsConfig;
***REMOVED***
function getAllBulkSuppressionsConfigsByEslintrcFolderPath() {
    const result = [];
    for (const [eslintrcFolderPath, { suppressionsConfig ***REMOVED***] of suppressionsJsonByFolderPath) {
        result.push([eslintrcFolderPath, suppressionsConfig]);
    ***REMOVED***
    return result;
***REMOVED***
function writeSuppressionsJsonToFile(eslintrcFolderPath, suppressionsConfig) {
    suppressionsJsonByFolderPath.set(eslintrcFolderPath, { readTime: Date.now(), suppressionsConfig ***REMOVED***);
    const suppressionsPath = `${eslintrcFolderPath***REMOVED***/${SUPPRESSIONS_JSON_FILENAME***REMOVED***`;
    if (suppressionsConfig.jsonObject.suppressions.length === 0) {
        deleteFile(suppressionsPath);
    ***REMOVED***
    else {
        suppressionsConfig.jsonObject.suppressions.sort(compareSuppressions);
        fs_1.default.writeFileSync(suppressionsPath, JSON.stringify(suppressionsConfig.jsonObject, undefined, 2));
    ***REMOVED***
***REMOVED***
function deleteBulkSuppressionsFileInEslintrcFolder(eslintrcFolderPath) {
    const suppressionsPath = `${eslintrcFolderPath***REMOVED***/${SUPPRESSIONS_JSON_FILENAME***REMOVED***`;
    deleteFile(suppressionsPath);
***REMOVED***
function deleteFile(filePath) {
    try {
        fs_1.default.unlinkSync(filePath);
    ***REMOVED***
    catch (e) {
        throwIfAnythingOtherThanNotExistError(e);
    ***REMOVED***
***REMOVED***
function serializeSuppression({ file, scopeId, rule ***REMOVED***) {
    return `${file***REMOVED***|${scopeId***REMOVED***|${rule***REMOVED***`;
***REMOVED***
function compareSuppressions(a, b) {
    if (a.file < b.file) {
        return -1;
    ***REMOVED***
    else if (a.file > b.file) {
        return 1;
    ***REMOVED***
    else if (a.scopeId < b.scopeId) {
        return -1;
    ***REMOVED***
    else if (a.scopeId > b.scopeId) {
        return 1;
    ***REMOVED***
    else if (a.rule < b.rule) {
        return -1;
    ***REMOVED***
    else if (a.rule > b.rule) {
        return 1;
    ***REMOVED***
    else {
        return 0;
    ***REMOVED***
***REMOVED***
function validateSuppressionsJson(json) {
    if (typeof json !== 'object') {
        throw new Error(`Invalid JSON object: ${JSON.stringify(json, null, 2)***REMOVED***`);
    ***REMOVED***
    if (!json) {
        throw new Error('JSON object is null.');
    ***REMOVED***
    const EXPECTED_ROOT_PROPERTY_NAMES = new Set(['suppressions']);
    for (const propertyName of Object.getOwnPropertyNames(json)) {
        if (!EXPECTED_ROOT_PROPERTY_NAMES.has(propertyName)) {
            throw new Error(`Unexpected property name: ${propertyName***REMOVED***`);
        ***REMOVED***
    ***REMOVED***
    const { suppressions ***REMOVED*** = json;
    if (!suppressions) {
        throw new Error('Missing "suppressions" property.');
    ***REMOVED***
    if (!Array.isArray(suppressions)) {
        throw new Error('"suppressions" property is not an array.');
    ***REMOVED***
    const EXPECTED_SUPPRESSION_PROPERTY_NAMES = new Set(['file', 'scopeId', 'rule']);
    for (const suppression of suppressions) {
        if (typeof suppression !== 'object') {
            throw new Error(`Invalid suppression: ${JSON.stringify(suppression, null, 2)***REMOVED***`);
        ***REMOVED***
        if (!suppression) {
            throw new Error(`Suppression is null: ${JSON.stringify(suppression, null, 2)***REMOVED***`);
        ***REMOVED***
        for (const propertyName of Object.getOwnPropertyNames(suppression)) {
            if (!EXPECTED_SUPPRESSION_PROPERTY_NAMES.has(propertyName)) {
                throw new Error(`Unexpected property name: ${propertyName***REMOVED***`);
            ***REMOVED***
        ***REMOVED***
        for (const propertyName of EXPECTED_SUPPRESSION_PROPERTY_NAMES) {
            if (!suppression.hasOwnProperty(propertyName)) {
                throw new Error(`Missing "${propertyName***REMOVED***" property in suppression: ${JSON.stringify(suppression, null, 2)***REMOVED***`);
            ***REMOVED***
            else if (typeof suppression[propertyName] !== 'string') {
                throw new Error(`"${propertyName***REMOVED***" property in suppression is not a string: ${JSON.stringify(suppression, null, 2)***REMOVED***`);
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***
    return true;
***REMOVED***
//# sourceMappingURL=bulk-suppressions-file.js.map