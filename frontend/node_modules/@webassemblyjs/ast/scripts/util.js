function iterateProps(obj, iterator) {
  Object.keys(obj).forEach((key) => iterator({ ...obj[key], name: key ***REMOVED***));
***REMOVED***

function mapProps(obj) {
  return Object.keys(obj).map((key) => ({ ...obj[key], name: key ***REMOVED***));
***REMOVED***

function filterProps(obj, filter) {
  const ret = {***REMOVED***;
  Object.keys(obj).forEach((key) => {
    if (filter(obj[key])) {
      ret[key] = obj[key];
    ***REMOVED***
  ***REMOVED***);
  return ret;
***REMOVED***

function typeSignature(meta) {
  const type = meta.array ? `Array<${meta.type***REMOVED***>` : meta.type;
  if (meta.optional) {
    return `${meta.name***REMOVED***?: ${type***REMOVED***`;
  ***REMOVED*** else if (meta.maybe) {
    return `${meta.name***REMOVED***: ?${type***REMOVED***`;
  ***REMOVED*** else {
    return `${meta.name***REMOVED***: ${type***REMOVED***`;
  ***REMOVED***
***REMOVED***

const unique = (items) => Array.from(new Set(items));

module.exports = {
  iterateProps,
  mapProps,
  filterProps,
  typeSignature,
  unique,
***REMOVED***;
