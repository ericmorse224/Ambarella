#!/usr/bin/env node

var ansiHTML = require('../')
var pkg = require('../package.json')
var l = console.log
var w = console.warn

var stdoutFlushed = true
var readingStdin = false

function logLine (line) {
  if (!line) {
    return
  ***REMOVED***
  line = ansiHTML(line)
  try {
    stdoutFlushed = process.stdout.write(line)
  ***REMOVED*** catch (e) {***REMOVED***
***REMOVED***

function safeExit (code) {
  l('')
  process.exit(code)
***REMOVED***

function processStdin (finish) {
  readingStdin = true
  var chunks = ''
  process.stdin.resume()
  process.stdin.setEncoding('utf-8')
  process.stdin.on('data', function (chunk) {
    var lines = chunk.split(/[\r\n]+/g).filter(function (line) {
      return line
    ***REMOVED***)
    var length = lines.length
    if (length === 1) {
      chunks += lines[0]
      return
    ***REMOVED***
    if (length > 1) {
      logLine(chunks + (chunks ? '\n' : '') + lines[0] + '\n')
    ***REMOVED***
    chunks = lines.pop()
    length -= 1
    for (var i = 1; i < length; i++) {
      logLine(lines[i] + '\n')
    ***REMOVED***
  ***REMOVED***)
  process.stdin.on('end', function () {
    if (chunks) {
      logLine(chunks)
    ***REMOVED***
    finish()
  ***REMOVED***)
***REMOVED***

function stdoutDrain (code) {
  process.stdout.on('drain', function () {
    safeExit(code)
  ***REMOVED***)
  if (stdoutFlushed) {
    safeExit(code)
  ***REMOVED***
***REMOVED***

function startup (args) {
  if (args.indexOf('-h') > 0 || args.indexOf('--help') > 0) {
    l(pkg.name + '@' + pkg.version)
    l('Usage:')
    l('   ansi-html [options]')
    l('   ... | ansi-html [options]')
    l('Options:')
    l('   -h, --help print help information')
    return
  ***REMOVED***

  process.stdout.on('error', function (err) {
    if (err.code === 'EPIPE') {
      stdoutDrain(0)
    ***REMOVED*** else {
      w('stdout error:', err)
      stdoutDrain(1)
    ***REMOVED***
  ***REMOVED***)

  processStdin(function () {
    safeExit(0)
  ***REMOVED***)
***REMOVED***

if (require.main === module) {
  startup(process.argv)
***REMOVED***

process.on('SIGINT', function () {
  if (!readingStdin) {
    safeExit(1)
  ***REMOVED***
***REMOVED***)
process.on('SIGQUIT', function () { safeExit(1) ***REMOVED***)
process.on('SIGTERM', function () { safeExit(1) ***REMOVED***)
process.on('SIGHUP', function () { safeExit(1) ***REMOVED***)
