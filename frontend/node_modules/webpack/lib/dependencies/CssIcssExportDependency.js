/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Ivan Kopeykin @vankop
*/

"use strict";

const { cssExportConvention ***REMOVED*** = require("../util/conventions");
const makeSerializable = require("../util/makeSerializable");
const NullDependency = require("./NullDependency");

/** @typedef {import("webpack-sources").ReplaceSource***REMOVED*** ReplaceSource */
/** @typedef {import("../../declarations/WebpackOptions").CssGeneratorExportsConvention***REMOVED*** CssGeneratorExportsConvention */
/** @typedef {import("../CssModule")***REMOVED*** CssModule */
/** @typedef {import("../Dependency")***REMOVED*** Dependency */
/** @typedef {import("../Dependency").ExportsSpec***REMOVED*** ExportsSpec */
/** @typedef {import("../Dependency").UpdateHashContext***REMOVED*** UpdateHashContext */
/** @typedef {import("../DependencyTemplate").CssDependencyTemplateContext***REMOVED*** DependencyTemplateContext */
/** @typedef {import("../ModuleGraph")***REMOVED*** ModuleGraph */
/** @typedef {import("../css/CssGenerator")***REMOVED*** CssGenerator */
/** @typedef {import("../serialization/ObjectMiddleware").ObjectDeserializerContext***REMOVED*** ObjectDeserializerContext */
/** @typedef {import("../serialization/ObjectMiddleware").ObjectSerializerContext***REMOVED*** ObjectSerializerContext */
/** @typedef {import("../util/Hash")***REMOVED*** Hash */

class CssIcssExportDependency extends NullDependency {
	/**
	 * @param {string***REMOVED*** name name
	 * @param {string***REMOVED*** value value
	 */
	constructor(name, value) {
		super();
		this.name = name;
		this.value = value;
		this._hashUpdate = undefined;
	***REMOVED***

	get type() {
		return "css :export";
	***REMOVED***

	/**
	 * @param {string***REMOVED*** name export name
	 * @param {CssGeneratorExportsConvention***REMOVED*** convention convention of the export name
	 * @returns {string[]***REMOVED*** convention results
	 */
	getExportsConventionNames(name, convention) {
		if (this._conventionNames) {
			return this._conventionNames;
		***REMOVED***
		this._conventionNames = cssExportConvention(name, convention);
		return this._conventionNames;
	***REMOVED***

	/**
	 * Returns the exported names
	 * @param {ModuleGraph***REMOVED*** moduleGraph module graph
	 * @returns {ExportsSpec | undefined***REMOVED*** export names
	 */
	getExports(moduleGraph) {
		const module = /** @type {CssModule***REMOVED*** */ (moduleGraph.getParentModule(this));
		const generator = /** @type {CssGenerator***REMOVED*** */ (module.generator);
		const names = this.getExportsConventionNames(
			this.name,
			/** @type {CssGeneratorExportsConvention***REMOVED*** */
			(generator.convention)
		);
		return {
			exports: names.map(name => ({
				name,
				canMangle: true
			***REMOVED***)),
			dependencies: undefined
		***REMOVED***;
	***REMOVED***

	/**
	 * Update the hash
	 * @param {Hash***REMOVED*** hash hash to be updated
	 * @param {UpdateHashContext***REMOVED*** context context
	 * @returns {void***REMOVED***
	 */
	updateHash(hash, { chunkGraph ***REMOVED***) {
		if (this._hashUpdate === undefined) {
			const module =
				/** @type {CssModule***REMOVED*** */
				(chunkGraph.moduleGraph.getParentModule(this));
			const generator = /** @type {CssGenerator***REMOVED*** */ (module.generator);
			const names = this.getExportsConventionNames(
				this.name,
				/** @type {CssGeneratorExportsConvention***REMOVED*** */
				(generator.convention)
			);
			this._hashUpdate = JSON.stringify(names);
		***REMOVED***
		hash.update("exportsConvention");
		hash.update(this._hashUpdate);
	***REMOVED***

	/**
	 * @param {ObjectSerializerContext***REMOVED*** context context
	 */
	serialize(context) {
		const { write ***REMOVED*** = context;
		write(this.name);
		write(this.value);
		super.serialize(context);
	***REMOVED***

	/**
	 * @param {ObjectDeserializerContext***REMOVED*** context context
	 */
	deserialize(context) {
		const { read ***REMOVED*** = context;
		this.name = read();
		this.value = read();
		super.deserialize(context);
	***REMOVED***
***REMOVED***

CssIcssExportDependency.Template = class CssIcssExportDependencyTemplate extends (
	NullDependency.Template
) {
	/**
	 * @param {Dependency***REMOVED*** dependency the dependency for which the template should be applied
	 * @param {ReplaceSource***REMOVED*** source the current replace source which can be modified
	 * @param {DependencyTemplateContext***REMOVED*** templateContext the context object
	 * @returns {void***REMOVED***
	 */
	apply(dependency, source, { cssData, module: m, runtime, moduleGraph ***REMOVED***) {
		const dep = /** @type {CssIcssExportDependency***REMOVED*** */ (dependency);
		const module = /** @type {CssModule***REMOVED*** */ (m);
		const generator = /** @type {CssGenerator***REMOVED*** */ (module.generator);
		const names = dep.getExportsConventionNames(
			dep.name,
			/** @type {CssGeneratorExportsConvention***REMOVED*** */
			(generator.convention)
		);
		const usedNames =
			/** @type {string[]***REMOVED*** */
			(
				names
					.map(name =>
						moduleGraph.getExportInfo(module, name).getUsedName(name, runtime)
					)
					.filter(Boolean)
			);

		for (const used of usedNames.concat(names)) {
			cssData.exports.set(used, dep.value);
		***REMOVED***
	***REMOVED***
***REMOVED***;

makeSerializable(
	CssIcssExportDependency,
	"webpack/lib/dependencies/CssIcssExportDependency"
);

module.exports = CssIcssExportDependency;
