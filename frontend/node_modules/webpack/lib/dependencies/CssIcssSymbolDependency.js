/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Alexander Akait @alexander-akait
*/

"use strict";

const makeSerializable = require("../util/makeSerializable");
const NullDependency = require("./NullDependency");

/** @typedef {import("webpack-sources").ReplaceSource***REMOVED*** ReplaceSource */
/** @typedef {import("../Dependency")***REMOVED*** Dependency */
/** @typedef {import("../Dependency").ExportsSpec***REMOVED*** ExportsSpec */
/** @typedef {import("../Dependency").ReferencedExport***REMOVED*** ReferencedExport */
/** @typedef {import("../Dependency").UpdateHashContext***REMOVED*** UpdateHashContext */
/** @typedef {import("../DependencyTemplate").CssDependencyTemplateContext***REMOVED*** DependencyTemplateContext */
/** @typedef {import("../ModuleGraph")***REMOVED*** ModuleGraph */
/** @typedef {import("../css/CssParser").Range***REMOVED*** Range */
/** @typedef {import("../serialization/ObjectMiddleware").ObjectDeserializerContext***REMOVED*** ObjectDeserializerContext */
/** @typedef {import("../serialization/ObjectMiddleware").ObjectSerializerContext***REMOVED*** ObjectSerializerContext */
/** @typedef {import("../util/Hash")***REMOVED*** Hash */
/** @typedef {import("../util/runtime").RuntimeSpec***REMOVED*** RuntimeSpec */

class CssIcssSymbolDependency extends NullDependency {
	/**
	 * @param {string***REMOVED*** name name
	 * @param {string***REMOVED*** value value
	 * @param {Range***REMOVED*** range range
	 */
	constructor(name, value, range) {
		super();
		this.name = name;
		this.value = value;
		this.range = range;
		this._hashUpdate = undefined;
	***REMOVED***

	get type() {
		return "css @value identifier";
	***REMOVED***

	get category() {
		return "self";
	***REMOVED***

	/**
	 * Update the hash
	 * @param {Hash***REMOVED*** hash hash to be updated
	 * @param {UpdateHashContext***REMOVED*** context context
	 * @returns {void***REMOVED***
	 */
	updateHash(hash, context) {
		if (this._hashUpdate === undefined) {
			this._hashUpdate = `${this.range***REMOVED***${this.name***REMOVED***${this.value***REMOVED***`;
		***REMOVED***
		hash.update(this._hashUpdate);
	***REMOVED***

	/**
	 * Returns the exported names
	 * @param {ModuleGraph***REMOVED*** moduleGraph module graph
	 * @returns {ExportsSpec | undefined***REMOVED*** export names
	 */
	getExports(moduleGraph) {
		return {
			exports: [
				{
					name: this.name,
					canMangle: true
				***REMOVED***
			],
			dependencies: undefined
		***REMOVED***;
	***REMOVED***

	/**
	 * Returns list of exports referenced by this dependency
	 * @param {ModuleGraph***REMOVED*** moduleGraph module graph
	 * @param {RuntimeSpec***REMOVED*** runtime the runtime for which the module is analysed
	 * @returns {(string[] | ReferencedExport)[]***REMOVED*** referenced exports
	 */
	getReferencedExports(moduleGraph, runtime) {
		return [[this.name]];
	***REMOVED***

	/**
	 * @param {ObjectSerializerContext***REMOVED*** context context
	 */
	serialize(context) {
		const { write ***REMOVED*** = context;
		write(this.name);
		write(this.value);
		write(this.range);
		super.serialize(context);
	***REMOVED***

	/**
	 * @param {ObjectDeserializerContext***REMOVED*** context context
	 */
	deserialize(context) {
		const { read ***REMOVED*** = context;
		this.name = read();
		this.value = read();
		this.range = read();
		super.deserialize(context);
	***REMOVED***
***REMOVED***

CssIcssSymbolDependency.Template = class CssValueAtRuleDependencyTemplate extends (
	NullDependency.Template
) {
	/**
	 * @param {Dependency***REMOVED*** dependency the dependency for which the template should be applied
	 * @param {ReplaceSource***REMOVED*** source the current replace source which can be modified
	 * @param {DependencyTemplateContext***REMOVED*** templateContext the context object
	 * @returns {void***REMOVED***
	 */
	apply(dependency, source, { cssData ***REMOVED***) {
		const dep = /** @type {CssIcssSymbolDependency***REMOVED*** */ (dependency);

		source.replace(dep.range[0], dep.range[1] - 1, dep.value);

		cssData.exports.set(dep.name, dep.value);
	***REMOVED***
***REMOVED***;

makeSerializable(
	CssIcssSymbolDependency,
	"webpack/lib/dependencies/CssIcssSymbolDependency"
);

module.exports = CssIcssSymbolDependency;
