"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
***REMOVED***);
exports.EXPORTED_CONST_ENUMS_IN_NAMESPACE = void 0;
exports.default = transpileConstEnum;
var _enum = require("./enum.js");
const EXPORTED_CONST_ENUMS_IN_NAMESPACE = exports.EXPORTED_CONST_ENUMS_IN_NAMESPACE = new WeakSet();
function transpileConstEnum(path, t) {
  const {
    name
  ***REMOVED*** = path.node.id;
  const parentIsExport = path.parentPath.isExportNamedDeclaration();
  let isExported = parentIsExport;
  if (!isExported && t.isProgram(path.parent)) {
    isExported = path.parent.body.some(stmt => t.isExportNamedDeclaration(stmt) && stmt.exportKind !== "type" && !stmt.source && stmt.specifiers.some(spec => t.isExportSpecifier(spec) && spec.exportKind !== "type" && spec.local.name === name));
  ***REMOVED***
  const {
    enumValues: entries
  ***REMOVED*** = (0, _enum.translateEnumValues)(path, t);
  if (isExported || EXPORTED_CONST_ENUMS_IN_NAMESPACE.has(path.node)) {
    const obj = t.objectExpression(entries.map(([name, value]) => t.objectProperty(t.isValidIdentifier(name) ? t.identifier(name) : t.stringLiteral(name), value)));
    if (path.scope.hasOwnBinding(name)) {
      (parentIsExport ? path.parentPath : path).replaceWith(t.expressionStatement(t.callExpression(t.memberExpression(t.identifier("Object"), t.identifier("assign")), [path.node.id, obj])));
    ***REMOVED*** else {
      path.replaceWith(t.variableDeclaration("var", [t.variableDeclarator(path.node.id, obj)]));
      path.scope.registerDeclaration(path);
    ***REMOVED***
    return;
  ***REMOVED***
  const entriesMap = new Map(entries);
  path.scope.path.traverse({
    Scope(path) {
      if (path.scope.hasOwnBinding(name)) path.skip();
    ***REMOVED***,
    MemberExpression(path) {
      if (!t.isIdentifier(path.node.object, {
        name
      ***REMOVED***)) return;
      let key;
      if (path.node.computed) {
        if (t.isStringLiteral(path.node.property)) {
          key = path.node.property.value;
        ***REMOVED*** else {
          return;
        ***REMOVED***
      ***REMOVED*** else if (t.isIdentifier(path.node.property)) {
        key = path.node.property.name;
      ***REMOVED*** else {
        return;
      ***REMOVED***
      if (!entriesMap.has(key)) return;
      path.replaceWith(t.cloneNode(entriesMap.get(key)));
    ***REMOVED***
  ***REMOVED***);
  path.remove();
***REMOVED***

//# sourceMappingURL=const-enum.js.map
