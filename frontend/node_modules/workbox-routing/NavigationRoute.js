/*
  Copyright 2018 Google LLC

  Use of this source code is governed by an MIT-style
  license that can be found in the LICENSE file or at
  https://opensource.org/licenses/MIT.
*/
import { assert ***REMOVED*** from 'workbox-core/_private/assert.js';
import { logger ***REMOVED*** from 'workbox-core/_private/logger.js';
import { Route ***REMOVED*** from './Route.js';
import './_version.js';
/**
 * NavigationRoute makes it easy to create a
 * {@link workbox-routing.Route***REMOVED*** that matches for browser
 * [navigation requests]{@link https://developers.google.com/web/fundamentals/primers/service-workers/high-performance-loading#first_what_are_navigation_requests***REMOVED***.
 *
 * It will only match incoming Requests whose
 * {@link https://fetch.spec.whatwg.org/#concept-request-mode|mode***REMOVED***
 * is set to `navigate`.
 *
 * You can optionally only apply this route to a subset of navigation requests
 * by using one or both of the `denylist` and `allowlist` parameters.
 *
 * @memberof workbox-routing
 * @extends workbox-routing.Route
 */
class NavigationRoute extends Route {
    /**
     * If both `denylist` and `allowlist` are provided, the `denylist` will
     * take precedence and the request will not match this route.
     *
     * The regular expressions in `allowlist` and `denylist`
     * are matched against the concatenated
     * [`pathname`]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/pathname***REMOVED***
     * and [`search`]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/search***REMOVED***
     * portions of the requested URL.
     *
     * *Note*: These RegExps may be evaluated against every destination URL during
     * a navigation. Avoid using
     * [complex RegExps](https://github.com/GoogleChrome/workbox/issues/3077),
     * or else your users may see delays when navigating your site.
     *
     * @param {workbox-routing~handlerCallback***REMOVED*** handler A callback
     * function that returns a Promise resulting in a Response.
     * @param {Object***REMOVED*** options
     * @param {Array<RegExp>***REMOVED*** [options.denylist] If any of these patterns match,
     * the route will not handle the request (even if a allowlist RegExp matches).
     * @param {Array<RegExp>***REMOVED*** [options.allowlist=[/./]] If any of these patterns
     * match the URL's pathname and search parameter, the route will handle the
     * request (assuming the denylist doesn't match).
     */
    constructor(handler, { allowlist = [/./], denylist = [] ***REMOVED*** = {***REMOVED***) {
        if (process.env.NODE_ENV !== 'production') {
            assert.isArrayOfClass(allowlist, RegExp, {
                moduleName: 'workbox-routing',
                className: 'NavigationRoute',
                funcName: 'constructor',
                paramName: 'options.allowlist',
            ***REMOVED***);
            assert.isArrayOfClass(denylist, RegExp, {
                moduleName: 'workbox-routing',
                className: 'NavigationRoute',
                funcName: 'constructor',
                paramName: 'options.denylist',
            ***REMOVED***);
        ***REMOVED***
        super((options) => this._match(options), handler);
        this._allowlist = allowlist;
        this._denylist = denylist;
    ***REMOVED***
    /**
     * Routes match handler.
     *
     * @param {Object***REMOVED*** options
     * @param {URL***REMOVED*** options.url
     * @param {Request***REMOVED*** options.request
     * @return {boolean***REMOVED***
     *
     * @private
     */
    _match({ url, request ***REMOVED***) {
        if (request && request.mode !== 'navigate') {
            return false;
        ***REMOVED***
        const pathnameAndSearch = url.pathname + url.search;
        for (const regExp of this._denylist) {
            if (regExp.test(pathnameAndSearch)) {
                if (process.env.NODE_ENV !== 'production') {
                    logger.log(`The navigation route ${pathnameAndSearch***REMOVED*** is not ` +
                        `being used, since the URL matches this denylist pattern: ` +
                        `${regExp.toString()***REMOVED***`);
                ***REMOVED***
                return false;
            ***REMOVED***
        ***REMOVED***
        if (this._allowlist.some((regExp) => regExp.test(pathnameAndSearch))) {
            if (process.env.NODE_ENV !== 'production') {
                logger.debug(`The navigation route ${pathnameAndSearch***REMOVED*** ` + `is being used.`);
            ***REMOVED***
            return true;
        ***REMOVED***
        if (process.env.NODE_ENV !== 'production') {
            logger.log(`The navigation route ${pathnameAndSearch***REMOVED*** is not ` +
                `being used, since the URL being navigated to doesn't ` +
                `match the allowlist.`);
        ***REMOVED***
        return false;
    ***REMOVED***
***REMOVED***
export { NavigationRoute ***REMOVED***;
