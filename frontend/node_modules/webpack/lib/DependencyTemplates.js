/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const { DEFAULTS ***REMOVED*** = require("./config/defaults");
const createHash = require("./util/createHash");

/** @typedef {import("./Dependency")***REMOVED*** Dependency */
/** @typedef {import("./DependencyTemplate")***REMOVED*** DependencyTemplate */
/** @typedef {typeof import("./util/Hash")***REMOVED*** Hash */

/** @typedef {new (...args: EXPECTED_ANY[]) => Dependency***REMOVED*** DependencyConstructor */

class DependencyTemplates {
	/**
	 * @param {string | Hash***REMOVED*** hashFunction the hash function to use
	 */
	constructor(hashFunction = DEFAULTS.HASH_FUNCTION) {
		/** @type {Map<DependencyConstructor, DependencyTemplate>***REMOVED*** */
		this._map = new Map();
		/** @type {string***REMOVED*** */
		this._hash = "31d6cfe0d16ae931b73c59d7e0c089c0";
		this._hashFunction = hashFunction;
	***REMOVED***

	/**
	 * @param {DependencyConstructor***REMOVED*** dependency Constructor of Dependency
	 * @returns {DependencyTemplate | undefined***REMOVED*** template for this dependency
	 */
	get(dependency) {
		return this._map.get(dependency);
	***REMOVED***

	/**
	 * @param {DependencyConstructor***REMOVED*** dependency Constructor of Dependency
	 * @param {DependencyTemplate***REMOVED*** dependencyTemplate template for this dependency
	 * @returns {void***REMOVED***
	 */
	set(dependency, dependencyTemplate) {
		this._map.set(dependency, dependencyTemplate);
	***REMOVED***

	/**
	 * @param {string***REMOVED*** part additional hash contributor
	 * @returns {void***REMOVED***
	 */
	updateHash(part) {
		const hash = createHash(this._hashFunction);
		hash.update(`${this._hash***REMOVED***${part***REMOVED***`);
		this._hash = /** @type {string***REMOVED*** */ (hash.digest("hex"));
	***REMOVED***

	getHash() {
		return this._hash;
	***REMOVED***

	clone() {
		const newInstance = new DependencyTemplates(this._hashFunction);
		newInstance._map = new Map(this._map);
		newInstance._hash = this._hash;
		return newInstance;
	***REMOVED***
***REMOVED***

module.exports = DependencyTemplates;
