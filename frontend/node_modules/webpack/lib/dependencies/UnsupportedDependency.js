/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const makeSerializable = require("../util/makeSerializable");
const NullDependency = require("./NullDependency");

/** @typedef {import("webpack-sources").ReplaceSource***REMOVED*** ReplaceSource */
/** @typedef {import("../Dependency")***REMOVED*** Dependency */
/** @typedef {import("../DependencyTemplate").DependencyTemplateContext***REMOVED*** DependencyTemplateContext */
/** @typedef {import("../javascript/JavascriptParser").Range***REMOVED*** Range */
/** @typedef {import("../serialization/ObjectMiddleware").ObjectDeserializerContext***REMOVED*** ObjectDeserializerContext */
/** @typedef {import("../serialization/ObjectMiddleware").ObjectSerializerContext***REMOVED*** ObjectSerializerContext */

class UnsupportedDependency extends NullDependency {
	/**
	 * @param {string***REMOVED*** request the request string
	 * @param {Range***REMOVED*** range location in source code
	 */
	constructor(request, range) {
		super();

		this.request = request;
		this.range = range;
	***REMOVED***

	/**
	 * @param {ObjectSerializerContext***REMOVED*** context context
	 */
	serialize(context) {
		const { write ***REMOVED*** = context;

		write(this.request);
		write(this.range);

		super.serialize(context);
	***REMOVED***

	/**
	 * @param {ObjectDeserializerContext***REMOVED*** context context
	 */
	deserialize(context) {
		const { read ***REMOVED*** = context;

		this.request = read();
		this.range = read();

		super.deserialize(context);
	***REMOVED***
***REMOVED***

makeSerializable(
	UnsupportedDependency,
	"webpack/lib/dependencies/UnsupportedDependency"
);

UnsupportedDependency.Template = class UnsupportedDependencyTemplate extends (
	NullDependency.Template
) {
	/**
	 * @param {Dependency***REMOVED*** dependency the dependency for which the template should be applied
	 * @param {ReplaceSource***REMOVED*** source the current replace source which can be modified
	 * @param {DependencyTemplateContext***REMOVED*** templateContext the context object
	 * @returns {void***REMOVED***
	 */
	apply(dependency, source, { runtimeTemplate ***REMOVED***) {
		const dep = /** @type {UnsupportedDependency***REMOVED*** */ (dependency);

		source.replace(
			dep.range[0],
			dep.range[1],
			runtimeTemplate.missingModule({
				request: dep.request
			***REMOVED***)
		);
	***REMOVED***
***REMOVED***;

module.exports = UnsupportedDependency;
