/**
 * @fileoverview Rule to flag use of duplicate keys in an object.
 * @author Ian Christian Myers
 */

"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const astUtils = require("./utils/ast-utils");

//------------------------------------------------------------------------------
// Helpers
//------------------------------------------------------------------------------

const GET_KIND = /^(?:init|get)$/u;
const SET_KIND = /^(?:init|set)$/u;

/**
 * The class which stores properties' information of an object.
 */
class ObjectInfo {
	/**
	 * @param {ObjectInfo|null***REMOVED*** upper The information of the outer object.
	 * @param {ASTNode***REMOVED*** node The ObjectExpression node of this information.
	 */
	constructor(upper, node) {
		this.upper = upper;
		this.node = node;
		this.properties = new Map();
	***REMOVED***

	/**
	 * Gets the information of the given Property node.
	 * @param {ASTNode***REMOVED*** node The Property node to get.
	 * @returns {{get: boolean, set: boolean***REMOVED******REMOVED*** The information of the property.
	 */
	getPropertyInfo(node) {
		const name = astUtils.getStaticPropertyName(node);

		if (!this.properties.has(name)) {
			this.properties.set(name, { get: false, set: false ***REMOVED***);
		***REMOVED***
		return this.properties.get(name);
	***REMOVED***

	/**
	 * Checks whether the given property has been defined already or not.
	 * @param {ASTNode***REMOVED*** node The Property node to check.
	 * @returns {boolean***REMOVED*** `true` if the property has been defined.
	 */
	isPropertyDefined(node) {
		const entry = this.getPropertyInfo(node);

		return (
			(GET_KIND.test(node.kind) && entry.get) ||
			(SET_KIND.test(node.kind) && entry.set)
		);
	***REMOVED***

	/**
	 * Defines the given property.
	 * @param {ASTNode***REMOVED*** node The Property node to define.
	 * @returns {void***REMOVED***
	 */
	defineProperty(node) {
		const entry = this.getPropertyInfo(node);

		if (GET_KIND.test(node.kind)) {
			entry.get = true;
		***REMOVED***
		if (SET_KIND.test(node.kind)) {
			entry.set = true;
		***REMOVED***
	***REMOVED***
***REMOVED***

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

/** @type {import('../types').Rule.RuleModule***REMOVED*** */
module.exports = {
	meta: {
		type: "problem",

		docs: {
			description: "Disallow duplicate keys in object literals",
			recommended: true,
			url: "https://eslint.org/docs/latest/rules/no-dupe-keys",
		***REMOVED***,

		schema: [],

		messages: {
			unexpected: "Duplicate key '{{name***REMOVED******REMOVED***'.",
		***REMOVED***,
	***REMOVED***,

	create(context) {
		let info = null;

		return {
			ObjectExpression(node) {
				info = new ObjectInfo(info, node);
			***REMOVED***,
			"ObjectExpression:exit"() {
				info = info.upper;
			***REMOVED***,

			Property(node) {
				const name = astUtils.getStaticPropertyName(node);

				// Skip destructuring.
				if (node.parent.type !== "ObjectExpression") {
					return;
				***REMOVED***

				// Skip if the name is not static.
				if (name === null) {
					return;
				***REMOVED***

				/*
				 * Skip if the property node is a proto setter.
				 * Proto setter is a special syntax that sets
				 * object's prototype instead of creating a property.
				 * It can be in one of the following forms:
				 *
				 *    __proto__: <expression>
				 *    '__proto__': <expression>
				 *    "__proto__": <expression>
				 *
				 * Duplicate proto setters produce parsing errors,
				 * so we can just skip them to not interfere with
				 * regular properties named "__proto__".
				 */
				if (
					name === "__proto__" &&
					node.kind === "init" &&
					!node.computed &&
					!node.shorthand &&
					!node.method
				) {
					return;
				***REMOVED***

				// Reports if the name is defined already.
				if (info.isPropertyDefined(node)) {
					context.report({
						node: info.node,
						loc: node.key.loc,
						messageId: "unexpected",
						data: { name ***REMOVED***,
					***REMOVED***);
				***REMOVED***

				// Update info.
				info.defineProperty(node);
			***REMOVED***,
		***REMOVED***;
	***REMOVED***,
***REMOVED***;
