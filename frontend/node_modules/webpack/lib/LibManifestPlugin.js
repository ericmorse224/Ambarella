/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const asyncLib = require("neo-async");
const EntryDependency = require("./dependencies/EntryDependency");
const { someInIterable ***REMOVED*** = require("./util/IterableHelpers");
const { compareModulesById ***REMOVED*** = require("./util/comparators");
const { dirname, mkdirp ***REMOVED*** = require("./util/fs");

/** @typedef {import("./ChunkGraph").ModuleId***REMOVED*** ModuleId */
/** @typedef {import("./Compiler")***REMOVED*** Compiler */
/** @typedef {import("./Compiler").IntermediateFileSystem***REMOVED*** IntermediateFileSystem */
/** @typedef {import("./Module").BuildMeta***REMOVED*** BuildMeta */

/**
 * @typedef {object***REMOVED*** ManifestModuleData
 * @property {string | number***REMOVED*** id
 * @property {BuildMeta=***REMOVED*** buildMeta
 * @property {boolean | string[]=***REMOVED*** exports
 */

/**
 * @typedef {object***REMOVED*** LibManifestPluginOptions
 * @property {string=***REMOVED*** context Context of requests in the manifest file (defaults to the webpack context).
 * @property {boolean=***REMOVED*** entryOnly If true, only entry points will be exposed (default: true).
 * @property {boolean=***REMOVED*** format If true, manifest json file (output) will be formatted.
 * @property {string=***REMOVED*** name Name of the exposed dll function (external name, use value of 'output.library').
 * @property {string***REMOVED*** path Absolute path to the manifest json file (output).
 * @property {string=***REMOVED*** type Type of the dll bundle (external type, use value of 'output.libraryTarget').
 */

const PLUGIN_NAME = "LibManifestPlugin";

class LibManifestPlugin {
	/**
	 * @param {LibManifestPluginOptions***REMOVED*** options the options
	 */
	constructor(options) {
		this.options = options;
	***REMOVED***

	/**
	 * Apply the plugin
	 * @param {Compiler***REMOVED*** compiler the compiler instance
	 * @returns {void***REMOVED***
	 */
	apply(compiler) {
		compiler.hooks.emit.tapAsync(
			{ name: PLUGIN_NAME, stage: 110 ***REMOVED***,
			(compilation, callback) => {
				const moduleGraph = compilation.moduleGraph;
				// store used paths to detect issue and output an error. #18200
				const usedPaths = new Set();
				asyncLib.each(
					Array.from(compilation.chunks),
					(chunk, callback) => {
						if (!chunk.canBeInitial()) {
							callback();
							return;
						***REMOVED***
						const chunkGraph = compilation.chunkGraph;
						const targetPath = compilation.getPath(this.options.path, {
							chunk
						***REMOVED***);
						if (usedPaths.has(targetPath)) {
							callback(new Error("each chunk must have a unique path"));
							return;
						***REMOVED***
						usedPaths.add(targetPath);
						const name =
							this.options.name &&
							compilation.getPath(this.options.name, {
								chunk,
								contentHashType: "javascript"
							***REMOVED***);
						const content = Object.create(null);
						for (const module of chunkGraph.getOrderedChunkModulesIterable(
							chunk,
							compareModulesById(chunkGraph)
						)) {
							if (
								this.options.entryOnly &&
								!someInIterable(
									moduleGraph.getIncomingConnections(module),
									c => c.dependency instanceof EntryDependency
								)
							) {
								continue;
							***REMOVED***
							const ident = module.libIdent({
								context:
									this.options.context ||
									/** @type {string***REMOVED*** */ (compiler.options.context),
								associatedObjectForCache: compiler.root
							***REMOVED***);
							if (ident) {
								const exportsInfo = moduleGraph.getExportsInfo(module);
								const providedExports = exportsInfo.getProvidedExports();
								/** @type {ManifestModuleData***REMOVED*** */
								const data = {
									id: /** @type {ModuleId***REMOVED*** */ (chunkGraph.getModuleId(module)),
									buildMeta: /** @type {BuildMeta***REMOVED*** */ (module.buildMeta),
									exports: Array.isArray(providedExports)
										? providedExports
										: undefined
								***REMOVED***;
								content[ident] = data;
							***REMOVED***
						***REMOVED***
						const manifest = {
							name,
							type: this.options.type,
							content
						***REMOVED***;
						// Apply formatting to content if format flag is true;
						const manifestContent = this.options.format
							? JSON.stringify(manifest, null, 2)
							: JSON.stringify(manifest);
						const buffer = Buffer.from(manifestContent, "utf8");
						const intermediateFileSystem =
							/** @type {IntermediateFileSystem***REMOVED*** */ (
								compiler.intermediateFileSystem
							);
						mkdirp(
							intermediateFileSystem,
							dirname(intermediateFileSystem, targetPath),
							err => {
								if (err) return callback(err);
								intermediateFileSystem.writeFile(targetPath, buffer, callback);
							***REMOVED***
						);
					***REMOVED***,
					callback
				);
			***REMOVED***
		);
	***REMOVED***
***REMOVED***
module.exports = LibManifestPlugin;
