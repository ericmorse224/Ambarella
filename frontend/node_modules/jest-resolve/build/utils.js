'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
***REMOVED***);
exports.resolveWatchPlugin =
  exports.resolveTestEnvironment =
  exports.resolveSequencer =
  exports.resolveRunner =
    void 0;

function path() {
  const data = _interopRequireWildcard(require('path'));

  path = function () {
    return data;
  ***REMOVED***;

  return data;
***REMOVED***

function _chalk() {
  const data = _interopRequireDefault(require('chalk'));

  _chalk = function () {
    return data;
  ***REMOVED***;

  return data;
***REMOVED***

function _jestValidate() {
  const data = require('jest-validate');

  _jestValidate = function () {
    return data;
  ***REMOVED***;

  return data;
***REMOVED***

var _resolver = _interopRequireDefault(require('./resolver'));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {default: obj***REMOVED***;
***REMOVED***

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== 'function') return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  ***REMOVED***)(nodeInterop);
***REMOVED***

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  ***REMOVED***
  if (obj === null || (typeof obj !== 'object' && typeof obj !== 'function')) {
    return {default: obj***REMOVED***;
  ***REMOVED***
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  ***REMOVED***
  var newObj = {***REMOVED***;
  var hasPropertyDescriptor =
    Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== 'default' && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor
        ? Object.getOwnPropertyDescriptor(obj, key)
        : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      ***REMOVED*** else {
        newObj[key] = obj[key];
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  ***REMOVED***
  return newObj;
***REMOVED***

/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
const BULLET = _chalk().default.bold('\u25cf ');

const DOCUMENTATION_NOTE = `  ${_chalk().default.bold(
  'Configuration Documentation:'
)***REMOVED***
  https://jestjs.io/docs/configuration
`;

const createValidationError = message =>
  new (_jestValidate().ValidationError)(
    `${BULLET***REMOVED***Validation Error`,
    message,
    DOCUMENTATION_NOTE
  );

const replaceRootDirInPath = (rootDir, filePath) => {
  if (!/^<rootDir>/.test(filePath)) {
    return filePath;
  ***REMOVED***

  return path().resolve(
    rootDir,
    path().normalize('./' + filePath.substr('<rootDir>'.length))
  );
***REMOVED***;

const resolveWithPrefix = (
  resolver,
  {
    filePath,
    humanOptionName,
    optionName,
    prefix,
    requireResolveFunction,
    rootDir
  ***REMOVED***
) => {
  const fileName = replaceRootDirInPath(rootDir, filePath);

  let module = _resolver.default.findNodeModule(`${prefix***REMOVED***${fileName***REMOVED***`, {
    basedir: rootDir,
    resolver: resolver || undefined
  ***REMOVED***);

  if (module) {
    return module;
  ***REMOVED***

  try {
    return requireResolveFunction(`${prefix***REMOVED***${fileName***REMOVED***`);
  ***REMOVED*** catch {***REMOVED***

  module = _resolver.default.findNodeModule(fileName, {
    basedir: rootDir,
    resolver: resolver || undefined
  ***REMOVED***);

  if (module) {
    return module;
  ***REMOVED***

  try {
    return requireResolveFunction(fileName);
  ***REMOVED*** catch {***REMOVED***

  throw createValidationError(
    `  ${humanOptionName***REMOVED*** ${_chalk().default.bold(
      fileName
    )***REMOVED*** cannot be found. Make sure the ${_chalk().default.bold(
      optionName
    )***REMOVED*** configuration option points to an existing node module.`
  );
***REMOVED***;
/**
 * Finds the test environment to use:
 *
 * 1. looks for jest-environment-<name> relative to project.
 * 1. looks for jest-environment-<name> relative to Jest.
 * 1. looks for <name> relative to project.
 * 1. looks for <name> relative to Jest.
 */

const resolveTestEnvironment = ({
  rootDir,
  testEnvironment: filePath,
  // TODO: remove default in Jest 28
  requireResolveFunction = require.resolve
***REMOVED***) =>
  resolveWithPrefix(undefined, {
    filePath,
    humanOptionName: 'Test environment',
    optionName: 'testEnvironment',
    prefix: 'jest-environment-',
    requireResolveFunction,
    rootDir
  ***REMOVED***);
/**
 * Finds the watch plugins to use:
 *
 * 1. looks for jest-watch-<name> relative to project.
 * 1. looks for jest-watch-<name> relative to Jest.
 * 1. looks for <name> relative to project.
 * 1. looks for <name> relative to Jest.
 */

exports.resolveTestEnvironment = resolveTestEnvironment;

const resolveWatchPlugin = (
  resolver,
  {
    filePath,
    rootDir,
    // TODO: remove default in Jest 28
    requireResolveFunction = require.resolve
  ***REMOVED***
) =>
  resolveWithPrefix(resolver, {
    filePath,
    humanOptionName: 'Watch plugin',
    optionName: 'watchPlugins',
    prefix: 'jest-watch-',
    requireResolveFunction,
    rootDir
  ***REMOVED***);
/**
 * Finds the runner to use:
 *
 * 1. looks for jest-runner-<name> relative to project.
 * 1. looks for jest-runner-<name> relative to Jest.
 * 1. looks for <name> relative to project.
 * 1. looks for <name> relative to Jest.
 */

exports.resolveWatchPlugin = resolveWatchPlugin;

const resolveRunner = (
  resolver,
  {
    filePath,
    rootDir,
    // TODO: remove default in Jest 28
    requireResolveFunction = require.resolve
  ***REMOVED***
) =>
  resolveWithPrefix(resolver, {
    filePath,
    humanOptionName: 'Jest Runner',
    optionName: 'runner',
    prefix: 'jest-runner-',
    requireResolveFunction,
    rootDir
  ***REMOVED***);

exports.resolveRunner = resolveRunner;

const resolveSequencer = (
  resolver,
  {
    filePath,
    rootDir,
    // TODO: remove default in Jest 28
    requireResolveFunction = require.resolve
  ***REMOVED***
) =>
  resolveWithPrefix(resolver, {
    filePath,
    humanOptionName: 'Jest Sequencer',
    optionName: 'testSequencer',
    prefix: 'jest-sequencer-',
    requireResolveFunction,
    rootDir
  ***REMOVED***);

exports.resolveSequencer = resolveSequencer;
