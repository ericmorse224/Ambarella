import { Strategy, StrategyOptions ***REMOVED*** from './Strategy.js';
import { StrategyHandler ***REMOVED*** from './StrategyHandler.js';
import './_version.js';
export interface NetworkFirstOptions extends StrategyOptions {
    networkTimeoutSeconds?: number;
***REMOVED***
/**
 * An implementation of a
 * [network first](https://developer.chrome.com/docs/workbox/caching-strategies-overview/#network-first-falling-back-to-cache)
 * request strategy.
 *
 * By default, this strategy will cache responses with a 200 status code as
 * well as [opaque responses](https://developer.chrome.com/docs/workbox/caching-resources-during-runtime/#opaque-responses).
 * Opaque responses are are cross-origin requests where the response doesn't
 * support [CORS](https://enable-cors.org/).
 *
 * If the network request fails, and there is no cache match, this will throw
 * a `WorkboxError` exception.
 *
 * @extends workbox-strategies.Strategy
 * @memberof workbox-strategies
 */
declare class NetworkFirst extends Strategy {
    private readonly _networkTimeoutSeconds;
    /**
     * @param {Object***REMOVED*** [options]
     * @param {string***REMOVED*** [options.cacheName] Cache name to store and retrieve
     * requests. Defaults to cache names provided by
     * {@link workbox-core.cacheNames***REMOVED***.
     * @param {Array<Object>***REMOVED*** [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins***REMOVED***
     * to use in conjunction with this caching strategy.
     * @param {Object***REMOVED*** [options.fetchOptions] Values passed along to the
     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)
     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)
     * `fetch()` requests made by this strategy.
     * @param {Object***REMOVED*** [options.matchOptions] [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)
     * @param {number***REMOVED*** [options.networkTimeoutSeconds] If set, any network requests
     * that fail to respond within the timeout will fallback to the cache.
     *
     * This option can be used to combat
     * "[lie-fi]{@link https://developers.google.com/web/fundamentals/performance/poor-connectivity/#lie-fi***REMOVED***"
     * scenarios.
     */
    constructor(options?: NetworkFirstOptions);
    /**
     * @private
     * @param {Request|string***REMOVED*** request A request to run this strategy for.
     * @param {workbox-strategies.StrategyHandler***REMOVED*** handler The event that
     *     triggered the request.
     * @return {Promise<Response>***REMOVED***
     */
    _handle(request: Request, handler: StrategyHandler): Promise<Response>;
    /**
     * @param {Object***REMOVED*** options
     * @param {Request***REMOVED*** options.request
     * @param {Array***REMOVED*** options.logs A reference to the logs array
     * @param {Event***REMOVED*** options.event
     * @return {Promise<Response>***REMOVED***
     *
     * @private
     */
    private _getTimeoutPromise;
    /**
     * @param {Object***REMOVED*** options
     * @param {number|undefined***REMOVED*** options.timeoutId
     * @param {Request***REMOVED*** options.request
     * @param {Array***REMOVED*** options.logs A reference to the logs Array.
     * @param {Event***REMOVED*** options.event
     * @return {Promise<Response>***REMOVED***
     *
     * @private
     */
    _getNetworkPromise({ timeoutId, request, logs, handler, ***REMOVED***: {
        request: Request;
        logs: any[];
        timeoutId?: number;
        handler: StrategyHandler;
    ***REMOVED***): Promise<Response | undefined>;
***REMOVED***
export { NetworkFirst ***REMOVED***;
