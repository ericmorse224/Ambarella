/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const util = require("util");

/** @typedef {import("../../declarations/WebpackOptions").CacheOptionsNormalized***REMOVED*** CacheOptions */
/** @typedef {import("../../declarations/WebpackOptions").EntryDescriptionNormalized***REMOVED*** EntryDescriptionNormalized */
/** @typedef {import("../../declarations/WebpackOptions").EntryStatic***REMOVED*** EntryStatic */
/** @typedef {import("../../declarations/WebpackOptions").EntryStaticNormalized***REMOVED*** EntryStaticNormalized */
/** @typedef {import("../../declarations/WebpackOptions").Externals***REMOVED*** Externals */
/** @typedef {import("../../declarations/WebpackOptions").LibraryName***REMOVED*** LibraryName */
/** @typedef {import("../../declarations/WebpackOptions").LibraryOptions***REMOVED*** LibraryOptions */
/** @typedef {import("../../declarations/WebpackOptions").ModuleOptionsNormalized***REMOVED*** ModuleOptionsNormalized */
/** @typedef {import("../../declarations/WebpackOptions").OptimizationRuntimeChunk***REMOVED*** OptimizationRuntimeChunk */
/** @typedef {import("../../declarations/WebpackOptions").OptimizationRuntimeChunkNormalized***REMOVED*** OptimizationRuntimeChunkNormalized */
/** @typedef {import("../../declarations/WebpackOptions").OutputNormalized***REMOVED*** OutputNormalized */
/** @typedef {import("../../declarations/WebpackOptions").Plugins***REMOVED*** Plugins */
/** @typedef {import("../../declarations/WebpackOptions").WebpackOptions***REMOVED*** WebpackOptions */
/** @typedef {import("../../declarations/WebpackOptions").WebpackOptionsNormalized***REMOVED*** WebpackOptionsNormalized */
/** @typedef {import("../Entrypoint")***REMOVED*** Entrypoint */
/** @typedef {import("../WebpackError")***REMOVED*** WebpackError */

const handledDeprecatedNoEmitOnErrors = util.deprecate(
	/**
	 * @param {boolean***REMOVED*** noEmitOnErrors no emit on errors
	 * @param {boolean | undefined***REMOVED*** emitOnErrors emit on errors
	 * @returns {boolean***REMOVED*** emit on errors
	 */
	(noEmitOnErrors, emitOnErrors) => {
		if (emitOnErrors !== undefined && !noEmitOnErrors === !emitOnErrors) {
			throw new Error(
				"Conflicting use of 'optimization.noEmitOnErrors' and 'optimization.emitOnErrors'. Remove deprecated 'optimization.noEmitOnErrors' from config."
			);
		***REMOVED***
		return !noEmitOnErrors;
	***REMOVED***,
	"optimization.noEmitOnErrors is deprecated in favor of optimization.emitOnErrors",
	"DEP_WEBPACK_CONFIGURATION_OPTIMIZATION_NO_EMIT_ON_ERRORS"
);

/**
 * @template T
 * @template R
 * @param {T | undefined***REMOVED*** value value or not
 * @param {(value: T) => R***REMOVED*** fn nested handler
 * @returns {R***REMOVED*** result value
 */
const nestedConfig = (value, fn) =>
	value === undefined ? fn(/** @type {T***REMOVED*** */ ({***REMOVED***)) : fn(value);

/**
 * @template T
 * @param {T|undefined***REMOVED*** value value or not
 * @returns {T***REMOVED*** result value
 */
const cloneObject = value => /** @type {T***REMOVED*** */ ({ ...value ***REMOVED***);
/**
 * @template T
 * @template R
 * @param {T | undefined***REMOVED*** value value or not
 * @param {(value: T) => R***REMOVED*** fn nested handler
 * @returns {R | undefined***REMOVED*** result value
 */
const optionalNestedConfig = (value, fn) =>
	value === undefined ? undefined : fn(value);

/**
 * @template T
 * @template R
 * @param {T[] | undefined***REMOVED*** value array or not
 * @param {(value: T[]) => R[]***REMOVED*** fn nested handler
 * @returns {R[] | undefined***REMOVED*** cloned value
 */
const nestedArray = (value, fn) => (Array.isArray(value) ? fn(value) : fn([]));

/**
 * @template T
 * @template R
 * @param {T[] | undefined***REMOVED*** value array or not
 * @param {(value: T[]) => R[]***REMOVED*** fn nested handler
 * @returns {R[] | undefined***REMOVED*** cloned value
 */
const optionalNestedArray = (value, fn) =>
	Array.isArray(value) ? fn(value) : undefined;

/**
 * @template T
 * @template R
 * @param {Record<string, T>|undefined***REMOVED*** value value or not
 * @param {(value: T) => R***REMOVED*** fn nested handler
 * @param {Record<string, (value: T) => R>=***REMOVED*** customKeys custom nested handler for some keys
 * @returns {Record<string, R>***REMOVED*** result value
 */
const keyedNestedConfig = (value, fn, customKeys) => {
	/* eslint-disable no-sequences */
	const result =
		value === undefined
			? {***REMOVED***
			: Object.keys(value).reduce(
					(obj, key) => (
						(obj[key] = (
							customKeys && key in customKeys ? customKeys[key] : fn
						)(value[key])),
						obj
					),
					/** @type {Record<string, R>***REMOVED*** */ ({***REMOVED***)
				);
	/* eslint-enable no-sequences */
	if (customKeys) {
		for (const key of Object.keys(customKeys)) {
			if (!(key in result)) {
				result[key] = customKeys[key](/** @type {T***REMOVED*** */ ({***REMOVED***));
			***REMOVED***
		***REMOVED***
	***REMOVED***
	return result;
***REMOVED***;

/**
 * @param {WebpackOptions***REMOVED*** config input config
 * @returns {WebpackOptionsNormalized***REMOVED*** normalized options
 */
const getNormalizedWebpackOptions = config => ({
	amd: config.amd,
	bail: config.bail,
	cache:
		/** @type {NonNullable<CacheOptions>***REMOVED*** */
		(
			optionalNestedConfig(config.cache, cache => {
				if (cache === false) return false;
				if (cache === true) {
					return {
						type: "memory",
						maxGenerations: undefined
					***REMOVED***;
				***REMOVED***
				switch (cache.type) {
					case "filesystem":
						return {
							type: "filesystem",
							allowCollectingMemory: cache.allowCollectingMemory,
							maxMemoryGenerations: cache.maxMemoryGenerations,
							maxAge: cache.maxAge,
							profile: cache.profile,
							buildDependencies: cloneObject(cache.buildDependencies),
							cacheDirectory: cache.cacheDirectory,
							cacheLocation: cache.cacheLocation,
							hashAlgorithm: cache.hashAlgorithm,
							compression: cache.compression,
							idleTimeout: cache.idleTimeout,
							idleTimeoutForInitialStore: cache.idleTimeoutForInitialStore,
							idleTimeoutAfterLargeChanges: cache.idleTimeoutAfterLargeChanges,
							name: cache.name,
							store: cache.store,
							version: cache.version,
							readonly: cache.readonly
						***REMOVED***;
					case undefined:
					case "memory":
						return {
							type: "memory",
							maxGenerations: cache.maxGenerations
						***REMOVED***;
					default:
						// @ts-expect-error Property 'type' does not exist on type 'never'. ts(2339)
						throw new Error(`Not implemented cache.type ${cache.type***REMOVED***`);
				***REMOVED***
			***REMOVED***)
		),
	context: config.context,
	dependencies: config.dependencies,
	devServer: optionalNestedConfig(config.devServer, devServer => {
		if (devServer === false) return false;
		return { ...devServer ***REMOVED***;
	***REMOVED***),
	devtool: config.devtool,
	entry:
		config.entry === undefined
			? { main: {***REMOVED*** ***REMOVED***
			: typeof config.entry === "function"
				? (
						fn => () =>
							Promise.resolve().then(fn).then(getNormalizedEntryStatic)
					)(config.entry)
				: getNormalizedEntryStatic(config.entry),
	experiments: nestedConfig(config.experiments, experiments => ({
		...experiments,
		buildHttp: optionalNestedConfig(experiments.buildHttp, options =>
			Array.isArray(options) ? { allowedUris: options ***REMOVED*** : options
		),
		lazyCompilation: optionalNestedConfig(
			experiments.lazyCompilation,
			options => (options === true ? {***REMOVED*** : options)
		)
	***REMOVED***)),
	externals: /** @type {NonNullable<Externals>***REMOVED*** */ (config.externals),
	externalsPresets: cloneObject(config.externalsPresets),
	externalsType: config.externalsType,
	ignoreWarnings: config.ignoreWarnings
		? config.ignoreWarnings.map(ignore => {
				if (typeof ignore === "function") return ignore;
				const i = ignore instanceof RegExp ? { message: ignore ***REMOVED*** : ignore;
				return (warning, { requestShortener ***REMOVED***) => {
					if (!i.message && !i.module && !i.file) return false;
					if (i.message && !i.message.test(warning.message)) {
						return false;
					***REMOVED***
					if (
						i.module &&
						(!(/** @type {WebpackError***REMOVED*** */ (warning).module) ||
							!i.module.test(
								/** @type {WebpackError***REMOVED*** */
								(warning).module.readableIdentifier(requestShortener)
							))
					) {
						return false;
					***REMOVED***
					if (
						i.file &&
						(!(/** @type {WebpackError***REMOVED*** */ (warning).file) ||
							!i.file.test(/** @type {WebpackError***REMOVED*** */ (warning).file))
					) {
						return false;
					***REMOVED***
					return true;
				***REMOVED***;
			***REMOVED***)
		: undefined,
	infrastructureLogging: cloneObject(config.infrastructureLogging),
	loader: cloneObject(config.loader),
	mode: config.mode,
	module:
		/** @type {ModuleOptionsNormalized***REMOVED*** */
		(
			nestedConfig(config.module, module => ({
				noParse: module.noParse,
				unsafeCache: module.unsafeCache,
				parser: keyedNestedConfig(module.parser, cloneObject, {
					javascript: parserOptions => ({
						unknownContextRequest: module.unknownContextRequest,
						unknownContextRegExp: module.unknownContextRegExp,
						unknownContextRecursive: module.unknownContextRecursive,
						unknownContextCritical: module.unknownContextCritical,
						exprContextRequest: module.exprContextRequest,
						exprContextRegExp: module.exprContextRegExp,
						exprContextRecursive: module.exprContextRecursive,
						exprContextCritical: module.exprContextCritical,
						wrappedContextRegExp: module.wrappedContextRegExp,
						wrappedContextRecursive: module.wrappedContextRecursive,
						wrappedContextCritical: module.wrappedContextCritical,
						// TODO webpack 6 remove
						strictExportPresence: module.strictExportPresence,
						strictThisContextOnImports: module.strictThisContextOnImports,
						...parserOptions
					***REMOVED***)
				***REMOVED***),
				generator: cloneObject(module.generator),
				defaultRules: optionalNestedArray(module.defaultRules, r => [...r]),
				rules: nestedArray(module.rules, r => [...r])
			***REMOVED***))
		),
	name: config.name,
	node: nestedConfig(
		config.node,
		node =>
			node && {
				...node
			***REMOVED***
	),
	optimization: nestedConfig(config.optimization, optimization => ({
		...optimization,
		runtimeChunk: getNormalizedOptimizationRuntimeChunk(
			optimization.runtimeChunk
		),
		splitChunks: nestedConfig(
			optimization.splitChunks,
			splitChunks =>
				splitChunks && {
					...splitChunks,
					defaultSizeTypes: splitChunks.defaultSizeTypes
						? [...splitChunks.defaultSizeTypes]
						: ["..."],
					cacheGroups: cloneObject(splitChunks.cacheGroups)
				***REMOVED***
		),
		emitOnErrors:
			optimization.noEmitOnErrors !== undefined
				? handledDeprecatedNoEmitOnErrors(
						optimization.noEmitOnErrors,
						optimization.emitOnErrors
					)
				: optimization.emitOnErrors
	***REMOVED***)),
	output: nestedConfig(config.output, output => {
		const { library ***REMOVED*** = output;
		const libraryAsName = /** @type {LibraryName***REMOVED*** */ (library);
		const libraryBase =
			typeof library === "object" &&
			library &&
			!Array.isArray(library) &&
			"type" in library
				? library
				: libraryAsName || output.libraryTarget
					? /** @type {LibraryOptions***REMOVED*** */ ({
							name: libraryAsName
						***REMOVED***)
					: undefined;
		/** @type {OutputNormalized***REMOVED*** */
		const result = {
			assetModuleFilename: output.assetModuleFilename,
			asyncChunks: output.asyncChunks,
			charset: output.charset,
			chunkFilename: output.chunkFilename,
			chunkFormat: output.chunkFormat,
			chunkLoading: output.chunkLoading,
			chunkLoadingGlobal: output.chunkLoadingGlobal,
			chunkLoadTimeout: output.chunkLoadTimeout,
			cssFilename: output.cssFilename,
			cssChunkFilename: output.cssChunkFilename,
			clean: output.clean,
			compareBeforeEmit: output.compareBeforeEmit,
			crossOriginLoading: output.crossOriginLoading,
			devtoolFallbackModuleFilenameTemplate:
				output.devtoolFallbackModuleFilenameTemplate,
			devtoolModuleFilenameTemplate: output.devtoolModuleFilenameTemplate,
			devtoolNamespace: output.devtoolNamespace,
			environment: cloneObject(output.environment),
			enabledChunkLoadingTypes: output.enabledChunkLoadingTypes
				? [...output.enabledChunkLoadingTypes]
				: ["..."],
			enabledLibraryTypes: output.enabledLibraryTypes
				? [...output.enabledLibraryTypes]
				: ["..."],
			enabledWasmLoadingTypes: output.enabledWasmLoadingTypes
				? [...output.enabledWasmLoadingTypes]
				: ["..."],
			filename: output.filename,
			globalObject: output.globalObject,
			hashDigest: output.hashDigest,
			hashDigestLength: output.hashDigestLength,
			hashFunction: output.hashFunction,
			hashSalt: output.hashSalt,
			hotUpdateChunkFilename: output.hotUpdateChunkFilename,
			hotUpdateGlobal: output.hotUpdateGlobal,
			hotUpdateMainFilename: output.hotUpdateMainFilename,
			ignoreBrowserWarnings: output.ignoreBrowserWarnings,
			iife: output.iife,
			importFunctionName: output.importFunctionName,
			importMetaName: output.importMetaName,
			scriptType: output.scriptType,
			// TODO webpack6 remove `libraryTarget`/`auxiliaryComment`/`amdContainer`/etc in favor of the `library` option
			library: libraryBase && {
				type:
					output.libraryTarget !== undefined
						? output.libraryTarget
						: libraryBase.type,
				auxiliaryComment:
					output.auxiliaryComment !== undefined
						? output.auxiliaryComment
						: libraryBase.auxiliaryComment,
				amdContainer:
					output.amdContainer !== undefined
						? output.amdContainer
						: libraryBase.amdContainer,
				export:
					output.libraryExport !== undefined
						? output.libraryExport
						: libraryBase.export,
				name: libraryBase.name,
				umdNamedDefine:
					output.umdNamedDefine !== undefined
						? output.umdNamedDefine
						: libraryBase.umdNamedDefine
			***REMOVED***,
			module: output.module,
			path: output.path,
			pathinfo: output.pathinfo,
			publicPath: output.publicPath,
			sourceMapFilename: output.sourceMapFilename,
			sourcePrefix: output.sourcePrefix,
			strictModuleErrorHandling: output.strictModuleErrorHandling,
			strictModuleExceptionHandling: output.strictModuleExceptionHandling,
			trustedTypes: optionalNestedConfig(output.trustedTypes, trustedTypes => {
				if (trustedTypes === true) return {***REMOVED***;
				if (typeof trustedTypes === "string")
					return { policyName: trustedTypes ***REMOVED***;
				return { ...trustedTypes ***REMOVED***;
			***REMOVED***),
			uniqueName: output.uniqueName,
			wasmLoading: output.wasmLoading,
			webassemblyModuleFilename: output.webassemblyModuleFilename,
			workerPublicPath: output.workerPublicPath,
			workerChunkLoading: output.workerChunkLoading,
			workerWasmLoading: output.workerWasmLoading
		***REMOVED***;
		return result;
	***REMOVED***),
	parallelism: config.parallelism,
	performance: optionalNestedConfig(config.performance, performance => {
		if (performance === false) return false;
		return {
			...performance
		***REMOVED***;
	***REMOVED***),
	plugins: /** @type {Plugins***REMOVED*** */ (nestedArray(config.plugins, p => [...p])),
	profile: config.profile,
	recordsInputPath:
		config.recordsInputPath !== undefined
			? config.recordsInputPath
			: config.recordsPath,
	recordsOutputPath:
		config.recordsOutputPath !== undefined
			? config.recordsOutputPath
			: config.recordsPath,
	resolve: nestedConfig(config.resolve, resolve => ({
		...resolve,
		byDependency: keyedNestedConfig(resolve.byDependency, cloneObject)
	***REMOVED***)),
	resolveLoader: cloneObject(config.resolveLoader),
	snapshot: nestedConfig(config.snapshot, snapshot => ({
		resolveBuildDependencies: optionalNestedConfig(
			snapshot.resolveBuildDependencies,
			resolveBuildDependencies => ({
				timestamp: resolveBuildDependencies.timestamp,
				hash: resolveBuildDependencies.hash
			***REMOVED***)
		),
		buildDependencies: optionalNestedConfig(
			snapshot.buildDependencies,
			buildDependencies => ({
				timestamp: buildDependencies.timestamp,
				hash: buildDependencies.hash
			***REMOVED***)
		),
		resolve: optionalNestedConfig(snapshot.resolve, resolve => ({
			timestamp: resolve.timestamp,
			hash: resolve.hash
		***REMOVED***)),
		module: optionalNestedConfig(snapshot.module, module => ({
			timestamp: module.timestamp,
			hash: module.hash
		***REMOVED***)),
		immutablePaths: optionalNestedArray(snapshot.immutablePaths, p => [...p]),
		managedPaths: optionalNestedArray(snapshot.managedPaths, p => [...p]),
		unmanagedPaths: optionalNestedArray(snapshot.unmanagedPaths, p => [...p])
	***REMOVED***)),
	stats: nestedConfig(config.stats, stats => {
		if (stats === false) {
			return {
				preset: "none"
			***REMOVED***;
		***REMOVED***
		if (stats === true) {
			return {
				preset: "normal"
			***REMOVED***;
		***REMOVED***
		if (typeof stats === "string") {
			return {
				preset: stats
			***REMOVED***;
		***REMOVED***
		return {
			...stats
		***REMOVED***;
	***REMOVED***),
	target: config.target,
	watch: config.watch,
	watchOptions: cloneObject(config.watchOptions)
***REMOVED***);

/**
 * @param {EntryStatic***REMOVED*** entry static entry options
 * @returns {EntryStaticNormalized***REMOVED*** normalized static entry options
 */
const getNormalizedEntryStatic = entry => {
	if (typeof entry === "string") {
		return {
			main: {
				import: [entry]
			***REMOVED***
		***REMOVED***;
	***REMOVED***
	if (Array.isArray(entry)) {
		return {
			main: {
				import: entry
			***REMOVED***
		***REMOVED***;
	***REMOVED***
	/** @type {EntryStaticNormalized***REMOVED*** */
	const result = {***REMOVED***;
	for (const key of Object.keys(entry)) {
		const value = entry[key];
		if (typeof value === "string") {
			result[key] = {
				import: [value]
			***REMOVED***;
		***REMOVED*** else if (Array.isArray(value)) {
			result[key] = {
				import: value
			***REMOVED***;
		***REMOVED*** else {
			result[key] = {
				import:
					/** @type {EntryDescriptionNormalized["import"]***REMOVED*** */
					(
						value.import &&
							(Array.isArray(value.import) ? value.import : [value.import])
					),
				filename: value.filename,
				layer: value.layer,
				runtime: value.runtime,
				baseUri: value.baseUri,
				publicPath: value.publicPath,
				chunkLoading: value.chunkLoading,
				asyncChunks: value.asyncChunks,
				wasmLoading: value.wasmLoading,
				dependOn:
					/** @type {EntryDescriptionNormalized["dependOn"]***REMOVED*** */
					(
						value.dependOn &&
							(Array.isArray(value.dependOn)
								? value.dependOn
								: [value.dependOn])
					),
				library: value.library
			***REMOVED***;
		***REMOVED***
	***REMOVED***
	return result;
***REMOVED***;

/**
 * @param {OptimizationRuntimeChunk=***REMOVED*** runtimeChunk runtimeChunk option
 * @returns {OptimizationRuntimeChunkNormalized=***REMOVED*** normalized runtimeChunk option
 */
const getNormalizedOptimizationRuntimeChunk = runtimeChunk => {
	if (runtimeChunk === undefined) return;
	if (runtimeChunk === false) return false;
	if (runtimeChunk === "single") {
		return {
			name: () => "runtime"
		***REMOVED***;
	***REMOVED***
	if (runtimeChunk === true || runtimeChunk === "multiple") {
		return {
			name: entrypoint => `runtime~${entrypoint.name***REMOVED***`
		***REMOVED***;
	***REMOVED***
	const { name ***REMOVED*** = runtimeChunk;
	return {
		name:
			typeof name === "function"
				? /** @type {Exclude<OptimizationRuntimeChunkNormalized, false>["name"]***REMOVED*** */
					(name)
				: () => /** @type {string***REMOVED*** */ (name)
	***REMOVED***;
***REMOVED***;

module.exports.getNormalizedWebpackOptions = getNormalizedWebpackOptions;
