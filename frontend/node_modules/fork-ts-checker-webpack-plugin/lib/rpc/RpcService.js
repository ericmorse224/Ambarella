"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); ***REMOVED***); ***REMOVED***
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); ***REMOVED*** catch (e) { reject(e); ***REMOVED*** ***REMOVED***
        function rejected(value) { try { step(generator["throw"](value)); ***REMOVED*** catch (e) { reject(e); ***REMOVED*** ***REMOVED***
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); ***REMOVED***
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    ***REMOVED***);
***REMOVED***;
Object.defineProperty(exports, "__esModule", { value: true ***REMOVED***);
const RpcMessage_1 = require("./RpcMessage");
function createRpcService(port) {
    const handlers = new Map();
    let isListenerRegistered = false;
    const callListener = (message) => __awaiter(this, void 0, void 0, function* () {
        if (RpcMessage_1.isRpcCallMessage(message)) {
            const handler = handlers.get(message.procedure);
            try {
                if (!handler) {
                    throw new Error(`No handler found for procedure ${message.procedure***REMOVED***.`);
                ***REMOVED***
                const result = yield handler(message.payload);
                yield port.dispatchMessage(RpcMessage_1.createRpcReturn(message.procedure, message.id, result));
            ***REMOVED***
            catch (error) {
                yield port.dispatchMessage(RpcMessage_1.createRpcThrow(message.procedure, message.id, {
                    message: error.toString(),
                    stack: error.stack,
                ***REMOVED***));
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***);
    return {
        isOpen: () => port.isOpen() && isListenerRegistered,
        open: () => __awaiter(this, void 0, void 0, function* () {
            if (!port.isOpen()) {
                yield port.open();
            ***REMOVED***
            if (!isListenerRegistered) {
                port.addMessageListener(callListener);
                isListenerRegistered = true;
            ***REMOVED***
        ***REMOVED***),
        close: () => __awaiter(this, void 0, void 0, function* () {
            if (isListenerRegistered) {
                port.removeMessageListener(callListener);
                isListenerRegistered = false;
            ***REMOVED***
            if (port.isOpen()) {
                yield port.close();
            ***REMOVED***
        ***REMOVED***),
        addCallHandler: (procedure, handler) => {
            if (handlers.has(procedure)) {
                throw new Error(`Handler for '${procedure***REMOVED***' procedure has been already registered`);
            ***REMOVED***
            handlers.set(procedure, handler);
        ***REMOVED***,
        removeCallHandler: (procedure) => handlers.delete(procedure),
    ***REMOVED***;
***REMOVED***
exports.createRpcService = createRpcService;
