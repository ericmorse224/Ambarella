/**
 * @fileoverview Options configuration for optionator.
 * @author George Zahariev
 */

"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const optionator = require("optionator");

//------------------------------------------------------------------------------
// Typedefs
//------------------------------------------------------------------------------

/**
 * The options object parsed by Optionator.
 * @typedef {Object***REMOVED*** ParsedCLIOptions
 * @property {boolean***REMOVED*** cache Only check changed files
 * @property {string***REMOVED*** cacheFile Path to the cache file. Deprecated: use --cache-location
 * @property {string***REMOVED*** [cacheLocation] Path to the cache file or directory
 * @property {"metadata" | "content"***REMOVED*** cacheStrategy Strategy to use for detecting changed files in the cache
 * @property {boolean***REMOVED*** [color] Force enabling/disabling of color
 * @property {string***REMOVED*** [config] Use this configuration, overriding .eslintrc.* config options if present
 * @property {boolean***REMOVED*** debug Output debugging information
 * @property {string[]***REMOVED*** [env] Specify environments
 * @property {boolean***REMOVED*** envInfo Output execution environment information
 * @property {boolean***REMOVED*** errorOnUnmatchedPattern Prevent errors when pattern is unmatched
 * @property {boolean***REMOVED*** eslintrc Disable use of configuration from .eslintrc.*
 * @property {string[]***REMOVED*** [ext] Specify JavaScript file extensions
 * @property {boolean***REMOVED*** fix Automatically fix problems
 * @property {boolean***REMOVED*** fixDryRun Automatically fix problems without saving the changes to the file system
 * @property {("problem" | "suggestion" | "layout")[]***REMOVED*** [fixType] Specify the types of fixes to apply (problem, suggestion, layout)
 * @property {string***REMOVED*** format Use a specific output format
 * @property {string[]***REMOVED*** [global] Define global variables
 * @property {boolean***REMOVED*** [help] Show help
 * @property {boolean***REMOVED*** ignore Disable use of ignore files and patterns
 * @property {string***REMOVED*** [ignorePath] Specify path of ignore file
 * @property {string[]***REMOVED*** [ignorePattern] Pattern of files to ignore (in addition to those in .eslintignore)
 * @property {boolean***REMOVED*** init Run config initialization wizard
 * @property {boolean***REMOVED*** inlineConfig Prevent comments from changing config or rules
 * @property {number***REMOVED*** maxWarnings Number of warnings to trigger nonzero exit code
 * @property {string***REMOVED*** [outputFile] Specify file to write report to
 * @property {string***REMOVED*** [parser] Specify the parser to be used
 * @property {Object***REMOVED*** [parserOptions] Specify parser options
 * @property {string[]***REMOVED*** [plugin] Specify plugins
 * @property {string***REMOVED*** [printConfig] Print the configuration for the given file
 * @property {boolean | undefined***REMOVED*** reportUnusedDisableDirectives Adds reported errors for unused eslint-disable directives
 * @property {string***REMOVED*** [resolvePluginsRelativeTo] A folder where plugins should be resolved from, CWD by default
 * @property {Object***REMOVED*** [rule] Specify rules
 * @property {string[]***REMOVED*** [rulesdir] Use additional rules from this directory
 * @property {boolean***REMOVED*** stdin Lint code provided on <STDIN>
 * @property {string***REMOVED*** [stdinFilename] Specify filename to process STDIN as
 * @property {boolean***REMOVED*** quiet Report errors only
 * @property {boolean***REMOVED*** [version] Output the version number
 * @property {string[]***REMOVED*** _ Positional filenames or patterns
 */

//------------------------------------------------------------------------------
// Initialization and Public Interface
//------------------------------------------------------------------------------

// exports "parse(args)", "generateHelp()", and "generateHelpForOption(optionName)"
module.exports = optionator({
    prepend: "eslint [options] file.js [file.js] [dir]",
    defaults: {
        concatRepeatedArrays: true,
        mergeRepeatedObjects: true
    ***REMOVED***,
    options: [
        {
            heading: "Basic configuration"
        ***REMOVED***,
        {
            option: "eslintrc",
            type: "Boolean",
            default: "true",
            description: "Disable use of configuration from .eslintrc.*"
        ***REMOVED***,
        {
            option: "config",
            alias: "c",
            type: "path::String",
            description: "Use this configuration, overriding .eslintrc.* config options if present"
        ***REMOVED***,
        {
            option: "env",
            type: "[String]",
            description: "Specify environments"
        ***REMOVED***,
        {
            option: "ext",
            type: "[String]",
            description: "Specify JavaScript file extensions"
        ***REMOVED***,
        {
            option: "global",
            type: "[String]",
            description: "Define global variables"
        ***REMOVED***,
        {
            option: "parser",
            type: "String",
            description: "Specify the parser to be used"
        ***REMOVED***,
        {
            option: "parser-options",
            type: "Object",
            description: "Specify parser options"
        ***REMOVED***,
        {
            option: "resolve-plugins-relative-to",
            type: "path::String",
            description: "A folder where plugins should be resolved from, CWD by default"
        ***REMOVED***,
        {
            heading: "Specifying rules and plugins"
        ***REMOVED***,
        {
            option: "rulesdir",
            type: "[path::String]",
            description: "Use additional rules from this directory"
        ***REMOVED***,
        {
            option: "plugin",
            type: "[String]",
            description: "Specify plugins"
        ***REMOVED***,
        {
            option: "rule",
            type: "Object",
            description: "Specify rules"
        ***REMOVED***,
        {
            heading: "Fixing problems"
        ***REMOVED***,
        {
            option: "fix",
            type: "Boolean",
            default: false,
            description: "Automatically fix problems"
        ***REMOVED***,
        {
            option: "fix-dry-run",
            type: "Boolean",
            default: false,
            description: "Automatically fix problems without saving the changes to the file system"
        ***REMOVED***,
        {
            option: "fix-type",
            type: "Array",
            description: "Specify the types of fixes to apply (problem, suggestion, layout)"
        ***REMOVED***,
        {
            heading: "Ignoring files"
        ***REMOVED***,
        {
            option: "ignore-path",
            type: "path::String",
            description: "Specify path of ignore file"
        ***REMOVED***,
        {
            option: "ignore",
            type: "Boolean",
            default: "true",
            description: "Disable use of ignore files and patterns"
        ***REMOVED***,
        {
            option: "ignore-pattern",
            type: "[String]",
            description: "Pattern of files to ignore (in addition to those in .eslintignore)",
            concatRepeatedArrays: [true, {
                oneValuePerFlag: true
            ***REMOVED***]
        ***REMOVED***,
        {
            heading: "Using stdin"
        ***REMOVED***,
        {
            option: "stdin",
            type: "Boolean",
            default: "false",
            description: "Lint code provided on <STDIN>"
        ***REMOVED***,
        {
            option: "stdin-filename",
            type: "String",
            description: "Specify filename to process STDIN as"
        ***REMOVED***,
        {
            heading: "Handling warnings"
        ***REMOVED***,
        {
            option: "quiet",
            type: "Boolean",
            default: "false",
            description: "Report errors only"
        ***REMOVED***,
        {
            option: "max-warnings",
            type: "Int",
            default: "-1",
            description: "Number of warnings to trigger nonzero exit code"
        ***REMOVED***,
        {
            heading: "Output"
        ***REMOVED***,
        {
            option: "output-file",
            alias: "o",
            type: "path::String",
            description: "Specify file to write report to"
        ***REMOVED***,
        {
            option: "format",
            alias: "f",
            type: "String",
            default: "stylish",
            description: "Use a specific output format"
        ***REMOVED***,
        {
            option: "color",
            type: "Boolean",
            alias: "no-color",
            description: "Force enabling/disabling of color"
        ***REMOVED***,
        {
            heading: "Inline configuration comments"
        ***REMOVED***,
        {
            option: "inline-config",
            type: "Boolean",
            default: "true",
            description: "Prevent comments from changing config or rules"
        ***REMOVED***,
        {
            option: "report-unused-disable-directives",
            type: "Boolean",
            default: void 0,
            description: "Adds reported errors for unused eslint-disable directives"
        ***REMOVED***,
        {
            heading: "Caching"
        ***REMOVED***,
        {
            option: "cache",
            type: "Boolean",
            default: "false",
            description: "Only check changed files"
        ***REMOVED***,
        {
            option: "cache-file",
            type: "path::String",
            default: ".eslintcache",
            description: "Path to the cache file. Deprecated: use --cache-location"
        ***REMOVED***,
        {
            option: "cache-location",
            type: "path::String",
            description: "Path to the cache file or directory"
        ***REMOVED***,
        {
            option: "cache-strategy",
            dependsOn: ["cache"],
            type: "String",
            default: "metadata",
            enum: ["metadata", "content"],
            description: "Strategy to use for detecting changed files in the cache"
        ***REMOVED***,
        {
            heading: "Miscellaneous"
        ***REMOVED***,
        {
            option: "init",
            type: "Boolean",
            default: "false",
            description: "Run config initialization wizard"
        ***REMOVED***,
        {
            option: "env-info",
            type: "Boolean",
            default: "false",
            description: "Output execution environment information"
        ***REMOVED***,
        {
            option: "error-on-unmatched-pattern",
            type: "Boolean",
            default: "true",
            description: "Prevent errors when pattern is unmatched"
        ***REMOVED***,
        {
            option: "exit-on-fatal-error",
            type: "Boolean",
            default: "false",
            description: "Exit with exit code 2 in case of fatal error"
        ***REMOVED***,
        {
            option: "debug",
            type: "Boolean",
            default: false,
            description: "Output debugging information"
        ***REMOVED***,
        {
            option: "help",
            alias: "h",
            type: "Boolean",
            description: "Show help"
        ***REMOVED***,
        {
            option: "version",
            alias: "v",
            type: "Boolean",
            description: "Output the version number"
        ***REMOVED***,
        {
            option: "print-config",
            type: "path::String",
            description: "Print the configuration for the given file"
        ***REMOVED***
    ]
***REMOVED***);
