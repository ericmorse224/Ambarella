import type {KeywordErrorDefinition, KeywordErrorCxt***REMOVED*** from "../../types"
import type {SchemaCxt***REMOVED*** from ".."
import {reportError***REMOVED*** from "../errors"
import {_, Name***REMOVED*** from "../codegen"
import N from "../names"

const boolError: KeywordErrorDefinition = {
  message: "boolean schema is false",
***REMOVED***

export function topBoolOrEmptySchema(it: SchemaCxt): void {
  const {gen, schema, validateName***REMOVED*** = it
  if (schema === false) {
    falseSchemaError(it, false)
  ***REMOVED*** else if (typeof schema == "object" && schema.$async === true) {
    gen.return(N.data)
  ***REMOVED*** else {
    gen.assign(_`${validateName***REMOVED***.errors`, null)
    gen.return(true)
  ***REMOVED***
***REMOVED***

export function boolOrEmptySchema(it: SchemaCxt, valid: Name): void {
  const {gen, schema***REMOVED*** = it
  if (schema === false) {
    gen.var(valid, false) // TODO var
    falseSchemaError(it)
  ***REMOVED*** else {
    gen.var(valid, true) // TODO var
  ***REMOVED***
***REMOVED***

function falseSchemaError(it: SchemaCxt, overrideAllErrors?: boolean): void {
  const {gen, data***REMOVED*** = it
  // TODO maybe some other interface should be used for non-keyword validation errors...
  const cxt: KeywordErrorCxt = {
    gen,
    keyword: "false schema",
    data,
    schema: false,
    schemaCode: false,
    schemaValue: false,
    params: {***REMOVED***,
    it,
  ***REMOVED***
  reportError(cxt, boolError, undefined, overrideAllErrors)
***REMOVED***
