/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const { cleanUp ***REMOVED*** = require("./ErrorHelpers");
const WebpackError = require("./WebpackError");
const makeSerializable = require("./util/makeSerializable");

/** @typedef {import("./serialization/ObjectMiddleware").ObjectDeserializerContext***REMOVED*** ObjectDeserializerContext */
/** @typedef {import("./serialization/ObjectMiddleware").ObjectSerializerContext***REMOVED*** ObjectSerializerContext */

class ModuleError extends WebpackError {
	/**
	 * @param {Error***REMOVED*** err error thrown
	 * @param {{from?: string|null***REMOVED******REMOVED*** info additional info
	 */
	constructor(err, { from = null ***REMOVED*** = {***REMOVED***) {
		let message = "Module Error";

		message += from ? ` (from ${from***REMOVED***):\n` : ": ";

		if (err && typeof err === "object" && err.message) {
			message += err.message;
		***REMOVED*** else if (err) {
			message += err;
		***REMOVED***

		super(message);

		this.name = "ModuleError";
		this.error = err;
		this.details =
			err && typeof err === "object" && err.stack
				? cleanUp(err.stack, this.message)
				: undefined;
	***REMOVED***

	/**
	 * @param {ObjectSerializerContext***REMOVED*** context context
	 */
	serialize(context) {
		const { write ***REMOVED*** = context;

		write(this.error);

		super.serialize(context);
	***REMOVED***

	/**
	 * @param {ObjectDeserializerContext***REMOVED*** context context
	 */
	deserialize(context) {
		const { read ***REMOVED*** = context;

		this.error = read();

		super.deserialize(context);
	***REMOVED***
***REMOVED***

makeSerializable(ModuleError, "webpack/lib/ModuleError");

module.exports = ModuleError;
