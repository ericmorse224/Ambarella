import { parseColor, formatColor ***REMOVED*** from './color'

export function withAlphaValue(color, alphaValue, defaultValue) {
  if (typeof color === 'function') {
    return color({ opacityValue: alphaValue ***REMOVED***)
  ***REMOVED***

  let parsed = parseColor(color, { loose: true ***REMOVED***)

  if (parsed === null) {
    return defaultValue
  ***REMOVED***

  return formatColor({ ...parsed, alpha: alphaValue ***REMOVED***)
***REMOVED***

export default function withAlphaVariable({ color, property, variable ***REMOVED***) {
  let properties = [].concat(property)
  if (typeof color === 'function') {
    return {
      [variable]: '1',
      ...Object.fromEntries(
        properties.map((p) => {
          return [p, color({ opacityVariable: variable, opacityValue: `var(${variable***REMOVED***, 1)` ***REMOVED***)]
        ***REMOVED***)
      ),
    ***REMOVED***
  ***REMOVED***

  const parsed = parseColor(color)

  if (parsed === null) {
    return Object.fromEntries(properties.map((p) => [p, color]))
  ***REMOVED***

  if (parsed.alpha !== undefined) {
    // Has an alpha value, return color as-is
    return Object.fromEntries(properties.map((p) => [p, color]))
  ***REMOVED***

  return {
    [variable]: '1',
    ...Object.fromEntries(
      properties.map((p) => {
        return [p, formatColor({ ...parsed, alpha: `var(${variable***REMOVED***, 1)` ***REMOVED***)]
      ***REMOVED***)
    ),
  ***REMOVED***
***REMOVED***
