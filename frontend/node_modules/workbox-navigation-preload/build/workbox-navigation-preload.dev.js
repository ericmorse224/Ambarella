this.workbox = this.workbox || {***REMOVED***;
this.workbox.navigationPreload = (function (exports, logger_js) {
    'use strict';

    try {
      self['workbox:navigation-preload:6.5.4'] && _();
    ***REMOVED*** catch (e) {***REMOVED***

    /*
      Copyright 2018 Google LLC

      Use of this source code is governed by an MIT-style
      license that can be found in the LICENSE file or at
      https://opensource.org/licenses/MIT.
    */
    /**
     * @return {boolean***REMOVED*** Whether or not the current browser supports enabling
     * navigation preload.
     *
     * @memberof workbox-navigation-preload
     */

    function isSupported() {
      return Boolean(self.registration && self.registration.navigationPreload);
    ***REMOVED***

    /*
      Copyright 2018 Google LLC

      Use of this source code is governed by an MIT-style
      license that can be found in the LICENSE file or at
      https://opensource.org/licenses/MIT.
    */
    /**
     * If the browser supports Navigation Preload, then this will disable it.
     *
     * @memberof workbox-navigation-preload
     */

    function disable() {
      if (isSupported()) {
        self.addEventListener('activate', event => {
          event.waitUntil(self.registration.navigationPreload.disable().then(() => {
            {
              logger_js.logger.log(`Navigation preload is disabled.`);
            ***REMOVED***
          ***REMOVED***));
        ***REMOVED***);
      ***REMOVED*** else {
        {
          logger_js.logger.log(`Navigation preload is not supported in this browser.`);
        ***REMOVED***
      ***REMOVED***
    ***REMOVED***

    /*
      Copyright 2018 Google LLC

      Use of this source code is governed by an MIT-style
      license that can be found in the LICENSE file or at
      https://opensource.org/licenses/MIT.
    */
    /**
     * If the browser supports Navigation Preload, then this will enable it.
     *
     * @param {string***REMOVED*** [headerValue] Optionally, allows developers to
     * [override](https://developers.google.com/web/updates/2017/02/navigation-preload#changing_the_header)
     * the value of the `Service-Worker-Navigation-Preload` header which will be
     * sent to the server when making the navigation request.
     *
     * @memberof workbox-navigation-preload
     */

    function enable(headerValue) {
      if (isSupported()) {
        self.addEventListener('activate', event => {
          event.waitUntil(self.registration.navigationPreload.enable().then(() => {
            // Defaults to Service-Worker-Navigation-Preload: true if not set.
            if (headerValue) {
              void self.registration.navigationPreload.setHeaderValue(headerValue);
            ***REMOVED***

            {
              logger_js.logger.log(`Navigation preload is enabled.`);
            ***REMOVED***
          ***REMOVED***));
        ***REMOVED***);
      ***REMOVED*** else {
        {
          logger_js.logger.log(`Navigation preload is not supported in this browser.`);
        ***REMOVED***
      ***REMOVED***
    ***REMOVED***

    exports.disable = disable;
    exports.enable = enable;
    exports.isSupported = isSupported;

    return exports;

***REMOVED***({***REMOVED***, workbox.core._private));
//# sourceMappingURL=workbox-navigation-preload.dev.js.map
