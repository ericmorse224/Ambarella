/**
 * @fileoverview Expose out ESLint and CLI to require.
 * @author Ian Christian Myers
 */

"use strict";

//-----------------------------------------------------------------------------
// Requirements
//-----------------------------------------------------------------------------

const { ESLint, shouldUseFlatConfig ***REMOVED*** = require("./eslint/eslint");
const { LegacyESLint ***REMOVED*** = require("./eslint/legacy-eslint");
const { Linter ***REMOVED*** = require("./linter");
const { RuleTester ***REMOVED*** = require("./rule-tester");
const { SourceCode ***REMOVED*** = require("./languages/js/source-code");

//-----------------------------------------------------------------------------
// Functions
//-----------------------------------------------------------------------------

/**
 * Loads the correct ESLint constructor given the options.
 * @param {Object***REMOVED*** [options] The options object
 * @param {boolean***REMOVED*** [options.useFlatConfig] Whether or not to use a flat config
 * @returns {Promise<ESLint|LegacyESLint>***REMOVED*** The ESLint constructor
 */
async function loadESLint({ useFlatConfig ***REMOVED*** = {***REMOVED***) {
	/*
	 * Note: The v8.x version of this function also accepted a `cwd` option, but
	 * it is not used in this implementation so we silently ignore it.
	 */

	const shouldESLintUseFlatConfig =
		useFlatConfig ?? (await shouldUseFlatConfig());

	return shouldESLintUseFlatConfig ? ESLint : LegacyESLint;
***REMOVED***

//-----------------------------------------------------------------------------
// Exports
//-----------------------------------------------------------------------------

module.exports = {
	Linter,
	loadESLint,
	ESLint,
	RuleTester,
	SourceCode,
***REMOVED***;
