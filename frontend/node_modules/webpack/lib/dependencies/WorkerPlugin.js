/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const { pathToFileURL ***REMOVED*** = require("url");
const AsyncDependenciesBlock = require("../AsyncDependenciesBlock");
const CommentCompilationWarning = require("../CommentCompilationWarning");
const {
	JAVASCRIPT_MODULE_TYPE_AUTO,
	JAVASCRIPT_MODULE_TYPE_ESM
***REMOVED*** = require("../ModuleTypeConstants");
const UnsupportedFeatureWarning = require("../UnsupportedFeatureWarning");
const EnableChunkLoadingPlugin = require("../javascript/EnableChunkLoadingPlugin");
const { equals ***REMOVED*** = require("../util/ArrayHelpers");
const createHash = require("../util/createHash");
const { contextify ***REMOVED*** = require("../util/identifier");
const EnableWasmLoadingPlugin = require("../wasm/EnableWasmLoadingPlugin");
const ConstDependency = require("./ConstDependency");
const CreateScriptUrlDependency = require("./CreateScriptUrlDependency");
const {
	harmonySpecifierTag
***REMOVED*** = require("./HarmonyImportDependencyParserPlugin");
const WorkerDependency = require("./WorkerDependency");

/** @typedef {import("estree").CallExpression***REMOVED*** CallExpression */
/** @typedef {import("estree").Expression***REMOVED*** Expression */
/** @typedef {import("estree").Identifier***REMOVED*** Identifier */
/** @typedef {import("estree").MemberExpression***REMOVED*** MemberExpression */
/** @typedef {import("estree").ObjectExpression***REMOVED*** ObjectExpression */
/** @typedef {import("estree").Pattern***REMOVED*** Pattern */
/** @typedef {import("estree").Property***REMOVED*** Property */
/** @typedef {import("estree").SpreadElement***REMOVED*** SpreadElement */
/** @typedef {import("../../declarations/WebpackOptions").ChunkLoading***REMOVED*** ChunkLoading */
/** @typedef {import("../../declarations/WebpackOptions").HashFunction***REMOVED*** HashFunction */
/** @typedef {import("../../declarations/WebpackOptions").JavascriptParserOptions***REMOVED*** JavascriptParserOptions */
/** @typedef {import("../../declarations/WebpackOptions").OutputModule***REMOVED*** OutputModule */
/** @typedef {import("../../declarations/WebpackOptions").WasmLoading***REMOVED*** WasmLoading */
/** @typedef {import("../../declarations/WebpackOptions").WorkerPublicPath***REMOVED*** WorkerPublicPath */
/** @typedef {import("../Compiler")***REMOVED*** Compiler */
/** @typedef {import("../Dependency").DependencyLocation***REMOVED*** DependencyLocation */
/** @typedef {import("../Entrypoint").EntryOptions***REMOVED*** EntryOptions */
/** @typedef {import("../NormalModule")***REMOVED*** NormalModule */
/** @typedef {import("../Parser").ParserState***REMOVED*** ParserState */
/** @typedef {import("../javascript/BasicEvaluatedExpression")***REMOVED*** BasicEvaluatedExpression */
/** @typedef {import("../javascript/JavascriptParser")***REMOVED*** JavascriptParser */
/** @typedef {import("../javascript/JavascriptParser")***REMOVED*** Parser */
/** @typedef {import("../javascript/JavascriptParser").Range***REMOVED*** Range */
/** @typedef {import("./HarmonyImportDependencyParserPlugin").HarmonySettings***REMOVED*** HarmonySettings */

/**
 * @param {NormalModule***REMOVED*** module module
 * @returns {string***REMOVED*** url
 */
const getUrl = module => pathToFileURL(module.resource).toString();

const WorkerSpecifierTag = Symbol("worker specifier tag");

const DEFAULT_SYNTAX = [
	"Worker",
	"SharedWorker",
	"navigator.serviceWorker.register()",
	"Worker from worker_threads"
];

/** @type {WeakMap<ParserState, number>***REMOVED*** */
const workerIndexMap = new WeakMap();

const PLUGIN_NAME = "WorkerPlugin";

class WorkerPlugin {
	/**
	 * @param {ChunkLoading=***REMOVED*** chunkLoading chunk loading
	 * @param {WasmLoading=***REMOVED*** wasmLoading wasm loading
	 * @param {OutputModule=***REMOVED*** module output module
	 * @param {WorkerPublicPath=***REMOVED*** workerPublicPath worker public path
	 */
	constructor(chunkLoading, wasmLoading, module, workerPublicPath) {
		this._chunkLoading = chunkLoading;
		this._wasmLoading = wasmLoading;
		this._module = module;
		this._workerPublicPath = workerPublicPath;
	***REMOVED***

	/**
	 * Apply the plugin
	 * @param {Compiler***REMOVED*** compiler the compiler instance
	 * @returns {void***REMOVED***
	 */
	apply(compiler) {
		if (this._chunkLoading) {
			new EnableChunkLoadingPlugin(this._chunkLoading).apply(compiler);
		***REMOVED***
		if (this._wasmLoading) {
			new EnableWasmLoadingPlugin(this._wasmLoading).apply(compiler);
		***REMOVED***
		const cachedContextify = contextify.bindContextCache(
			compiler.context,
			compiler.root
		);
		compiler.hooks.thisCompilation.tap(
			PLUGIN_NAME,
			(compilation, { normalModuleFactory ***REMOVED***) => {
				compilation.dependencyFactories.set(
					WorkerDependency,
					normalModuleFactory
				);
				compilation.dependencyTemplates.set(
					WorkerDependency,
					new WorkerDependency.Template()
				);
				compilation.dependencyTemplates.set(
					CreateScriptUrlDependency,
					new CreateScriptUrlDependency.Template()
				);

				/**
				 * @param {JavascriptParser***REMOVED*** parser the parser
				 * @param {Expression***REMOVED*** expr expression
				 * @returns {[string, Range] | void***REMOVED*** parsed
				 */
				const parseModuleUrl = (parser, expr) => {
					if (expr.type !== "NewExpression" || expr.callee.type === "Super")
						return;
					if (
						expr.arguments.length === 1 &&
						expr.arguments[0].type === "MemberExpression" &&
						isMetaUrl(parser, expr.arguments[0])
					) {
						const arg1 = expr.arguments[0];
						return [
							getUrl(parser.state.module),
							[
								/** @type {Range***REMOVED*** */ (arg1.range)[0],
								/** @type {Range***REMOVED*** */ (arg1.range)[1]
							]
						];
					***REMOVED*** else if (expr.arguments.length === 2) {
						const [arg1, arg2] = expr.arguments;
						if (arg1.type === "SpreadElement") return;
						if (arg2.type === "SpreadElement") return;
						const callee = parser.evaluateExpression(expr.callee);
						if (!callee.isIdentifier() || callee.identifier !== "URL") return;
						const arg2Value = parser.evaluateExpression(arg2);
						if (
							!arg2Value.isString() ||
							!(
								/** @type {string***REMOVED*** */ (arg2Value.string).startsWith("file://")
							) ||
							arg2Value.string !== getUrl(parser.state.module)
						) {
							return;
						***REMOVED***
						const arg1Value = parser.evaluateExpression(arg1);
						if (!arg1Value.isString()) return;
						return [
							/** @type {string***REMOVED*** */ (arg1Value.string),
							[
								/** @type {Range***REMOVED*** */ (arg1.range)[0],
								/** @type {Range***REMOVED*** */ (arg2.range)[1]
							]
						];
					***REMOVED***
				***REMOVED***;

				/**
				 * @param {JavascriptParser***REMOVED*** parser the parser
				 * @param {MemberExpression***REMOVED*** expr expression
				 * @returns {boolean***REMOVED*** is `import.meta.url`
				 */
				const isMetaUrl = (parser, expr) => {
					const chain = parser.extractMemberExpressionChain(expr);

					if (
						chain.members.length !== 1 ||
						chain.object.type !== "MetaProperty" ||
						chain.object.meta.name !== "import" ||
						chain.object.property.name !== "meta" ||
						chain.members[0] !== "url"
					)
						return false;

					return true;
				***REMOVED***;

				/** @typedef {Record<string, EXPECTED_ANY>***REMOVED*** Values */

				/**
				 * @param {JavascriptParser***REMOVED*** parser the parser
				 * @param {ObjectExpression***REMOVED*** expr expression
				 * @returns {{ expressions: Record<string, Expression | Pattern>, otherElements: (Property | SpreadElement)[], values: Values, spread: boolean, insertType: "comma" | "single", insertLocation: number ***REMOVED******REMOVED*** parsed object
				 */
				const parseObjectExpression = (parser, expr) => {
					/** @type {Values***REMOVED*** */
					const values = {***REMOVED***;
					/** @type {Record<string, Expression | Pattern>***REMOVED*** */
					const expressions = {***REMOVED***;
					/** @type {(Property | SpreadElement)[]***REMOVED*** */
					const otherElements = [];
					let spread = false;
					for (const prop of expr.properties) {
						if (prop.type === "SpreadElement") {
							spread = true;
						***REMOVED*** else if (
							prop.type === "Property" &&
							!prop.method &&
							!prop.computed &&
							prop.key.type === "Identifier"
						) {
							expressions[prop.key.name] = prop.value;
							if (!prop.shorthand && !prop.value.type.endsWith("Pattern")) {
								const value = parser.evaluateExpression(
									/** @type {Expression***REMOVED*** */
									(prop.value)
								);
								if (value.isCompileTimeValue())
									values[prop.key.name] = value.asCompileTimeValue();
							***REMOVED***
						***REMOVED*** else {
							otherElements.push(prop);
						***REMOVED***
					***REMOVED***
					const insertType = expr.properties.length > 0 ? "comma" : "single";
					const insertLocation = /** @type {Range***REMOVED*** */ (
						expr.properties[expr.properties.length - 1].range
					)[1];
					return {
						expressions,
						otherElements,
						values,
						spread,
						insertType,
						insertLocation
					***REMOVED***;
				***REMOVED***;

				/**
				 * @param {Parser***REMOVED*** parser parser parser
				 * @param {JavascriptParserOptions***REMOVED*** parserOptions parserOptions
				 * @returns {void***REMOVED***
				 */
				const parserPlugin = (parser, parserOptions) => {
					if (parserOptions.worker === false) return;
					const options = !Array.isArray(parserOptions.worker)
						? ["..."]
						: parserOptions.worker;
					/**
					 * @param {CallExpression***REMOVED*** expr expression
					 * @returns {boolean | void***REMOVED*** true when handled
					 */
					const handleNewWorker = expr => {
						if (expr.arguments.length === 0 || expr.arguments.length > 2)
							return;
						const [arg1, arg2] = expr.arguments;
						if (arg1.type === "SpreadElement") return;
						if (arg2 && arg2.type === "SpreadElement") return;

						/** @type {string***REMOVED*** */
						let url;
						/** @type {Range***REMOVED*** */
						let range;
						/** @type {boolean***REMOVED*** */
						let needNewUrl = false;

						if (arg1.type === "MemberExpression" && isMetaUrl(parser, arg1)) {
							url = getUrl(parser.state.module);
							range = [
								/** @type {Range***REMOVED*** */ (arg1.range)[0],
								/** @type {Range***REMOVED*** */ (arg1.range)[1]
							];
							needNewUrl = true;
						***REMOVED*** else {
							const parsedUrl = parseModuleUrl(parser, arg1);
							if (!parsedUrl) return;
							[url, range] = parsedUrl;
						***REMOVED***

						const {
							expressions,
							otherElements,
							values: options,
							spread: hasSpreadInOptions,
							insertType,
							insertLocation
						***REMOVED*** = arg2 && arg2.type === "ObjectExpression"
							? parseObjectExpression(parser, arg2)
							: {
									/** @type {Record<string, Expression | Pattern>***REMOVED*** */
									expressions: {***REMOVED***,
									otherElements: [],
									/** @type {Values***REMOVED*** */
									values: {***REMOVED***,
									spread: false,
									insertType: arg2 ? "spread" : "argument",
									insertLocation: arg2
										? /** @type {Range***REMOVED*** */ (arg2.range)
										: /** @type {Range***REMOVED*** */ (arg1.range)[1]
								***REMOVED***;
						const { options: importOptions, errors: commentErrors ***REMOVED*** =
							parser.parseCommentOptions(/** @type {Range***REMOVED*** */ (expr.range));

						if (commentErrors) {
							for (const e of commentErrors) {
								const { comment ***REMOVED*** = e;
								parser.state.module.addWarning(
									new CommentCompilationWarning(
										`Compilation error while processing magic comment(-s): /*${comment.value***REMOVED****/: ${e.message***REMOVED***`,
										/** @type {DependencyLocation***REMOVED*** */ (comment.loc)
									)
								);
							***REMOVED***
						***REMOVED***

						/** @type {EntryOptions***REMOVED*** */
						const entryOptions = {***REMOVED***;

						if (importOptions) {
							if (importOptions.webpackIgnore !== undefined) {
								if (typeof importOptions.webpackIgnore !== "boolean") {
									parser.state.module.addWarning(
										new UnsupportedFeatureWarning(
											`\`webpackIgnore\` expected a boolean, but received: ${importOptions.webpackIgnore***REMOVED***.`,
											/** @type {DependencyLocation***REMOVED*** */ (expr.loc)
										)
									);
								***REMOVED*** else if (importOptions.webpackIgnore) {
									return false;
								***REMOVED***
							***REMOVED***
							if (importOptions.webpackEntryOptions !== undefined) {
								if (
									typeof importOptions.webpackEntryOptions !== "object" ||
									importOptions.webpackEntryOptions === null
								) {
									parser.state.module.addWarning(
										new UnsupportedFeatureWarning(
											`\`webpackEntryOptions\` expected a object, but received: ${importOptions.webpackEntryOptions***REMOVED***.`,
											/** @type {DependencyLocation***REMOVED*** */ (expr.loc)
										)
									);
								***REMOVED*** else {
									Object.assign(
										entryOptions,
										importOptions.webpackEntryOptions
									);
								***REMOVED***
							***REMOVED***
							if (importOptions.webpackChunkName !== undefined) {
								if (typeof importOptions.webpackChunkName !== "string") {
									parser.state.module.addWarning(
										new UnsupportedFeatureWarning(
											`\`webpackChunkName\` expected a string, but received: ${importOptions.webpackChunkName***REMOVED***.`,
											/** @type {DependencyLocation***REMOVED*** */ (expr.loc)
										)
									);
								***REMOVED*** else {
									entryOptions.name = importOptions.webpackChunkName;
								***REMOVED***
							***REMOVED***
						***REMOVED***

						if (
							!Object.prototype.hasOwnProperty.call(entryOptions, "name") &&
							options &&
							typeof options.name === "string"
						) {
							entryOptions.name = options.name;
						***REMOVED***

						if (entryOptions.runtime === undefined) {
							const i = workerIndexMap.get(parser.state) || 0;
							workerIndexMap.set(parser.state, i + 1);
							const name = `${cachedContextify(
								parser.state.module.identifier()
							)***REMOVED***|${i***REMOVED***`;
							const hash = createHash(
								/** @type {HashFunction***REMOVED*** */
								(compilation.outputOptions.hashFunction)
							);
							hash.update(name);
							const digest =
								/** @type {string***REMOVED*** */
								(hash.digest(compilation.outputOptions.hashDigest));
							entryOptions.runtime = digest.slice(
								0,
								compilation.outputOptions.hashDigestLength
							);
						***REMOVED***

						const block = new AsyncDependenciesBlock({
							name: entryOptions.name,
							entryOptions: {
								chunkLoading: this._chunkLoading,
								wasmLoading: this._wasmLoading,
								...entryOptions
							***REMOVED***
						***REMOVED***);
						block.loc = expr.loc;
						const dep = new WorkerDependency(url, range, {
							publicPath: this._workerPublicPath,
							needNewUrl
						***REMOVED***);
						dep.loc = /** @type {DependencyLocation***REMOVED*** */ (expr.loc);
						block.addDependency(dep);
						parser.state.module.addBlock(block);

						if (compilation.outputOptions.trustedTypes) {
							const dep = new CreateScriptUrlDependency(
								/** @type {Range***REMOVED*** */ (expr.arguments[0].range)
							);
							dep.loc = /** @type {DependencyLocation***REMOVED*** */ (expr.loc);
							parser.state.module.addDependency(dep);
						***REMOVED***

						if (expressions.type) {
							const expr = expressions.type;
							if (options.type !== false) {
								const dep = new ConstDependency(
									this._module ? '"module"' : "undefined",
									/** @type {Range***REMOVED*** */ (expr.range)
								);
								dep.loc = /** @type {DependencyLocation***REMOVED*** */ (expr.loc);
								parser.state.module.addPresentationalDependency(dep);
								/** @type {EXPECTED_ANY***REMOVED*** */
								(expressions).type = undefined;
							***REMOVED***
						***REMOVED*** else if (insertType === "comma") {
							if (this._module || hasSpreadInOptions) {
								const dep = new ConstDependency(
									`, type: ${this._module ? '"module"' : "undefined"***REMOVED***`,
									insertLocation
								);
								dep.loc = /** @type {DependencyLocation***REMOVED*** */ (expr.loc);
								parser.state.module.addPresentationalDependency(dep);
							***REMOVED***
						***REMOVED*** else if (insertType === "spread") {
							const dep1 = new ConstDependency(
								"Object.assign({***REMOVED***, ",
								/** @type {Range***REMOVED*** */ (insertLocation)[0]
							);
							const dep2 = new ConstDependency(
								`, { type: ${this._module ? '"module"' : "undefined"***REMOVED*** ***REMOVED***)`,
								/** @type {Range***REMOVED*** */ (insertLocation)[1]
							);
							dep1.loc = /** @type {DependencyLocation***REMOVED*** */ (expr.loc);
							dep2.loc = /** @type {DependencyLocation***REMOVED*** */ (expr.loc);
							parser.state.module.addPresentationalDependency(dep1);
							parser.state.module.addPresentationalDependency(dep2);
						***REMOVED*** else if (insertType === "argument" && this._module) {
							const dep = new ConstDependency(
								', { type: "module" ***REMOVED***',
								insertLocation
							);
							dep.loc = /** @type {DependencyLocation***REMOVED*** */ (expr.loc);
							parser.state.module.addPresentationalDependency(dep);
						***REMOVED***

						parser.walkExpression(expr.callee);
						for (const key of Object.keys(expressions)) {
							if (expressions[key]) {
								if (expressions[key].type.endsWith("Pattern")) continue;
								parser.walkExpression(
									/** @type {Expression***REMOVED*** */
									(expressions[key])
								);
							***REMOVED***
						***REMOVED***
						for (const prop of otherElements) {
							parser.walkProperty(prop);
						***REMOVED***
						if (insertType === "spread") {
							parser.walkExpression(arg2);
						***REMOVED***

						return true;
					***REMOVED***;
					/**
					 * @param {string***REMOVED*** item item
					 */
					const processItem = item => {
						if (
							item.startsWith("*") &&
							item.includes(".") &&
							item.endsWith("()")
						) {
							const firstDot = item.indexOf(".");
							const pattern = item.slice(1, firstDot);
							const itemMembers = item.slice(firstDot + 1, -2);

							parser.hooks.preDeclarator.tap(PLUGIN_NAME, (decl, statement) => {
								if (decl.id.type === "Identifier" && decl.id.name === pattern) {
									parser.tagVariable(decl.id.name, WorkerSpecifierTag);
									return true;
								***REMOVED***
							***REMOVED***);
							parser.hooks.pattern.for(pattern).tap(PLUGIN_NAME, pattern => {
								parser.tagVariable(pattern.name, WorkerSpecifierTag);
								return true;
							***REMOVED***);
							parser.hooks.callMemberChain
								.for(WorkerSpecifierTag)
								.tap(PLUGIN_NAME, (expression, members) => {
									if (itemMembers !== members.join(".")) {
										return;
									***REMOVED***

									return handleNewWorker(expression);
								***REMOVED***);
						***REMOVED*** else if (item.endsWith("()")) {
							parser.hooks.call
								.for(item.slice(0, -2))
								.tap(PLUGIN_NAME, handleNewWorker);
						***REMOVED*** else {
							const match = /^(.+?)(\(\))?\s+from\s+(.+)$/.exec(item);
							if (match) {
								const ids = match[1].split(".");
								const call = match[2];
								const source = match[3];
								(call ? parser.hooks.call : parser.hooks.new)
									.for(harmonySpecifierTag)
									.tap(PLUGIN_NAME, expr => {
										const settings = /** @type {HarmonySettings***REMOVED*** */ (
											parser.currentTagData
										);
										if (
											!settings ||
											settings.source !== source ||
											!equals(settings.ids, ids)
										) {
											return;
										***REMOVED***
										return handleNewWorker(expr);
									***REMOVED***);
							***REMOVED*** else {
								parser.hooks.new.for(item).tap(PLUGIN_NAME, handleNewWorker);
							***REMOVED***
						***REMOVED***
					***REMOVED***;
					for (const item of options) {
						if (item === "...") {
							for (const itemFromDefault of DEFAULT_SYNTAX) {
								processItem(itemFromDefault);
							***REMOVED***
						***REMOVED*** else processItem(item);
					***REMOVED***
				***REMOVED***;
				normalModuleFactory.hooks.parser
					.for(JAVASCRIPT_MODULE_TYPE_AUTO)
					.tap(PLUGIN_NAME, parserPlugin);
				normalModuleFactory.hooks.parser
					.for(JAVASCRIPT_MODULE_TYPE_ESM)
					.tap(PLUGIN_NAME, parserPlugin);
			***REMOVED***
		);
	***REMOVED***
***REMOVED***
module.exports = WorkerPlugin;
