// Generated by LiveScript 1.6.0
var values, keys, pairsToObj, objToPairs, listsToObj, objToLists, empty, each, map, compact, filter, reject, partition, find;
values = function(object){
  var i$, x, results$ = [];
  for (i$ in object) {
    x = object[i$];
    results$.push(x);
  ***REMOVED***
  return results$;
***REMOVED***;
keys = function(object){
  var x, results$ = [];
  for (x in object) {
    results$.push(x);
  ***REMOVED***
  return results$;
***REMOVED***;
pairsToObj = function(object){
  var i$, len$, x, resultObj$ = {***REMOVED***;
  for (i$ = 0, len$ = object.length; i$ < len$; ++i$) {
    x = object[i$];
    resultObj$[x[0]] = x[1];
  ***REMOVED***
  return resultObj$;
***REMOVED***;
objToPairs = function(object){
  var key, value, results$ = [];
  for (key in object) {
    value = object[key];
    results$.push([key, value]);
  ***REMOVED***
  return results$;
***REMOVED***;
listsToObj = curry$(function(keys, values){
  var i$, len$, i, key, resultObj$ = {***REMOVED***;
  for (i$ = 0, len$ = keys.length; i$ < len$; ++i$) {
    i = i$;
    key = keys[i$];
    resultObj$[key] = values[i];
  ***REMOVED***
  return resultObj$;
***REMOVED***);
objToLists = function(object){
  var keys, values, key, value;
  keys = [];
  values = [];
  for (key in object) {
    value = object[key];
    keys.push(key);
    values.push(value);
  ***REMOVED***
  return [keys, values];
***REMOVED***;
empty = function(object){
  var x;
  for (x in object) {
    return false;
  ***REMOVED***
  return true;
***REMOVED***;
each = curry$(function(f, object){
  var i$, x;
  for (i$ in object) {
    x = object[i$];
    f(x);
  ***REMOVED***
  return object;
***REMOVED***);
map = curry$(function(f, object){
  var k, x, resultObj$ = {***REMOVED***;
  for (k in object) {
    x = object[k];
    resultObj$[k] = f(x);
  ***REMOVED***
  return resultObj$;
***REMOVED***);
compact = function(object){
  var k, x, resultObj$ = {***REMOVED***;
  for (k in object) {
    x = object[k];
    if (x) {
      resultObj$[k] = x;
    ***REMOVED***
  ***REMOVED***
  return resultObj$;
***REMOVED***;
filter = curry$(function(f, object){
  var k, x, resultObj$ = {***REMOVED***;
  for (k in object) {
    x = object[k];
    if (f(x)) {
      resultObj$[k] = x;
    ***REMOVED***
  ***REMOVED***
  return resultObj$;
***REMOVED***);
reject = curry$(function(f, object){
  var k, x, resultObj$ = {***REMOVED***;
  for (k in object) {
    x = object[k];
    if (!f(x)) {
      resultObj$[k] = x;
    ***REMOVED***
  ***REMOVED***
  return resultObj$;
***REMOVED***);
partition = curry$(function(f, object){
  var passed, failed, k, x;
  passed = {***REMOVED***;
  failed = {***REMOVED***;
  for (k in object) {
    x = object[k];
    (f(x) ? passed : failed)[k] = x;
  ***REMOVED***
  return [passed, failed];
***REMOVED***);
find = curry$(function(f, object){
  var i$, x;
  for (i$ in object) {
    x = object[i$];
    if (f(x)) {
      return x;
    ***REMOVED***
  ***REMOVED***
***REMOVED***);
module.exports = {
  values: values,
  keys: keys,
  pairsToObj: pairsToObj,
  objToPairs: objToPairs,
  listsToObj: listsToObj,
  objToLists: objToLists,
  empty: empty,
  each: each,
  map: map,
  filter: filter,
  compact: compact,
  reject: reject,
  partition: partition,
  find: find
***REMOVED***;
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    ***REMOVED*** : f;
  ***REMOVED***;
  return _curry();
***REMOVED***