/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const { RawSource ***REMOVED*** = require("webpack-sources");
const Module = require("./Module");
const { JS_TYPES ***REMOVED*** = require("./ModuleSourceTypesConstants");
const { JAVASCRIPT_MODULE_TYPE_DYNAMIC ***REMOVED*** = require("./ModuleTypeConstants");
const RuntimeGlobals = require("./RuntimeGlobals");
const makeSerializable = require("./util/makeSerializable");

/** @typedef {import("webpack-sources").Source***REMOVED*** Source */
/** @typedef {import("../declarations/WebpackOptions").WebpackOptionsNormalized***REMOVED*** WebpackOptions */
/** @typedef {import("./ChunkGraph")***REMOVED*** ChunkGraph */
/** @typedef {import("./Compilation")***REMOVED*** Compilation */
/** @typedef {import("./Dependency")***REMOVED*** Dependency */
/** @typedef {import("./Dependency").UpdateHashContext***REMOVED*** UpdateHashContext */
/** @typedef {import("./DependencyTemplates")***REMOVED*** DependencyTemplates */
/** @typedef {import("./Generator").SourceTypes***REMOVED*** SourceTypes */
/** @typedef {import("./Module").BuildCallback***REMOVED*** BuildCallback */
/** @typedef {import("./Module").CodeGenerationContext***REMOVED*** CodeGenerationContext */
/** @typedef {import("./Module").CodeGenerationResult***REMOVED*** CodeGenerationResult */
/** @typedef {import("./Module").NeedBuildCallback***REMOVED*** NeedBuildCallback */
/** @typedef {import("./Module").NeedBuildContext***REMOVED*** NeedBuildContext */
/** @typedef {import("./Module").SourceContext***REMOVED*** SourceContext */
/** @typedef {import("./RequestShortener")***REMOVED*** RequestShortener */
/** @typedef {import("./ResolverFactory").ResolverWithOptions***REMOVED*** ResolverWithOptions */
/** @typedef {import("./RuntimeTemplate")***REMOVED*** RuntimeTemplate */
/** @typedef {import("./WebpackError")***REMOVED*** WebpackError */
/** @typedef {import("./serialization/ObjectMiddleware").ObjectDeserializerContext***REMOVED*** ObjectDeserializerContext */
/** @typedef {import("./serialization/ObjectMiddleware").ObjectSerializerContext***REMOVED*** ObjectSerializerContext */
/** @typedef {import("./util/Hash")***REMOVED*** Hash */
/** @typedef {import("./util/fs").InputFileSystem***REMOVED*** InputFileSystem */

const RUNTIME_REQUIREMENTS = new Set([
	RuntimeGlobals.require,
	RuntimeGlobals.module
]);

class DllModule extends Module {
	/**
	 * @param {string***REMOVED*** context context path
	 * @param {Dependency[]***REMOVED*** dependencies dependencies
	 * @param {string***REMOVED*** name name
	 */
	constructor(context, dependencies, name) {
		super(JAVASCRIPT_MODULE_TYPE_DYNAMIC, context);

		// Info from Factory
		/** @type {Dependency[]***REMOVED*** */
		this.dependencies = dependencies;
		this.name = name;
	***REMOVED***

	/**
	 * @returns {SourceTypes***REMOVED*** types available (do not mutate)
	 */
	getSourceTypes() {
		return JS_TYPES;
	***REMOVED***

	/**
	 * @returns {string***REMOVED*** a unique identifier of the module
	 */
	identifier() {
		return `dll ${this.name***REMOVED***`;
	***REMOVED***

	/**
	 * @param {RequestShortener***REMOVED*** requestShortener the request shortener
	 * @returns {string***REMOVED*** a user readable identifier of the module
	 */
	readableIdentifier(requestShortener) {
		return `dll ${this.name***REMOVED***`;
	***REMOVED***

	/**
	 * @param {WebpackOptions***REMOVED*** options webpack options
	 * @param {Compilation***REMOVED*** compilation the compilation
	 * @param {ResolverWithOptions***REMOVED*** resolver the resolver
	 * @param {InputFileSystem***REMOVED*** fs the file system
	 * @param {BuildCallback***REMOVED*** callback callback function
	 * @returns {void***REMOVED***
	 */
	build(options, compilation, resolver, fs, callback) {
		this.buildMeta = {***REMOVED***;
		this.buildInfo = {***REMOVED***;
		return callback();
	***REMOVED***

	/**
	 * @param {CodeGenerationContext***REMOVED*** context context for code generation
	 * @returns {CodeGenerationResult***REMOVED*** result
	 */
	codeGeneration(context) {
		const sources = new Map();
		sources.set(
			"javascript",
			new RawSource(`module.exports = ${RuntimeGlobals.require***REMOVED***;`)
		);
		return {
			sources,
			runtimeRequirements: RUNTIME_REQUIREMENTS
		***REMOVED***;
	***REMOVED***

	/**
	 * @param {NeedBuildContext***REMOVED*** context context info
	 * @param {NeedBuildCallback***REMOVED*** callback callback function, returns true, if the module needs a rebuild
	 * @returns {void***REMOVED***
	 */
	needBuild(context, callback) {
		return callback(null, !this.buildMeta);
	***REMOVED***

	/**
	 * @param {string=***REMOVED*** type the source type for which the size should be estimated
	 * @returns {number***REMOVED*** the estimated size of the module (must be non-zero)
	 */
	size(type) {
		return 12;
	***REMOVED***

	/**
	 * @param {Hash***REMOVED*** hash the hash used to track dependencies
	 * @param {UpdateHashContext***REMOVED*** context context
	 * @returns {void***REMOVED***
	 */
	updateHash(hash, context) {
		hash.update(`dll module${this.name || ""***REMOVED***`);
		super.updateHash(hash, context);
	***REMOVED***

	/**
	 * @param {ObjectSerializerContext***REMOVED*** context context
	 */
	serialize(context) {
		context.write(this.name);
		super.serialize(context);
	***REMOVED***

	/**
	 * @param {ObjectDeserializerContext***REMOVED*** context context
	 */
	deserialize(context) {
		this.name = context.read();
		super.deserialize(context);
	***REMOVED***

	/**
	 * Assuming this module is in the cache. Update the (cached) module with
	 * the fresh module from the factory. Usually updates internal references
	 * and properties.
	 * @param {Module***REMOVED*** module fresh module
	 * @returns {void***REMOVED***
	 */
	updateCacheModule(module) {
		super.updateCacheModule(module);
		this.dependencies = module.dependencies;
	***REMOVED***

	/**
	 * Assuming this module is in the cache. Remove internal references to allow freeing some memory.
	 */
	cleanupForCache() {
		super.cleanupForCache();
		this.dependencies = /** @type {EXPECTED_ANY***REMOVED*** */ (undefined);
	***REMOVED***
***REMOVED***

makeSerializable(DllModule, "webpack/lib/DllModule");

module.exports = DllModule;
