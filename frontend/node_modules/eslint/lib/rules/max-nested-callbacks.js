/**
 * @fileoverview Rule to enforce a maximum number of nested callbacks.
 * @author Ian Christian Myers
 */

"use strict";

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

/** @type {import('../types').Rule.RuleModule***REMOVED*** */
module.exports = {
	meta: {
		type: "suggestion",

		docs: {
			description: "Enforce a maximum depth that callbacks can be nested",
			recommended: false,
			url: "https://eslint.org/docs/latest/rules/max-nested-callbacks",
		***REMOVED***,

		schema: [
			{
				oneOf: [
					{
						type: "integer",
						minimum: 0,
					***REMOVED***,
					{
						type: "object",
						properties: {
							maximum: {
								type: "integer",
								minimum: 0,
							***REMOVED***,
							max: {
								type: "integer",
								minimum: 0,
							***REMOVED***,
						***REMOVED***,
						additionalProperties: false,
					***REMOVED***,
				],
			***REMOVED***,
		],
		messages: {
			exceed: "Too many nested callbacks ({{num***REMOVED******REMOVED***). Maximum allowed is {{max***REMOVED******REMOVED***.",
		***REMOVED***,
	***REMOVED***,

	create(context) {
		//--------------------------------------------------------------------------
		// Constants
		//--------------------------------------------------------------------------
		const option = context.options[0];
		let THRESHOLD = 10;

		if (
			typeof option === "object" &&
			(Object.hasOwn(option, "maximum") || Object.hasOwn(option, "max"))
		) {
			THRESHOLD = option.maximum || option.max;
		***REMOVED*** else if (typeof option === "number") {
			THRESHOLD = option;
		***REMOVED***

		//--------------------------------------------------------------------------
		// Helpers
		//--------------------------------------------------------------------------

		const callbackStack = [];

		/**
		 * Checks a given function node for too many callbacks.
		 * @param {ASTNode***REMOVED*** node The node to check.
		 * @returns {void***REMOVED***
		 * @private
		 */
		function checkFunction(node) {
			const parent = node.parent;

			if (parent.type === "CallExpression") {
				callbackStack.push(node);
			***REMOVED***

			if (callbackStack.length > THRESHOLD) {
				const opts = { num: callbackStack.length, max: THRESHOLD ***REMOVED***;

				context.report({ node, messageId: "exceed", data: opts ***REMOVED***);
			***REMOVED***
		***REMOVED***

		/**
		 * Pops the call stack.
		 * @returns {void***REMOVED***
		 * @private
		 */
		function popStack() {
			callbackStack.pop();
		***REMOVED***

		//--------------------------------------------------------------------------
		// Public API
		//--------------------------------------------------------------------------

		return {
			ArrowFunctionExpression: checkFunction,
			"ArrowFunctionExpression:exit": popStack,

			FunctionExpression: checkFunction,
			"FunctionExpression:exit": popStack,
		***REMOVED***;
	***REMOVED***,
***REMOVED***;
