'use strict';
/**
 * @typedef {object***REMOVED*** Plugin
 * @prop {Set<string>***REMOVED*** targets
 * @prop {Set<string>***REMOVED*** nodeTypes
 * @prop {(node: import('postcss').Node) => void***REMOVED*** detectAndResolve
 * @prop {(node: import('postcss').Node) => void***REMOVED*** detectAndWarn
 */

/** 
 * @typedef {import('postcss').Node & {_stylehacks: {
                                          message: string, 
                                          browsers: Set<string>, 
                                          identifier: string, 
                                          hack: string ***REMOVED******REMOVED******REMOVED*** NodeWithInfo
 */

module.exports = class BasePlugin {
  /**
   * @param {string[]***REMOVED*** targets
   * @param {string[]***REMOVED*** nodeTypes
   * @param {import('postcss').Result=***REMOVED*** result
   */
  constructor(targets, nodeTypes, result) {
    /** @type {NodeWithInfo[]***REMOVED*** */
    this.nodes = [];
    this.targets = new Set(targets);
    this.nodeTypes = new Set(nodeTypes);
    this.result = result;
  ***REMOVED***

  /**
   * @param {import('postcss').Node***REMOVED*** node
   * @param {{identifier: string, hack: string***REMOVED******REMOVED*** metadata
   * @return {void***REMOVED***
   */
  push(node, metadata) {
    /** @type {NodeWithInfo***REMOVED*** */ (node)._stylehacks = Object.assign(
      {***REMOVED***,
      metadata,
      {
        message: `Bad ${metadata.identifier***REMOVED***: ${metadata.hack***REMOVED***`,
        browsers: this.targets,
      ***REMOVED***
    );

    this.nodes.push(/** @type {NodeWithInfo***REMOVED*** */ (node));
  ***REMOVED***

  /**
   * @param {import('postcss').Node***REMOVED*** node
   * @return {boolean***REMOVED***
   */
  any(node) {
    if (this.nodeTypes.has(node.type)) {
      this.detect(node);

      return /** @type {NodeWithInfo***REMOVED*** */ (node)._stylehacks !== undefined;
    ***REMOVED***

    return false;
  ***REMOVED***

  /**
   * @param {import('postcss').Node***REMOVED*** node
   * @return {void***REMOVED***
   */
  detectAndResolve(node) {
    this.nodes = [];

    this.detect(node);

    return this.resolve();
  ***REMOVED***

  /**
   * @param {import('postcss').Node***REMOVED*** node
   * @return {void***REMOVED***
   */
  detectAndWarn(node) {
    this.nodes = [];

    this.detect(node);

    return this.warn();
  ***REMOVED***
  /** @param {import('postcss').Node***REMOVED*** node */
  // eslint-disable-next-line no-unused-vars
  detect(node) {
    throw new Error('You need to implement this method in a subclass.');
  ***REMOVED***

  /** @return {void***REMOVED*** */
  resolve() {
    return this.nodes.forEach((node) => node.remove());
  ***REMOVED***

  warn() {
    return this.nodes.forEach((node) => {
      const { message, browsers, identifier, hack ***REMOVED*** = node._stylehacks;

      return node.warn(
        /** @type {import('postcss').Result***REMOVED*** */ (this.result),
        message + JSON.stringify({ browsers, identifier, hack ***REMOVED***)
      );
    ***REMOVED***);
  ***REMOVED***
***REMOVED***;
