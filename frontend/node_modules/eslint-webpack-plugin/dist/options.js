"use strict";

const {
  validate
***REMOVED*** = require('schema-utils');

const schema = require('./options.json');
/** @typedef {import("eslint").ESLint.Options***REMOVED*** ESLintOptions */

/** @typedef {import('eslint').ESLint.LintResult***REMOVED*** LintResult */

/** @typedef {import('eslint').ESLint.LintResultData***REMOVED*** LintResultData */

/**
 * @callback FormatterFunction
 * @param {LintResult[]***REMOVED*** results
 * @param {LintResultData=***REMOVED*** data
 * @returns {string***REMOVED***
 */

/**
 * @typedef {Object***REMOVED*** OutputReport
 * @property {string=***REMOVED*** filePath
 * @property {string|FormatterFunction=***REMOVED*** formatter
 */

/**
 * @typedef {Object***REMOVED*** PluginOptions
 * @property {string=***REMOVED*** context
 * @property {boolean=***REMOVED*** emitError
 * @property {boolean=***REMOVED*** emitWarning
 * @property {string=***REMOVED*** eslintPath
 * @property {string|string[]=***REMOVED*** exclude
 * @property {string|string[]=***REMOVED*** extensions
 * @property {boolean=***REMOVED*** failOnError
 * @property {boolean=***REMOVED*** failOnWarning
 * @property {string|string[]=***REMOVED*** files
 * @property {boolean=***REMOVED*** fix
 * @property {string|FormatterFunction=***REMOVED*** formatter
 * @property {boolean=***REMOVED*** lintDirtyModulesOnly
 * @property {boolean=***REMOVED*** quiet
 * @property {OutputReport=***REMOVED*** outputReport
 * @property {number|boolean=***REMOVED*** threads
 * @property {RegExp|RegExp[]=***REMOVED*** resourceQueryExclude
 */

/** @typedef {PluginOptions & ESLintOptions***REMOVED*** Options */

/**
 * @param {Options***REMOVED*** pluginOptions
 * @returns {PluginOptions***REMOVED***
 */


function getOptions(pluginOptions) {
  const options = {
    extensions: 'js',
    emitError: true,
    emitWarning: true,
    failOnError: true,
    resourceQueryExclude: [],
    ...pluginOptions,
    ...(pluginOptions.quiet ? {
      emitError: true,
      emitWarning: false
    ***REMOVED*** : {***REMOVED***)
  ***REMOVED***; // @ts-ignore

  validate(schema, options, {
    name: 'ESLint Webpack Plugin',
    baseDataPath: 'options'
  ***REMOVED***);
  return options;
***REMOVED***
/**
 * @param {Options***REMOVED*** loaderOptions
 * @returns {ESLintOptions***REMOVED***
 */


function getESLintOptions(loaderOptions) {
  const eslintOptions = { ...loaderOptions
  ***REMOVED***; // Keep the fix option because it is common to both the loader and ESLint.

  const {
    fix,
    extensions,
    ...eslintOnlyOptions
  ***REMOVED*** = schema.properties; // No need to guard the for-in because schema.properties has hardcoded keys.
  // eslint-disable-next-line guard-for-in

  for (const option in eslintOnlyOptions) {
    // @ts-ignore
    delete eslintOptions[option];
  ***REMOVED***

  return eslintOptions;
***REMOVED***

module.exports = {
  getOptions,
  getESLintOptions
***REMOVED***;