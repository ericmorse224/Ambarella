/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const HarmonyImportDependency = require("../dependencies/HarmonyImportDependency");

/** @typedef {import("../Compiler")***REMOVED*** Compiler */
/** @typedef {import("../Module")***REMOVED*** Module */

const PLUGIN_NAME = "InferAsyncModulesPlugin";

class InferAsyncModulesPlugin {
	/**
	 * Apply the plugin
	 * @param {Compiler***REMOVED*** compiler the compiler instance
	 * @returns {void***REMOVED***
	 */
	apply(compiler) {
		compiler.hooks.compilation.tap(PLUGIN_NAME, compilation => {
			const { moduleGraph ***REMOVED*** = compilation;
			compilation.hooks.finishModules.tap(PLUGIN_NAME, modules => {
				/** @type {Set<Module>***REMOVED*** */
				const queue = new Set();
				for (const module of modules) {
					if (module.buildMeta && module.buildMeta.async) {
						queue.add(module);
					***REMOVED***
				***REMOVED***
				for (const module of queue) {
					moduleGraph.setAsync(module);
					for (const [
						originModule,
						connections
					] of moduleGraph.getIncomingConnectionsByOriginModule(module)) {
						if (
							connections.some(
								c =>
									c.dependency instanceof HarmonyImportDependency &&
									c.isTargetActive(undefined)
							)
						) {
							queue.add(/** @type {Module***REMOVED*** */ (originModule));
						***REMOVED***
					***REMOVED***
				***REMOVED***
			***REMOVED***);
		***REMOVED***);
	***REMOVED***
***REMOVED***

module.exports = InferAsyncModulesPlugin;
