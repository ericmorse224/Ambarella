/**
 * @fileoverview Restrict usage of specified globals.
 * @author BenoÃ®t Zugmeyer
 */
"use strict";

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = {
    meta: {
        type: "suggestion",

        docs: {
            description: "disallow specified global variables",
            category: "Variables",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-restricted-globals"
        ***REMOVED***,

        schema: {
            type: "array",
            items: {
                oneOf: [
                    {
                        type: "string"
                    ***REMOVED***,
                    {
                        type: "object",
                        properties: {
                            name: { type: "string" ***REMOVED***,
                            message: { type: "string" ***REMOVED***
                        ***REMOVED***,
                        required: ["name"],
                        additionalProperties: false
                    ***REMOVED***
                ]
            ***REMOVED***,
            uniqueItems: true,
            minItems: 0
        ***REMOVED***,

        messages: {
            defaultMessage: "Unexpected use of '{{name***REMOVED******REMOVED***'.",
            // eslint-disable-next-line eslint-plugin/report-message-format
            customMessage: "Unexpected use of '{{name***REMOVED******REMOVED***'. {{customMessage***REMOVED******REMOVED***"
        ***REMOVED***
    ***REMOVED***,

    create(context) {

        // If no globals are restricted, we don't need to do anything
        if (context.options.length === 0) {
            return {***REMOVED***;
        ***REMOVED***

        const restrictedGlobalMessages = context.options.reduce((memo, option) => {
            if (typeof option === "string") {
                memo[option] = null;
            ***REMOVED*** else {
                memo[option.name] = option.message;
            ***REMOVED***

            return memo;
        ***REMOVED***, {***REMOVED***);

        /**
         * Report a variable to be used as a restricted global.
         * @param {Reference***REMOVED*** reference the variable reference
         * @returns {void***REMOVED***
         * @private
         */
        function reportReference(reference) {
            const name = reference.identifier.name,
                customMessage = restrictedGlobalMessages[name],
                messageId = customMessage
                    ? "customMessage"
                    : "defaultMessage";

            context.report({
                node: reference.identifier,
                messageId,
                data: {
                    name,
                    customMessage
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***

        /**
         * Check if the given name is a restricted global name.
         * @param {string***REMOVED*** name name of a variable
         * @returns {boolean***REMOVED*** whether the variable is a restricted global or not
         * @private
         */
        function isRestricted(name) {
            return Object.prototype.hasOwnProperty.call(restrictedGlobalMessages, name);
        ***REMOVED***

        return {
            Program() {
                const scope = context.getScope();

                // Report variables declared elsewhere (ex: variables defined as "global" by eslint)
                scope.variables.forEach(variable => {
                    if (!variable.defs.length && isRestricted(variable.name)) {
                        variable.references.forEach(reportReference);
                    ***REMOVED***
                ***REMOVED***);

                // Report variables not declared at all
                scope.through.forEach(reference => {
                    if (isRestricted(reference.identifier.name)) {
                        reportReference(reference);
                    ***REMOVED***
                ***REMOVED***);

            ***REMOVED***
        ***REMOVED***;
    ***REMOVED***
***REMOVED***;
