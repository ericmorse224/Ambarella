/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const { register ***REMOVED*** = require("../util/serialization");

/** @typedef {import("../serialization/ObjectMiddleware").ObjectDeserializerContext***REMOVED*** ObjectDeserializerContext */
/** @typedef {import("../serialization/ObjectMiddleware").ObjectSerializerContext***REMOVED*** ObjectSerializerContext */
/** @typedef {import("../util/Hash")***REMOVED*** Hash */
/** @typedef {import("./JsonModulesPlugin").JsonValue***REMOVED*** JsonValue */

class JsonData {
	/**
	 * @param {Buffer | JsonValue***REMOVED*** data JSON data
	 */
	constructor(data) {
		/** @type {Buffer | undefined***REMOVED*** */
		this._buffer = undefined;
		/** @type {JsonValue | undefined***REMOVED*** */
		this._data = undefined;
		if (Buffer.isBuffer(data)) {
			this._buffer = data;
		***REMOVED*** else {
			this._data = data;
		***REMOVED***
	***REMOVED***

	/**
	 * @returns {JsonValue | undefined***REMOVED*** Raw JSON data
	 */
	get() {
		if (this._data === undefined && this._buffer !== undefined) {
			this._data = JSON.parse(this._buffer.toString());
		***REMOVED***
		return this._data;
	***REMOVED***

	/**
	 * @param {Hash***REMOVED*** hash hash to be updated
	 * @returns {void***REMOVED*** the updated hash
	 */
	updateHash(hash) {
		if (this._buffer === undefined && this._data !== undefined) {
			this._buffer = Buffer.from(JSON.stringify(this._data));
		***REMOVED***

		if (this._buffer) hash.update(this._buffer);
	***REMOVED***
***REMOVED***

register(JsonData, "webpack/lib/json/JsonData", null, {
	/**
	 * @param {JsonData***REMOVED*** obj JSONData object
	 * @param {ObjectSerializerContext***REMOVED*** context context
	 */
	serialize(obj, { write ***REMOVED***) {
		if (obj._buffer === undefined && obj._data !== undefined) {
			obj._buffer = Buffer.from(JSON.stringify(obj._data));
		***REMOVED***
		write(obj._buffer);
	***REMOVED***,
	/**
	 * @param {ObjectDeserializerContext***REMOVED*** context context
	 * @returns {JsonData***REMOVED*** deserialized JSON data
	 */
	deserialize({ read ***REMOVED***) {
		return new JsonData(read());
	***REMOVED***
***REMOVED***);

module.exports = JsonData;
