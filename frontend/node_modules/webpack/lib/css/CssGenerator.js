/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Sergey Melyukov @smelukov
*/

"use strict";

const { ReplaceSource, RawSource, ConcatSource ***REMOVED*** = require("webpack-sources");
const { UsageState ***REMOVED*** = require("../ExportsInfo");
const Generator = require("../Generator");
const InitFragment = require("../InitFragment");
const {
	JS_AND_CSS_EXPORT_TYPES,
	JS_AND_CSS_TYPES,
	CSS_TYPES,
	JS_TYPE,
	CSS_TYPE
***REMOVED*** = require("../ModuleSourceTypesConstants");
const RuntimeGlobals = require("../RuntimeGlobals");
const Template = require("../Template");

/** @typedef {import("webpack-sources").Source***REMOVED*** Source */
/** @typedef {import("../../declarations/WebpackOptions").CssAutoGeneratorOptions***REMOVED*** CssAutoGeneratorOptions */
/** @typedef {import("../../declarations/WebpackOptions").CssGlobalGeneratorOptions***REMOVED*** CssGlobalGeneratorOptions */
/** @typedef {import("../../declarations/WebpackOptions").CssModuleGeneratorOptions***REMOVED*** CssModuleGeneratorOptions */
/** @typedef {import("../CodeGenerationResults")***REMOVED*** CodeGenerationResults */
/** @typedef {import("../Dependency")***REMOVED*** Dependency */
/** @typedef {import("../DependencyTemplate").CssData***REMOVED*** CssData */
/** @typedef {import("../DependencyTemplate").CssDependencyTemplateContext***REMOVED*** DependencyTemplateContext */
/** @typedef {import("../Generator").GenerateContext***REMOVED*** GenerateContext */
/** @typedef {import("../Generator").UpdateHashContext***REMOVED*** UpdateHashContext */
/** @typedef {import("../Module").BuildInfo***REMOVED*** BuildInfo */
/** @typedef {import("../Module").BuildMeta***REMOVED*** BuildMeta */
/** @typedef {import("../Module").ConcatenationBailoutReasonContext***REMOVED*** ConcatenationBailoutReasonContext */
/** @typedef {import("../Module").SourceTypes***REMOVED*** SourceTypes */
/** @typedef {import("../ModuleGraph")***REMOVED*** ModuleGraph */
/** @typedef {import("../NormalModule")***REMOVED*** NormalModule */
/** @typedef {import("../util/Hash")***REMOVED*** Hash */

class CssGenerator extends Generator {
	/**
	 * @param {CssAutoGeneratorOptions | CssGlobalGeneratorOptions | CssModuleGeneratorOptions***REMOVED*** options options
	 * @param {ModuleGraph***REMOVED*** moduleGraph the module graph
	 */
	constructor(options, moduleGraph) {
		super();
		this.convention = options.exportsConvention;
		this.localIdentName = options.localIdentName;
		this.exportsOnly = options.exportsOnly;
		this.esModule = options.esModule;
		this._moduleGraph = moduleGraph;
	***REMOVED***

	/**
	 * @param {NormalModule***REMOVED*** module module for which the bailout reason should be determined
	 * @param {ConcatenationBailoutReasonContext***REMOVED*** context context
	 * @returns {string | undefined***REMOVED*** reason why this module can't be concatenated, undefined when it can be concatenated
	 */
	getConcatenationBailoutReason(module, context) {
		if (!this.esModule) {
			return "Module is not an ECMAScript module";
		***REMOVED***

		return undefined;
	***REMOVED***

	/**
	 * @param {NormalModule***REMOVED*** module module for which the code should be generated
	 * @param {GenerateContext***REMOVED*** generateContext context for generate
	 * @returns {Source | null***REMOVED*** generated code
	 */
	generate(module, generateContext) {
		const source =
			generateContext.type === "javascript"
				? new ReplaceSource(new RawSource(""))
				: new ReplaceSource(/** @type {Source***REMOVED*** */ (module.originalSource()));

		/** @type {InitFragment<GenerateContext>[]***REMOVED*** */
		const initFragments = [];
		/** @type {CssData***REMOVED*** */
		const cssData = {
			esModule: /** @type {boolean***REMOVED*** */ (this.esModule),
			exports: new Map()
		***REMOVED***;

		/** @type {InitFragment<GenerateContext>[] | undefined***REMOVED*** */
		let chunkInitFragments;
		/** @type {DependencyTemplateContext***REMOVED*** */
		const templateContext = {
			runtimeTemplate: generateContext.runtimeTemplate,
			dependencyTemplates: generateContext.dependencyTemplates,
			moduleGraph: generateContext.moduleGraph,
			chunkGraph: generateContext.chunkGraph,
			module,
			runtime: generateContext.runtime,
			runtimeRequirements: generateContext.runtimeRequirements,
			concatenationScope: generateContext.concatenationScope,
			codeGenerationResults:
				/** @type {CodeGenerationResults***REMOVED*** */
				(generateContext.codeGenerationResults),
			initFragments,
			cssData,
			get chunkInitFragments() {
				if (!chunkInitFragments) {
					const data =
						/** @type {NonNullable<GenerateContext["getData"]>***REMOVED*** */
						(generateContext.getData)();
					chunkInitFragments = data.get("chunkInitFragments");
					if (!chunkInitFragments) {
						chunkInitFragments = [];
						data.set("chunkInitFragments", chunkInitFragments);
					***REMOVED***
				***REMOVED***

				return chunkInitFragments;
			***REMOVED***
		***REMOVED***;

		/**
		 * @param {Dependency***REMOVED*** dependency dependency
		 */
		const handleDependency = dependency => {
			const constructor =
				/** @type {new (...args: EXPECTED_ANY[]) => Dependency***REMOVED*** */
				(dependency.constructor);
			const template = generateContext.dependencyTemplates.get(constructor);
			if (!template) {
				throw new Error(
					`No template for dependency: ${dependency.constructor.name***REMOVED***`
				);
			***REMOVED***

			template.apply(dependency, source, templateContext);
		***REMOVED***;

		for (const dependency of module.dependencies) {
			handleDependency(dependency);
		***REMOVED***

		switch (generateContext.type) {
			case "javascript": {
				/** @type {BuildInfo***REMOVED*** */
				(module.buildInfo).cssData = cssData;

				generateContext.runtimeRequirements.add(RuntimeGlobals.module);

				if (generateContext.concatenationScope) {
					const source = new ConcatSource();
					const usedIdentifiers = new Set();
					for (const [name, v] of cssData.exports) {
						const usedName = generateContext.moduleGraph
							.getExportInfo(module, name)
							.getUsedName(name, generateContext.runtime);
						if (!usedName) {
							continue;
						***REMOVED***
						let identifier = Template.toIdentifier(usedName);
						const { RESERVED_IDENTIFIER ***REMOVED*** = require("../util/propertyName");
						if (RESERVED_IDENTIFIER.has(identifier)) {
							identifier = `_${identifier***REMOVED***`;
						***REMOVED***
						const i = 0;
						while (usedIdentifiers.has(identifier)) {
							identifier = Template.toIdentifier(name + i);
						***REMOVED***
						usedIdentifiers.add(identifier);
						generateContext.concatenationScope.registerExport(name, identifier);
						source.add(
							`${
								generateContext.runtimeTemplate.supportsConst()
									? "const"
									: "var"
							***REMOVED*** ${identifier***REMOVED*** = ${JSON.stringify(v)***REMOVED***;\n`
						);
					***REMOVED***
					return source;
				***REMOVED***

				if (
					cssData.exports.size === 0 &&
					!(/** @type {BuildMeta***REMOVED*** */ (module.buildMeta).isCSSModule)
				) {
					return new RawSource("");
				***REMOVED***

				const needNsObj =
					this.esModule &&
					generateContext.moduleGraph
						.getExportsInfo(module)
						.otherExportsInfo.getUsed(generateContext.runtime) !==
						UsageState.Unused;

				if (needNsObj) {
					generateContext.runtimeRequirements.add(
						RuntimeGlobals.makeNamespaceObject
					);
				***REMOVED***

				const exports = [];

				for (const [name, v] of cssData.exports) {
					exports.push(`\t${JSON.stringify(name)***REMOVED***: ${JSON.stringify(v)***REMOVED***`);
				***REMOVED***

				return new RawSource(
					`${needNsObj ? `${RuntimeGlobals.makeNamespaceObject***REMOVED***(` : ""***REMOVED***${
						module.moduleArgument
					***REMOVED***.exports = {\n${exports.join(",\n")***REMOVED***\n***REMOVED***${needNsObj ? ")" : ""***REMOVED***;`
				);
			***REMOVED***
			case "css": {
				if (module.presentationalDependencies !== undefined) {
					for (const dependency of module.presentationalDependencies) {
						handleDependency(dependency);
					***REMOVED***
				***REMOVED***

				generateContext.runtimeRequirements.add(RuntimeGlobals.hasCssModules);

				return InitFragment.addToSource(source, initFragments, generateContext);
			***REMOVED***
			default:
				return null;
		***REMOVED***
	***REMOVED***

	/**
	 * @param {Error***REMOVED*** error the error
	 * @param {NormalModule***REMOVED*** module module for which the code should be generated
	 * @param {GenerateContext***REMOVED*** generateContext context for generate
	 * @returns {Source | null***REMOVED*** generated code
	 */
	generateError(error, module, generateContext) {
		switch (generateContext.type) {
			case "javascript": {
				return new RawSource(
					`throw new Error(${JSON.stringify(error.message)***REMOVED***);`
				);
			***REMOVED***
			case "css": {
				return new RawSource(`/**\n ${error.message***REMOVED*** \n**/`);
			***REMOVED***
			default:
				return null;
		***REMOVED***
	***REMOVED***

	/**
	 * @param {NormalModule***REMOVED*** module fresh module
	 * @returns {SourceTypes***REMOVED*** available types (do not mutate)
	 */
	getTypes(module) {
		// TODO, find a better way to prevent the original module from being removed after concatenation, maybe it is a bug
		if (this.exportsOnly) {
			return JS_AND_CSS_EXPORT_TYPES;
		***REMOVED***
		const sourceTypes = new Set();
		const connections = this._moduleGraph.getIncomingConnections(module);
		for (const connection of connections) {
			if (!connection.originModule) {
				continue;
			***REMOVED***
			if (connection.originModule.type.split("/")[0] !== CSS_TYPE)
				sourceTypes.add(JS_TYPE);
		***REMOVED***
		if (sourceTypes.has(JS_TYPE)) {
			return JS_AND_CSS_TYPES;
		***REMOVED***
		return CSS_TYPES;
	***REMOVED***

	/**
	 * @param {NormalModule***REMOVED*** module the module
	 * @param {string=***REMOVED*** type source type
	 * @returns {number***REMOVED*** estimate size of the module
	 */
	getSize(module, type) {
		switch (type) {
			case "javascript": {
				const cssData = /** @type {BuildInfo***REMOVED*** */ (module.buildInfo).cssData;
				if (!cssData) {
					return 42;
				***REMOVED***
				if (cssData.exports.size === 0) {
					if (/** @type {BuildMeta***REMOVED*** */ (module.buildMeta).isCSSModule) {
						return 42;
					***REMOVED***
					return 0;
				***REMOVED***
				const exports = cssData.exports;
				const stringifiedExports = JSON.stringify(
					Array.from(exports).reduce((obj, [key, value]) => {
						obj[key] = value;
						return obj;
					***REMOVED***, /** @type {Record<string, string>***REMOVED*** */ ({***REMOVED***))
				);

				return stringifiedExports.length + 42;
			***REMOVED***
			case "css": {
				const originalSource = module.originalSource();

				if (!originalSource) {
					return 0;
				***REMOVED***

				return originalSource.size();
			***REMOVED***
			default:
				return 0;
		***REMOVED***
	***REMOVED***

	/**
	 * @param {Hash***REMOVED*** hash hash that will be modified
	 * @param {UpdateHashContext***REMOVED*** updateHashContext context for updating hash
	 */
	updateHash(hash, { module ***REMOVED***) {
		hash.update(/** @type {boolean***REMOVED*** */ (this.esModule).toString());
	***REMOVED***
***REMOVED***

module.exports = CssGenerator;
