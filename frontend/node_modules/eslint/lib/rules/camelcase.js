/**
 * @fileoverview Rule to flag non-camelcased identifiers
 * @author Nicholas C. Zakas
 */

"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const astUtils = require("./utils/ast-utils");

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

/** @type {import('../types').Rule.RuleModule***REMOVED*** */
module.exports = {
	meta: {
		type: "suggestion",

		defaultOptions: [
			{
				allow: [],
				ignoreDestructuring: false,
				ignoreGlobals: false,
				ignoreImports: false,
				properties: "always",
			***REMOVED***,
		],

		docs: {
			description: "Enforce camelcase naming convention",
			recommended: false,
			frozen: true,
			url: "https://eslint.org/docs/latest/rules/camelcase",
		***REMOVED***,

		schema: [
			{
				type: "object",
				properties: {
					ignoreDestructuring: {
						type: "boolean",
					***REMOVED***,
					ignoreImports: {
						type: "boolean",
					***REMOVED***,
					ignoreGlobals: {
						type: "boolean",
					***REMOVED***,
					properties: {
						enum: ["always", "never"],
					***REMOVED***,
					allow: {
						type: "array",
						items: {
							type: "string",
						***REMOVED***,
						minItems: 0,
						uniqueItems: true,
					***REMOVED***,
				***REMOVED***,
				additionalProperties: false,
			***REMOVED***,
		],

		messages: {
			notCamelCase: "Identifier '{{name***REMOVED******REMOVED***' is not in camel case.",
			notCamelCasePrivate: "#{{name***REMOVED******REMOVED*** is not in camel case.",
		***REMOVED***,
	***REMOVED***,

	create(context) {
		const [
			{
				allow,
				ignoreDestructuring,
				ignoreGlobals,
				ignoreImports,
				properties,
			***REMOVED***,
		] = context.options;
		const sourceCode = context.sourceCode;

		//--------------------------------------------------------------------------
		// Helpers
		//--------------------------------------------------------------------------

		// contains reported nodes to avoid reporting twice on destructuring with shorthand notation
		const reported = new Set();

		/**
		 * Checks if a string contains an underscore and isn't all upper-case
		 * @param {string***REMOVED*** name The string to check.
		 * @returns {boolean***REMOVED*** if the string is underscored
		 * @private
		 */
		function isUnderscored(name) {
			const nameBody = name.replace(/^_+|_+$/gu, "");

			// if there's an underscore, it might be A_CONSTANT, which is okay
			return (
				nameBody.includes("_") && nameBody !== nameBody.toUpperCase()
			);
		***REMOVED***

		/**
		 * Checks if a string match the ignore list
		 * @param {string***REMOVED*** name The string to check.
		 * @returns {boolean***REMOVED*** if the string is ignored
		 * @private
		 */
		function isAllowed(name) {
			return allow.some(
				entry => name === entry || name.match(new RegExp(entry, "u")),
			);
		***REMOVED***

		/**
		 * Checks if a given name is good or not.
		 * @param {string***REMOVED*** name The name to check.
		 * @returns {boolean***REMOVED*** `true` if the name is good.
		 * @private
		 */
		function isGoodName(name) {
			return !isUnderscored(name) || isAllowed(name);
		***REMOVED***

		/**
		 * Checks if a given identifier reference or member expression is an assignment
		 * target.
		 * @param {ASTNode***REMOVED*** node The node to check.
		 * @returns {boolean***REMOVED*** `true` if the node is an assignment target.
		 */
		function isAssignmentTarget(node) {
			const parent = node.parent;

			switch (parent.type) {
				case "AssignmentExpression":
				case "AssignmentPattern":
					return parent.left === node;

				case "Property":
					return (
						parent.parent.type === "ObjectPattern" &&
						parent.value === node
					);
				case "ArrayPattern":
				case "RestElement":
					return true;

				default:
					return false;
			***REMOVED***
		***REMOVED***

		/**
		 * Checks if a given binding identifier uses the original name as-is.
		 * - If it's in object destructuring or object expression, the original name is its property name.
		 * - If it's in import declaration, the original name is its exported name.
		 * @param {ASTNode***REMOVED*** node The `Identifier` node to check.
		 * @returns {boolean***REMOVED*** `true` if the identifier uses the original name as-is.
		 */
		function equalsToOriginalName(node) {
			const localName = node.name;
			const valueNode =
				node.parent.type === "AssignmentPattern" ? node.parent : node;
			const parent = valueNode.parent;

			switch (parent.type) {
				case "Property":
					return (
						(parent.parent.type === "ObjectPattern" ||
							parent.parent.type === "ObjectExpression") &&
						parent.value === valueNode &&
						!parent.computed &&
						parent.key.type === "Identifier" &&
						parent.key.name === localName
					);

				case "ImportSpecifier":
					return (
						parent.local === node &&
						astUtils.getModuleExportName(parent.imported) ===
							localName
					);

				default:
					return false;
			***REMOVED***
		***REMOVED***

		/**
		 * Reports an AST node as a rule violation.
		 * @param {ASTNode***REMOVED*** node The node to report.
		 * @returns {void***REMOVED***
		 * @private
		 */
		function report(node) {
			if (reported.has(node.range[0])) {
				return;
			***REMOVED***
			reported.add(node.range[0]);

			// Report it.
			context.report({
				node,
				messageId:
					node.type === "PrivateIdentifier"
						? "notCamelCasePrivate"
						: "notCamelCase",
				data: { name: node.name ***REMOVED***,
			***REMOVED***);
		***REMOVED***

		/**
		 * Reports an identifier reference or a binding identifier.
		 * @param {ASTNode***REMOVED*** node The `Identifier` node to report.
		 * @returns {void***REMOVED***
		 */
		function reportReferenceId(node) {
			/*
			 * For backward compatibility, if it's in callings then ignore it.
			 * Not sure why it is.
			 */
			if (
				node.parent.type === "CallExpression" ||
				node.parent.type === "NewExpression"
			) {
				return;
			***REMOVED***

			/*
			 * For backward compatibility, if it's a default value of
			 * destructuring/parameters then ignore it.
			 * Not sure why it is.
			 */
			if (
				node.parent.type === "AssignmentPattern" &&
				node.parent.right === node
			) {
				return;
			***REMOVED***

			/*
			 * The `ignoreDestructuring` flag skips the identifiers that uses
			 * the property name as-is.
			 */
			if (ignoreDestructuring && equalsToOriginalName(node)) {
				return;
			***REMOVED***

			/*
			 * Import attribute keys are always ignored
			 */
			if (astUtils.isImportAttributeKey(node)) {
				return;
			***REMOVED***

			report(node);
		***REMOVED***

		return {
			// Report camelcase of global variable references ------------------
			Program(node) {
				const scope = sourceCode.getScope(node);

				if (!ignoreGlobals) {
					// Defined globals in config files or directive comments.
					for (const variable of scope.variables) {
						if (
							variable.identifiers.length > 0 ||
							isGoodName(variable.name)
						) {
							continue;
						***REMOVED***
						for (const reference of variable.references) {
							/*
							 * For backward compatibility, this rule reports read-only
							 * references as well.
							 */
							reportReferenceId(reference.identifier);
						***REMOVED***
					***REMOVED***
				***REMOVED***

				// Undefined globals.
				for (const reference of scope.through) {
					const id = reference.identifier;

					if (
						isGoodName(id.name) ||
						astUtils.isImportAttributeKey(id)
					) {
						continue;
					***REMOVED***

					/*
					 * For backward compatibility, this rule reports read-only
					 * references as well.
					 */
					reportReferenceId(id);
				***REMOVED***
			***REMOVED***,

			// Report camelcase of declared variables --------------------------
			[[
				"VariableDeclaration",
				"FunctionDeclaration",
				"FunctionExpression",
				"ArrowFunctionExpression",
				"ClassDeclaration",
				"ClassExpression",
				"CatchClause",
			]](node) {
				for (const variable of sourceCode.getDeclaredVariables(node)) {
					if (isGoodName(variable.name)) {
						continue;
					***REMOVED***
					const id = variable.identifiers[0];

					// Report declaration.
					if (!(ignoreDestructuring && equalsToOriginalName(id))) {
						report(id);
					***REMOVED***

					/*
					 * For backward compatibility, report references as well.
					 * It looks unnecessary because declarations are reported.
					 */
					for (const reference of variable.references) {
						if (reference.init) {
							continue; // Skip the write references of initializers.
						***REMOVED***
						reportReferenceId(reference.identifier);
					***REMOVED***
				***REMOVED***
			***REMOVED***,

			// Report camelcase in properties ----------------------------------
			[[
				"ObjectExpression > Property[computed!=true] > Identifier.key",
				"MethodDefinition[computed!=true] > Identifier.key",
				"PropertyDefinition[computed!=true] > Identifier.key",
				"MethodDefinition > PrivateIdentifier.key",
				"PropertyDefinition > PrivateIdentifier.key",
			]](node) {
				if (
					properties === "never" ||
					astUtils.isImportAttributeKey(node) ||
					isGoodName(node.name)
				) {
					return;
				***REMOVED***
				report(node);
			***REMOVED***,
			"MemberExpression[computed!=true] > Identifier.property"(node) {
				if (
					properties === "never" ||
					!isAssignmentTarget(node.parent) || // ‚Üê ignore read-only references.
					isGoodName(node.name)
				) {
					return;
				***REMOVED***
				report(node);
			***REMOVED***,

			// Report camelcase in import --------------------------------------
			ImportDeclaration(node) {
				for (const variable of sourceCode.getDeclaredVariables(node)) {
					if (isGoodName(variable.name)) {
						continue;
					***REMOVED***
					const id = variable.identifiers[0];

					// Report declaration.
					if (!(ignoreImports && equalsToOriginalName(id))) {
						report(id);
					***REMOVED***

					/*
					 * For backward compatibility, report references as well.
					 * It looks unnecessary because declarations are reported.
					 */
					for (const reference of variable.references) {
						reportReferenceId(reference.identifier);
					***REMOVED***
				***REMOVED***
			***REMOVED***,

			// Report camelcase in re-export -----------------------------------
			[[
				"ExportAllDeclaration > Identifier.exported",
				"ExportSpecifier > Identifier.exported",
			]](node) {
				if (isGoodName(node.name)) {
					return;
				***REMOVED***
				report(node);
			***REMOVED***,

			// Report camelcase in labels --------------------------------------
			[[
				"LabeledStatement > Identifier.label",

				/*
				 * For backward compatibility, report references as well.
				 * It looks unnecessary because declarations are reported.
				 */
				"BreakStatement > Identifier.label",
				"ContinueStatement > Identifier.label",
			]](node) {
				if (isGoodName(node.name)) {
					return;
				***REMOVED***
				report(node);
			***REMOVED***,
		***REMOVED***;
	***REMOVED***,
***REMOVED***;
