/**
 * @param {import('postcss').Container[]***REMOVED*** nodes
 * @param {any***REMOVED*** source
 * @param {any***REMOVED*** raws
 * @returns {import('postcss').Container[]***REMOVED***
 */
export default function cloneNodes(nodes, source = undefined, raws = undefined) {
  return nodes.map((node) => {
    let cloned = node.clone()

    if (raws !== undefined) {
      cloned.raws.tailwind = {
        ...cloned.raws.tailwind,
        ...raws,
      ***REMOVED***
    ***REMOVED***

    if (source !== undefined) {
      traverse(cloned, (node) => {
        // Do not traverse nodes that have opted
        // to preserve their original source
        let shouldPreserveSource = node.raws.tailwind?.preserveSource === true && node.source
        if (shouldPreserveSource) {
          return false
        ***REMOVED***

        // Otherwise we can safely replace the source
        // And continue traversing
        node.source = source
      ***REMOVED***)
    ***REMOVED***

    return cloned
  ***REMOVED***)
***REMOVED***

/**
 * Traverse a tree of nodes and don't traverse children if the callback
 * returns false. Ideally we'd use Container#walk instead of this
 * function but it stops traversing siblings too.
 *
 * @param {import('postcss').Container***REMOVED*** node
 * @param {(node: import('postcss').Container) => boolean***REMOVED*** onNode
 */
function traverse(node, onNode) {
  if (onNode(node) !== false) {
    node.each?.((child) => traverse(child, onNode))
  ***REMOVED***
***REMOVED***
