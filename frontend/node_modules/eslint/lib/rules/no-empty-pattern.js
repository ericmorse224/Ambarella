/**
 * @fileoverview Rule to disallow an empty pattern
 * @author Alberto RodrÃ­guez
 */
"use strict";

const astUtils = require("./utils/ast-utils");

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

/** @type {import('../types').Rule.RuleModule***REMOVED*** */
module.exports = {
	meta: {
		type: "problem",

		defaultOptions: [
			{
				allowObjectPatternsAsParameters: false,
			***REMOVED***,
		],

		docs: {
			description: "Disallow empty destructuring patterns",
			recommended: true,
			url: "https://eslint.org/docs/latest/rules/no-empty-pattern",
		***REMOVED***,

		schema: [
			{
				type: "object",
				properties: {
					allowObjectPatternsAsParameters: {
						type: "boolean",
					***REMOVED***,
				***REMOVED***,
				additionalProperties: false,
			***REMOVED***,
		],

		messages: {
			unexpected: "Unexpected empty {{type***REMOVED******REMOVED*** pattern.",
		***REMOVED***,
	***REMOVED***,

	create(context) {
		const [{ allowObjectPatternsAsParameters ***REMOVED***] = context.options;

		return {
			ObjectPattern(node) {
				if (node.properties.length > 0) {
					return;
				***REMOVED***

				// Allow {***REMOVED*** and {***REMOVED*** = {***REMOVED*** empty object patterns as parameters when allowObjectPatternsAsParameters is true
				if (
					allowObjectPatternsAsParameters &&
					(astUtils.isFunction(node.parent) ||
						(node.parent.type === "AssignmentPattern" &&
							astUtils.isFunction(node.parent.parent) &&
							node.parent.right.type === "ObjectExpression" &&
							node.parent.right.properties.length === 0))
				) {
					return;
				***REMOVED***

				context.report({
					node,
					messageId: "unexpected",
					data: { type: "object" ***REMOVED***,
				***REMOVED***);
			***REMOVED***,
			ArrayPattern(node) {
				if (node.elements.length === 0) {
					context.report({
						node,
						messageId: "unexpected",
						data: { type: "array" ***REMOVED***,
					***REMOVED***);
				***REMOVED***
			***REMOVED***,
		***REMOVED***;
	***REMOVED***,
***REMOVED***;
