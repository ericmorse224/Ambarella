"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
***REMOVED***);
exports.default = void 0;

var _experimentalUtils = require("@typescript-eslint/experimental-utils");

var _detectJestVersion = require("./detectJestVersion");

var _utils = require("./utils");

const parseJestVersion = rawVersion => {
  if (typeof rawVersion === 'number') {
    return rawVersion;
  ***REMOVED***

  const [majorVersion] = rawVersion.split('.');
  return parseInt(majorVersion, 10);
***REMOVED***;

var _default = (0, _utils.createRule)({
  name: __filename,
  meta: {
    docs: {
      category: 'Best Practices',
      description: 'Disallow use of deprecated functions',
      recommended: 'error'
    ***REMOVED***,
    messages: {
      deprecatedFunction: '`{{ deprecation ***REMOVED******REMOVED***` has been deprecated in favor of `{{ replacement ***REMOVED******REMOVED***`'
    ***REMOVED***,
    type: 'suggestion',
    schema: [],
    fixable: 'code'
  ***REMOVED***,
  defaultOptions: [],

  create(context) {
    var _context$settings, _context$settings$jes;

    const jestVersion = parseJestVersion(((_context$settings = context.settings) === null || _context$settings === void 0 ? void 0 : (_context$settings$jes = _context$settings.jest) === null || _context$settings$jes === void 0 ? void 0 : _context$settings$jes.version) || (0, _detectJestVersion.detectJestVersion)());
    const deprecations = { ...(jestVersion >= 15 && {
        'jest.resetModuleRegistry': 'jest.resetModules'
      ***REMOVED***),
      ...(jestVersion >= 17 && {
        'jest.addMatchers': 'expect.extend'
      ***REMOVED***),
      ...(jestVersion >= 21 && {
        'require.requireMock': 'jest.requireMock',
        'require.requireActual': 'jest.requireActual'
      ***REMOVED***),
      ...(jestVersion >= 22 && {
        'jest.runTimersToTime': 'jest.advanceTimersByTime'
      ***REMOVED***),
      ...(jestVersion >= 26 && {
        'jest.genMockFromModule': 'jest.createMockFromModule'
      ***REMOVED***)
    ***REMOVED***;
    return {
      CallExpression(node) {
        if (node.callee.type !== _experimentalUtils.AST_NODE_TYPES.MemberExpression) {
          return;
        ***REMOVED***

        const deprecation = (0, _utils.getNodeName)(node);

        if (!deprecation || !(deprecation in deprecations)) {
          return;
        ***REMOVED***

        const replacement = deprecations[deprecation];
        const {
          callee
        ***REMOVED*** = node;
        context.report({
          messageId: 'deprecatedFunction',
          data: {
            deprecation,
            replacement
          ***REMOVED***,
          node,

          fix(fixer) {
            let [name, func] = replacement.split('.');

            if (callee.property.type === _experimentalUtils.AST_NODE_TYPES.Literal) {
              func = `'${func***REMOVED***'`;
            ***REMOVED***

            return [fixer.replaceText(callee.object, name), fixer.replaceText(callee.property, func)];
          ***REMOVED***

        ***REMOVED***);
      ***REMOVED***

    ***REMOVED***;
  ***REMOVED***

***REMOVED***);

exports.default = _default;