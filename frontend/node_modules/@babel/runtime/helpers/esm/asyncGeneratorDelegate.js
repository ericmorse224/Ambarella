import OverloadYield from "./OverloadYield.js";
function _asyncGeneratorDelegate(t) {
  var e = {***REMOVED***,
    n = !1;
  function pump(e, r) {
    return n = !0, r = new Promise(function (n) {
      n(t[e](r));
    ***REMOVED***), {
      done: !1,
      value: new OverloadYield(r, 1)
    ***REMOVED***;
  ***REMOVED***
  return e["undefined" != typeof Symbol && Symbol.iterator || "@@iterator"] = function () {
    return this;
  ***REMOVED***, e.next = function (t) {
    return n ? (n = !1, t) : pump("next", t);
  ***REMOVED***, "function" == typeof t["throw"] && (e["throw"] = function (t) {
    if (n) throw n = !1, t;
    return pump("throw", t);
  ***REMOVED***), "function" == typeof t["return"] && (e["return"] = function (t) {
    return n ? (n = !1, t) : pump("return", t);
  ***REMOVED***), e;
***REMOVED***
export { _asyncGeneratorDelegate as default ***REMOVED***;