// Generated by LiveScript 1.4.0
(function(){
  var ref$, any, all, isItNaN, types, defaultType, customTypes, toString$ = {***REMOVED***.toString;
  ref$ = require('prelude-ls'), any = ref$.any, all = ref$.all, isItNaN = ref$.isItNaN;
  types = {
    Number: {
      typeOf: 'Number',
      validate: function(it){
        return !isItNaN(it);
      ***REMOVED***
    ***REMOVED***,
    NaN: {
      typeOf: 'Number',
      validate: isItNaN
    ***REMOVED***,
    Int: {
      typeOf: 'Number',
      validate: function(it){
        return !isItNaN(it) && it % 1 === 0;
      ***REMOVED***
    ***REMOVED***,
    Float: {
      typeOf: 'Number',
      validate: function(it){
        return !isItNaN(it);
      ***REMOVED***
    ***REMOVED***,
    Date: {
      typeOf: 'Date',
      validate: function(it){
        return !isItNaN(it.getTime());
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***;
  defaultType = {
    array: 'Array',
    tuple: 'Array'
  ***REMOVED***;
  function checkArray(input, type){
    return all(function(it){
      return checkMultiple(it, type.of);
    ***REMOVED***, input);
  ***REMOVED***
  function checkTuple(input, type){
    var i, i$, ref$, len$, types;
    i = 0;
    for (i$ = 0, len$ = (ref$ = type.of).length; i$ < len$; ++i$) {
      types = ref$[i$];
      if (!checkMultiple(input[i], types)) {
        return false;
      ***REMOVED***
      i++;
    ***REMOVED***
    return input.length <= i;
  ***REMOVED***
  function checkFields(input, type){
    var inputKeys, numInputKeys, k, numOfKeys, key, ref$, types;
    inputKeys = {***REMOVED***;
    numInputKeys = 0;
    for (k in input) {
      inputKeys[k] = true;
      numInputKeys++;
    ***REMOVED***
    numOfKeys = 0;
    for (key in ref$ = type.of) {
      types = ref$[key];
      if (!checkMultiple(input[key], types)) {
        return false;
      ***REMOVED***
      if (inputKeys[key]) {
        numOfKeys++;
      ***REMOVED***
    ***REMOVED***
    return type.subset || numInputKeys === numOfKeys;
  ***REMOVED***
  function checkStructure(input, type){
    if (!(input instanceof Object)) {
      return false;
    ***REMOVED***
    switch (type.structure) {
    case 'fields':
      return checkFields(input, type);
    case 'array':
      return checkArray(input, type);
    case 'tuple':
      return checkTuple(input, type);
    ***REMOVED***
  ***REMOVED***
  function check(input, typeObj){
    var type, structure, setting, that;
    type = typeObj.type, structure = typeObj.structure;
    if (type) {
      if (type === '*') {
        return true;
      ***REMOVED***
      setting = customTypes[type] || types[type];
      if (setting) {
        return setting.typeOf === toString$.call(input).slice(8, -1) && setting.validate(input);
      ***REMOVED*** else {
        return type === toString$.call(input).slice(8, -1) && (!structure || checkStructure(input, typeObj));
      ***REMOVED***
    ***REMOVED*** else if (structure) {
      if (that = defaultType[structure]) {
        if (that !== toString$.call(input).slice(8, -1)) {
          return false;
        ***REMOVED***
      ***REMOVED***
      return checkStructure(input, typeObj);
    ***REMOVED*** else {
      throw new Error("No type defined. Input: " + input + ".");
    ***REMOVED***
  ***REMOVED***
  function checkMultiple(input, types){
    if (toString$.call(types).slice(8, -1) !== 'Array') {
      throw new Error("Types must be in an array. Input: " + input + ".");
    ***REMOVED***
    return any(function(it){
      return check(input, it);
    ***REMOVED***, types);
  ***REMOVED***
  module.exports = function(parsedType, input, options){
    options == null && (options = {***REMOVED***);
    customTypes = options.customTypes || {***REMOVED***;
    return checkMultiple(input, parsedType);
  ***REMOVED***;
***REMOVED***).call(this);
