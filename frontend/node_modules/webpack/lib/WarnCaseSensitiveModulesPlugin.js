/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const CaseSensitiveModulesWarning = require("./CaseSensitiveModulesWarning");

/** @typedef {import("./Compiler")***REMOVED*** Compiler */
/** @typedef {import("./Module")***REMOVED*** Module */
/** @typedef {import("./NormalModule")***REMOVED*** NormalModule */

const PLUGIN_NAME = "WarnCaseSensitiveModulesPlugin";

class WarnCaseSensitiveModulesPlugin {
	/**
	 * Apply the plugin
	 * @param {Compiler***REMOVED*** compiler the compiler instance
	 * @returns {void***REMOVED***
	 */
	apply(compiler) {
		compiler.hooks.compilation.tap(PLUGIN_NAME, compilation => {
			compilation.hooks.seal.tap(PLUGIN_NAME, () => {
				/** @type {Map<string, Map<string, Module>>***REMOVED*** */
				const moduleWithoutCase = new Map();
				for (const module of compilation.modules) {
					const identifier = module.identifier();

					// Ignore `data:` URLs, because it's not a real path
					if (
						/** @type {NormalModule***REMOVED*** */
						(module).resourceResolveData !== undefined &&
						/** @type {NormalModule***REMOVED*** */
						(module).resourceResolveData.encodedContent !== undefined
					) {
						continue;
					***REMOVED***

					const lowerIdentifier = identifier.toLowerCase();
					let map = moduleWithoutCase.get(lowerIdentifier);
					if (map === undefined) {
						map = new Map();
						moduleWithoutCase.set(lowerIdentifier, map);
					***REMOVED***
					map.set(identifier, module);
				***REMOVED***
				for (const pair of moduleWithoutCase) {
					const map = pair[1];
					if (map.size > 1) {
						compilation.warnings.push(
							new CaseSensitiveModulesWarning(
								map.values(),
								compilation.moduleGraph
							)
						);
					***REMOVED***
				***REMOVED***
			***REMOVED***);
		***REMOVED***);
	***REMOVED***
***REMOVED***

module.exports = WarnCaseSensitiveModulesPlugin;
