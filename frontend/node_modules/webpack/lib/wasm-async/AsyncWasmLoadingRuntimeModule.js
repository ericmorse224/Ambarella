/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const RuntimeGlobals = require("../RuntimeGlobals");
const RuntimeModule = require("../RuntimeModule");
const Template = require("../Template");

/** @typedef {import("../Chunk")***REMOVED*** Chunk */
/** @typedef {import("../Compilation")***REMOVED*** Compilation */

/**
 * @typedef {object***REMOVED*** AsyncWasmLoadingRuntimeModuleOptions
 * @property {((wasmModuleSrcPath: string) => string)=***REMOVED*** generateBeforeLoadBinaryCode
 * @property {(wasmModuleSrcPath: string) => string***REMOVED*** generateLoadBinaryCode
 * @property {(() => string)=***REMOVED*** generateBeforeInstantiateStreaming
 * @property {boolean***REMOVED*** supportsStreaming
 */

class AsyncWasmLoadingRuntimeModule extends RuntimeModule {
	/**
	 * @param {AsyncWasmLoadingRuntimeModuleOptions***REMOVED*** options options
	 */
	constructor({
		generateLoadBinaryCode,
		generateBeforeLoadBinaryCode,
		generateBeforeInstantiateStreaming,
		supportsStreaming
	***REMOVED***) {
		super("wasm loading", RuntimeModule.STAGE_NORMAL);
		this.generateLoadBinaryCode = generateLoadBinaryCode;
		this.generateBeforeLoadBinaryCode = generateBeforeLoadBinaryCode;
		this.generateBeforeInstantiateStreaming =
			generateBeforeInstantiateStreaming;
		this.supportsStreaming = supportsStreaming;
	***REMOVED***

	/**
	 * @returns {string | null***REMOVED*** runtime code
	 */
	generate() {
		const compilation = /** @type {Compilation***REMOVED*** */ (this.compilation);
		const chunk = /** @type {Chunk***REMOVED*** */ (this.chunk);
		const { outputOptions, runtimeTemplate ***REMOVED*** = compilation;
		const fn = RuntimeGlobals.instantiateWasm;
		const wasmModuleSrcPath = compilation.getPath(
			JSON.stringify(outputOptions.webassemblyModuleFilename),
			{
				hash: `" + ${RuntimeGlobals.getFullHash***REMOVED***() + "`,
				hashWithLength: length =>
					`" + ${RuntimeGlobals.getFullHash***REMOVED******REMOVED***().slice(0, ${length***REMOVED***) + "`,
				module: {
					id: '" + wasmModuleId + "',
					hash: '" + wasmModuleHash + "',
					hashWithLength(length) {
						return `" + wasmModuleHash.slice(0, ${length***REMOVED***) + "`;
					***REMOVED***
				***REMOVED***,
				runtime: chunk.runtime
			***REMOVED***
		);

		const loader = this.generateLoadBinaryCode(wasmModuleSrcPath);
		const fallback = [
			`.then(${runtimeTemplate.returningFunction("x.arrayBuffer()", "x")***REMOVED***)`,
			`.then(${runtimeTemplate.returningFunction(
				"WebAssembly.instantiate(bytes, importsObj)",
				"bytes"
			)***REMOVED***)`,
			`.then(${runtimeTemplate.returningFunction(
				"Object.assign(exports, res.instance.exports)",
				"res"
			)***REMOVED***)`
		];
		const getStreaming = () => {
			const concat = (/** @type {string[]***REMOVED*** */ ...text) => text.join("");
			return [
				this.generateBeforeLoadBinaryCode
					? this.generateBeforeLoadBinaryCode(wasmModuleSrcPath)
					: "",
				`var req = ${loader***REMOVED***;`,
				`var fallback = ${runtimeTemplate.returningFunction(
					Template.asString(["req", Template.indent(fallback)])
				)***REMOVED***;`,
				concat(
					"return req.then(",
					runtimeTemplate.basicFunction("res", [
						'if (typeof WebAssembly.instantiateStreaming === "function") {',
						Template.indent(
							this.generateBeforeInstantiateStreaming
								? this.generateBeforeInstantiateStreaming()
								: ""
						),
						Template.indent([
							"return WebAssembly.instantiateStreaming(res, importsObj)",
							Template.indent([
								".then(",
								Template.indent([
									`${runtimeTemplate.returningFunction(
										"Object.assign(exports, res.instance.exports)",
										"res"
									)***REMOVED***,`,
									runtimeTemplate.basicFunction("e", [
										'if(res.headers.get("Content-Type") !== "application/wasm") {',
										Template.indent([
											'console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n", e);',
											"return fallback();"
										]),
										"***REMOVED***",
										"throw e;"
									])
								]),
								");"
							])
						]),
						"***REMOVED***",
						"return fallback();"
					]),
					");"
				)
			];
		***REMOVED***;

		return `${fn***REMOVED*** = ${runtimeTemplate.basicFunction(
			"exports, wasmModuleId, wasmModuleHash, importsObj",
			this.supportsStreaming
				? getStreaming()
				: [
						this.generateBeforeLoadBinaryCode
							? this.generateBeforeLoadBinaryCode(wasmModuleSrcPath)
							: "",
						`return ${loader***REMOVED***`,
						`${Template.indent(fallback)***REMOVED***;`
					]
		)***REMOVED***;`;
	***REMOVED***
***REMOVED***

module.exports = AsyncWasmLoadingRuntimeModule;
