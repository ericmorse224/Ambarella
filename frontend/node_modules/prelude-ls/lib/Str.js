// Generated by LiveScript 1.6.0
var split, join, lines, unlines, words, unwords, chars, unchars, reverse, repeat, capitalize, camelize, dasherize;
split = curry$(function(sep, str){
  return str.split(sep);
***REMOVED***);
join = curry$(function(sep, xs){
  return xs.join(sep);
***REMOVED***);
lines = function(str){
  if (!str.length) {
    return [];
  ***REMOVED***
  return str.split('\n');
***REMOVED***;
unlines = function(it){
  return it.join('\n');
***REMOVED***;
words = function(str){
  if (!str.length) {
    return [];
  ***REMOVED***
  return str.split(/[ ]+/);
***REMOVED***;
unwords = function(it){
  return it.join(' ');
***REMOVED***;
chars = function(it){
  return it.split('');
***REMOVED***;
unchars = function(it){
  return it.join('');
***REMOVED***;
reverse = function(str){
  return str.split('').reverse().join('');
***REMOVED***;
repeat = curry$(function(n, str){
  var result, i$;
  result = '';
  for (i$ = 0; i$ < n; ++i$) {
    result += str;
  ***REMOVED***
  return result;
***REMOVED***);
capitalize = function(str){
  return str.charAt(0).toUpperCase() + str.slice(1);
***REMOVED***;
camelize = function(it){
  return it.replace(/[-_]+(.)?/g, function(arg$, c){
    return (c != null ? c : '').toUpperCase();
  ***REMOVED***);
***REMOVED***;
dasherize = function(str){
  return str.replace(/([^-A-Z])([A-Z]+)/g, function(arg$, lower, upper){
    return lower + "-" + (upper.length > 1
      ? upper
      : upper.toLowerCase());
  ***REMOVED***).replace(/^([A-Z]+)/, function(arg$, upper){
    if (upper.length > 1) {
      return upper + "-";
    ***REMOVED*** else {
      return upper.toLowerCase();
    ***REMOVED***
  ***REMOVED***);
***REMOVED***;
module.exports = {
  split: split,
  join: join,
  lines: lines,
  unlines: unlines,
  words: words,
  unwords: unwords,
  chars: chars,
  unchars: unchars,
  reverse: reverse,
  repeat: repeat,
  capitalize: capitalize,
  camelize: camelize,
  dasherize: dasherize
***REMOVED***;
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    ***REMOVED*** : f;
  ***REMOVED***;
  return _curry();
***REMOVED***