/**
 * @fileOverview Enforce a defaultProps definition for every prop that is not a required prop.
 * @author Vitor Balocco
 */

'use strict';

const entries = require('object.entries');
const values = require('object.values');
const Components = require('../util/Components');
const docsUrl = require('../util/docsUrl');
const astUtil = require('../util/ast');
const report = require('../util/report');

// ------------------------------------------------------------------------------
// Rule Definition
// ------------------------------------------------------------------------------

const messages = {
  noDefaultWithRequired: 'propType "{{name***REMOVED******REMOVED***" is required and should not have a defaultProps declaration.',
  shouldHaveDefault: 'propType "{{name***REMOVED******REMOVED***" is not required, but has no corresponding defaultProps declaration.',
  noDefaultPropsWithFunction: 'Donâ€™t use defaultProps with function components.',
  shouldAssignObjectDefault: 'propType "{{name***REMOVED******REMOVED***" is not required, but has no corresponding default argument value.',
  destructureInSignature: 'Must destructure props in the function signature to initialize an optional prop.',
***REMOVED***;

function isPropWithNoDefaulVal(prop) {
  if (prop.type === 'RestElement' || prop.type === 'ExperimentalRestProperty') {
    return false;
  ***REMOVED***
  return prop.value.type !== 'AssignmentPattern';
***REMOVED***

/** @type {import('eslint').Rule.RuleModule***REMOVED*** */
module.exports = {
  meta: {
    docs: {
      description: 'Enforce a defaultProps definition for every prop that is not a required prop',
      category: 'Best Practices',
      url: docsUrl('require-default-props'),
    ***REMOVED***,

    messages,

    schema: [{
      type: 'object',
      properties: {
        forbidDefaultForRequired: {
          type: 'boolean',
        ***REMOVED***,
        classes: {
          enum: ['defaultProps', 'ignore'],
        ***REMOVED***,
        functions: {
          enum: ['defaultArguments', 'defaultProps', 'ignore'],
        ***REMOVED***,
        /**
         * @deprecated
         */
        ignoreFunctionalComponents: {
          type: 'boolean',
        ***REMOVED***,
      ***REMOVED***,
      additionalProperties: false,
    ***REMOVED***],
  ***REMOVED***,

  create: Components.detect((context, components) => {
    const configuration = context.options[0] || {***REMOVED***;
    const forbidDefaultForRequired = configuration.forbidDefaultForRequired || false;
    const classes = configuration.classes || 'defaultProps';
    /**
     * @todo
     * - Remove ignoreFunctionalComponents
     * - Change default to 'defaultArguments'
     */
    const functions = configuration.ignoreFunctionalComponents
      ? 'ignore'
      : configuration.functions || 'defaultProps';

    /**
     * Reports all propTypes passed in that don't have a defaultProps counterpart.
     * @param  {Object[]***REMOVED*** propTypes    List of propTypes to check.
     * @param  {Object***REMOVED***   defaultProps Object of defaultProps to check. Keys are the props names.
     * @return {void***REMOVED***
     */
    function reportPropTypesWithoutDefault(propTypes, defaultProps) {
      entries(propTypes).forEach((propType) => {
        const propName = propType[0];
        const prop = propType[1];

        if (!prop.node) {
          return;
        ***REMOVED***
        if (prop.isRequired) {
          if (forbidDefaultForRequired && defaultProps[propName]) {
            report(context, messages.noDefaultWithRequired, 'noDefaultWithRequired', {
              node: prop.node,
              data: { name: propName ***REMOVED***,
            ***REMOVED***);
          ***REMOVED***
          return;
        ***REMOVED***

        if (defaultProps[propName]) {
          return;
        ***REMOVED***

        report(context, messages.shouldHaveDefault, 'shouldHaveDefault', {
          node: prop.node,
          data: { name: propName ***REMOVED***,
        ***REMOVED***);
      ***REMOVED***);
    ***REMOVED***

    /**
     * If functions option is 'defaultArguments', reports defaultProps is used and all params that doesn't initialized.
     * @param {Object***REMOVED*** componentNode Node of component.
     * @param {Object[]***REMOVED*** declaredPropTypes List of propTypes to check `isRequired`.
     * @param {Object***REMOVED*** defaultProps Object of defaultProps to check used.
     */
    function reportFunctionComponent(componentNode, declaredPropTypes, defaultProps) {
      if (defaultProps) {
        report(context, messages.noDefaultPropsWithFunction, 'noDefaultPropsWithFunction', {
          node: componentNode,
        ***REMOVED***);
      ***REMOVED***

      const props = componentNode.params[0];
      const propTypes = declaredPropTypes;

      if (!props) {
        return;
      ***REMOVED***

      if (props.type === 'Identifier') {
        const hasOptionalProp = values(propTypes).some((propType) => !propType.isRequired);
        if (hasOptionalProp) {
          report(context, messages.destructureInSignature, 'destructureInSignature', {
            node: props,
          ***REMOVED***);
        ***REMOVED***
      ***REMOVED*** else if (props.type === 'ObjectPattern') {
        // Filter required props with default value and report error
        props.properties.filter((prop) => {
          const propName = prop && prop.key && prop.key.name;
          const isPropRequired = propTypes[propName] && propTypes[propName].isRequired;
          return propTypes[propName] && isPropRequired && !isPropWithNoDefaulVal(prop);
        ***REMOVED***).forEach((prop) => {
          report(context, messages.noDefaultWithRequired, 'noDefaultWithRequired', {
            node: prop,
            data: { name: prop.key.name ***REMOVED***,
          ***REMOVED***);
        ***REMOVED***);

        // Filter non required props with no default value and report error
        props.properties.filter((prop) => {
          const propName = prop && prop.key && prop.key.name;
          const isPropRequired = propTypes[propName] && propTypes[propName].isRequired;
          return propTypes[propName] && !isPropRequired && isPropWithNoDefaulVal(prop);
        ***REMOVED***).forEach((prop) => {
          report(context, messages.shouldAssignObjectDefault, 'shouldAssignObjectDefault', {
            node: prop,
            data: { name: prop.key.name ***REMOVED***,
          ***REMOVED***);
        ***REMOVED***);
      ***REMOVED***
    ***REMOVED***

    // --------------------------------------------------------------------------
    // Public API
    // --------------------------------------------------------------------------

    return {
      'Program:exit'() {
        const list = components.list();

        values(list).filter((component) => {
          if (functions === 'ignore' && astUtil.isFunctionLike(component.node)) {
            return false;
          ***REMOVED***
          if (classes === 'ignore' && astUtil.isClass(component.node)) {
            return false;
          ***REMOVED***

          // If this defaultProps is "unresolved", then we should ignore this component and not report
          // any errors for it, to avoid false-positives with e.g. external defaultProps declarations or spread operators.
          if (component.defaultProps === 'unresolved') {
            return false;
          ***REMOVED***
          return component.declaredPropTypes !== undefined;
        ***REMOVED***).forEach((component) => {
          if (functions === 'defaultArguments' && astUtil.isFunctionLike(component.node)) {
            reportFunctionComponent(
              component.node,
              component.declaredPropTypes,
              component.defaultProps
            );
          ***REMOVED*** else {
            reportPropTypesWithoutDefault(
              component.declaredPropTypes,
              component.defaultProps || {***REMOVED***
            );
          ***REMOVED***
        ***REMOVED***);
      ***REMOVED***,
    ***REMOVED***;
  ***REMOVED***),
***REMOVED***;
