/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const { DEFAULTS ***REMOVED*** = require("../config/defaults");
const createHash = require("../util/createHash");

/** @typedef {import("../util/Hash")***REMOVED*** Hash */
/** @typedef {typeof import("../util/Hash")***REMOVED*** HashConstructor */

/**
 * @typedef {object***REMOVED*** HashableObject
 * @property {(hash: Hash) => void***REMOVED*** updateHash
 */

class LazyHashedEtag {
	/**
	 * @param {HashableObject***REMOVED*** obj object with updateHash method
	 * @param {string | HashConstructor***REMOVED*** hashFunction the hash function to use
	 */
	constructor(obj, hashFunction = DEFAULTS.HASH_FUNCTION) {
		this._obj = obj;
		this._hash = undefined;
		this._hashFunction = hashFunction;
	***REMOVED***

	/**
	 * @returns {string***REMOVED*** hash of object
	 */
	toString() {
		if (this._hash === undefined) {
			const hash = createHash(this._hashFunction);
			this._obj.updateHash(hash);
			this._hash = /** @type {string***REMOVED*** */ (hash.digest("base64"));
		***REMOVED***
		return this._hash;
	***REMOVED***
***REMOVED***

/** @type {Map<string | HashConstructor, WeakMap<HashableObject, LazyHashedEtag>>***REMOVED*** */
const mapStrings = new Map();

/** @type {WeakMap<HashConstructor, WeakMap<HashableObject, LazyHashedEtag>>***REMOVED*** */
const mapObjects = new WeakMap();

/**
 * @param {HashableObject***REMOVED*** obj object with updateHash method
 * @param {(string | HashConstructor)=***REMOVED*** hashFunction the hash function to use
 * @returns {LazyHashedEtag***REMOVED*** etag
 */
const getter = (obj, hashFunction = DEFAULTS.HASH_FUNCTION) => {
	let innerMap;
	if (typeof hashFunction === "string") {
		innerMap = mapStrings.get(hashFunction);
		if (innerMap === undefined) {
			const newHash = new LazyHashedEtag(obj, hashFunction);
			innerMap = new WeakMap();
			innerMap.set(obj, newHash);
			mapStrings.set(hashFunction, innerMap);
			return newHash;
		***REMOVED***
	***REMOVED*** else {
		innerMap = mapObjects.get(hashFunction);
		if (innerMap === undefined) {
			const newHash = new LazyHashedEtag(obj, hashFunction);
			innerMap = new WeakMap();
			innerMap.set(obj, newHash);
			mapObjects.set(hashFunction, innerMap);
			return newHash;
		***REMOVED***
	***REMOVED***
	const hash = innerMap.get(obj);
	if (hash !== undefined) return hash;
	const newHash = new LazyHashedEtag(obj, hashFunction);
	innerMap.set(obj, newHash);
	return newHash;
***REMOVED***;

module.exports = getter;
