import type {KeywordDefinition, KeywordErrorDefinition, KeywordCxt, ErrorObject***REMOVED*** from "ajv"
import {_, str, nil, Name***REMOVED*** from "ajv/dist/compile/codegen"
import type {DefinitionOptions***REMOVED*** from "./_types"
import {metaSchemaRef***REMOVED*** from "./_util"

export type SelectError = ErrorObject<"select", {failingCase?: string; failingDefault?: true***REMOVED***>

const error: KeywordErrorDefinition = {
  message: ({params: {schemaProp***REMOVED******REMOVED***) =>
    schemaProp
      ? str`should match case "${schemaProp***REMOVED***" schema`
      : str`should match default case schema`,
  params: ({params: {schemaProp***REMOVED******REMOVED***) =>
    schemaProp ? _`{failingCase: ${schemaProp***REMOVED******REMOVED***` : _`{failingDefault: true***REMOVED***`,
***REMOVED***

export default function getDef(opts?: DefinitionOptions): KeywordDefinition[] {
  const metaSchema = metaSchemaRef(opts)

  return [
    {
      keyword: "select",
      schemaType: ["string", "number", "boolean", "null"],
      $data: true,
      error,
      dependencies: ["selectCases"],
      code(cxt: KeywordCxt) {
        const {gen, schemaCode, parentSchema***REMOVED*** = cxt
        cxt.block$data(nil, () => {
          const valid = gen.let("valid", true)
          const schValid = gen.name("_valid")
          const value = gen.const("value", _`${schemaCode***REMOVED*** === null ? "null" : ${schemaCode***REMOVED***`)
          gen.if(false) // optimizer should remove it from generated code
          for (const schemaProp in parentSchema.selectCases) {
            cxt.setParams({schemaProp***REMOVED***)
            gen.elseIf(_`"" + ${value***REMOVED*** == ${schemaProp***REMOVED***`) // intentional ==, to match numbers and booleans
            const schCxt = cxt.subschema({keyword: "selectCases", schemaProp***REMOVED***, schValid)
            cxt.mergeEvaluated(schCxt, Name)
            gen.assign(valid, schValid)
          ***REMOVED***
          gen.else()
          if (parentSchema.selectDefault !== undefined) {
            cxt.setParams({schemaProp: undefined***REMOVED***)
            const schCxt = cxt.subschema({keyword: "selectDefault"***REMOVED***, schValid)
            cxt.mergeEvaluated(schCxt, Name)
            gen.assign(valid, schValid)
          ***REMOVED***
          gen.endIf()
          cxt.pass(valid)
        ***REMOVED***)
      ***REMOVED***,
    ***REMOVED***,
    {
      keyword: "selectCases",
      dependencies: ["select"],
      metaSchema: {
        type: "object",
        additionalProperties: metaSchema,
      ***REMOVED***,
    ***REMOVED***,
    {
      keyword: "selectDefault",
      dependencies: ["select", "selectCases"],
      metaSchema,
    ***REMOVED***,
  ]
***REMOVED***

module.exports = getDef
