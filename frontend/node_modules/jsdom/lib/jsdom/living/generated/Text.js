"use strict";

const conversions = require("webidl-conversions");
const utils = require("./utils.js");

const implSymbol = utils.implSymbol;
const ctorRegistrySymbol = utils.ctorRegistrySymbol;
const CharacterData = require("./CharacterData.js");

const interfaceName = "Text";

exports.is = value => {
  return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;
***REMOVED***;
exports.isImpl = value => {
  return utils.isObject(value) && value instanceof Impl.implementation;
***REMOVED***;
exports.convert = (value, { context = "The provided value" ***REMOVED*** = {***REMOVED***) => {
  if (exports.is(value)) {
    return utils.implForWrapper(value);
  ***REMOVED***
  throw new TypeError(`${context***REMOVED*** is not of type 'Text'.`);
***REMOVED***;

function makeWrapper(globalObject) {
  if (globalObject[ctorRegistrySymbol] === undefined) {
    throw new Error("Internal error: invalid global object");
  ***REMOVED***

  const ctor = globalObject[ctorRegistrySymbol]["Text"];
  if (ctor === undefined) {
    throw new Error("Internal error: constructor Text is not installed on the passed global object");
  ***REMOVED***

  return Object.create(ctor.prototype);
***REMOVED***

exports.create = (globalObject, constructorArgs, privateData) => {
  const wrapper = makeWrapper(globalObject);
  return exports.setup(wrapper, globalObject, constructorArgs, privateData);
***REMOVED***;

exports.createImpl = (globalObject, constructorArgs, privateData) => {
  const wrapper = exports.create(globalObject, constructorArgs, privateData);
  return utils.implForWrapper(wrapper);
***REMOVED***;

exports._internalSetup = (wrapper, globalObject) => {
  CharacterData._internalSetup(wrapper, globalObject);
***REMOVED***;

exports.setup = (wrapper, globalObject, constructorArgs = [], privateData = {***REMOVED***) => {
  privateData.wrapper = wrapper;

  exports._internalSetup(wrapper, globalObject);
  Object.defineProperty(wrapper, implSymbol, {
    value: new Impl.implementation(globalObject, constructorArgs, privateData),
    configurable: true
  ***REMOVED***);

  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;
  if (Impl.init) {
    Impl.init(wrapper[implSymbol]);
  ***REMOVED***
  return wrapper;
***REMOVED***;

exports.new = globalObject => {
  const wrapper = makeWrapper(globalObject);

  exports._internalSetup(wrapper, globalObject);
  Object.defineProperty(wrapper, implSymbol, {
    value: Object.create(Impl.implementation.prototype),
    configurable: true
  ***REMOVED***);

  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;
  if (Impl.init) {
    Impl.init(wrapper[implSymbol]);
  ***REMOVED***
  return wrapper[implSymbol];
***REMOVED***;

const exposed = new Set(["Window"]);

exports.install = (globalObject, globalNames) => {
  if (!globalNames.some(globalName => exposed.has(globalName))) {
    return;
  ***REMOVED***

  if (globalObject.CharacterData === undefined) {
    throw new Error("Internal error: attempting to evaluate Text before CharacterData");
  ***REMOVED***
  class Text extends globalObject.CharacterData {
    constructor() {
      const args = [];
      {
        let curArg = arguments[0];
        if (curArg !== undefined) {
          curArg = conversions["DOMString"](curArg, { context: "Failed to construct 'Text': parameter 1" ***REMOVED***);
        ***REMOVED*** else {
          curArg = "";
        ***REMOVED***
        args.push(curArg);
      ***REMOVED***
      return exports.setup(Object.create(new.target.prototype), globalObject, args);
    ***REMOVED***

    splitText(offset) {
      const esValue = this !== null && this !== undefined ? this : globalObject;
      if (!exports.is(esValue)) {
        throw new TypeError("'splitText' called on an object that is not a valid instance of Text.");
      ***REMOVED***

      if (arguments.length < 1) {
        throw new TypeError(
          "Failed to execute 'splitText' on 'Text': 1 argument required, but only " + arguments.length + " present."
        );
      ***REMOVED***
      const args = [];
      {
        let curArg = arguments[0];
        curArg = conversions["unsigned long"](curArg, {
          context: "Failed to execute 'splitText' on 'Text': parameter 1"
        ***REMOVED***);
        args.push(curArg);
      ***REMOVED***
      return utils.tryWrapperForImpl(esValue[implSymbol].splitText(...args));
    ***REMOVED***

    get wholeText() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new TypeError("'get wholeText' called on an object that is not a valid instance of Text.");
      ***REMOVED***

      return esValue[implSymbol]["wholeText"];
    ***REMOVED***

    get assignedSlot() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new TypeError("'get assignedSlot' called on an object that is not a valid instance of Text.");
      ***REMOVED***

      return utils.tryWrapperForImpl(esValue[implSymbol]["assignedSlot"]);
    ***REMOVED***
  ***REMOVED***
  Object.defineProperties(Text.prototype, {
    splitText: { enumerable: true ***REMOVED***,
    wholeText: { enumerable: true ***REMOVED***,
    assignedSlot: { enumerable: true ***REMOVED***,
    [Symbol.toStringTag]: { value: "Text", configurable: true ***REMOVED***
  ***REMOVED***);
  if (globalObject[ctorRegistrySymbol] === undefined) {
    globalObject[ctorRegistrySymbol] = Object.create(null);
  ***REMOVED***
  globalObject[ctorRegistrySymbol][interfaceName] = Text;

  Object.defineProperty(globalObject, interfaceName, {
    configurable: true,
    writable: true,
    value: Text
  ***REMOVED***);
***REMOVED***;

const Impl = require("../nodes/Text-impl.js");
