/*
  Copyright 2018 Google LLC

  Use of this source code is governed by an MIT-style
  license that can be found in the LICENSE file or at
  https://opensource.org/licenses/MIT.
*/
import '../../_version.js';
export const messages = {
    'invalid-value': ({ paramName, validValueDescription, value ***REMOVED***) => {
        if (!paramName || !validValueDescription) {
            throw new Error(`Unexpected input to 'invalid-value' error.`);
        ***REMOVED***
        return (`The '${paramName***REMOVED***' parameter was given a value with an ` +
            `unexpected value. ${validValueDescription***REMOVED*** Received a value of ` +
            `${JSON.stringify(value)***REMOVED***.`);
    ***REMOVED***,
    'not-an-array': ({ moduleName, className, funcName, paramName ***REMOVED***) => {
        if (!moduleName || !className || !funcName || !paramName) {
            throw new Error(`Unexpected input to 'not-an-array' error.`);
        ***REMOVED***
        return (`The parameter '${paramName***REMOVED***' passed into ` +
            `'${moduleName***REMOVED***.${className***REMOVED***.${funcName***REMOVED***()' must be an array.`);
    ***REMOVED***,
    'incorrect-type': ({ expectedType, paramName, moduleName, className, funcName, ***REMOVED***) => {
        if (!expectedType || !paramName || !moduleName || !funcName) {
            throw new Error(`Unexpected input to 'incorrect-type' error.`);
        ***REMOVED***
        const classNameStr = className ? `${className***REMOVED***.` : '';
        return (`The parameter '${paramName***REMOVED***' passed into ` +
            `'${moduleName***REMOVED***.${classNameStr***REMOVED***` +
            `${funcName***REMOVED***()' must be of type ${expectedType***REMOVED***.`);
    ***REMOVED***,
    'incorrect-class': ({ expectedClassName, paramName, moduleName, className, funcName, isReturnValueProblem, ***REMOVED***) => {
        if (!expectedClassName || !moduleName || !funcName) {
            throw new Error(`Unexpected input to 'incorrect-class' error.`);
        ***REMOVED***
        const classNameStr = className ? `${className***REMOVED***.` : '';
        if (isReturnValueProblem) {
            return (`The return value from ` +
                `'${moduleName***REMOVED***.${classNameStr***REMOVED***${funcName***REMOVED***()' ` +
                `must be an instance of class ${expectedClassName***REMOVED***.`);
        ***REMOVED***
        return (`The parameter '${paramName***REMOVED***' passed into ` +
            `'${moduleName***REMOVED***.${classNameStr***REMOVED***${funcName***REMOVED***()' ` +
            `must be an instance of class ${expectedClassName***REMOVED***.`);
    ***REMOVED***,
    'missing-a-method': ({ expectedMethod, paramName, moduleName, className, funcName, ***REMOVED***) => {
        if (!expectedMethod ||
            !paramName ||
            !moduleName ||
            !className ||
            !funcName) {
            throw new Error(`Unexpected input to 'missing-a-method' error.`);
        ***REMOVED***
        return (`${moduleName***REMOVED***.${className***REMOVED***.${funcName***REMOVED***() expected the ` +
            `'${paramName***REMOVED***' parameter to expose a '${expectedMethod***REMOVED***' method.`);
    ***REMOVED***,
    'add-to-cache-list-unexpected-type': ({ entry ***REMOVED***) => {
        return (`An unexpected entry was passed to ` +
            `'workbox-precaching.PrecacheController.addToCacheList()' The entry ` +
            `'${JSON.stringify(entry)***REMOVED***' isn't supported. You must supply an array of ` +
            `strings with one or more characters, objects with a url property or ` +
            `Request objects.`);
    ***REMOVED***,
    'add-to-cache-list-conflicting-entries': ({ firstEntry, secondEntry ***REMOVED***) => {
        if (!firstEntry || !secondEntry) {
            throw new Error(`Unexpected input to ` + `'add-to-cache-list-duplicate-entries' error.`);
        ***REMOVED***
        return (`Two of the entries passed to ` +
            `'workbox-precaching.PrecacheController.addToCacheList()' had the URL ` +
            `${firstEntry***REMOVED*** but different revision details. Workbox is ` +
            `unable to cache and version the asset correctly. Please remove one ` +
            `of the entries.`);
    ***REMOVED***,
    'plugin-error-request-will-fetch': ({ thrownErrorMessage ***REMOVED***) => {
        if (!thrownErrorMessage) {
            throw new Error(`Unexpected input to ` + `'plugin-error-request-will-fetch', error.`);
        ***REMOVED***
        return (`An error was thrown by a plugins 'requestWillFetch()' method. ` +
            `The thrown error message was: '${thrownErrorMessage***REMOVED***'.`);
    ***REMOVED***,
    'invalid-cache-name': ({ cacheNameId, value ***REMOVED***) => {
        if (!cacheNameId) {
            throw new Error(`Expected a 'cacheNameId' for error 'invalid-cache-name'`);
        ***REMOVED***
        return (`You must provide a name containing at least one character for ` +
            `setCacheDetails({${cacheNameId***REMOVED***: '...'***REMOVED***). Received a value of ` +
            `'${JSON.stringify(value)***REMOVED***'`);
    ***REMOVED***,
    'unregister-route-but-not-found-with-method': ({ method ***REMOVED***) => {
        if (!method) {
            throw new Error(`Unexpected input to ` +
                `'unregister-route-but-not-found-with-method' error.`);
        ***REMOVED***
        return (`The route you're trying to unregister was not  previously ` +
            `registered for the method type '${method***REMOVED***'.`);
    ***REMOVED***,
    'unregister-route-route-not-registered': () => {
        return (`The route you're trying to unregister was not previously ` +
            `registered.`);
    ***REMOVED***,
    'queue-replay-failed': ({ name ***REMOVED***) => {
        return `Replaying the background sync queue '${name***REMOVED***' failed.`;
    ***REMOVED***,
    'duplicate-queue-name': ({ name ***REMOVED***) => {
        return (`The Queue name '${name***REMOVED***' is already being used. ` +
            `All instances of backgroundSync.Queue must be given unique names.`);
    ***REMOVED***,
    'expired-test-without-max-age': ({ methodName, paramName ***REMOVED***) => {
        return (`The '${methodName***REMOVED***()' method can only be used when the ` +
            `'${paramName***REMOVED***' is used in the constructor.`);
    ***REMOVED***,
    'unsupported-route-type': ({ moduleName, className, funcName, paramName ***REMOVED***) => {
        return (`The supplied '${paramName***REMOVED***' parameter was an unsupported type. ` +
            `Please check the docs for ${moduleName***REMOVED***.${className***REMOVED***.${funcName***REMOVED*** for ` +
            `valid input types.`);
    ***REMOVED***,
    'not-array-of-class': ({ value, expectedClass, moduleName, className, funcName, paramName, ***REMOVED***) => {
        return (`The supplied '${paramName***REMOVED***' parameter must be an array of ` +
            `'${expectedClass***REMOVED***' objects. Received '${JSON.stringify(value)***REMOVED***,'. ` +
            `Please check the call to ${moduleName***REMOVED***.${className***REMOVED***.${funcName***REMOVED***() ` +
            `to fix the issue.`);
    ***REMOVED***,
    'max-entries-or-age-required': ({ moduleName, className, funcName ***REMOVED***) => {
        return (`You must define either config.maxEntries or config.maxAgeSeconds` +
            `in ${moduleName***REMOVED***.${className***REMOVED***.${funcName***REMOVED***`);
    ***REMOVED***,
    'statuses-or-headers-required': ({ moduleName, className, funcName ***REMOVED***) => {
        return (`You must define either config.statuses or config.headers` +
            `in ${moduleName***REMOVED***.${className***REMOVED***.${funcName***REMOVED***`);
    ***REMOVED***,
    'invalid-string': ({ moduleName, funcName, paramName ***REMOVED***) => {
        if (!paramName || !moduleName || !funcName) {
            throw new Error(`Unexpected input to 'invalid-string' error.`);
        ***REMOVED***
        return (`When using strings, the '${paramName***REMOVED***' parameter must start with ` +
            `'http' (for cross-origin matches) or '/' (for same-origin matches). ` +
            `Please see the docs for ${moduleName***REMOVED***.${funcName***REMOVED***() for ` +
            `more info.`);
    ***REMOVED***,
    'channel-name-required': () => {
        return (`You must provide a channelName to construct a ` +
            `BroadcastCacheUpdate instance.`);
    ***REMOVED***,
    'invalid-responses-are-same-args': () => {
        return (`The arguments passed into responsesAreSame() appear to be ` +
            `invalid. Please ensure valid Responses are used.`);
    ***REMOVED***,
    'expire-custom-caches-only': () => {
        return (`You must provide a 'cacheName' property when using the ` +
            `expiration plugin with a runtime caching strategy.`);
    ***REMOVED***,
    'unit-must-be-bytes': ({ normalizedRangeHeader ***REMOVED***) => {
        if (!normalizedRangeHeader) {
            throw new Error(`Unexpected input to 'unit-must-be-bytes' error.`);
        ***REMOVED***
        return (`The 'unit' portion of the Range header must be set to 'bytes'. ` +
            `The Range header provided was "${normalizedRangeHeader***REMOVED***"`);
    ***REMOVED***,
    'single-range-only': ({ normalizedRangeHeader ***REMOVED***) => {
        if (!normalizedRangeHeader) {
            throw new Error(`Unexpected input to 'single-range-only' error.`);
        ***REMOVED***
        return (`Multiple ranges are not supported. Please use a  single start ` +
            `value, and optional end value. The Range header provided was ` +
            `"${normalizedRangeHeader***REMOVED***"`);
    ***REMOVED***,
    'invalid-range-values': ({ normalizedRangeHeader ***REMOVED***) => {
        if (!normalizedRangeHeader) {
            throw new Error(`Unexpected input to 'invalid-range-values' error.`);
        ***REMOVED***
        return (`The Range header is missing both start and end values. At least ` +
            `one of those values is needed. The Range header provided was ` +
            `"${normalizedRangeHeader***REMOVED***"`);
    ***REMOVED***,
    'no-range-header': () => {
        return `No Range header was found in the Request provided.`;
    ***REMOVED***,
    'range-not-satisfiable': ({ size, start, end ***REMOVED***) => {
        return (`The start (${start***REMOVED***) and end (${end***REMOVED***) values in the Range are ` +
            `not satisfiable by the cached response, which is ${size***REMOVED*** bytes.`);
    ***REMOVED***,
    'attempt-to-cache-non-get-request': ({ url, method ***REMOVED***) => {
        return (`Unable to cache '${url***REMOVED***' because it is a '${method***REMOVED***' request and ` +
            `only 'GET' requests can be cached.`);
    ***REMOVED***,
    'cache-put-with-no-response': ({ url ***REMOVED***) => {
        return (`There was an attempt to cache '${url***REMOVED***' but the response was not ` +
            `defined.`);
    ***REMOVED***,
    'no-response': ({ url, error ***REMOVED***) => {
        let message = `The strategy could not generate a response for '${url***REMOVED***'.`;
        if (error) {
            message += ` The underlying error is ${error***REMOVED***.`;
        ***REMOVED***
        return message;
    ***REMOVED***,
    'bad-precaching-response': ({ url, status ***REMOVED***) => {
        return (`The precaching request for '${url***REMOVED***' failed` +
            (status ? ` with an HTTP status of ${status***REMOVED***.` : `.`));
    ***REMOVED***,
    'non-precached-url': ({ url ***REMOVED***) => {
        return (`createHandlerBoundToURL('${url***REMOVED***') was called, but that URL is ` +
            `not precached. Please pass in a URL that is precached instead.`);
    ***REMOVED***,
    'add-to-cache-list-conflicting-integrities': ({ url ***REMOVED***) => {
        return (`Two of the entries passed to ` +
            `'workbox-precaching.PrecacheController.addToCacheList()' had the URL ` +
            `${url***REMOVED*** with different integrity values. Please remove one of them.`);
    ***REMOVED***,
    'missing-precache-entry': ({ cacheName, url ***REMOVED***) => {
        return `Unable to find a precached response in ${cacheName***REMOVED*** for ${url***REMOVED***.`;
    ***REMOVED***,
    'cross-origin-copy-response': ({ origin ***REMOVED***) => {
        return (`workbox-core.copyResponse() can only be used with same-origin ` +
            `responses. It was passed a response with origin ${origin***REMOVED***.`);
    ***REMOVED***,
    'opaque-streams-source': ({ type ***REMOVED***) => {
        const message = `One of the workbox-streams sources resulted in an ` +
            `'${type***REMOVED***' response.`;
        if (type === 'opaqueredirect') {
            return (`${message***REMOVED*** Please do not use a navigation request that results ` +
                `in a redirect as a source.`);
        ***REMOVED***
        return `${message***REMOVED*** Please ensure your sources are CORS-enabled.`;
    ***REMOVED***,
***REMOVED***;
