/*
	MIT License http://www.opensource.org/licenses/mit-license.php
*/

"use strict";

const RuntimeModule = require("../RuntimeModule");
const Template = require("../Template");

/** @typedef {import("../Compilation")***REMOVED*** Compilation */
/** @typedef {import("../RuntimeTemplate")***REMOVED*** RuntimeTemplate */

class ChunkPrefetchFunctionRuntimeModule extends RuntimeModule {
	/**
	 * @param {string***REMOVED*** childType TODO
	 * @param {string***REMOVED*** runtimeFunction TODO
	 * @param {string***REMOVED*** runtimeHandlers TODO
	 */
	constructor(childType, runtimeFunction, runtimeHandlers) {
		super(`chunk ${childType***REMOVED*** function`);
		this.childType = childType;
		this.runtimeFunction = runtimeFunction;
		this.runtimeHandlers = runtimeHandlers;
	***REMOVED***

	/**
	 * @returns {string | null***REMOVED*** runtime code
	 */
	generate() {
		const { runtimeFunction, runtimeHandlers ***REMOVED*** = this;
		const compilation = /** @type {Compilation***REMOVED*** */ (this.compilation);
		const { runtimeTemplate ***REMOVED*** = compilation;
		return Template.asString([
			`${runtimeHandlers***REMOVED*** = {***REMOVED***;`,
			`${runtimeFunction***REMOVED*** = ${runtimeTemplate.basicFunction("chunkId", [
				// map is shorter than forEach
				`Object.keys(${runtimeHandlers***REMOVED***).map(${runtimeTemplate.basicFunction(
					"key",
					`${runtimeHandlers***REMOVED***[key](chunkId);`
				)***REMOVED***);`
			])***REMOVED***`
		]);
	***REMOVED***
***REMOVED***

module.exports = ChunkPrefetchFunctionRuntimeModule;
