'use strict';

exports.__esModule = true;

const log = require('debug')('eslint-module-utils:ModuleCache');

/** @type {import('./ModuleCache').ModuleCache***REMOVED*** */
class ModuleCache {
  /** @param {typeof import('./ModuleCache').ModuleCache.prototype.map***REMOVED*** map */
  constructor(map) {
    this.map = map || /** @type {{typeof import('./ModuleCache').ModuleCache.prototype.map***REMOVED*** */ new Map();
  ***REMOVED***

  /** @type {typeof import('./ModuleCache').ModuleCache.prototype.set***REMOVED*** */
  set(cacheKey, result) {
    this.map.set(cacheKey, { result, lastSeen: process.hrtime() ***REMOVED***);
    log('setting entry for', cacheKey);
    return result;
  ***REMOVED***

  /** @type {typeof import('./ModuleCache').ModuleCache.prototype.get***REMOVED*** */
  get(cacheKey, settings) {
    if (this.map.has(cacheKey)) {
      const f = this.map.get(cacheKey);
      // check freshness
      // @ts-expect-error TS can't narrow properly from `has` and `get`
      if (process.hrtime(f.lastSeen)[0] < settings.lifetime) { return f.result; ***REMOVED***
    ***REMOVED*** else {
      log('cache miss for', cacheKey);
    ***REMOVED***
    // cache miss
    return undefined;
  ***REMOVED***

  /** @type {typeof import('./ModuleCache').ModuleCache.getSettings***REMOVED*** */
  static getSettings(settings) {
    /** @type {ReturnType<typeof ModuleCache.getSettings>***REMOVED*** */
    const cacheSettings = Object.assign({
      lifetime: 30,  // seconds
    ***REMOVED***, settings['import/cache']);

    // parse infinity
    // @ts-expect-error the lack of type overlap is because we're abusing `cacheSettings` as a temporary object
    if (cacheSettings.lifetime === 'âˆž' || cacheSettings.lifetime === 'Infinity') {
      cacheSettings.lifetime = Infinity;
    ***REMOVED***

    return cacheSettings;
  ***REMOVED***
***REMOVED***

exports.default = ModuleCache;
