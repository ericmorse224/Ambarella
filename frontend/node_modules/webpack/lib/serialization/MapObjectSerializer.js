/*
	MIT License http://www.opensource.org/licenses/mit-license.php
*/

"use strict";

/** @typedef {import("./ObjectMiddleware").ObjectDeserializerContext***REMOVED*** ObjectDeserializerContext */
/** @typedef {import("./ObjectMiddleware").ObjectSerializerContext***REMOVED*** ObjectSerializerContext */

class MapObjectSerializer {
	/**
	 * @template K, V
	 * @param {Map<K, V>***REMOVED*** obj map
	 * @param {ObjectSerializerContext***REMOVED*** context context
	 */
	serialize(obj, context) {
		context.write(obj.size);
		for (const key of obj.keys()) {
			context.write(key);
		***REMOVED***
		for (const value of obj.values()) {
			context.write(value);
		***REMOVED***
	***REMOVED***

	/**
	 * @template K, V
	 * @param {ObjectDeserializerContext***REMOVED*** context context
	 * @returns {Map<K, V>***REMOVED*** map
	 */
	deserialize(context) {
		/** @type {number***REMOVED*** */
		const size = context.read();
		/** @type {Map<K, V>***REMOVED*** */
		const map = new Map();
		/** @type {K[]***REMOVED*** */
		const keys = [];
		for (let i = 0; i < size; i++) {
			keys.push(context.read());
		***REMOVED***
		for (let i = 0; i < size; i++) {
			map.set(keys[i], context.read());
		***REMOVED***
		return map;
	***REMOVED***
***REMOVED***

module.exports = MapObjectSerializer;
