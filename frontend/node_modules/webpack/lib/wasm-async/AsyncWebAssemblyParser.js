/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const t = require("@webassemblyjs/ast");
const { decode ***REMOVED*** = require("@webassemblyjs/wasm-parser");
const EnvironmentNotSupportAsyncWarning = require("../EnvironmentNotSupportAsyncWarning");
const Parser = require("../Parser");
const StaticExportsDependency = require("../dependencies/StaticExportsDependency");
const WebAssemblyImportDependency = require("../dependencies/WebAssemblyImportDependency");

/** @typedef {import("../Module").BuildInfo***REMOVED*** BuildInfo */
/** @typedef {import("../Module").BuildMeta***REMOVED*** BuildMeta */
/** @typedef {import("../Parser").ParserState***REMOVED*** ParserState */
/** @typedef {import("../Parser").PreparsedAst***REMOVED*** PreparsedAst */

const decoderOpts = {
	ignoreCodeSection: true,
	ignoreDataSection: true,

	// this will avoid having to lookup with identifiers in the ModuleContext
	ignoreCustomNameSection: true
***REMOVED***;

class WebAssemblyParser extends Parser {
	/**
	 * @param {{***REMOVED***=***REMOVED*** options parser options
	 */
	constructor(options) {
		super();
		this.hooks = Object.freeze({***REMOVED***);
		this.options = options;
	***REMOVED***

	/**
	 * @param {string | Buffer | PreparsedAst***REMOVED*** source the source to parse
	 * @param {ParserState***REMOVED*** state the parser state
	 * @returns {ParserState***REMOVED*** the parser state
	 */
	parse(source, state) {
		if (!Buffer.isBuffer(source)) {
			throw new Error("WebAssemblyParser input must be a Buffer");
		***REMOVED***

		// flag it as async module
		const buildInfo = /** @type {BuildInfo***REMOVED*** */ (state.module.buildInfo);
		buildInfo.strict = true;
		const BuildMeta = /** @type {BuildMeta***REMOVED*** */ (state.module.buildMeta);
		BuildMeta.exportsType = "namespace";
		BuildMeta.async = true;
		EnvironmentNotSupportAsyncWarning.check(
			state.module,
			state.compilation.runtimeTemplate,
			"asyncWebAssembly"
		);

		// parse it
		const program = decode(source, decoderOpts);
		const module = program.body[0];
		/** @type {Array<string>***REMOVED*** */
		const exports = [];
		t.traverse(module, {
			ModuleExport({ node ***REMOVED***) {
				exports.push(node.name);
			***REMOVED***,

			ModuleImport({ node ***REMOVED***) {
				const dep = new WebAssemblyImportDependency(
					node.module,
					node.name,
					node.descr,
					false
				);

				state.module.addDependency(dep);
			***REMOVED***
		***REMOVED***);

		state.module.addDependency(new StaticExportsDependency(exports, false));

		return state;
	***REMOVED***
***REMOVED***

module.exports = WebAssemblyParser;
