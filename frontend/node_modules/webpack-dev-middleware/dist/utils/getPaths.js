"use strict";

/** @typedef {import("webpack").Compiler***REMOVED*** Compiler */

/** @typedef {import("webpack").Stats***REMOVED*** Stats */

/** @typedef {import("webpack").MultiStats***REMOVED*** MultiStats */

/** @typedef {import("../index.js").IncomingMessage***REMOVED*** IncomingMessage */

/** @typedef {import("../index.js").ServerResponse***REMOVED*** ServerResponse */

/**
 * @template {IncomingMessage***REMOVED*** Request
 * @template {ServerResponse***REMOVED*** Response
 * @param {import("../index.js").Context<Request, Response>***REMOVED*** context
 */
function getPaths(context) {
  const {
    stats,
    options
  ***REMOVED*** = context;
  /** @type {Stats[]***REMOVED*** */

  const childStats =
  /** @type {MultiStats***REMOVED*** */
  stats.stats ?
  /** @type {MultiStats***REMOVED*** */
  stats.stats : [
  /** @type {Stats***REMOVED*** */
  stats];
  const publicPaths = [];

  for (const {
    compilation
  ***REMOVED*** of childStats) {
    // The `output.path` is always present and always absolute
    const outputPath = compilation.getPath(compilation.outputOptions.path || "");
    const publicPath = options.publicPath ? compilation.getPath(options.publicPath) : compilation.outputOptions.publicPath ? compilation.getPath(compilation.outputOptions.publicPath) : "";
    publicPaths.push({
      outputPath,
      publicPath
    ***REMOVED***);
  ***REMOVED***

  return publicPaths;
***REMOVED***

module.exports = getPaths;