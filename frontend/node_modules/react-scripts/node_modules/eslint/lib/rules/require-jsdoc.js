/**
 * @fileoverview Rule to check for jsdoc presence.
 * @author Gyandeep Singh
 * @deprecated in ESLint v5.10.0
 */
"use strict";

/** @type {import('../shared/types').Rule***REMOVED*** */
module.exports = {
    meta: {
        type: "suggestion",

        docs: {
            description: "Require JSDoc comments",
            recommended: false,
            url: "https://eslint.org/docs/latest/rules/require-jsdoc"
        ***REMOVED***,

        schema: [
            {
                type: "object",
                properties: {
                    require: {
                        type: "object",
                        properties: {
                            ClassDeclaration: {
                                type: "boolean",
                                default: false
                            ***REMOVED***,
                            MethodDefinition: {
                                type: "boolean",
                                default: false
                            ***REMOVED***,
                            FunctionDeclaration: {
                                type: "boolean",
                                default: true
                            ***REMOVED***,
                            ArrowFunctionExpression: {
                                type: "boolean",
                                default: false
                            ***REMOVED***,
                            FunctionExpression: {
                                type: "boolean",
                                default: false
                            ***REMOVED***
                        ***REMOVED***,
                        additionalProperties: false,
                        default: {***REMOVED***
                    ***REMOVED***
                ***REMOVED***,
                additionalProperties: false
            ***REMOVED***
        ],

        deprecated: true,
        replacedBy: [],

        messages: {
            missingJSDocComment: "Missing JSDoc comment."
        ***REMOVED***
    ***REMOVED***,

    create(context) {
        const source = context.sourceCode;
        const DEFAULT_OPTIONS = {
            FunctionDeclaration: true,
            MethodDefinition: false,
            ClassDeclaration: false,
            ArrowFunctionExpression: false,
            FunctionExpression: false
        ***REMOVED***;
        const options = Object.assign(DEFAULT_OPTIONS, context.options[0] && context.options[0].require);

        /**
         * Report the error message
         * @param {ASTNode***REMOVED*** node node to report
         * @returns {void***REMOVED***
         */
        function report(node) {
            context.report({ node, messageId: "missingJSDocComment" ***REMOVED***);
        ***REMOVED***

        /**
         * Check if the jsdoc comment is present or not.
         * @param {ASTNode***REMOVED*** node node to examine
         * @returns {void***REMOVED***
         */
        function checkJsDoc(node) {
            const jsdocComment = source.getJSDocComment(node);

            if (!jsdocComment) {
                report(node);
            ***REMOVED***
        ***REMOVED***

        return {
            FunctionDeclaration(node) {
                if (options.FunctionDeclaration) {
                    checkJsDoc(node);
                ***REMOVED***
            ***REMOVED***,
            FunctionExpression(node) {
                if (
                    (options.MethodDefinition && node.parent.type === "MethodDefinition") ||
                    (options.FunctionExpression && (node.parent.type === "VariableDeclarator" || (node.parent.type === "Property" && node === node.parent.value)))
                ) {
                    checkJsDoc(node);
                ***REMOVED***
            ***REMOVED***,
            ClassDeclaration(node) {
                if (options.ClassDeclaration) {
                    checkJsDoc(node);
                ***REMOVED***
            ***REMOVED***,
            ArrowFunctionExpression(node) {
                if (options.ArrowFunctionExpression && node.parent.type === "VariableDeclarator") {
                    checkJsDoc(node);
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***;
    ***REMOVED***
***REMOVED***;
