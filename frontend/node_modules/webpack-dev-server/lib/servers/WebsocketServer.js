"use strict";

const WebSocket = require("ws");
const BaseServer = require("./BaseServer");

/** @typedef {import("../Server").WebSocketServerConfiguration***REMOVED*** WebSocketServerConfiguration */
/** @typedef {import("../Server").ClientConnection***REMOVED*** ClientConnection */

module.exports = class WebsocketServer extends BaseServer {
  static heartbeatInterval = 1000;

  /**
   * @param {import("../Server")***REMOVED*** server
   */
  constructor(server) {
    super(server);

    /** @type {import("ws").ServerOptions***REMOVED*** */
    const options = {
      .../** @type {WebSocketServerConfiguration***REMOVED*** */
      (this.server.options.webSocketServer).options,
      clientTracking: false,
    ***REMOVED***;
    const isNoServerMode =
      typeof options.port === "undefined" &&
      typeof options.server === "undefined";

    if (isNoServerMode) {
      options.noServer = true;
    ***REMOVED***

    this.implementation = new WebSocket.Server(options);

    /** @type {import("http").Server***REMOVED*** */
    (this.server.server).on(
      "upgrade",
      /**
       * @param {import("http").IncomingMessage***REMOVED*** req
       * @param {import("stream").Duplex***REMOVED*** sock
       * @param {Buffer***REMOVED*** head
       */
      (req, sock, head) => {
        if (!this.implementation.shouldHandle(req)) {
          return;
        ***REMOVED***

        this.implementation.handleUpgrade(req, sock, head, (connection) => {
          this.implementation.emit("connection", connection, req);
        ***REMOVED***);
      ***REMOVED***
    );

    this.implementation.on(
      "error",
      /**
       * @param {Error***REMOVED*** err
       */
      (err) => {
        this.server.logger.error(err.message);
      ***REMOVED***
    );

    const interval = setInterval(() => {
      this.clients.forEach(
        /**
         * @param {ClientConnection***REMOVED*** client
         */
        (client) => {
          if (client.isAlive === false) {
            client.terminate();

            return;
          ***REMOVED***

          client.isAlive = false;
          client.ping(() => {***REMOVED***);
        ***REMOVED***
      );
    ***REMOVED***, WebsocketServer.heartbeatInterval);

    this.implementation.on(
      "connection",
      /**
       * @param {ClientConnection***REMOVED*** client
       */
      (client) => {
        this.clients.push(client);

        client.isAlive = true;

        client.on("pong", () => {
          client.isAlive = true;
        ***REMOVED***);

        client.on("close", () => {
          this.clients.splice(this.clients.indexOf(client), 1);
        ***REMOVED***);
      ***REMOVED***
    );

    this.implementation.on("close", () => {
      clearInterval(interval);
    ***REMOVED***);
  ***REMOVED***
***REMOVED***;
