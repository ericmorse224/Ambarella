const color = require('kleur');
const Prompt = require('./prompt');
const { style, clear ***REMOVED*** = require('../util');
const { erase, cursor ***REMOVED*** = require('sisteransi');

/**
 * ConfirmPrompt Base Element
 * @param {Object***REMOVED*** opts Options
 * @param {String***REMOVED*** opts.message Message
 * @param {Boolean***REMOVED*** [opts.initial] Default value (true/false)
 * @param {Stream***REMOVED*** [opts.stdin] The Readable stream to listen to
 * @param {Stream***REMOVED*** [opts.stdout] The Writable stream to write readline data to
 * @param {String***REMOVED*** [opts.yes] The "Yes" label
 * @param {String***REMOVED*** [opts.yesOption] The "Yes" option when choosing between yes/no
 * @param {String***REMOVED*** [opts.no] The "No" label
 * @param {String***REMOVED*** [opts.noOption] The "No" option when choosing between yes/no
 */
class ConfirmPrompt extends Prompt {
  constructor(opts={***REMOVED***) {
    super(opts);
    this.msg = opts.message;
    this.value = opts.initial;
    this.initialValue = !!opts.initial;
    this.yesMsg = opts.yes || 'yes';
    this.yesOption = opts.yesOption || '(Y/n)';
    this.noMsg = opts.no || 'no';
    this.noOption = opts.noOption || '(y/N)';
    this.render();
  ***REMOVED***

  reset() {
    this.value = this.initialValue;
    this.fire();
    this.render();
  ***REMOVED***

  exit() {
    this.abort();
  ***REMOVED***

  abort() {
    this.done = this.aborted = true;
    this.fire();
    this.render();
    this.out.write('\n');
    this.close();
  ***REMOVED***

  submit() {
    this.value = this.value || false;
    this.done = true;
    this.aborted = false;
    this.fire();
    this.render();
    this.out.write('\n');
    this.close();
  ***REMOVED***

  _(c, key) {
    if (c.toLowerCase() === 'y') {
      this.value = true;
      return this.submit();
    ***REMOVED***
    if (c.toLowerCase() === 'n') {
      this.value = false;
      return this.submit();
    ***REMOVED***
    return this.bell();
  ***REMOVED***

  render() {
    if (this.closed) return;
    if (this.firstRender) this.out.write(cursor.hide);
    else this.out.write(clear(this.outputText, this.out.columns));
    super.render();

    this.outputText = [
      style.symbol(this.done, this.aborted),
      color.bold(this.msg),
      style.delimiter(this.done),
      this.done ? (this.value ? this.yesMsg : this.noMsg)
          : color.gray(this.initialValue ? this.yesOption : this.noOption)
    ].join(' ');

    this.out.write(erase.line + cursor.to(0) + this.outputText);
  ***REMOVED***
***REMOVED***

module.exports = ConfirmPrompt;
