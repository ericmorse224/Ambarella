/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

class Semaphore {
	/**
	 * Creates an instance of Semaphore.
	 * @param {number***REMOVED*** available the amount available number of "tasks"
	 * in the Semaphore
	 */
	constructor(available) {
		this.available = available;
		/** @type {(() => void)[]***REMOVED*** */
		this.waiters = [];
		/** @private */
		this._continue = this._continue.bind(this);
	***REMOVED***

	/**
	 * @param {() => void***REMOVED*** callback function block to capture and run
	 * @returns {void***REMOVED***
	 */
	acquire(callback) {
		if (this.available > 0) {
			this.available--;
			callback();
		***REMOVED*** else {
			this.waiters.push(callback);
		***REMOVED***
	***REMOVED***

	release() {
		this.available++;
		if (this.waiters.length > 0) {
			process.nextTick(this._continue);
		***REMOVED***
	***REMOVED***

	_continue() {
		if (this.available > 0 && this.waiters.length > 0) {
			this.available--;
			const callback = /** @type {(() => void)***REMOVED*** */ (this.waiters.pop());
			callback();
		***REMOVED***
	***REMOVED***
***REMOVED***

module.exports = Semaphore;
