"use strict";

exports.__esModule = true;
exports.applyMissingDependenciesDefaults = applyMissingDependenciesDefaults;
exports.validateIncludeExclude = validateIncludeExclude;
var _utils = require("./utils");
function patternToRegExp(pattern) {
  if (pattern instanceof RegExp) return pattern;
  try {
    return new RegExp(`^${pattern***REMOVED***$`);
  ***REMOVED*** catch (_unused) {
    return null;
  ***REMOVED***
***REMOVED***
function buildUnusedError(label, unused) {
  if (!unused.length) return "";
  return `  - The following "${label***REMOVED***" patterns didn't match any polyfill:\n` + unused.map(original => `    ${String(original)***REMOVED***\n`).join("");
***REMOVED***
function buldDuplicatesError(duplicates) {
  if (!duplicates.size) return "";
  return `  - The following polyfills were matched both by "include" and "exclude" patterns:\n` + Array.from(duplicates, name => `    ${name***REMOVED***\n`).join("");
***REMOVED***
function validateIncludeExclude(provider, polyfills, includePatterns, excludePatterns) {
  let current;
  const filter = pattern => {
    const regexp = patternToRegExp(pattern);
    if (!regexp) return false;
    let matched = false;
    for (const polyfill of polyfills.keys()) {
      if (regexp.test(polyfill)) {
        matched = true;
        current.add(polyfill);
      ***REMOVED***
    ***REMOVED***
    return !matched;
  ***REMOVED***;

  // prettier-ignore
  const include = current = new Set();
  const unusedInclude = Array.from(includePatterns).filter(filter);

  // prettier-ignore
  const exclude = current = new Set();
  const unusedExclude = Array.from(excludePatterns).filter(filter);
  const duplicates = (0, _utils.intersection)(include, exclude);
  if (duplicates.size > 0 || unusedInclude.length > 0 || unusedExclude.length > 0) {
    throw new Error(`Error while validating the "${provider***REMOVED***" provider options:\n` + buildUnusedError("include", unusedInclude) + buildUnusedError("exclude", unusedExclude) + buldDuplicatesError(duplicates));
  ***REMOVED***
  return {
    include,
    exclude
  ***REMOVED***;
***REMOVED***
function applyMissingDependenciesDefaults(options, babelApi) {
  const {
    missingDependencies = {***REMOVED***
  ***REMOVED*** = options;
  if (missingDependencies === false) return false;
  const caller = babelApi.caller(caller => caller == null ? void 0 : caller.name);
  const {
    log = "deferred",
    inject = caller === "rollup-plugin-babel" ? "throw" : "import",
    all = false
  ***REMOVED*** = missingDependencies;
  return {
    log,
    inject,
    all
  ***REMOVED***;
***REMOVED***