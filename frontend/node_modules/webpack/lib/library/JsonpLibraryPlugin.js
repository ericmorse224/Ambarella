/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const { ConcatSource ***REMOVED*** = require("webpack-sources");
const AbstractLibraryPlugin = require("./AbstractLibraryPlugin");

/** @typedef {import("webpack-sources").Source***REMOVED*** Source */
/** @typedef {import("../../declarations/WebpackOptions").LibraryOptions***REMOVED*** LibraryOptions */
/** @typedef {import("../../declarations/WebpackOptions").LibraryType***REMOVED*** LibraryType */
/** @typedef {import("../Chunk")***REMOVED*** Chunk */
/** @typedef {import("../Compilation").ChunkHashContext***REMOVED*** ChunkHashContext */
/** @typedef {import("../Compiler")***REMOVED*** Compiler */
/** @typedef {import("../javascript/JavascriptModulesPlugin").RenderContext***REMOVED*** RenderContext */
/** @typedef {import("../util/Hash")***REMOVED*** Hash */
/** @template T @typedef {import("./AbstractLibraryPlugin").LibraryContext<T>***REMOVED*** LibraryContext<T> */

/**
 * @typedef {object***REMOVED*** JsonpLibraryPluginOptions
 * @property {LibraryType***REMOVED*** type
 */

/**
 * @typedef {object***REMOVED*** JsonpLibraryPluginParsed
 * @property {string***REMOVED*** name
 */

/**
 * @typedef {JsonpLibraryPluginParsed***REMOVED*** T
 * @extends {AbstractLibraryPlugin<JsonpLibraryPluginParsed>***REMOVED***
 */
class JsonpLibraryPlugin extends AbstractLibraryPlugin {
	/**
	 * @param {JsonpLibraryPluginOptions***REMOVED*** options the plugin options
	 */
	constructor(options) {
		super({
			pluginName: "JsonpLibraryPlugin",
			type: options.type
		***REMOVED***);
	***REMOVED***

	/**
	 * @param {LibraryOptions***REMOVED*** library normalized library option
	 * @returns {T | false***REMOVED*** preprocess as needed by overriding
	 */
	parseOptions(library) {
		const { name ***REMOVED*** = library;
		if (typeof name !== "string") {
			throw new Error(
				`Jsonp library name must be a simple string. ${AbstractLibraryPlugin.COMMON_LIBRARY_NAME_MESSAGE***REMOVED***`
			);
		***REMOVED***
		const _name = /** @type {string***REMOVED*** */ (name);
		return {
			name: _name
		***REMOVED***;
	***REMOVED***

	/**
	 * @param {Source***REMOVED*** source source
	 * @param {RenderContext***REMOVED*** renderContext render context
	 * @param {LibraryContext<T>***REMOVED*** libraryContext context
	 * @returns {Source***REMOVED*** source with library export
	 */
	render(source, { chunk ***REMOVED***, { options, compilation ***REMOVED***) {
		const name = compilation.getPath(options.name, {
			chunk
		***REMOVED***);
		return new ConcatSource(`${name***REMOVED***(`, source, ")");
	***REMOVED***

	/**
	 * @param {Chunk***REMOVED*** chunk the chunk
	 * @param {Hash***REMOVED*** hash hash
	 * @param {ChunkHashContext***REMOVED*** chunkHashContext chunk hash context
	 * @param {LibraryContext<T>***REMOVED*** libraryContext context
	 * @returns {void***REMOVED***
	 */
	chunkHash(chunk, hash, chunkHashContext, { options, compilation ***REMOVED***) {
		hash.update("JsonpLibraryPlugin");
		hash.update(compilation.getPath(options.name, { chunk ***REMOVED***));
	***REMOVED***
***REMOVED***

module.exports = JsonpLibraryPlugin;
