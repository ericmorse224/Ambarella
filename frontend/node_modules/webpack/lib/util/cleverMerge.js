/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

/** @type {WeakMap<EXPECTED_OBJECT, WeakMap<EXPECTED_OBJECT, EXPECTED_OBJECT>>***REMOVED*** */
const mergeCache = new WeakMap();
/** @type {WeakMap<EXPECTED_OBJECT, Map<string, Map<string | number | boolean, EXPECTED_OBJECT>>>***REMOVED*** */
const setPropertyCache = new WeakMap();
const DELETE = Symbol("DELETE");
const DYNAMIC_INFO = Symbol("cleverMerge dynamic info");

/**
 * Merges two given objects and caches the result to avoid computation if same objects passed as arguments again.
 * @template T
 * @template O
 * @example
 * // performs cleverMerge(first, second), stores the result in WeakMap and returns result
 * cachedCleverMerge({a: 1***REMOVED***, {a: 2***REMOVED***)
 * {a: 2***REMOVED***
 *  // when same arguments passed, gets the result from WeakMap and returns it.
 * cachedCleverMerge({a: 1***REMOVED***, {a: 2***REMOVED***)
 * {a: 2***REMOVED***
 * @param {T | null | undefined***REMOVED*** first first object
 * @param {O | null | undefined***REMOVED*** second second object
 * @returns {T & O | T | O***REMOVED*** merged object of first and second object
 */
const cachedCleverMerge = (first, second) => {
	if (second === undefined) return /** @type {T***REMOVED*** */ (first);
	if (first === undefined) return /** @type {O***REMOVED*** */ (second);
	if (typeof second !== "object" || second === null)
		return /** @type {O***REMOVED*** */ (second);
	if (typeof first !== "object" || first === null)
		return /** @type {T***REMOVED*** */ (first);

	let innerCache = mergeCache.get(first);
	if (innerCache === undefined) {
		innerCache = new WeakMap();
		mergeCache.set(first, innerCache);
	***REMOVED***
	const prevMerge = /** @type {T & O***REMOVED*** */ (innerCache.get(second));
	if (prevMerge !== undefined) return prevMerge;
	const newMerge = _cleverMerge(first, second, true);
	innerCache.set(second, newMerge);
	return newMerge;
***REMOVED***;

/**
 * @template T
 * @param {Partial<T>***REMOVED*** obj object
 * @param {string***REMOVED*** property property
 * @param {string | number | boolean***REMOVED*** value assignment value
 * @returns {T***REMOVED*** new object
 */
const cachedSetProperty = (obj, property, value) => {
	let mapByProperty = setPropertyCache.get(obj);

	if (mapByProperty === undefined) {
		mapByProperty = new Map();
		setPropertyCache.set(obj, mapByProperty);
	***REMOVED***

	let mapByValue = mapByProperty.get(property);

	if (mapByValue === undefined) {
		mapByValue = new Map();
		mapByProperty.set(property, mapByValue);
	***REMOVED***

	let result = mapByValue.get(value);

	if (result) return /** @type {T***REMOVED*** */ (result);

	result = {
		...obj,
		[property]: value
	***REMOVED***;
	mapByValue.set(value, result);

	return /** @type {T***REMOVED*** */ (result);
***REMOVED***;

/**
 * @template V
 * @typedef {Map<string, V | undefined>***REMOVED*** ByValues
 */

/**
 * @typedef {object***REMOVED*** ObjectParsedPropertyEntry
 * @property {TODO | undefined***REMOVED*** base base value
 * @property {string | undefined***REMOVED*** byProperty the name of the selector property
 * @property {ByValues<TODO>***REMOVED*** byValues value depending on selector property, merged with base
 */

/** @typedef {(function(...EXPECTED_ANY): object) & { [DYNAMIC_INFO]: [DynamicFunction, object] ***REMOVED******REMOVED*** DynamicFunction */

/**
 * @typedef {object***REMOVED*** ParsedObject
 * @property {Map<string, ObjectParsedPropertyEntry>***REMOVED*** static static properties (key is property name)
 * @property {{ byProperty: string, fn: DynamicFunction ***REMOVED*** | undefined***REMOVED*** dynamic dynamic part
 */

/** @type {WeakMap<EXPECTED_OBJECT, ParsedObject>***REMOVED*** */
const parseCache = new WeakMap();

/**
 * @template {object***REMOVED*** T
 * @param {T***REMOVED*** obj the object
 * @returns {ParsedObject***REMOVED*** parsed object
 */
const cachedParseObject = obj => {
	const entry = parseCache.get(/** @type {EXPECTED_OBJECT***REMOVED*** */ (obj));
	if (entry !== undefined) return entry;
	const result = parseObject(obj);
	parseCache.set(/** @type {EXPECTED_OBJECT***REMOVED*** */ (obj), result);
	return result;
***REMOVED***;

/**
 * @template {object***REMOVED*** T
 * @template V
 * @param {T***REMOVED*** obj the object
 * @returns {ParsedObject***REMOVED*** parsed object
 */
const parseObject = obj => {
	const info = new Map();
	let dynamicInfo;
	/**
	 * @param {string***REMOVED*** p path
	 * @returns {Partial<ObjectParsedPropertyEntry>***REMOVED*** object parsed property entry
	 */
	const getInfo = p => {
		const entry = info.get(p);
		if (entry !== undefined) return entry;
		const newEntry = {
			base: undefined,
			byProperty: undefined,
			byValues: undefined
		***REMOVED***;
		info.set(p, newEntry);
		return newEntry;
	***REMOVED***;
	for (const key of Object.keys(obj)) {
		if (key.startsWith("by")) {
			const byProperty = /** @type {keyof T***REMOVED*** */ (key);
			const byObj = /** @type {TODO***REMOVED*** */ (obj[byProperty]);
			if (typeof byObj === "object") {
				for (const byValue of Object.keys(byObj)) {
					const obj = byObj[/** @type {keyof (keyof T)***REMOVED*** */ (byValue)];
					for (const key of Object.keys(obj)) {
						const entry = getInfo(key);
						if (entry.byProperty === undefined) {
							entry.byProperty = /** @type {string***REMOVED*** */ (byProperty);
							entry.byValues = new Map();
						***REMOVED*** else if (entry.byProperty !== byProperty) {
							throw new Error(
								`${/** @type {string***REMOVED*** */ (byProperty)***REMOVED*** and ${entry.byProperty***REMOVED*** for a single property is not supported`
							);
						***REMOVED***
						/** @type {ByValues<V>***REMOVED*** */
						(entry.byValues).set(
							byValue,
							obj[/** @type {keyof (keyof T)***REMOVED*** */ (key)]
						);
						if (byValue === "default") {
							for (const otherByValue of Object.keys(byObj)) {
								if (
									!(
										/** @type {ByValues<V>***REMOVED*** */
										(entry.byValues).has(otherByValue)
									)
								)
									/** @type {ByValues<V>***REMOVED*** */
									(entry.byValues).set(otherByValue, undefined);
							***REMOVED***
						***REMOVED***
					***REMOVED***
				***REMOVED***
			***REMOVED*** else if (typeof byObj === "function") {
				if (dynamicInfo === undefined) {
					dynamicInfo = {
						byProperty: key,
						fn: byObj
					***REMOVED***;
				***REMOVED*** else {
					throw new Error(
						`${key***REMOVED*** and ${dynamicInfo.byProperty***REMOVED*** when both are functions is not supported`
					);
				***REMOVED***
			***REMOVED*** else {
				const entry = getInfo(key);
				entry.base = obj[/** @type {keyof T***REMOVED*** */ (key)];
			***REMOVED***
		***REMOVED*** else {
			const entry = getInfo(key);
			entry.base = obj[/** @type {keyof T***REMOVED*** */ (key)];
		***REMOVED***
	***REMOVED***
	return {
		static: info,
		dynamic: dynamicInfo
	***REMOVED***;
***REMOVED***;

/**
 * @template {object***REMOVED*** T
 * @param {Map<string, ObjectParsedPropertyEntry>***REMOVED*** info static properties (key is property name)
 * @param {{ byProperty: string, fn: (...args: EXPECTED_ANY[]) => T ***REMOVED*** | undefined***REMOVED*** dynamicInfo dynamic part
 * @returns {T***REMOVED*** the object
 */
const serializeObject = (info, dynamicInfo) => {
	const obj = /** @type {T***REMOVED*** */ ({***REMOVED***);
	// Setup byProperty structure
	for (const entry of info.values()) {
		if (entry.byProperty !== undefined) {
			const byProperty = /** @type {keyof T***REMOVED*** */ (entry.byProperty);
			const byObj = (obj[byProperty] =
				obj[byProperty] || /** @type {TODO***REMOVED*** */ ({***REMOVED***));
			for (const byValue of entry.byValues.keys()) {
				byObj[byValue] = byObj[byValue] || {***REMOVED***;
			***REMOVED***
		***REMOVED***
	***REMOVED***
	for (const [key, entry] of info) {
		if (entry.base !== undefined) {
			obj[/** @type {keyof T***REMOVED*** */ (key)] = entry.base;
		***REMOVED***
		// Fill byProperty structure
		if (entry.byProperty !== undefined) {
			const byProperty = /** @type {keyof T***REMOVED*** */ (entry.byProperty);
			const byObj = (obj[byProperty] =
				obj[byProperty] || /** @type {TODO***REMOVED*** */ ({***REMOVED***));
			for (const byValue of Object.keys(byObj)) {
				const value = getFromByValues(entry.byValues, byValue);
				if (value !== undefined) byObj[byValue][key] = value;
			***REMOVED***
		***REMOVED***
	***REMOVED***
	if (dynamicInfo !== undefined) {
		/** @type {TODO***REMOVED*** */
		(obj)[dynamicInfo.byProperty] = dynamicInfo.fn;
	***REMOVED***
	return obj;
***REMOVED***;

const VALUE_TYPE_UNDEFINED = 0;
const VALUE_TYPE_ATOM = 1;
const VALUE_TYPE_ARRAY_EXTEND = 2;
const VALUE_TYPE_OBJECT = 3;
const VALUE_TYPE_DELETE = 4;

/**
 * @template T
 * @param {T***REMOVED*** value a single value
 * @returns {VALUE_TYPE_UNDEFINED | VALUE_TYPE_ATOM | VALUE_TYPE_ARRAY_EXTEND | VALUE_TYPE_OBJECT | VALUE_TYPE_DELETE***REMOVED*** value type
 */
const getValueType = value => {
	if (value === undefined) {
		return VALUE_TYPE_UNDEFINED;
	***REMOVED*** else if (value === DELETE) {
		return VALUE_TYPE_DELETE;
	***REMOVED*** else if (Array.isArray(value)) {
		if (value.includes("...")) return VALUE_TYPE_ARRAY_EXTEND;
		return VALUE_TYPE_ATOM;
	***REMOVED*** else if (
		typeof value === "object" &&
		value !== null &&
		(!value.constructor || value.constructor === Object)
	) {
		return VALUE_TYPE_OBJECT;
	***REMOVED***
	return VALUE_TYPE_ATOM;
***REMOVED***;

/**
 * Merges two objects. Objects are deeply clever merged.
 * Arrays might reference the old value with "...".
 * Non-object values take preference over object values.
 * @template T
 * @template O
 * @param {T***REMOVED*** first first object
 * @param {O***REMOVED*** second second object
 * @returns {T & O | T | O***REMOVED*** merged object of first and second object
 */
const cleverMerge = (first, second) => {
	if (second === undefined) return first;
	if (first === undefined) return second;
	if (typeof second !== "object" || second === null) return second;
	if (typeof first !== "object" || first === null) return first;

	return /** @type {T & O***REMOVED*** */ (_cleverMerge(first, second, false));
***REMOVED***;

/**
 * @template {object***REMOVED*** T
 * @template {object***REMOVED*** O
 * Merges two objects. Objects are deeply clever merged.
 * @param {T***REMOVED*** first first
 * @param {O***REMOVED*** second second
 * @param {boolean***REMOVED*** internalCaching should parsing of objects and nested merges be cached
 * @returns {T & O***REMOVED*** merged object of first and second object
 */
const _cleverMerge = (first, second, internalCaching = false) => {
	const firstObject = internalCaching
		? cachedParseObject(first)
		: parseObject(first);
	const { static: firstInfo, dynamic: firstDynamicInfo ***REMOVED*** = firstObject;

	// If the first argument has a dynamic part we modify the dynamic part to merge the second argument
	if (firstDynamicInfo !== undefined) {
		let { byProperty, fn ***REMOVED*** = firstDynamicInfo;
		const fnInfo = fn[DYNAMIC_INFO];
		if (fnInfo) {
			second =
				/** @type {TODO***REMOVED*** */
				(
					internalCaching
						? cachedCleverMerge(fnInfo[1], second)
						: cleverMerge(fnInfo[1], second)
				);
			fn = fnInfo[0];
		***REMOVED***
		/** @type {DynamicFunction***REMOVED*** */
		const newFn = (...args) => {
			const fnResult = fn(...args);
			return internalCaching
				? cachedCleverMerge(fnResult, second)
				: cleverMerge(fnResult, second);
		***REMOVED***;
		newFn[DYNAMIC_INFO] = [fn, second];
		return /** @type {T & O***REMOVED*** */ (
			serializeObject(firstObject.static, { byProperty, fn: newFn ***REMOVED***)
		);
	***REMOVED***

	// If the first part is static only, we merge the static parts and keep the dynamic part of the second argument
	const secondObject = internalCaching
		? cachedParseObject(second)
		: parseObject(second);
	const { static: secondInfo, dynamic: secondDynamicInfo ***REMOVED*** = secondObject;
	/** @type {Map<string, ObjectParsedPropertyEntry>***REMOVED*** */
	const resultInfo = new Map();
	for (const [key, firstEntry] of firstInfo) {
		const secondEntry = secondInfo.get(key);
		const entry =
			secondEntry !== undefined
				? mergeEntries(firstEntry, secondEntry, internalCaching)
				: firstEntry;
		resultInfo.set(key, entry);
	***REMOVED***
	for (const [key, secondEntry] of secondInfo) {
		if (!firstInfo.has(key)) {
			resultInfo.set(key, secondEntry);
		***REMOVED***
	***REMOVED***
	return /** @type {T & O***REMOVED*** */ (serializeObject(resultInfo, secondDynamicInfo));
***REMOVED***;

/**
 * @param {ObjectParsedPropertyEntry***REMOVED*** firstEntry a
 * @param {ObjectParsedPropertyEntry***REMOVED*** secondEntry b
 * @param {boolean***REMOVED*** internalCaching should parsing of objects and nested merges be cached
 * @returns {ObjectParsedPropertyEntry***REMOVED*** new entry
 */
const mergeEntries = (firstEntry, secondEntry, internalCaching) => {
	switch (getValueType(secondEntry.base)) {
		case VALUE_TYPE_ATOM:
		case VALUE_TYPE_DELETE:
			// No need to consider firstEntry at all
			// second value override everything
			// = second.base + second.byProperty
			return secondEntry;
		case VALUE_TYPE_UNDEFINED:
			if (!firstEntry.byProperty) {
				// = first.base + second.byProperty
				return {
					base: firstEntry.base,
					byProperty: secondEntry.byProperty,
					byValues: secondEntry.byValues
				***REMOVED***;
			***REMOVED*** else if (firstEntry.byProperty !== secondEntry.byProperty) {
				throw new Error(
					`${firstEntry.byProperty***REMOVED*** and ${secondEntry.byProperty***REMOVED*** for a single property is not supported`
				);
			***REMOVED*** else {
				// = first.base + (first.byProperty + second.byProperty)
				// need to merge first and second byValues
				const newByValues = new Map(firstEntry.byValues);
				for (const [key, value] of secondEntry.byValues) {
					const firstValue = getFromByValues(firstEntry.byValues, key);
					newByValues.set(
						key,
						mergeSingleValue(firstValue, value, internalCaching)
					);
				***REMOVED***
				return {
					base: firstEntry.base,
					byProperty: firstEntry.byProperty,
					byValues: newByValues
				***REMOVED***;
			***REMOVED***
		default: {
			if (!firstEntry.byProperty) {
				// The simple case
				// = (first.base + second.base) + second.byProperty
				return {
					base: mergeSingleValue(
						firstEntry.base,
						secondEntry.base,
						internalCaching
					),
					byProperty: secondEntry.byProperty,
					byValues: secondEntry.byValues
				***REMOVED***;
			***REMOVED***
			let newBase;
			const intermediateByValues = new Map(firstEntry.byValues);
			for (const [key, value] of intermediateByValues) {
				intermediateByValues.set(
					key,
					mergeSingleValue(value, secondEntry.base, internalCaching)
				);
			***REMOVED***
			if (
				Array.from(firstEntry.byValues.values()).every(value => {
					const type = getValueType(value);
					return type === VALUE_TYPE_ATOM || type === VALUE_TYPE_DELETE;
				***REMOVED***)
			) {
				// = (first.base + second.base) + ((first.byProperty + second.base) + second.byProperty)
				newBase = mergeSingleValue(
					firstEntry.base,
					secondEntry.base,
					internalCaching
				);
			***REMOVED*** else {
				// = first.base + ((first.byProperty (+default) + second.base) + second.byProperty)
				newBase = firstEntry.base;
				if (!intermediateByValues.has("default"))
					intermediateByValues.set("default", secondEntry.base);
			***REMOVED***
			if (!secondEntry.byProperty) {
				// = first.base + (first.byProperty + second.base)
				return {
					base: newBase,
					byProperty: firstEntry.byProperty,
					byValues: intermediateByValues
				***REMOVED***;
			***REMOVED*** else if (firstEntry.byProperty !== secondEntry.byProperty) {
				throw new Error(
					`${firstEntry.byProperty***REMOVED*** and ${secondEntry.byProperty***REMOVED*** for a single property is not supported`
				);
			***REMOVED***
			const newByValues = new Map(intermediateByValues);
			for (const [key, value] of secondEntry.byValues) {
				const firstValue = getFromByValues(intermediateByValues, key);
				newByValues.set(
					key,
					mergeSingleValue(firstValue, value, internalCaching)
				);
			***REMOVED***
			return {
				base: newBase,
				byProperty: firstEntry.byProperty,
				byValues: newByValues
			***REMOVED***;
		***REMOVED***
	***REMOVED***
***REMOVED***;

/**
 * @template V
 * @param {ByValues<V>***REMOVED*** byValues all values
 * @param {string***REMOVED*** key value of the selector
 * @returns {V | undefined***REMOVED*** value
 */
const getFromByValues = (byValues, key) => {
	if (key !== "default" && byValues.has(key)) {
		return byValues.get(key);
	***REMOVED***
	return byValues.get("default");
***REMOVED***;

/**
 * @template A
 * @template B
 * @param {A | A[]***REMOVED*** a value
 * @param {B | B[]***REMOVED*** b value
 * @param {boolean***REMOVED*** internalCaching should parsing of objects and nested merges be cached
 * @returns {A & B | (A | B)[] | A | A[] | B | B[]***REMOVED*** value
 */
const mergeSingleValue = (a, b, internalCaching) => {
	const bType = getValueType(b);
	const aType = getValueType(a);
	switch (bType) {
		case VALUE_TYPE_DELETE:
		case VALUE_TYPE_ATOM:
			return b;
		case VALUE_TYPE_OBJECT: {
			return aType !== VALUE_TYPE_OBJECT
				? b
				: internalCaching
					? cachedCleverMerge(a, b)
					: cleverMerge(a, b);
		***REMOVED***
		case VALUE_TYPE_UNDEFINED:
			return a;
		case VALUE_TYPE_ARRAY_EXTEND:
			switch (
				aType !== VALUE_TYPE_ATOM
					? aType
					: Array.isArray(a)
						? VALUE_TYPE_ARRAY_EXTEND
						: VALUE_TYPE_OBJECT
			) {
				case VALUE_TYPE_UNDEFINED:
					return b;
				case VALUE_TYPE_DELETE:
					return /** @type {B[]***REMOVED*** */ (b).filter(item => item !== "...");
				case VALUE_TYPE_ARRAY_EXTEND: {
					/** @type {(A | B)[]***REMOVED*** */
					const newArray = [];
					for (const item of /** @type {B[]***REMOVED*** */ (b)) {
						if (item === "...") {
							for (const item of /** @type {A[]***REMOVED*** */ (a)) {
								newArray.push(item);
							***REMOVED***
						***REMOVED*** else {
							newArray.push(item);
						***REMOVED***
					***REMOVED***
					return newArray;
				***REMOVED***
				case VALUE_TYPE_OBJECT:
					return /** @type {(A | B)[]***REMOVED*** */ (b).map(item =>
						item === "..." ? /** @type {A***REMOVED*** */ (a) : item
					);
				default:
					throw new Error("Not implemented");
			***REMOVED***
		default:
			throw new Error("Not implemented");
	***REMOVED***
***REMOVED***;

/**
 * @template {object***REMOVED*** T
 * @param {T***REMOVED*** obj the object
 * @param {(keyof T)[]=***REMOVED*** keysToKeepOriginalValue keys to keep original value
 * @returns {T***REMOVED*** the object without operations like "..." or DELETE
 */
const removeOperations = (obj, keysToKeepOriginalValue = []) => {
	const newObj = /** @type {T***REMOVED*** */ ({***REMOVED***);
	for (const _key of Object.keys(obj)) {
		const key = /** @type {keyof T***REMOVED*** */ (_key);
		const value = obj[key];
		const type = getValueType(value);
		if (type === VALUE_TYPE_OBJECT && keysToKeepOriginalValue.includes(key)) {
			newObj[key] = value;
			continue;
		***REMOVED***
		switch (type) {
			case VALUE_TYPE_UNDEFINED:
			case VALUE_TYPE_DELETE:
				break;
			case VALUE_TYPE_OBJECT:
				newObj[key] =
					/** @type {T[keyof T]***REMOVED*** */
					(
						removeOperations(
							/** @type {T***REMOVED*** */
							(value),
							keysToKeepOriginalValue
						)
					);
				break;
			case VALUE_TYPE_ARRAY_EXTEND:
				newObj[key] =
					/** @type {T[keyof T]***REMOVED*** */
					(
						/** @type {EXPECTED_ANY[]***REMOVED*** */
						(value).filter(i => i !== "...")
					);
				break;
			default:
				newObj[key] = value;
				break;
		***REMOVED***
	***REMOVED***
	return newObj;
***REMOVED***;

/**
 * @template T
 * @template {keyof T***REMOVED*** P
 * @template V
 * @param {T***REMOVED*** obj the object
 * @param {P***REMOVED*** byProperty the by description
 * @param {...V***REMOVED*** values values
 * @returns {Omit<T, P>***REMOVED*** object with merged byProperty
 */
const resolveByProperty = (obj, byProperty, ...values) => {
	if (typeof obj !== "object" || obj === null || !(byProperty in obj)) {
		return obj;
	***REMOVED***
	const { [byProperty]: _byValue, ..._remaining ***REMOVED*** = obj;
	const remaining = /** @type {T***REMOVED*** */ (_remaining);
	const byValue =
		/** @type {Record<string, T> | ((...args: V[]) => T)***REMOVED*** */
		(_byValue);
	if (typeof byValue === "object") {
		const key = /** @type {string***REMOVED*** */ (values[0]);
		if (key in byValue) {
			return cachedCleverMerge(remaining, byValue[key]);
		***REMOVED*** else if ("default" in byValue) {
			return cachedCleverMerge(remaining, byValue.default);
		***REMOVED***
		return remaining;
	***REMOVED*** else if (typeof byValue === "function") {
		// eslint-disable-next-line prefer-spread
		const result = byValue.apply(null, values);
		return cachedCleverMerge(
			remaining,
			resolveByProperty(result, byProperty, ...values)
		);
	***REMOVED***
	return obj;
***REMOVED***;

module.exports.cachedSetProperty = cachedSetProperty;
module.exports.cachedCleverMerge = cachedCleverMerge;
module.exports.cleverMerge = cleverMerge;
module.exports.resolveByProperty = resolveByProperty;
module.exports.removeOperations = removeOperations;
module.exports.DELETE = DELETE;
