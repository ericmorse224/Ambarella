/*
	MIT License http://www.opensource.org/licenses/mit-license.php
*/

"use strict";

const RuntimeGlobals = require("../RuntimeGlobals");
const RuntimeModule = require("../RuntimeModule");
const Template = require("../Template");

/** @typedef {import("../Chunk")***REMOVED*** Chunk */
/** @typedef {import("../Compilation")***REMOVED*** Compilation */

class GetMainFilenameRuntimeModule extends RuntimeModule {
	/**
	 * @param {string***REMOVED*** name readable name
	 * @param {string***REMOVED*** global global object binding
	 * @param {string***REMOVED*** filename main file name
	 */
	constructor(name, global, filename) {
		super(`get ${name***REMOVED*** filename`);
		this.global = global;
		this.filename = filename;
	***REMOVED***

	/**
	 * @returns {string | null***REMOVED*** runtime code
	 */
	generate() {
		const { global, filename ***REMOVED*** = this;
		const compilation = /** @type {Compilation***REMOVED*** */ (this.compilation);
		const chunk = /** @type {Chunk***REMOVED*** */ (this.chunk);
		const { runtimeTemplate ***REMOVED*** = compilation;
		const url = compilation.getPath(JSON.stringify(filename), {
			hash: `" + ${RuntimeGlobals.getFullHash***REMOVED***() + "`,
			hashWithLength: length =>
				`" + ${RuntimeGlobals.getFullHash***REMOVED***().slice(0, ${length***REMOVED***) + "`,
			chunk,
			runtime: chunk.runtime
		***REMOVED***);
		return Template.asString([
			`${global***REMOVED*** = ${runtimeTemplate.returningFunction(url)***REMOVED***;`
		]);
	***REMOVED***
***REMOVED***

module.exports = GetMainFilenameRuntimeModule;
