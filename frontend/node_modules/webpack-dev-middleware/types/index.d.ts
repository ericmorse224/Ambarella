/// <reference types="node" />
export = wdm;
/** @typedef {import("schema-utils/declarations/validate").Schema***REMOVED*** Schema */
/** @typedef {import("webpack").Compiler***REMOVED*** Compiler */
/** @typedef {import("webpack").MultiCompiler***REMOVED*** MultiCompiler */
/** @typedef {import("webpack").Configuration***REMOVED*** Configuration */
/** @typedef {import("webpack").Stats***REMOVED*** Stats */
/** @typedef {import("webpack").MultiStats***REMOVED*** MultiStats */
/**
 * @typedef {Object***REMOVED*** ExtendedServerResponse
 * @property {{ webpack?: { devMiddleware?: Context<IncomingMessage, ServerResponse> ***REMOVED*** ***REMOVED******REMOVED*** [locals]
 */
/** @typedef {import("http").IncomingMessage***REMOVED*** IncomingMessage */
/** @typedef {import("http").ServerResponse & ExtendedServerResponse***REMOVED*** ServerResponse */
/**
 * @callback NextFunction
 * @param {any***REMOVED*** [err]
 * @return {void***REMOVED***
 */
/**
 * @typedef {NonNullable<Configuration["watchOptions"]>***REMOVED*** WatchOptions
 */
/**
 * @typedef {Compiler["watching"]***REMOVED*** Watching
 */
/**
 * @typedef {ReturnType<Compiler["watch"]>***REMOVED*** MultiWatching
 */
/**
 * @typedef {Compiler["outputFileSystem"] & { createReadStream?: import("fs").createReadStream, statSync?: import("fs").statSync, lstat?: import("fs").lstat, readFileSync?: import("fs").readFileSync ***REMOVED******REMOVED*** OutputFileSystem
 */
/** @typedef {ReturnType<Compiler["getInfrastructureLogger"]>***REMOVED*** Logger */
/**
 * @callback Callback
 * @param {Stats | MultiStats***REMOVED*** [stats]
 */
/**
 * @template {IncomingMessage***REMOVED*** Request
 * @template {ServerResponse***REMOVED*** Response
 * @typedef {Object***REMOVED*** Context
 * @property {boolean***REMOVED*** state
 * @property {Stats | MultiStats | undefined***REMOVED*** stats
 * @property {Callback[]***REMOVED*** callbacks
 * @property {Options<Request, Response>***REMOVED*** options
 * @property {Compiler | MultiCompiler***REMOVED*** compiler
 * @property {Watching | MultiWatching***REMOVED*** watching
 * @property {Logger***REMOVED*** logger
 * @property {OutputFileSystem***REMOVED*** outputFileSystem
 */
/**
 * @template {IncomingMessage***REMOVED*** Request
 * @template {ServerResponse***REMOVED*** Response
 * @typedef {Record<string, string | number> | Array<{ key: string, value: number | string ***REMOVED***> | ((req: Request, res: Response, context: Context<Request, Response>) =>  void | undefined | Record<string, string | number>) | undefined***REMOVED*** Headers
 */
/**
 * @template {IncomingMessage***REMOVED*** Request
 * @template {ServerResponse***REMOVED*** Response
 * @typedef {Object***REMOVED*** Options
 * @property {{[key: string]: string***REMOVED******REMOVED*** [mimeTypes]
 * @property {boolean | ((targetPath: string) => boolean)***REMOVED*** [writeToDisk]
 * @property {string***REMOVED*** [methods]
 * @property {Headers<Request, Response>***REMOVED*** [headers]
 * @property {NonNullable<Configuration["output"]>["publicPath"]***REMOVED*** [publicPath]
 * @property {Configuration["stats"]***REMOVED*** [stats]
 * @property {boolean***REMOVED*** [serverSideRender]
 * @property {OutputFileSystem***REMOVED*** [outputFileSystem]
 * @property {boolean | string***REMOVED*** [index]
 */
/**
 * @template {IncomingMessage***REMOVED*** Request
 * @template {ServerResponse***REMOVED*** Response
 * @callback Middleware
 * @param {Request***REMOVED*** req
 * @param {Response***REMOVED*** res
 * @param {NextFunction***REMOVED*** next
 * @return {Promise<void>***REMOVED***
 */
/**
 * @callback GetFilenameFromUrl
 * @param {string***REMOVED*** url
 * @returns {string | undefined***REMOVED***
 */
/**
 * @callback WaitUntilValid
 * @param {Callback***REMOVED*** callback
 */
/**
 * @callback Invalidate
 * @param {Callback***REMOVED*** callback
 */
/**
 * @callback Close
 * @param {(err: Error | null | undefined) => void***REMOVED*** callback
 */
/**
 * @template {IncomingMessage***REMOVED*** Request
 * @template {ServerResponse***REMOVED*** Response
 * @typedef {Object***REMOVED*** AdditionalMethods
 * @property {GetFilenameFromUrl***REMOVED*** getFilenameFromUrl
 * @property {WaitUntilValid***REMOVED*** waitUntilValid
 * @property {Invalidate***REMOVED*** invalidate
 * @property {Close***REMOVED*** close
 * @property {Context<Request, Response>***REMOVED*** context
 */
/**
 * @template {IncomingMessage***REMOVED*** Request
 * @template {ServerResponse***REMOVED*** Response
 * @typedef {Middleware<Request, Response> & AdditionalMethods<Request, Response>***REMOVED*** API
 */
/**
 * @template {IncomingMessage***REMOVED*** Request
 * @template {ServerResponse***REMOVED*** Response
 * @param {Compiler | MultiCompiler***REMOVED*** compiler
 * @param {Options<Request, Response>***REMOVED*** [options]
 * @returns {API<Request, Response>***REMOVED***
 */
declare function wdm<
  Request_1 extends import("http").IncomingMessage,
  Response_1 extends ServerResponse
>(
  compiler: Compiler | MultiCompiler,
  options?: Options<Request_1, Response_1> | undefined
): API<Request_1, Response_1>;
declare namespace wdm {
  export {
    Schema,
    Compiler,
    MultiCompiler,
    Configuration,
    Stats,
    MultiStats,
    ExtendedServerResponse,
    IncomingMessage,
    ServerResponse,
    NextFunction,
    WatchOptions,
    Watching,
    MultiWatching,
    OutputFileSystem,
    Logger,
    Callback,
    Context,
    Headers,
    Options,
    Middleware,
    GetFilenameFromUrl,
    WaitUntilValid,
    Invalidate,
    Close,
    AdditionalMethods,
    API,
  ***REMOVED***;
***REMOVED***
type ServerResponse = import("http").ServerResponse & ExtendedServerResponse;
type Compiler = import("webpack").Compiler;
type MultiCompiler = import("webpack").MultiCompiler;
type Options<
  Request_1 extends import("http").IncomingMessage,
  Response_1 extends ServerResponse
> = {
  mimeTypes?:
    | {
        [key: string]: string;
      ***REMOVED***
    | undefined;
  writeToDisk?: boolean | ((targetPath: string) => boolean) | undefined;
  methods?: string | undefined;
  headers?: Headers<Request_1, Response_1>;
  publicPath?: NonNullable<Configuration["output"]>["publicPath"];
  stats?: Configuration["stats"];
  serverSideRender?: boolean | undefined;
  outputFileSystem?: OutputFileSystem | undefined;
  index?: string | boolean | undefined;
***REMOVED***;
type API<
  Request_1 extends import("http").IncomingMessage,
  Response_1 extends ServerResponse
> = Middleware<Request_1, Response_1> &
  AdditionalMethods<Request_1, Response_1>;
type Schema = import("schema-utils/declarations/validate").Schema;
type Configuration = import("webpack").Configuration;
type Stats = import("webpack").Stats;
type MultiStats = import("webpack").MultiStats;
type ExtendedServerResponse = {
  locals?:
    | {
        webpack?:
          | {
              devMiddleware?:
                | Context<import("http").IncomingMessage, ServerResponse>
                | undefined;
            ***REMOVED***
          | undefined;
      ***REMOVED***
    | undefined;
***REMOVED***;
type IncomingMessage = import("http").IncomingMessage;
type NextFunction = (err?: any) => void;
type WatchOptions = NonNullable<Configuration["watchOptions"]>;
type Watching = Compiler["watching"];
type MultiWatching = ReturnType<Compiler["watch"]>;
type OutputFileSystem = Compiler["outputFileSystem"] & {
  createReadStream?: typeof import("fs").createReadStream;
  statSync?: typeof import("fs").statSync;
  lstat?: typeof import("fs").lstat;
  readFileSync?: typeof import("fs").readFileSync;
***REMOVED***;
type Logger = ReturnType<Compiler["getInfrastructureLogger"]>;
type Callback = (
  stats?: import("webpack").Stats | import("webpack").MultiStats | undefined
) => any;
type Context<
  Request_1 extends import("http").IncomingMessage,
  Response_1 extends ServerResponse
> = {
  state: boolean;
  stats: Stats | MultiStats | undefined;
  callbacks: Callback[];
  options: Options<Request_1, Response_1>;
  compiler: Compiler | MultiCompiler;
  watching: Watching | MultiWatching;
  logger: Logger;
  outputFileSystem: OutputFileSystem;
***REMOVED***;
type Headers<
  Request_1 extends import("http").IncomingMessage,
  Response_1 extends ServerResponse
> =
  | Record<string, string | number>
  | {
      key: string;
      value: number | string;
    ***REMOVED***[]
  | ((
      req: Request_1,
      res: Response_1,
      context: Context<Request_1, Response_1>
    ) => void | undefined | Record<string, string | number>)
  | undefined;
type Middleware<
  Request_1 extends import("http").IncomingMessage,
  Response_1 extends ServerResponse
> = (req: Request_1, res: Response_1, next: NextFunction) => Promise<void>;
type GetFilenameFromUrl = (url: string) => string | undefined;
type WaitUntilValid = (callback: Callback) => any;
type Invalidate = (callback: Callback) => any;
type Close = (callback: (err: Error | null | undefined) => void) => any;
type AdditionalMethods<
  Request_1 extends import("http").IncomingMessage,
  Response_1 extends ServerResponse
> = {
  getFilenameFromUrl: GetFilenameFromUrl;
  waitUntilValid: WaitUntilValid;
  invalidate: Invalidate;
  close: Close;
  context: Context<Request_1, Response_1>;
***REMOVED***;
