/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra and Zackary Jackson @ScriptedAlchemy
*/

"use strict";

const { RawSource ***REMOVED*** = require("webpack-sources");
const Module = require("../Module");
const { JS_TYPES ***REMOVED*** = require("../ModuleSourceTypesConstants");
const { WEBPACK_MODULE_TYPE_FALLBACK ***REMOVED*** = require("../ModuleTypeConstants");
const RuntimeGlobals = require("../RuntimeGlobals");
const Template = require("../Template");
const makeSerializable = require("../util/makeSerializable");
const FallbackItemDependency = require("./FallbackItemDependency");

/** @typedef {import("../../declarations/WebpackOptions").WebpackOptionsNormalized***REMOVED*** WebpackOptions */
/** @typedef {import("../Chunk")***REMOVED*** Chunk */
/** @typedef {import("../ChunkGraph")***REMOVED*** ChunkGraph */
/** @typedef {import("../ChunkGroup")***REMOVED*** ChunkGroup */
/** @typedef {import("../Compilation")***REMOVED*** Compilation */
/** @typedef {import("../Module").BuildCallback***REMOVED*** BuildCallback */
/** @typedef {import("../Module").CodeGenerationContext***REMOVED*** CodeGenerationContext */
/** @typedef {import("../Module").CodeGenerationResult***REMOVED*** CodeGenerationResult */
/** @typedef {import("../Module").LibIdentOptions***REMOVED*** LibIdentOptions */
/** @typedef {import("../Module").NeedBuildCallback***REMOVED*** NeedBuildCallback */
/** @typedef {import("../Module").NeedBuildContext***REMOVED*** NeedBuildContext */
/** @typedef {import("../Module").SourceTypes***REMOVED*** SourceTypes */
/** @typedef {import("../RequestShortener")***REMOVED*** RequestShortener */
/** @typedef {import("../ResolverFactory").ResolverWithOptions***REMOVED*** ResolverWithOptions */
/** @typedef {import("../WebpackError")***REMOVED*** WebpackError */
/** @typedef {import("../serialization/ObjectMiddleware").ObjectDeserializerContext***REMOVED*** ObjectDeserializerContext */
/** @typedef {import("../serialization/ObjectMiddleware").ObjectSerializerContext***REMOVED*** ObjectSerializerContext */
/** @typedef {import("../util/Hash")***REMOVED*** Hash */
/** @typedef {import("../util/fs").InputFileSystem***REMOVED*** InputFileSystem */

const RUNTIME_REQUIREMENTS = new Set([RuntimeGlobals.module]);

class FallbackModule extends Module {
	/**
	 * @param {string[]***REMOVED*** requests list of requests to choose one
	 */
	constructor(requests) {
		super(WEBPACK_MODULE_TYPE_FALLBACK);
		this.requests = requests;
		this._identifier = `fallback ${this.requests.join(" ")***REMOVED***`;
	***REMOVED***

	/**
	 * @returns {string***REMOVED*** a unique identifier of the module
	 */
	identifier() {
		return this._identifier;
	***REMOVED***

	/**
	 * @param {RequestShortener***REMOVED*** requestShortener the request shortener
	 * @returns {string***REMOVED*** a user readable identifier of the module
	 */
	readableIdentifier(requestShortener) {
		return this._identifier;
	***REMOVED***

	/**
	 * @param {LibIdentOptions***REMOVED*** options options
	 * @returns {string | null***REMOVED*** an identifier for library inclusion
	 */
	libIdent(options) {
		return `${this.layer ? `(${this.layer***REMOVED***)/` : ""***REMOVED***webpack/container/fallback/${
			this.requests[0]
		***REMOVED***/and ${this.requests.length - 1***REMOVED*** more`;
	***REMOVED***

	/**
	 * @param {Chunk***REMOVED*** chunk the chunk which condition should be checked
	 * @param {Compilation***REMOVED*** compilation the compilation
	 * @returns {boolean***REMOVED*** true, if the chunk is ok for the module
	 */
	chunkCondition(chunk, { chunkGraph ***REMOVED***) {
		return chunkGraph.getNumberOfEntryModules(chunk) > 0;
	***REMOVED***

	/**
	 * @param {NeedBuildContext***REMOVED*** context context info
	 * @param {NeedBuildCallback***REMOVED*** callback callback function, returns true, if the module needs a rebuild
	 * @returns {void***REMOVED***
	 */
	needBuild(context, callback) {
		callback(null, !this.buildInfo);
	***REMOVED***

	/**
	 * @param {WebpackOptions***REMOVED*** options webpack options
	 * @param {Compilation***REMOVED*** compilation the compilation
	 * @param {ResolverWithOptions***REMOVED*** resolver the resolver
	 * @param {InputFileSystem***REMOVED*** fs the file system
	 * @param {BuildCallback***REMOVED*** callback callback function
	 * @returns {void***REMOVED***
	 */
	build(options, compilation, resolver, fs, callback) {
		this.buildMeta = {***REMOVED***;
		this.buildInfo = {
			strict: true
		***REMOVED***;

		this.clearDependenciesAndBlocks();
		for (const request of this.requests)
			this.addDependency(new FallbackItemDependency(request));

		callback();
	***REMOVED***

	/**
	 * @param {string=***REMOVED*** type the source type for which the size should be estimated
	 * @returns {number***REMOVED*** the estimated size of the module (must be non-zero)
	 */
	size(type) {
		return this.requests.length * 5 + 42;
	***REMOVED***

	/**
	 * @returns {SourceTypes***REMOVED*** types available (do not mutate)
	 */
	getSourceTypes() {
		return JS_TYPES;
	***REMOVED***

	/**
	 * @param {CodeGenerationContext***REMOVED*** context context for code generation
	 * @returns {CodeGenerationResult***REMOVED*** result
	 */
	codeGeneration({ runtimeTemplate, moduleGraph, chunkGraph ***REMOVED***) {
		const ids = this.dependencies.map(dep =>
			chunkGraph.getModuleId(/** @type {Module***REMOVED*** */ (moduleGraph.getModule(dep)))
		);
		const code = Template.asString([
			`var ids = ${JSON.stringify(ids)***REMOVED***;`,
			"var error, result, i = 0;",
			`var loop = ${runtimeTemplate.basicFunction("next", [
				"while(i < ids.length) {",
				Template.indent([
					`try { next = ${RuntimeGlobals.require***REMOVED***(ids[i++]); ***REMOVED*** catch(e) { return handleError(e); ***REMOVED***`,
					"if(next) return next.then ? next.then(handleResult, handleError) : handleResult(next);"
				]),
				"***REMOVED***",
				"if(error) throw error;"
			])***REMOVED***`,
			`var handleResult = ${runtimeTemplate.basicFunction("result", [
				"if(result) return result;",
				"return loop();"
			])***REMOVED***;`,
			`var handleError = ${runtimeTemplate.basicFunction("e", [
				"error = e;",
				"return loop();"
			])***REMOVED***;`,
			"module.exports = loop();"
		]);
		const sources = new Map();
		sources.set("javascript", new RawSource(code));
		return { sources, runtimeRequirements: RUNTIME_REQUIREMENTS ***REMOVED***;
	***REMOVED***

	/**
	 * @param {ObjectSerializerContext***REMOVED*** context context
	 */
	serialize(context) {
		const { write ***REMOVED*** = context;
		write(this.requests);
		super.serialize(context);
	***REMOVED***

	/**
	 * @param {ObjectDeserializerContext***REMOVED*** context context
	 * @returns {FallbackModule***REMOVED*** deserialized fallback module
	 */
	static deserialize(context) {
		const { read ***REMOVED*** = context;
		const obj = new FallbackModule(read());
		obj.deserialize(context);
		return obj;
	***REMOVED***
***REMOVED***

makeSerializable(FallbackModule, "webpack/lib/container/FallbackModule");

module.exports = FallbackModule;
