/**
 * @fileoverview Rule to flag when return statement contains assignment
 * @author Ilya Volodin
 */
"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const astUtils = require("./utils/ast-utils");

//------------------------------------------------------------------------------
// Helpers
//------------------------------------------------------------------------------

const SENTINEL_TYPE =
	/^(?:[a-zA-Z]+?Statement|ArrowFunctionExpression|FunctionExpression|ClassExpression)$/u;

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

/** @type {import('../types').Rule.RuleModule***REMOVED*** */
module.exports = {
	meta: {
		type: "suggestion",

		defaultOptions: ["except-parens"],

		docs: {
			description: "Disallow assignment operators in `return` statements",
			recommended: false,
			url: "https://eslint.org/docs/latest/rules/no-return-assign",
		***REMOVED***,

		schema: [
			{
				enum: ["except-parens", "always"],
			***REMOVED***,
		],

		messages: {
			returnAssignment: "Return statement should not contain assignment.",
			arrowAssignment: "Arrow function should not return assignment.",
		***REMOVED***,
	***REMOVED***,

	create(context) {
		const always = context.options[0] !== "except-parens";
		const sourceCode = context.sourceCode;

		return {
			AssignmentExpression(node) {
				if (!always && astUtils.isParenthesised(sourceCode, node)) {
					return;
				***REMOVED***

				let currentChild = node;
				let parent = currentChild.parent;

				// Find ReturnStatement or ArrowFunctionExpression in ancestors.
				while (parent && !SENTINEL_TYPE.test(parent.type)) {
					currentChild = parent;
					parent = parent.parent;
				***REMOVED***

				// Reports.
				if (parent && parent.type === "ReturnStatement") {
					context.report({
						node: parent,
						messageId: "returnAssignment",
					***REMOVED***);
				***REMOVED*** else if (
					parent &&
					parent.type === "ArrowFunctionExpression" &&
					parent.body === currentChild
				) {
					context.report({
						node: parent,
						messageId: "arrowAssignment",
					***REMOVED***);
				***REMOVED***
			***REMOVED***,
		***REMOVED***;
	***REMOVED***,
***REMOVED***;
