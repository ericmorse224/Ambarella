/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const { compareNumbers ***REMOVED*** = require("./util/comparators");
const identifierUtils = require("./util/identifier");

/** @typedef {import("./Chunk")***REMOVED*** Chunk */
/** @typedef {import("./Compiler")***REMOVED*** Compiler */
/** @typedef {import("./Module")***REMOVED*** Module */

/**
 * @typedef {object***REMOVED*** RecordsChunks
 * @property {Record<string, number>=***REMOVED*** byName
 * @property {Record<string, number>=***REMOVED*** bySource
 * @property {number[]=***REMOVED*** usedIds
 */

/**
 * @typedef {object***REMOVED*** RecordsModules
 * @property {Record<string, number>=***REMOVED*** byIdentifier
 * @property {Record<string, number>=***REMOVED*** bySource
 * @property {number[]=***REMOVED*** usedIds
 */

/**
 * @typedef {object***REMOVED*** Records
 * @property {RecordsChunks=***REMOVED*** chunks
 * @property {RecordsModules=***REMOVED*** modules
 */

/**
 * @typedef {object***REMOVED*** RecordIdsPluginOptions
 * @property {boolean=***REMOVED*** portableIds true, when ids need to be portable
 */

const PLUGIN_NAME = "RecordIdsPlugin";

class RecordIdsPlugin {
	/**
	 * @param {RecordIdsPluginOptions=***REMOVED*** options object
	 */
	constructor(options) {
		this.options = options || {***REMOVED***;
	***REMOVED***

	/**
	 * @param {Compiler***REMOVED*** compiler the Compiler
	 * @returns {void***REMOVED***
	 */
	apply(compiler) {
		const portableIds = this.options.portableIds;

		const makePathsRelative =
			identifierUtils.makePathsRelative.bindContextCache(
				compiler.context,
				compiler.root
			);

		/**
		 * @param {Module***REMOVED*** module the module
		 * @returns {string***REMOVED*** the (portable) identifier
		 */
		const getModuleIdentifier = module => {
			if (portableIds) {
				return makePathsRelative(module.identifier());
			***REMOVED***
			return module.identifier();
		***REMOVED***;

		compiler.hooks.compilation.tap(PLUGIN_NAME, compilation => {
			compilation.hooks.recordModules.tap(PLUGIN_NAME, (modules, records) => {
				const chunkGraph = compilation.chunkGraph;
				if (!records.modules) records.modules = {***REMOVED***;
				if (!records.modules.byIdentifier) records.modules.byIdentifier = {***REMOVED***;
				/** @type {Set<number>***REMOVED*** */
				const usedIds = new Set();
				for (const module of modules) {
					const moduleId = chunkGraph.getModuleId(module);
					if (typeof moduleId !== "number") continue;
					const identifier = getModuleIdentifier(module);
					records.modules.byIdentifier[identifier] = moduleId;
					usedIds.add(moduleId);
				***REMOVED***
				records.modules.usedIds = Array.from(usedIds).sort(compareNumbers);
			***REMOVED***);
			compilation.hooks.reviveModules.tap(PLUGIN_NAME, (modules, records) => {
				if (!records.modules) return;
				if (records.modules.byIdentifier) {
					const chunkGraph = compilation.chunkGraph;
					/** @type {Set<number>***REMOVED*** */
					const usedIds = new Set();
					for (const module of modules) {
						const moduleId = chunkGraph.getModuleId(module);
						if (moduleId !== null) continue;
						const identifier = getModuleIdentifier(module);
						const id = records.modules.byIdentifier[identifier];
						if (id === undefined) continue;
						if (usedIds.has(id)) continue;
						usedIds.add(id);
						chunkGraph.setModuleId(module, id);
					***REMOVED***
				***REMOVED***
				if (Array.isArray(records.modules.usedIds)) {
					compilation.usedModuleIds = new Set(records.modules.usedIds);
				***REMOVED***
			***REMOVED***);

			/**
			 * @param {Chunk***REMOVED*** chunk the chunk
			 * @returns {string[]***REMOVED*** sources of the chunk
			 */
			const getChunkSources = chunk => {
				/** @type {string[]***REMOVED*** */
				const sources = [];
				for (const chunkGroup of chunk.groupsIterable) {
					const index = chunkGroup.chunks.indexOf(chunk);
					if (chunkGroup.name) {
						sources.push(`${index***REMOVED*** ${chunkGroup.name***REMOVED***`);
					***REMOVED*** else {
						for (const origin of chunkGroup.origins) {
							if (origin.module) {
								if (origin.request) {
									sources.push(
										`${index***REMOVED*** ${getModuleIdentifier(origin.module)***REMOVED*** ${
											origin.request
										***REMOVED***`
									);
								***REMOVED*** else if (typeof origin.loc === "string") {
									sources.push(
										`${index***REMOVED*** ${getModuleIdentifier(origin.module)***REMOVED*** ${
											origin.loc
										***REMOVED***`
									);
								***REMOVED*** else if (
									origin.loc &&
									typeof origin.loc === "object" &&
									"start" in origin.loc
								) {
									sources.push(
										`${index***REMOVED*** ${getModuleIdentifier(
											origin.module
										)***REMOVED*** ${JSON.stringify(origin.loc.start)***REMOVED***`
									);
								***REMOVED***
							***REMOVED***
						***REMOVED***
					***REMOVED***
				***REMOVED***
				return sources;
			***REMOVED***;

			compilation.hooks.recordChunks.tap(PLUGIN_NAME, (chunks, records) => {
				if (!records.chunks) records.chunks = {***REMOVED***;
				if (!records.chunks.byName) records.chunks.byName = {***REMOVED***;
				if (!records.chunks.bySource) records.chunks.bySource = {***REMOVED***;
				/** @type {Set<number>***REMOVED*** */
				const usedIds = new Set();
				for (const chunk of chunks) {
					if (typeof chunk.id !== "number") continue;
					const name = chunk.name;
					if (name) records.chunks.byName[name] = chunk.id;
					const sources = getChunkSources(chunk);
					for (const source of sources) {
						records.chunks.bySource[source] = chunk.id;
					***REMOVED***
					usedIds.add(chunk.id);
				***REMOVED***
				records.chunks.usedIds = Array.from(usedIds).sort(compareNumbers);
			***REMOVED***);
			compilation.hooks.reviveChunks.tap(PLUGIN_NAME, (chunks, records) => {
				if (!records.chunks) return;
				/** @type {Set<number>***REMOVED*** */
				const usedIds = new Set();
				if (records.chunks.byName) {
					for (const chunk of chunks) {
						if (chunk.id !== null) continue;
						if (!chunk.name) continue;
						const id = records.chunks.byName[chunk.name];
						if (id === undefined) continue;
						if (usedIds.has(id)) continue;
						usedIds.add(id);
						chunk.id = id;
						chunk.ids = [id];
					***REMOVED***
				***REMOVED***
				if (records.chunks.bySource) {
					for (const chunk of chunks) {
						if (chunk.id !== null) continue;
						const sources = getChunkSources(chunk);
						for (const source of sources) {
							const id = records.chunks.bySource[source];
							if (id === undefined) continue;
							if (usedIds.has(id)) continue;
							usedIds.add(id);
							chunk.id = id;
							chunk.ids = [id];
							break;
						***REMOVED***
					***REMOVED***
				***REMOVED***
				if (Array.isArray(records.chunks.usedIds)) {
					compilation.usedChunkIds = new Set(records.chunks.usedIds);
				***REMOVED***
			***REMOVED***);
		***REMOVED***);
	***REMOVED***
***REMOVED***
module.exports = RecordIdsPlugin;
