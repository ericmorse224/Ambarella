(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()***REMOVED***else if(typeof define==="function"&&define.amd){define([],f)***REMOVED***else{var g;if(typeof window!=="undefined"){g=window***REMOVED***else if(typeof global!=="undefined"){g=global***REMOVED***else if(typeof self!=="undefined"){g=self***REMOVED***else{g=this***REMOVED***g.EventEmitter3 = f()***REMOVED******REMOVED***)(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a***REMOVED***var p=n[i]={exports:{***REMOVED******REMOVED***;e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)***REMOVED***,p,p.exports,r,e,n,t)***REMOVED***return n[i].exports***REMOVED***for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o***REMOVED***return r***REMOVED***)()({1:[function(require,module,exports){
'use strict';

var has = Object.prototype.hasOwnProperty
  , prefix = '~';

/**
 * Constructor to create a storage for our `EE` objects.
 * An `Events` instance is a plain object whose properties are event names.
 *
 * @constructor
 * @private
 */
function Events() {***REMOVED***

//
// We try to not inherit from `Object.prototype`. In some engines creating an
// instance in this way is faster than calling `Object.create(null)` directly.
// If `Object.create(null)` is not supported we prefix the event names with a
// character to make sure that the built-in object properties are not
// overridden or used as an attack vector.
//
if (Object.create) {
  Events.prototype = Object.create(null);

  //
  // This hack is needed because the `__proto__` property is still inherited in
  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
  //
  if (!new Events().__proto__) prefix = false;
***REMOVED***

/**
 * Representation of a single event listener.
 *
 * @param {Function***REMOVED*** fn The listener function.
 * @param {****REMOVED*** context The context to invoke the listener with.
 * @param {Boolean***REMOVED*** [once=false] Specify if the listener is a one-time listener.
 * @constructor
 * @private
 */
function EE(fn, context, once) {
  this.fn = fn;
  this.context = context;
  this.once = once || false;
***REMOVED***

/**
 * Add a listener for a given event.
 *
 * @param {EventEmitter***REMOVED*** emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)***REMOVED*** event The event name.
 * @param {Function***REMOVED*** fn The listener function.
 * @param {****REMOVED*** context The context to invoke the listener with.
 * @param {Boolean***REMOVED*** once Specify if the listener is a one-time listener.
 * @returns {EventEmitter***REMOVED***
 * @private
 */
function addListener(emitter, event, fn, context, once) {
  if (typeof fn !== 'function') {
    throw new TypeError('The listener must be a function');
  ***REMOVED***

  var listener = new EE(fn, context || emitter, once)
    , evt = prefix ? prefix + event : event;

  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
  else emitter._events[evt] = [emitter._events[evt], listener];

  return emitter;
***REMOVED***

/**
 * Clear event by name.
 *
 * @param {EventEmitter***REMOVED*** emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)***REMOVED*** evt The Event name.
 * @private
 */
function clearEvent(emitter, evt) {
  if (--emitter._eventsCount === 0) emitter._events = new Events();
  else delete emitter._events[evt];
***REMOVED***

/**
 * Minimal `EventEmitter` interface that is molded against the Node.js
 * `EventEmitter` interface.
 *
 * @constructor
 * @public
 */
function EventEmitter() {
  this._events = new Events();
  this._eventsCount = 0;
***REMOVED***

/**
 * Return an array listing the events for which the emitter has registered
 * listeners.
 *
 * @returns {Array***REMOVED***
 * @public
 */
EventEmitter.prototype.eventNames = function eventNames() {
  var names = []
    , events
    , name;

  if (this._eventsCount === 0) return names;

  for (name in (events = this._events)) {
    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
  ***REMOVED***

  if (Object.getOwnPropertySymbols) {
    return names.concat(Object.getOwnPropertySymbols(events));
  ***REMOVED***

  return names;
***REMOVED***;

/**
 * Return the listeners registered for a given event.
 *
 * @param {(String|Symbol)***REMOVED*** event The event name.
 * @returns {Array***REMOVED*** The registered listeners.
 * @public
 */
EventEmitter.prototype.listeners = function listeners(event) {
  var evt = prefix ? prefix + event : event
    , handlers = this._events[evt];

  if (!handlers) return [];
  if (handlers.fn) return [handlers.fn];

  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
    ee[i] = handlers[i].fn;
  ***REMOVED***

  return ee;
***REMOVED***;

/**
 * Return the number of listeners listening to a given event.
 *
 * @param {(String|Symbol)***REMOVED*** event The event name.
 * @returns {Number***REMOVED*** The number of listeners.
 * @public
 */
EventEmitter.prototype.listenerCount = function listenerCount(event) {
  var evt = prefix ? prefix + event : event
    , listeners = this._events[evt];

  if (!listeners) return 0;
  if (listeners.fn) return 1;
  return listeners.length;
***REMOVED***;

/**
 * Calls each of the listeners registered for a given event.
 *
 * @param {(String|Symbol)***REMOVED*** event The event name.
 * @returns {Boolean***REMOVED*** `true` if the event had listeners, else `false`.
 * @public
 */
EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
  var evt = prefix ? prefix + event : event;

  if (!this._events[evt]) return false;

  var listeners = this._events[evt]
    , len = arguments.length
    , args
    , i;

  if (listeners.fn) {
    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

    switch (len) {
      case 1: return listeners.fn.call(listeners.context), true;
      case 2: return listeners.fn.call(listeners.context, a1), true;
      case 3: return listeners.fn.call(listeners.context, a1, a2), true;
      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
    ***REMOVED***

    for (i = 1, args = new Array(len -1); i < len; i++) {
      args[i - 1] = arguments[i];
    ***REMOVED***

    listeners.fn.apply(listeners.context, args);
  ***REMOVED*** else {
    var length = listeners.length
      , j;

    for (i = 0; i < length; i++) {
      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

      switch (len) {
        case 1: listeners[i].fn.call(listeners[i].context); break;
        case 2: listeners[i].fn.call(listeners[i].context, a1); break;
        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
        default:
          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
            args[j - 1] = arguments[j];
          ***REMOVED***

          listeners[i].fn.apply(listeners[i].context, args);
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***

  return true;
***REMOVED***;

/**
 * Add a listener for a given event.
 *
 * @param {(String|Symbol)***REMOVED*** event The event name.
 * @param {Function***REMOVED*** fn The listener function.
 * @param {****REMOVED*** [context=this] The context to invoke the listener with.
 * @returns {EventEmitter***REMOVED*** `this`.
 * @public
 */
EventEmitter.prototype.on = function on(event, fn, context) {
  return addListener(this, event, fn, context, false);
***REMOVED***;

/**
 * Add a one-time listener for a given event.
 *
 * @param {(String|Symbol)***REMOVED*** event The event name.
 * @param {Function***REMOVED*** fn The listener function.
 * @param {****REMOVED*** [context=this] The context to invoke the listener with.
 * @returns {EventEmitter***REMOVED*** `this`.
 * @public
 */
EventEmitter.prototype.once = function once(event, fn, context) {
  return addListener(this, event, fn, context, true);
***REMOVED***;

/**
 * Remove the listeners of a given event.
 *
 * @param {(String|Symbol)***REMOVED*** event The event name.
 * @param {Function***REMOVED*** fn Only remove the listeners that match this function.
 * @param {****REMOVED*** context Only remove the listeners that have this context.
 * @param {Boolean***REMOVED*** once Only remove one-time listeners.
 * @returns {EventEmitter***REMOVED*** `this`.
 * @public
 */
EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
  var evt = prefix ? prefix + event : event;

  if (!this._events[evt]) return this;
  if (!fn) {
    clearEvent(this, evt);
    return this;
  ***REMOVED***

  var listeners = this._events[evt];

  if (listeners.fn) {
    if (
      listeners.fn === fn &&
      (!once || listeners.once) &&
      (!context || listeners.context === context)
    ) {
      clearEvent(this, evt);
    ***REMOVED***
  ***REMOVED*** else {
    for (var i = 0, events = [], length = listeners.length; i < length; i++) {
      if (
        listeners[i].fn !== fn ||
        (once && !listeners[i].once) ||
        (context && listeners[i].context !== context)
      ) {
        events.push(listeners[i]);
      ***REMOVED***
    ***REMOVED***

    //
    // Reset the array, or remove it completely if we have no more listeners.
    //
    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
    else clearEvent(this, evt);
  ***REMOVED***

  return this;
***REMOVED***;

/**
 * Remove all listeners, or those of the specified event.
 *
 * @param {(String|Symbol)***REMOVED*** [event] The event name.
 * @returns {EventEmitter***REMOVED*** `this`.
 * @public
 */
EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
  var evt;

  if (event) {
    evt = prefix ? prefix + event : event;
    if (this._events[evt]) clearEvent(this, evt);
  ***REMOVED*** else {
    this._events = new Events();
    this._eventsCount = 0;
  ***REMOVED***

  return this;
***REMOVED***;

//
// Alias methods names because people roll like that.
//
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.addListener = EventEmitter.prototype.on;

//
// Expose the prefix.
//
EventEmitter.prefixed = prefix;

//
// Allow `EventEmitter` to be imported as module namespace.
//
EventEmitter.EventEmitter = EventEmitter;

//
// Expose the module.
//
if ('undefined' !== typeof module) {
  module.exports = EventEmitter;
***REMOVED***

***REMOVED***,{***REMOVED***]***REMOVED***,{***REMOVED***,[1])(1)
***REMOVED***);
