// Generated by CoffeeScript 1.6.3
var Emitter, array;

array = require('./array');

module.exports = Emitter = (function() {
  function Emitter() {
    this._listeners = {***REMOVED***;
    this._listenersForAnyEvent = [];
    this._disabledEmitters = {***REMOVED***;
  ***REMOVED***

  Emitter.prototype.on = function(eventName, listener) {
    if (this._listeners[eventName] == null) {
      this._listeners[eventName] = [];
    ***REMOVED***
    this._listeners[eventName].push(listener);
    return this;
  ***REMOVED***;

  Emitter.prototype.once = function(eventName, listener) {
    var cb, ran,
      _this = this;
    ran = false;
    cb = function() {
      if (ran) {
        return;
      ***REMOVED***
      ran = true;
      listener();
      return setTimeout(function() {
        return _this.removeEvent(eventName, cb);
      ***REMOVED***, 0);
    ***REMOVED***;
    this.on(eventName, cb);
    return this;
  ***REMOVED***;

  Emitter.prototype.onAnyEvent = function(listener) {
    this._listenersForAnyEvent.push(listener);
    return this;
  ***REMOVED***;

  Emitter.prototype.removeEvent = function(eventName, listener) {
    if (this._listeners[eventName] == null) {
      return this;
    ***REMOVED***
    array.pluckOneItem(this._listeners[eventName], listener);
    return this;
  ***REMOVED***;

  Emitter.prototype.removeListeners = function(eventName) {
    if (this._listeners[eventName] == null) {
      return this;
    ***REMOVED***
    this._listeners[eventName].length = 0;
    return this;
  ***REMOVED***;

  Emitter.prototype.removeAllListeners = function() {
    var listeners, name, _ref;
    _ref = this._listeners;
    for (name in _ref) {
      listeners = _ref[name];
      listeners.length = 0;
    ***REMOVED***
    return this;
  ***REMOVED***;

  Emitter.prototype._emit = function(eventName, data) {
    var listener, _i, _j, _len, _len1, _ref, _ref1;
    _ref = this._listenersForAnyEvent;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      listener = _ref[_i];
      listener.call(this, data, eventName);
    ***REMOVED***
    if (this._listeners[eventName] == null) {
      return;
    ***REMOVED***
    _ref1 = this._listeners[eventName];
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      listener = _ref1[_j];
      listener.call(this, data);
    ***REMOVED***
  ***REMOVED***;

  Emitter.prototype._throttleEmitterMethod = function(fnName, time) {
    var lastCallArgs, originalFn, pend, pending, runIt, timer,
      _this = this;
    if (time == null) {
      time = 1000;
    ***REMOVED***
    originalFn = this[fnName];
    if (typeof originalFn !== 'function') {
      throw Error("this class does not have a method called '" + fnName + "'");
    ***REMOVED***
    lastCallArgs = null;
    pending = false;
    timer = null;
    this[fnName] = function() {
      lastCallArgs = arguments;
      return pend();
    ***REMOVED***;
    pend = function() {
      if (pending) {
        clearTimeout(timer);
      ***REMOVED***
      timer = setTimeout(runIt, time);
      return pending = true;
    ***REMOVED***;
    return runIt = function() {
      pending = false;
      return originalFn.apply(_this, lastCallArgs);
    ***REMOVED***;
  ***REMOVED***;

  Emitter.prototype._disableEmitter = function(fnName) {
    if (this._disabledEmitters[fnName] != null) {
      throw Error("" + fnName + " is already a disabled emitter");
    ***REMOVED***
    this._disabledEmitters[fnName] = this[fnName];
    return this[fnName] = function() {***REMOVED***;
  ***REMOVED***;

  Emitter.prototype._enableEmitter = function(fnName) {
    var fn;
    fn = this._disabledEmitters[fnName];
    if (fn == null) {
      throw Error("" + fnName + " is not a disabled emitter");
    ***REMOVED***
    this[fnName] = fn;
    return delete this._disabledEmitters[fnName];
  ***REMOVED***;

  return Emitter;

***REMOVED***)();
