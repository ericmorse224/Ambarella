import type {CodeKeywordDefinition, ErrorNoParams, AnySchema***REMOVED*** from "../../types"
import type {KeywordCxt***REMOVED*** from "../../compile/validate"
import {alwaysValidSchema***REMOVED*** from "../../compile/util"

export type NotKeywordError = ErrorNoParams<"not", AnySchema>

const def: CodeKeywordDefinition = {
  keyword: "not",
  schemaType: ["object", "boolean"],
  trackErrors: true,
  code(cxt: KeywordCxt) {
    const {gen, schema, it***REMOVED*** = cxt
    if (alwaysValidSchema(it, schema)) {
      cxt.fail()
      return
    ***REMOVED***

    const valid = gen.name("valid")
    cxt.subschema(
      {
        keyword: "not",
        compositeRule: true,
        createErrors: false,
        allErrors: false,
      ***REMOVED***,
      valid
    )

    cxt.failResult(
      valid,
      () => cxt.reset(),
      () => cxt.error()
    )
  ***REMOVED***,
  error: {message: "must NOT be valid"***REMOVED***,
***REMOVED***

export default def
