/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const {
	JAVASCRIPT_MODULE_TYPE_AUTO,
	JAVASCRIPT_MODULE_TYPE_DYNAMIC
***REMOVED*** = require("../ModuleTypeConstants");
const { cachedSetProperty ***REMOVED*** = require("../util/cleverMerge");
const ContextElementDependency = require("./ContextElementDependency");
const RequireContextDependency = require("./RequireContextDependency");
const RequireContextDependencyParserPlugin = require("./RequireContextDependencyParserPlugin");

/** @typedef {import("../../declarations/WebpackOptions").JavascriptParserOptions***REMOVED*** JavascriptParserOptions */
/** @typedef {import("../../declarations/WebpackOptions").ResolveOptions***REMOVED*** ResolveOptions */
/** @typedef {import("../Compiler")***REMOVED*** Compiler */
/** @typedef {import("../javascript/JavascriptParser")***REMOVED*** Parser */

/** @type {ResolveOptions***REMOVED*** */
const EMPTY_RESOLVE_OPTIONS = {***REMOVED***;

const PLUGIN_NAME = "RequireContextPlugin";

class RequireContextPlugin {
	/**
	 * Apply the plugin
	 * @param {Compiler***REMOVED*** compiler the compiler instance
	 * @returns {void***REMOVED***
	 */
	apply(compiler) {
		compiler.hooks.compilation.tap(
			PLUGIN_NAME,
			(compilation, { contextModuleFactory, normalModuleFactory ***REMOVED***) => {
				compilation.dependencyFactories.set(
					RequireContextDependency,
					contextModuleFactory
				);
				compilation.dependencyTemplates.set(
					RequireContextDependency,
					new RequireContextDependency.Template()
				);

				compilation.dependencyFactories.set(
					ContextElementDependency,
					normalModuleFactory
				);

				/**
				 * @param {Parser***REMOVED*** parser parser parser
				 * @param {JavascriptParserOptions***REMOVED*** parserOptions parserOptions
				 * @returns {void***REMOVED***
				 */
				const handler = (parser, parserOptions) => {
					if (
						parserOptions.requireContext !== undefined &&
						!parserOptions.requireContext
					)
						return;

					new RequireContextDependencyParserPlugin().apply(parser);
				***REMOVED***;

				normalModuleFactory.hooks.parser
					.for(JAVASCRIPT_MODULE_TYPE_AUTO)
					.tap(PLUGIN_NAME, handler);
				normalModuleFactory.hooks.parser
					.for(JAVASCRIPT_MODULE_TYPE_DYNAMIC)
					.tap(PLUGIN_NAME, handler);

				contextModuleFactory.hooks.alternativeRequests.tap(
					PLUGIN_NAME,
					(items, options) => {
						if (items.length === 0) return items;

						const finalResolveOptions = compiler.resolverFactory.get(
							"normal",
							cachedSetProperty(
								options.resolveOptions || EMPTY_RESOLVE_OPTIONS,
								"dependencyType",
								/** @type {string***REMOVED*** */
								(options.category)
							)
						).options;

						let newItems;
						if (!finalResolveOptions.fullySpecified) {
							newItems = [];
							for (const item of items) {
								const { request, context ***REMOVED*** = item;
								for (const ext of finalResolveOptions.extensions) {
									if (request.endsWith(ext)) {
										newItems.push({
											context,
											request: request.slice(0, -ext.length)
										***REMOVED***);
									***REMOVED***
								***REMOVED***
								if (!finalResolveOptions.enforceExtension) {
									newItems.push(item);
								***REMOVED***
							***REMOVED***
							items = newItems;

							newItems = [];
							for (const obj of items) {
								const { request, context ***REMOVED*** = obj;
								for (const mainFile of finalResolveOptions.mainFiles) {
									if (request.endsWith(`/${mainFile***REMOVED***`)) {
										newItems.push({
											context,
											request: request.slice(0, -mainFile.length)
										***REMOVED***);
										newItems.push({
											context,
											request: request.slice(0, -mainFile.length - 1)
										***REMOVED***);
									***REMOVED***
								***REMOVED***
								newItems.push(obj);
							***REMOVED***
							items = newItems;
						***REMOVED***

						newItems = [];
						for (const item of items) {
							let hideOriginal = false;
							for (const modulesItems of finalResolveOptions.modules) {
								if (Array.isArray(modulesItems)) {
									for (const dir of modulesItems) {
										if (item.request.startsWith(`./${dir***REMOVED***/`)) {
											newItems.push({
												context: item.context,
												request: item.request.slice(dir.length + 3)
											***REMOVED***);
											hideOriginal = true;
										***REMOVED***
									***REMOVED***
								***REMOVED*** else {
									const dir = modulesItems.replace(/\\/g, "/");
									const fullPath =
										item.context.replace(/\\/g, "/") + item.request.slice(1);
									if (fullPath.startsWith(dir)) {
										newItems.push({
											context: item.context,
											request: fullPath.slice(dir.length + 1)
										***REMOVED***);
									***REMOVED***
								***REMOVED***
							***REMOVED***
							if (!hideOriginal) {
								newItems.push(item);
							***REMOVED***
						***REMOVED***
						return newItems;
					***REMOVED***
				);
			***REMOVED***
		);
	***REMOVED***
***REMOVED***
module.exports = RequireContextPlugin;
