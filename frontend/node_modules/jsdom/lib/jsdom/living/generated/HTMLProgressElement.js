"use strict";

const conversions = require("webidl-conversions");
const utils = require("./utils.js");

const HTMLConstructor_helpers_html_constructor = require("../helpers/html-constructor.js").HTMLConstructor;
const ceReactionsPreSteps_helpers_custom_elements = require("../helpers/custom-elements.js").ceReactionsPreSteps;
const ceReactionsPostSteps_helpers_custom_elements = require("../helpers/custom-elements.js").ceReactionsPostSteps;
const implSymbol = utils.implSymbol;
const ctorRegistrySymbol = utils.ctorRegistrySymbol;
const HTMLElement = require("./HTMLElement.js");

const interfaceName = "HTMLProgressElement";

exports.is = value => {
  return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;
***REMOVED***;
exports.isImpl = value => {
  return utils.isObject(value) && value instanceof Impl.implementation;
***REMOVED***;
exports.convert = (value, { context = "The provided value" ***REMOVED*** = {***REMOVED***) => {
  if (exports.is(value)) {
    return utils.implForWrapper(value);
  ***REMOVED***
  throw new TypeError(`${context***REMOVED*** is not of type 'HTMLProgressElement'.`);
***REMOVED***;

function makeWrapper(globalObject) {
  if (globalObject[ctorRegistrySymbol] === undefined) {
    throw new Error("Internal error: invalid global object");
  ***REMOVED***

  const ctor = globalObject[ctorRegistrySymbol]["HTMLProgressElement"];
  if (ctor === undefined) {
    throw new Error("Internal error: constructor HTMLProgressElement is not installed on the passed global object");
  ***REMOVED***

  return Object.create(ctor.prototype);
***REMOVED***

exports.create = (globalObject, constructorArgs, privateData) => {
  const wrapper = makeWrapper(globalObject);
  return exports.setup(wrapper, globalObject, constructorArgs, privateData);
***REMOVED***;

exports.createImpl = (globalObject, constructorArgs, privateData) => {
  const wrapper = exports.create(globalObject, constructorArgs, privateData);
  return utils.implForWrapper(wrapper);
***REMOVED***;

exports._internalSetup = (wrapper, globalObject) => {
  HTMLElement._internalSetup(wrapper, globalObject);
***REMOVED***;

exports.setup = (wrapper, globalObject, constructorArgs = [], privateData = {***REMOVED***) => {
  privateData.wrapper = wrapper;

  exports._internalSetup(wrapper, globalObject);
  Object.defineProperty(wrapper, implSymbol, {
    value: new Impl.implementation(globalObject, constructorArgs, privateData),
    configurable: true
  ***REMOVED***);

  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;
  if (Impl.init) {
    Impl.init(wrapper[implSymbol]);
  ***REMOVED***
  return wrapper;
***REMOVED***;

exports.new = globalObject => {
  const wrapper = makeWrapper(globalObject);

  exports._internalSetup(wrapper, globalObject);
  Object.defineProperty(wrapper, implSymbol, {
    value: Object.create(Impl.implementation.prototype),
    configurable: true
  ***REMOVED***);

  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;
  if (Impl.init) {
    Impl.init(wrapper[implSymbol]);
  ***REMOVED***
  return wrapper[implSymbol];
***REMOVED***;

const exposed = new Set(["Window"]);

exports.install = (globalObject, globalNames) => {
  if (!globalNames.some(globalName => exposed.has(globalName))) {
    return;
  ***REMOVED***

  if (globalObject.HTMLElement === undefined) {
    throw new Error("Internal error: attempting to evaluate HTMLProgressElement before HTMLElement");
  ***REMOVED***
  class HTMLProgressElement extends globalObject.HTMLElement {
    constructor() {
      return HTMLConstructor_helpers_html_constructor(globalObject, interfaceName, new.target);
    ***REMOVED***

    get value() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new TypeError("'get value' called on an object that is not a valid instance of HTMLProgressElement.");
      ***REMOVED***

      ceReactionsPreSteps_helpers_custom_elements(globalObject);
      try {
        return esValue[implSymbol]["value"];
      ***REMOVED*** finally {
        ceReactionsPostSteps_helpers_custom_elements(globalObject);
      ***REMOVED***
    ***REMOVED***

    set value(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new TypeError("'set value' called on an object that is not a valid instance of HTMLProgressElement.");
      ***REMOVED***

      V = conversions["double"](V, {
        context: "Failed to set the 'value' property on 'HTMLProgressElement': The provided value"
      ***REMOVED***);

      ceReactionsPreSteps_helpers_custom_elements(globalObject);
      try {
        esValue[implSymbol]["value"] = V;
      ***REMOVED*** finally {
        ceReactionsPostSteps_helpers_custom_elements(globalObject);
      ***REMOVED***
    ***REMOVED***

    get max() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new TypeError("'get max' called on an object that is not a valid instance of HTMLProgressElement.");
      ***REMOVED***

      ceReactionsPreSteps_helpers_custom_elements(globalObject);
      try {
        return esValue[implSymbol]["max"];
      ***REMOVED*** finally {
        ceReactionsPostSteps_helpers_custom_elements(globalObject);
      ***REMOVED***
    ***REMOVED***

    set max(V) {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new TypeError("'set max' called on an object that is not a valid instance of HTMLProgressElement.");
      ***REMOVED***

      V = conversions["double"](V, {
        context: "Failed to set the 'max' property on 'HTMLProgressElement': The provided value"
      ***REMOVED***);

      ceReactionsPreSteps_helpers_custom_elements(globalObject);
      try {
        esValue[implSymbol]["max"] = V;
      ***REMOVED*** finally {
        ceReactionsPostSteps_helpers_custom_elements(globalObject);
      ***REMOVED***
    ***REMOVED***

    get position() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new TypeError("'get position' called on an object that is not a valid instance of HTMLProgressElement.");
      ***REMOVED***

      return esValue[implSymbol]["position"];
    ***REMOVED***

    get labels() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new TypeError("'get labels' called on an object that is not a valid instance of HTMLProgressElement.");
      ***REMOVED***

      return utils.tryWrapperForImpl(esValue[implSymbol]["labels"]);
    ***REMOVED***
  ***REMOVED***
  Object.defineProperties(HTMLProgressElement.prototype, {
    value: { enumerable: true ***REMOVED***,
    max: { enumerable: true ***REMOVED***,
    position: { enumerable: true ***REMOVED***,
    labels: { enumerable: true ***REMOVED***,
    [Symbol.toStringTag]: { value: "HTMLProgressElement", configurable: true ***REMOVED***
  ***REMOVED***);
  if (globalObject[ctorRegistrySymbol] === undefined) {
    globalObject[ctorRegistrySymbol] = Object.create(null);
  ***REMOVED***
  globalObject[ctorRegistrySymbol][interfaceName] = HTMLProgressElement;

  Object.defineProperty(globalObject, interfaceName, {
    configurable: true,
    writable: true,
    value: HTMLProgressElement
  ***REMOVED***);
***REMOVED***;

const Impl = require("../nodes/HTMLProgressElement-impl.js");
