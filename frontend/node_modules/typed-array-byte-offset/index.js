'use strict';

var forEach = require('for-each');
var callBind = require('call-bind');
var gPO = require('reflect.getprototypeof/polyfill')();

var typedArrays = require('available-typed-arrays')();

/** @typedef {(x: import('.').TypedArray) => number***REMOVED*** ByteOffsetGetter */

/** @type {Record<import('.').TypedArrayName, ByteOffsetGetter>***REMOVED*** */
var getters = {
	// @ts-expect-error TS can't handle __proto__ or `satisfies` in jsdoc
	__proto__: null
***REMOVED***;

var gOPD = require('gopd');
var oDP = Object.defineProperty;
if (gOPD) {
	/** @type {ByteOffsetGetter***REMOVED*** */
	var getByteOffset = function (x) {
		return x.byteOffset;
	***REMOVED***;
	forEach(typedArrays, function (typedArray) {
		// In Safari 7, Typed Array constructors are typeof object
		if (typeof global[typedArray] === 'function' || typeof global[typedArray] === 'object') {
			var Proto = global[typedArray].prototype;
			// @ts-expect-error TS can't guarantee the callback is invoked sync
			var descriptor = gOPD(Proto, 'byteOffset');
			if (!descriptor) {
				var superProto = gPO(Proto);
				// @ts-expect-error TS can't guarantee the callback is invoked sync
				descriptor = gOPD(superProto, 'byteOffset');
			***REMOVED***
			// Opera 12.16 has a magic byteOffset data property on instances AND on Proto
			if (descriptor && descriptor.get) {
				getters[typedArray] = callBind(descriptor.get);
			***REMOVED*** else if (oDP) {
				// this is likely an engine where instances have a magic byteOffset data property
				var arr = new global[typedArray](2);
				// @ts-expect-error TS can't guarantee the callback is invoked sync
				descriptor = gOPD(arr, 'byteOffset');
				if (descriptor && descriptor.configurable) {
					oDP(arr, 'length', { value: 3 ***REMOVED***);
				***REMOVED***
				if (arr.length === 2) {
					getters[typedArray] = getByteOffset;
				***REMOVED***
			***REMOVED***
		***REMOVED***
	***REMOVED***);
***REMOVED***

/** @type {ByteOffsetGetter***REMOVED*** */
var tryTypedArrays = function tryAllTypedArrays(value) {
	/** @type {number***REMOVED*** */ var foundOffset;
	forEach(getters, /** @type {(getter: ByteOffsetGetter) => void***REMOVED*** */ function (getter) {
		if (typeof foundOffset !== 'number') {
			try {
				var offset = getter(value);
				if (typeof offset === 'number') {
					foundOffset = offset;
				***REMOVED***
			***REMOVED*** catch (e) {***REMOVED***
		***REMOVED***
	***REMOVED***);
	// @ts-expect-error TS can't guarantee the callback is invoked sync
	return foundOffset;
***REMOVED***;

var isTypedArray = require('is-typed-array');

/** @type {import('.')***REMOVED*** */
module.exports = function typedArrayByteOffset(value) {
	if (!isTypedArray(value)) {
		return false;
	***REMOVED***
	return tryTypedArrays(value);
***REMOVED***;
