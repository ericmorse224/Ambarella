'use strict';
const OVERRIDABLE_RULES = new Set(['keyframes', 'counter-style']);
const SCOPE_RULES = new Set(['media', 'supports']);

/**
 * @param {string***REMOVED*** prop
 * @return {string***REMOVED***
 */
function vendorUnprefixed(prop) {
  return prop.replace(/^-\w+-/, '');
***REMOVED***

/**
 * @param {string***REMOVED*** name
 * @return {boolean***REMOVED***
 */
function isOverridable(name) {
  return OVERRIDABLE_RULES.has(vendorUnprefixed(name.toLowerCase()));
***REMOVED***

/**
 * @param {string***REMOVED*** name
 * @return {boolean***REMOVED***
 */
function isScope(name) {
  return SCOPE_RULES.has(vendorUnprefixed(name.toLowerCase()));
***REMOVED***

/**
 * @param {import('postcss').AtRule***REMOVED*** node
 * @return {string***REMOVED***
 */
function getScope(node) {
  /** @type {import('postcss').Container<import('postcss').ChildNode> | import('postcss').Document | undefined***REMOVED*** */
  let current = node.parent;

  const chain = [node.name.toLowerCase(), node.params];

  while (current) {
    if (
      current.type === 'atrule' &&
      isScope(/** @type import('postcss').AtRule */ (current).name)
    ) {
      chain.unshift(
        /** @type import('postcss').AtRule */ (current).name +
          ' ' +
          /** @type import('postcss').AtRule */ (current).params
      );
    ***REMOVED***
    current = current.parent;
  ***REMOVED***

  return chain.join('|');
***REMOVED***

/**
 * @type {import('postcss').PluginCreator<void>***REMOVED***
 * @return {import('postcss').Plugin***REMOVED***
 */
function pluginCreator() {
  return {
    postcssPlugin: 'postcss-discard-overridden',
    prepare() {
      const cache = new Map();
      /** @type {{node: import('postcss').AtRule, scope: string***REMOVED***[]***REMOVED*** */
      const rules = [];

      return {
        OnceExit(css) {
          css.walkAtRules((node) => {
            if (isOverridable(node.name)) {
              const scope = getScope(node);

              cache.set(scope, node);
              rules.push({
                node,
                scope,
              ***REMOVED***);
            ***REMOVED***
          ***REMOVED***);

          rules.forEach((rule) => {
            if (cache.get(rule.scope) !== rule.node) {
              rule.node.remove();
            ***REMOVED***
          ***REMOVED***);
        ***REMOVED***,
      ***REMOVED***;
    ***REMOVED***,
  ***REMOVED***;
***REMOVED***

pluginCreator.postcss = true;
module.exports = pluginCreator;
