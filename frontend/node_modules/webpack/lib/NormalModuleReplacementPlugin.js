/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const { join, dirname ***REMOVED*** = require("./util/fs");

/** @typedef {import("./Compiler")***REMOVED*** Compiler */
/** @typedef {import("./NormalModuleFactory").ResolveData***REMOVED*** ResolveData */
/** @typedef {import("./util/fs").InputFileSystem***REMOVED*** InputFileSystem */

/** @typedef {(resolveData: ResolveData) => void***REMOVED*** ModuleReplacer */

const PLUGIN_NAME = "NormalModuleReplacementPlugin";

class NormalModuleReplacementPlugin {
	/**
	 * Create an instance of the plugin
	 * @param {RegExp***REMOVED*** resourceRegExp the resource matcher
	 * @param {string | ModuleReplacer***REMOVED*** newResource the resource replacement
	 */
	constructor(resourceRegExp, newResource) {
		this.resourceRegExp = resourceRegExp;
		this.newResource = newResource;
	***REMOVED***

	/**
	 * Apply the plugin
	 * @param {Compiler***REMOVED*** compiler the compiler instance
	 * @returns {void***REMOVED***
	 */
	apply(compiler) {
		const resourceRegExp = this.resourceRegExp;
		const newResource = this.newResource;
		compiler.hooks.normalModuleFactory.tap(PLUGIN_NAME, nmf => {
			nmf.hooks.beforeResolve.tap(PLUGIN_NAME, result => {
				if (resourceRegExp.test(result.request)) {
					if (typeof newResource === "function") {
						newResource(result);
					***REMOVED*** else {
						result.request = newResource;
					***REMOVED***
				***REMOVED***
			***REMOVED***);
			nmf.hooks.afterResolve.tap(PLUGIN_NAME, result => {
				const createData = result.createData;
				if (resourceRegExp.test(/** @type {string***REMOVED*** */ (createData.resource))) {
					if (typeof newResource === "function") {
						newResource(result);
					***REMOVED*** else {
						const fs =
							/** @type {InputFileSystem***REMOVED*** */
							(compiler.inputFileSystem);
						if (
							newResource.startsWith("/") ||
							(newResource.length > 1 && newResource[1] === ":")
						) {
							createData.resource = newResource;
						***REMOVED*** else {
							createData.resource = join(
								fs,
								dirname(fs, /** @type {string***REMOVED*** */ (createData.resource)),
								newResource
							);
						***REMOVED***
					***REMOVED***
				***REMOVED***
			***REMOVED***);
		***REMOVED***);
	***REMOVED***
***REMOVED***

module.exports = NormalModuleReplacementPlugin;
