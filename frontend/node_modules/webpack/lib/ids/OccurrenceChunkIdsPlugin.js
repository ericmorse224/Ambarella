/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const { compareChunksNatural ***REMOVED*** = require("../util/comparators");
const createSchemaValidation = require("../util/create-schema-validation");
const { assignAscendingChunkIds ***REMOVED*** = require("./IdHelpers");

/** @typedef {import("../../declarations/plugins/ids/OccurrenceChunkIdsPlugin").OccurrenceChunkIdsPluginOptions***REMOVED*** OccurrenceChunkIdsPluginOptions */
/** @typedef {import("../Chunk")***REMOVED*** Chunk */
/** @typedef {import("../Compiler")***REMOVED*** Compiler */
/** @typedef {import("../Module")***REMOVED*** Module */

const validate = createSchemaValidation(
	require("../../schemas/plugins/ids/OccurrenceChunkIdsPlugin.check.js"),
	() => require("../../schemas/plugins/ids/OccurrenceChunkIdsPlugin.json"),
	{
		name: "Occurrence Order Chunk Ids Plugin",
		baseDataPath: "options"
	***REMOVED***
);

const PLUGIN_NAME = "OccurrenceChunkIdsPlugin";

class OccurrenceChunkIdsPlugin {
	/**
	 * @param {OccurrenceChunkIdsPluginOptions=***REMOVED*** options options object
	 */
	constructor(options = {***REMOVED***) {
		validate(options);
		this.options = options;
	***REMOVED***

	/**
	 * Apply the plugin
	 * @param {Compiler***REMOVED*** compiler the compiler instance
	 * @returns {void***REMOVED***
	 */
	apply(compiler) {
		const prioritiseInitial = this.options.prioritiseInitial;
		compiler.hooks.compilation.tap(PLUGIN_NAME, compilation => {
			compilation.hooks.chunkIds.tap(PLUGIN_NAME, chunks => {
				const chunkGraph = compilation.chunkGraph;

				/** @type {Map<Chunk, number>***REMOVED*** */
				const occursInInitialChunksMap = new Map();

				const compareNatural = compareChunksNatural(chunkGraph);

				for (const c of chunks) {
					let occurs = 0;
					for (const chunkGroup of c.groupsIterable) {
						for (const parent of chunkGroup.parentsIterable) {
							if (parent.isInitial()) occurs++;
						***REMOVED***
					***REMOVED***
					occursInInitialChunksMap.set(c, occurs);
				***REMOVED***

				const chunksInOccurrenceOrder = Array.from(chunks).sort((a, b) => {
					if (prioritiseInitial) {
						const aEntryOccurs =
							/** @type {number***REMOVED*** */
							(occursInInitialChunksMap.get(a));
						const bEntryOccurs =
							/** @type {number***REMOVED*** */
							(occursInInitialChunksMap.get(b));
						if (aEntryOccurs > bEntryOccurs) return -1;
						if (aEntryOccurs < bEntryOccurs) return 1;
					***REMOVED***
					const aOccurs = a.getNumberOfGroups();
					const bOccurs = b.getNumberOfGroups();
					if (aOccurs > bOccurs) return -1;
					if (aOccurs < bOccurs) return 1;
					return compareNatural(a, b);
				***REMOVED***);
				assignAscendingChunkIds(chunksInOccurrenceOrder, compilation);
			***REMOVED***);
		***REMOVED***);
	***REMOVED***
***REMOVED***

module.exports = OccurrenceChunkIdsPlugin;
