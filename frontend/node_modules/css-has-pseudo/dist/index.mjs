import e from"postcss-selector-parser";const t=t=>{t="object"==typeof t&&t||s;const c=Boolean(!("preserve"in t)||t.preserve);return{postcssPlugin:"css-has-pseudo",Rule:(t,{result:s***REMOVED***)=>{if(!t.selector.includes(":has("))return;let r;try{const s=e((t=>{t.walkPseudos((t=>{if(":has"===t.value&&t.nodes){const s=o(t);t.value=s?":not-has":":has";const c=e.attribute({attribute:n(String(t))***REMOVED***);s?t.parent.parent.replaceWith(c):t.replaceWith(c)***REMOVED******REMOVED***))***REMOVED***)).processSync(t.selector);r=String(s)***REMOVED***catch(e){return void t.warn(s,`Failed to parse selector : ${t.selector***REMOVED***`)***REMOVED***void 0!==r&&r!==t.selector&&(c?t.cloneBefore({selector:r***REMOVED***):t.selector=r)***REMOVED******REMOVED******REMOVED***;t.postcss=!0;const s={preserve:!0***REMOVED***,n=e=>{let t="",s="";const n=()=>{if(s){const e=encodeURIComponent(s);let n="",o="";const c=()=>{n&&(o+=n,n="")***REMOVED***;let r=!1;for(let t=0;t<e.length;t++){const s=e[t];if(r)n+=s,r=!1;else switch(s){case"%":c(),o+="\\"+s;continue;case"\\":n+=s,r=!0;continue;default:n+=s;continue***REMOVED******REMOVED***c(),t+=o,s=""***REMOVED******REMOVED***;let o=!1;for(let c=0;c<e.length;c++){const r=e[c];if(o)s+=r,o=!1;else switch(r){case":":case"[":case"]":case",":case"(":case")":n(),t+="\\"+r;continue;case"\\":s+=r,o=!0;continue;default:s+=r;continue***REMOVED******REMOVED***return n(),t***REMOVED***,o=e=>{var t,s;return"pseudo"===(null==(t=e.parent)||null==(s=t.parent)?void 0:s.type)&&":not"===e.parent.parent.value***REMOVED***;export{t as default***REMOVED***;
