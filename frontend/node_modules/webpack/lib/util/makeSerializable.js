/*
	MIT License http://www.opensource.org/licenses/mit-license.php
*/

"use strict";

const { register ***REMOVED*** = require("./serialization");

/** @typedef {import("../serialization/ObjectMiddleware").Constructor***REMOVED*** Constructor */
/** @typedef {import("../serialization/ObjectMiddleware").ObjectDeserializerContext***REMOVED*** ObjectDeserializerContext */
/** @typedef {import("../serialization/ObjectMiddleware").ObjectSerializerContext***REMOVED*** ObjectSerializerContext */

/** @typedef {{ serialize: (context: ObjectSerializerContext) => void, deserialize: (context: ObjectDeserializerContext) => void ***REMOVED******REMOVED*** SerializableClass */
/**
 * @template {SerializableClass***REMOVED*** T
 * @typedef {(new (...params: EXPECTED_ANY[]) => T) & { deserialize?: (context: ObjectDeserializerContext) => T ***REMOVED******REMOVED*** SerializableClassConstructor
 */

/**
 * @template {SerializableClass***REMOVED*** T
 */
class ClassSerializer {
	/**
	 * @param {SerializableClassConstructor<T>***REMOVED*** Constructor constructor
	 */
	constructor(Constructor) {
		this.Constructor = Constructor;
	***REMOVED***

	/**
	 * @param {T***REMOVED*** obj obj
	 * @param {ObjectSerializerContext***REMOVED*** context context
	 */
	serialize(obj, context) {
		obj.serialize(context);
	***REMOVED***

	/**
	 * @param {ObjectDeserializerContext***REMOVED*** context context
	 * @returns {T***REMOVED*** obj
	 */
	deserialize(context) {
		if (typeof this.Constructor.deserialize === "function") {
			return this.Constructor.deserialize(context);
		***REMOVED***
		const obj = new this.Constructor();
		obj.deserialize(context);
		return obj;
	***REMOVED***
***REMOVED***

/**
 * @template {Constructor***REMOVED*** T
 * @param {T***REMOVED*** Constructor the constructor
 * @param {string***REMOVED*** request the request which will be required when deserializing
 * @param {string | null=***REMOVED*** name the name to make multiple serializer unique when sharing a request
 */
module.exports = (Constructor, request, name = null) => {
	register(Constructor, request, name, new ClassSerializer(Constructor));
***REMOVED***;
