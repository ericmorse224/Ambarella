/**
 * @fileoverview Rule to flag use of an object property of the global object (Math and JSON) as a function
 * @author James Allardice
 */

"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const { CALL, CONSTRUCT, ReferenceTracker ***REMOVED*** = require("eslint-utils");
const getPropertyName = require("./utils/ast-utils").getStaticPropertyName;

//------------------------------------------------------------------------------
// Helpers
//------------------------------------------------------------------------------

const nonCallableGlobals = ["Atomics", "JSON", "Math", "Reflect"];

/**
 * Returns the name of the node to report
 * @param {ASTNode***REMOVED*** node A node to report
 * @returns {string***REMOVED*** name to report
 */
function getReportNodeName(node) {
    if (node.type === "ChainExpression") {
        return getReportNodeName(node.expression);
    ***REMOVED***
    if (node.type === "MemberExpression") {
        return getPropertyName(node);
    ***REMOVED***
    return node.name;
***REMOVED***

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = {
    meta: {
        type: "problem",

        docs: {
            description: "disallow calling global object properties as functions",
            category: "Possible Errors",
            recommended: true,
            url: "https://eslint.org/docs/rules/no-obj-calls"
        ***REMOVED***,

        schema: [],

        messages: {
            unexpectedCall: "'{{name***REMOVED******REMOVED***' is not a function.",
            unexpectedRefCall: "'{{name***REMOVED******REMOVED***' is reference to '{{ref***REMOVED******REMOVED***', which is not a function."
        ***REMOVED***
    ***REMOVED***,

    create(context) {

        return {
            Program() {
                const scope = context.getScope();
                const tracker = new ReferenceTracker(scope);
                const traceMap = {***REMOVED***;

                for (const g of nonCallableGlobals) {
                    traceMap[g] = {
                        [CALL]: true,
                        [CONSTRUCT]: true
                    ***REMOVED***;
                ***REMOVED***

                for (const { node, path ***REMOVED*** of tracker.iterateGlobalReferences(traceMap)) {
                    const name = getReportNodeName(node.callee);
                    const ref = path[0];
                    const messageId = name === ref ? "unexpectedCall" : "unexpectedRefCall";

                    context.report({ node, messageId, data: { name, ref ***REMOVED*** ***REMOVED***);
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***;
    ***REMOVED***
***REMOVED***;
