"use strict";

const webpack = require("webpack");

const {
  isColorSupported
***REMOVED*** = require("colorette");
/** @typedef {import("webpack").Configuration***REMOVED*** Configuration */

/** @typedef {import("webpack").Compiler***REMOVED*** Compiler */

/** @typedef {import("webpack").MultiCompiler***REMOVED*** MultiCompiler */

/** @typedef {import("webpack").Stats***REMOVED*** Stats */

/** @typedef {import("webpack").MultiStats***REMOVED*** MultiStats */

/** @typedef {import("../index.js").IncomingMessage***REMOVED*** IncomingMessage */

/** @typedef {import("../index.js").ServerResponse***REMOVED*** ServerResponse */

/** @typedef {Configuration["stats"]***REMOVED*** StatsOptions */

/** @typedef {{ children: Configuration["stats"][] ***REMOVED******REMOVED*** MultiStatsOptions */

/** @typedef {Exclude<Configuration["stats"], boolean | string | undefined>***REMOVED*** NormalizedStatsOptions */
// TODO remove `color` after dropping webpack v4

/** @typedef {{ children: StatsOptions[], colors?: any ***REMOVED******REMOVED*** MultiNormalizedStatsOptions */

/**
 * @template {IncomingMessage***REMOVED*** Request
 * @template {ServerResponse***REMOVED*** Response
 * @param {import("../index.js").Context<Request, Response>***REMOVED*** context
 */


function setupHooks(context) {
  function invalid() {
    if (context.state) {
      context.logger.log("Compilation starting...");
    ***REMOVED*** // We are now in invalid state
    // eslint-disable-next-line no-param-reassign


    context.state = false; // eslint-disable-next-line no-param-reassign, no-undefined

    context.stats = undefined;
  ***REMOVED*** // @ts-ignore


  const statsForWebpack4 = webpack.Stats && webpack.Stats.presetToOptions;
  /**
   * @param {Configuration["stats"]***REMOVED*** statsOptions
   * @returns {NormalizedStatsOptions***REMOVED***
   */

  function normalizeStatsOptions(statsOptions) {
    if (statsForWebpack4) {
      if (typeof statsOptions === "undefined") {
        // eslint-disable-next-line no-param-reassign
        statsOptions = {***REMOVED***;
      ***REMOVED*** else if (typeof statsOptions === "boolean" || typeof statsOptions === "string") {
        // @ts-ignore
        // eslint-disable-next-line no-param-reassign
        statsOptions = webpack.Stats.presetToOptions(statsOptions);
      ***REMOVED*** // @ts-ignore


      return statsOptions;
    ***REMOVED***

    if (typeof statsOptions === "undefined") {
      // eslint-disable-next-line no-param-reassign
      statsOptions = {
        preset: "normal"
      ***REMOVED***;
    ***REMOVED*** else if (typeof statsOptions === "boolean") {
      // eslint-disable-next-line no-param-reassign
      statsOptions = statsOptions ? {
        preset: "normal"
      ***REMOVED*** : {
        preset: "none"
      ***REMOVED***;
    ***REMOVED*** else if (typeof statsOptions === "string") {
      // eslint-disable-next-line no-param-reassign
      statsOptions = {
        preset: statsOptions
      ***REMOVED***;
    ***REMOVED***

    return statsOptions;
  ***REMOVED***
  /**
   * @param {Stats | MultiStats***REMOVED*** stats
   */


  function done(stats) {
    // We are now on valid state
    // eslint-disable-next-line no-param-reassign
    context.state = true; // eslint-disable-next-line no-param-reassign

    context.stats = stats; // Do the stuff in nextTick, because bundle may be invalidated if a change happened while compiling

    process.nextTick(() => {
      const {
        compiler,
        logger,
        options,
        state,
        callbacks
      ***REMOVED*** = context; // Check if still in valid state

      if (!state) {
        return;
      ***REMOVED***

      logger.log("Compilation finished");
      const isMultiCompilerMode = Boolean(
      /** @type {MultiCompiler***REMOVED*** */
      compiler.compilers);
      /**
       * @type {StatsOptions | MultiStatsOptions | NormalizedStatsOptions | MultiNormalizedStatsOptions***REMOVED***
       */

      let statsOptions;

      if (typeof options.stats !== "undefined") {
        statsOptions = isMultiCompilerMode ? {
          children:
          /** @type {MultiCompiler***REMOVED*** */
          compiler.compilers.map(() => options.stats)
        ***REMOVED*** : options.stats;
      ***REMOVED*** else {
        statsOptions = isMultiCompilerMode ? {
          children:
          /** @type {MultiCompiler***REMOVED*** */
          compiler.compilers.map(child => child.options.stats)
        ***REMOVED*** :
        /** @type {Compiler***REMOVED*** */
        compiler.options.stats;
      ***REMOVED***

      if (isMultiCompilerMode) {
        /** @type {MultiNormalizedStatsOptions***REMOVED*** */
        statsOptions.children =
        /** @type {MultiStatsOptions***REMOVED*** */
        statsOptions.children.map(
        /**
         * @param {StatsOptions***REMOVED*** childStatsOptions
         * @return {NormalizedStatsOptions***REMOVED***
         */
        childStatsOptions => {
          // eslint-disable-next-line no-param-reassign
          childStatsOptions = normalizeStatsOptions(childStatsOptions);

          if (typeof childStatsOptions.colors === "undefined") {
            // eslint-disable-next-line no-param-reassign
            childStatsOptions.colors = isColorSupported;
          ***REMOVED***

          return childStatsOptions;
        ***REMOVED***);
      ***REMOVED*** else {
        /** @type {NormalizedStatsOptions***REMOVED*** */
        statsOptions = normalizeStatsOptions(
        /** @type {StatsOptions***REMOVED*** */
        statsOptions);

        if (typeof statsOptions.colors === "undefined") {
          statsOptions.colors = isColorSupported;
        ***REMOVED***
      ***REMOVED*** // TODO webpack@4 doesn't support `{ children: [{ colors: true ***REMOVED***, { colors: true ***REMOVED***] ***REMOVED***` for stats


      if (
      /** @type {MultiCompiler***REMOVED*** */
      compiler.compilers && statsForWebpack4) {
        /** @type {MultiNormalizedStatsOptions***REMOVED*** */
        statsOptions.colors =
        /** @type {MultiNormalizedStatsOptions***REMOVED*** */
        statsOptions.children.some(
        /**
         * @param {StatsOptions***REMOVED*** child
         */
        // @ts-ignore
        child => child.colors);
      ***REMOVED***

      const printedStats = stats.toString(statsOptions); // Avoid extra empty line when `stats: 'none'`

      if (printedStats) {
        // eslint-disable-next-line no-console
        console.log(printedStats);
      ***REMOVED*** // eslint-disable-next-line no-param-reassign


      context.callbacks = []; // Execute callback that are delayed

      callbacks.forEach(
      /**
       * @param {(...args: any[]) => Stats | MultiStats***REMOVED*** callback
       */
      callback => {
        callback(stats);
      ***REMOVED***);
    ***REMOVED***);
  ***REMOVED***

  context.compiler.hooks.watchRun.tap("webpack-dev-middleware", invalid);
  context.compiler.hooks.invalid.tap("webpack-dev-middleware", invalid);
  context.compiler.hooks.done.tap("webpack-dev-middleware", done);
***REMOVED***

module.exports = setupHooks;