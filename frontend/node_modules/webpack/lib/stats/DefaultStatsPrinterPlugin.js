/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

/** @typedef {import("../Compiler")***REMOVED*** Compiler */
/** @typedef {import("../logging/Logger").LogTypeEnum***REMOVED*** LogTypeEnum */
/** @typedef {import("./DefaultStatsFactoryPlugin").ChunkId***REMOVED*** ChunkId */
/** @typedef {import("./DefaultStatsFactoryPlugin").ChunkName***REMOVED*** ChunkName */
/** @typedef {import("./DefaultStatsFactoryPlugin").KnownStatsAsset***REMOVED*** KnownStatsAsset */
/** @typedef {import("./DefaultStatsFactoryPlugin").KnownStatsAssetChunk***REMOVED*** KnownStatsAssetChunk */
/** @typedef {import("./DefaultStatsFactoryPlugin").KnownStatsAssetChunkIdHint***REMOVED*** KnownStatsAssetChunkIdHint */
/** @typedef {import("./DefaultStatsFactoryPlugin").KnownStatsAssetChunkName***REMOVED*** KnownStatsAssetChunkName */
/** @typedef {import("./DefaultStatsFactoryPlugin").KnownStatsChunk***REMOVED*** KnownStatsChunk */
/** @typedef {import("./DefaultStatsFactoryPlugin").KnownStatsChunkGroup***REMOVED*** KnownStatsChunkGroup */
/** @typedef {import("./DefaultStatsFactoryPlugin").KnownStatsChunkOrigin***REMOVED*** KnownStatsChunkOrigin */
/** @typedef {import("./DefaultStatsFactoryPlugin").KnownStatsCompilation***REMOVED*** KnownStatsCompilation */
/** @typedef {import("./DefaultStatsFactoryPlugin").KnownStatsError***REMOVED*** KnownStatsError */
/** @typedef {import("./DefaultStatsFactoryPlugin").KnownStatsLogging***REMOVED*** KnownStatsLogging */
/** @typedef {import("./DefaultStatsFactoryPlugin").KnownStatsLoggingEntry***REMOVED*** KnownStatsLoggingEntry */
/** @typedef {import("./DefaultStatsFactoryPlugin").KnownStatsModule***REMOVED*** KnownStatsModule */
/** @typedef {import("./DefaultStatsFactoryPlugin").KnownStatsModuleIssuer***REMOVED*** KnownStatsModuleIssuer */
/** @typedef {import("./DefaultStatsFactoryPlugin").KnownStatsModuleReason***REMOVED*** KnownStatsModuleReason */
/** @typedef {import("./DefaultStatsFactoryPlugin").KnownStatsModuleTraceDependency***REMOVED*** KnownStatsModuleTraceDependency */
/** @typedef {import("./DefaultStatsFactoryPlugin").KnownStatsModuleTraceItem***REMOVED*** KnownStatsModuleTraceItem */
/** @typedef {import("./DefaultStatsFactoryPlugin").KnownStatsProfile***REMOVED*** KnownStatsProfile */
/** @typedef {import("./DefaultStatsFactoryPlugin").StatsCompilation***REMOVED*** StatsCompilation */
/** @typedef {import("./StatsPrinter")***REMOVED*** StatsPrinter */
/** @typedef {import("./StatsPrinter").ColorFunction***REMOVED*** ColorFunction */
/** @typedef {import("./StatsPrinter").KnownStatsPrinterColorFunctions***REMOVED*** KnownStatsPrinterColorFunctions */
/** @typedef {import("./StatsPrinter").KnownStatsPrinterContext***REMOVED*** KnownStatsPrinterContext */
/** @typedef {import("./StatsPrinter").KnownStatsPrinterFormatters***REMOVED*** KnownStatsPrinterFormatters */
/** @typedef {import("./StatsPrinter").StatsPrinterContext***REMOVED*** StatsPrinterContext */
/** @typedef {import("./StatsPrinter").StatsPrinterContextWithExtra***REMOVED*** StatsPrinterContextWithExtra */

const DATA_URI_CONTENT_LENGTH = 16;
const MAX_MODULE_IDENTIFIER_LENGTH = 80;

/**
 * @param {number***REMOVED*** n a number
 * @param {string***REMOVED*** singular singular
 * @param {string***REMOVED*** plural plural
 * @returns {string***REMOVED*** if n is 1, singular, else plural
 */
const plural = (n, singular, plural) => (n === 1 ? singular : plural);

/**
 * @param {Record<string, number>***REMOVED*** sizes sizes by source type
 * @param {StatsPrinterContext***REMOVED*** options options
 * @returns {string | undefined***REMOVED*** text
 */
const printSizes = (sizes, { formatSize = n => `${n***REMOVED***` ***REMOVED***) => {
	const keys = Object.keys(sizes);
	if (keys.length > 1) {
		return keys.map(key => `${formatSize(sizes[key])***REMOVED*** (${key***REMOVED***)`).join(" ");
	***REMOVED*** else if (keys.length === 1) {
		return formatSize(sizes[keys[0]]);
	***REMOVED***
***REMOVED***;

/**
 * @param {string | null***REMOVED*** resource resource
 * @returns {string***REMOVED*** resource name for display
 */
const getResourceName = resource => {
	if (!resource) return "";
	const dataUrl = /^data:[^,]+,/.exec(resource);
	if (!dataUrl) return resource;

	const len = dataUrl[0].length + DATA_URI_CONTENT_LENGTH;
	if (resource.length < len) return resource;
	return `${resource.slice(
		0,
		Math.min(resource.length - /* '..'.length */ 2, len)
	)***REMOVED***..`;
***REMOVED***;

/**
 * @param {string***REMOVED*** name module name
 * @returns {[string,string]***REMOVED*** prefix and module name
 */
const getModuleName = name => {
	const [, prefix, resource] =
		/** @type {[string, string, string]***REMOVED*** */
		(/** @type {unknown***REMOVED*** */ (/^(.*!)?([^!]*)$/.exec(name)));

	if (resource.length > MAX_MODULE_IDENTIFIER_LENGTH) {
		const truncatedResource = `${resource.slice(
			0,
			Math.min(
				resource.length - /* '...(truncated)'.length */ 14,
				MAX_MODULE_IDENTIFIER_LENGTH
			)
		)***REMOVED***...(truncated)`;

		return [prefix, getResourceName(truncatedResource)];
	***REMOVED***

	return [prefix, getResourceName(resource)];
***REMOVED***;

/**
 * @param {string***REMOVED*** str string
 * @param {(item: string) => string***REMOVED*** fn function to apply to each line
 * @returns {string***REMOVED*** joined string
 */
const mapLines = (str, fn) => str.split("\n").map(fn).join("\n");

/**
 * @param {number***REMOVED*** n a number
 * @returns {string***REMOVED*** number as two digit string, leading 0
 */
const twoDigit = n => (n >= 10 ? `${n***REMOVED***` : `0${n***REMOVED***`);

/**
 * @param {string | number | null***REMOVED*** id an id
 * @returns {id is string | number***REMOVED*** is i
 */
const isValidId = id => {
	if (typeof id === "number" || id) {
		return true;
	***REMOVED***

	return false;
***REMOVED***;

/**
 * @template T
 * @param {Array<T> | undefined***REMOVED*** list of items
 * @param {number***REMOVED*** count number of items to show
 * @returns {string***REMOVED*** string representation of list
 */
const moreCount = (list, count) =>
	list && list.length > 0 ? `+ ${count***REMOVED***` : `${count***REMOVED***`;

/**
 * @template T
 * @template {keyof T***REMOVED*** K
 * @typedef {{ [P in K]-?: T[P] ***REMOVED******REMOVED*** WithRequired
 */

/**
 * @template {keyof StatsPrinterContext***REMOVED*** RequiredStatsPrinterContextKeys
 * @typedef {StatsPrinterContextWithExtra & WithRequired<StatsPrinterContext, "compilation" | RequiredStatsPrinterContextKeys>***REMOVED*** DefineStatsPrinterContext
 */

/**
 * @template T
 * @template {keyof StatsPrinterContext***REMOVED*** RequiredStatsPrinterContextKeys
 * @typedef {(thing: Exclude<T, undefined>, context: DefineStatsPrinterContext<RequiredStatsPrinterContextKeys>, printer: StatsPrinter) => string | undefined***REMOVED*** SimplePrinter
 */

/**
 * @template T
 * @typedef {T extends (infer U)[] ? U : T***REMOVED*** Unpacked
 */

/**
 * @template {object***REMOVED*** O
 * @template {keyof O***REMOVED*** K
 * @template {string***REMOVED*** B
 * @typedef {K extends string ? Exclude<O[K], undefined> extends EXPECTED_ANY[] ? never : `${B***REMOVED***.${K***REMOVED***` : never***REMOVED*** PropertyName
 */

/**
 * @template {object***REMOVED*** O
 * @template {keyof O***REMOVED*** K
 * @template {string***REMOVED*** B
 * @typedef {K extends string ? NonNullable<O[K]> extends EXPECTED_ANY[] ? `${B***REMOVED***.${K***REMOVED***[]` : never : never***REMOVED*** ArrayPropertyName
 */

/**
 * @template {object***REMOVED*** O
 * @template {keyof O***REMOVED*** K
 * @template {string***REMOVED*** B
 * @typedef {K extends string ? Exclude<O[K], undefined> extends EXPECTED_ANY[] ? `${B***REMOVED***.${K***REMOVED***` : never : never***REMOVED*** MultiplePropertyName
 */

/**
 * @template {object***REMOVED*** O
 * @template {string***REMOVED*** K
 * @template {string***REMOVED*** E
 * @typedef {{ [property in `${K***REMOVED***!`]?: SimplePrinter<O, "compilation" | E> ***REMOVED******REMOVED*** Exclamation
 */

/**
 * @template {object***REMOVED*** O
 * @template {string***REMOVED*** B
 * @template {string***REMOVED*** [R=B]
 * @typedef {{ [K in keyof O as PropertyName<O, K, B>]?: SimplePrinter<O[K], R> ***REMOVED*** &
 * { [K in keyof O as ArrayPropertyName<O, K, B>]?: Exclude<O[K], undefined> extends (infer I)[] ? SimplePrinter<I, R> : never ***REMOVED*** &
 * { [K in keyof O as MultiplePropertyName<O, K, B>]?: SimplePrinter<O[K], R> ***REMOVED***
 * ***REMOVED*** Printers
 */

/**
 * @typedef {Printers<KnownStatsCompilation, "compilation"> &
 * { ["compilation.summary!"]?: SimplePrinter<KnownStatsCompilation, "compilation"> ***REMOVED*** &
 * { ["compilation.errorsInChildren!"]?: SimplePrinter<KnownStatsCompilation, "compilation"> ***REMOVED*** &
 * { ["compilation.warningsInChildren!"]?: SimplePrinter<KnownStatsCompilation, "compilation"> ***REMOVED******REMOVED*** CompilationSimplePrinters
 */

/**
 * @type {CompilationSimplePrinters***REMOVED***
 */
const COMPILATION_SIMPLE_PRINTERS = {
	"compilation.summary!": (
		_,
		{
			type,
			bold,
			green,
			red,
			yellow,
			formatDateTime,
			formatTime,
			compilation: {
				name,
				hash,
				version,
				time,
				builtAt,
				errorsCount,
				warningsCount
			***REMOVED***
		***REMOVED***
	) => {
		const root = type === "compilation.summary!";
		const warningsMessage =
			/** @type {number***REMOVED*** */ (warningsCount) > 0
				? yellow(
						`${warningsCount***REMOVED*** ${plural(/** @type {number***REMOVED*** */ (warningsCount), "warning", "warnings")***REMOVED***`
					)
				: "";
		const errorsMessage =
			/** @type {number***REMOVED*** */ (errorsCount) > 0
				? red(
						`${errorsCount***REMOVED*** ${plural(/** @type {number***REMOVED*** */ (errorsCount), "error", "errors")***REMOVED***`
					)
				: "";
		const timeMessage = root && time ? ` in ${formatTime(time)***REMOVED***` : "";
		const hashMessage = hash ? ` (${hash***REMOVED***)` : "";
		const builtAtMessage =
			root && builtAt ? `${formatDateTime(builtAt)***REMOVED***: ` : "";
		const versionMessage = root && version ? `webpack ${version***REMOVED***` : "";
		const nameMessage =
			root && name
				? bold(name)
				: name
					? `Child ${bold(name)***REMOVED***`
					: root
						? ""
						: "Child";
		const subjectMessage =
			nameMessage && versionMessage
				? `${nameMessage***REMOVED*** (${versionMessage***REMOVED***)`
				: versionMessage || nameMessage || "webpack";
		let statusMessage;
		if (errorsMessage && warningsMessage) {
			statusMessage = `compiled with ${errorsMessage***REMOVED*** and ${warningsMessage***REMOVED***`;
		***REMOVED*** else if (errorsMessage) {
			statusMessage = `compiled with ${errorsMessage***REMOVED***`;
		***REMOVED*** else if (warningsMessage) {
			statusMessage = `compiled with ${warningsMessage***REMOVED***`;
		***REMOVED*** else if (errorsCount === 0 && warningsCount === 0) {
			statusMessage = `compiled ${green("successfully")***REMOVED***`;
		***REMOVED*** else {
			statusMessage = "compiled";
		***REMOVED***
		if (
			builtAtMessage ||
			versionMessage ||
			errorsMessage ||
			warningsMessage ||
			(errorsCount === 0 && warningsCount === 0) ||
			timeMessage ||
			hashMessage
		)
			return `${builtAtMessage***REMOVED***${subjectMessage***REMOVED*** ${statusMessage***REMOVED***${timeMessage***REMOVED***${hashMessage***REMOVED***`;
	***REMOVED***,
	"compilation.filteredWarningDetailsCount": count =>
		count
			? `${count***REMOVED*** ${plural(
					count,
					"warning has",
					"warnings have"
				)***REMOVED*** detailed information that is not shown.\nUse 'stats.errorDetails: true' resp. '--stats-error-details' to show it.`
			: undefined,
	"compilation.filteredErrorDetailsCount": (count, { yellow ***REMOVED***) =>
		count
			? yellow(
					`${count***REMOVED*** ${plural(
						count,
						"error has",
						"errors have"
					)***REMOVED*** detailed information that is not shown.\nUse 'stats.errorDetails: true' resp. '--stats-error-details' to show it.`
				)
			: undefined,
	"compilation.env": (env, { bold ***REMOVED***) =>
		env
			? `Environment (--env): ${bold(JSON.stringify(env, null, 2))***REMOVED***`
			: undefined,
	"compilation.publicPath": (publicPath, { bold ***REMOVED***) =>
		`PublicPath: ${bold(publicPath || "(none)")***REMOVED***`,
	"compilation.entrypoints": (entrypoints, context, printer) =>
		Array.isArray(entrypoints)
			? undefined
			: printer.print(context.type, Object.values(entrypoints), {
					...context,
					chunkGroupKind: "Entrypoint"
				***REMOVED***),
	"compilation.namedChunkGroups": (namedChunkGroups, context, printer) => {
		if (!Array.isArray(namedChunkGroups)) {
			const {
				compilation: { entrypoints ***REMOVED***
			***REMOVED*** = context;
			let chunkGroups = Object.values(namedChunkGroups);
			if (entrypoints) {
				chunkGroups = chunkGroups.filter(
					group =>
						!Object.prototype.hasOwnProperty.call(
							entrypoints,
							/** @type {string***REMOVED*** */
							(group.name)
						)
				);
			***REMOVED***
			return printer.print(context.type, chunkGroups, {
				...context,
				chunkGroupKind: "Chunk Group"
			***REMOVED***);
		***REMOVED***
	***REMOVED***,
	"compilation.assetsByChunkName": () => "",

	"compilation.filteredModules": (
		filteredModules,
		{ compilation: { modules ***REMOVED*** ***REMOVED***
	) =>
		filteredModules > 0
			? `${moreCount(modules, filteredModules)***REMOVED*** ${plural(
					filteredModules,
					"module",
					"modules"
				)***REMOVED***`
			: undefined,
	"compilation.filteredAssets": (
		filteredAssets,
		{ compilation: { assets ***REMOVED*** ***REMOVED***
	) =>
		filteredAssets > 0
			? `${moreCount(assets, filteredAssets)***REMOVED*** ${plural(
					filteredAssets,
					"asset",
					"assets"
				)***REMOVED***`
			: undefined,
	"compilation.logging": (logging, context, printer) =>
		Array.isArray(logging)
			? undefined
			: printer.print(
					context.type,
					Object.entries(logging).map(([name, value]) => ({ ...value, name ***REMOVED***)),
					context
				),
	"compilation.warningsInChildren!": (_, { yellow, compilation ***REMOVED***) => {
		if (
			!compilation.children &&
			/** @type {number***REMOVED*** */ (compilation.warningsCount) > 0 &&
			compilation.warnings
		) {
			const childWarnings =
				/** @type {number***REMOVED*** */ (compilation.warningsCount) -
				compilation.warnings.length;
			if (childWarnings > 0) {
				return yellow(
					`${childWarnings***REMOVED*** ${plural(
						childWarnings,
						"WARNING",
						"WARNINGS"
					)***REMOVED*** in child compilations${
						compilation.children
							? ""
							: " (Use 'stats.children: true' resp. '--stats-children' for more details)"
					***REMOVED***`
				);
			***REMOVED***
		***REMOVED***
	***REMOVED***,
	"compilation.errorsInChildren!": (_, { red, compilation ***REMOVED***) => {
		if (
			!compilation.children &&
			/** @type {number***REMOVED*** */ (compilation.errorsCount) > 0 &&
			compilation.errors
		) {
			const childErrors =
				/** @type {number***REMOVED*** */ (compilation.errorsCount) -
				compilation.errors.length;
			if (childErrors > 0) {
				return red(
					`${childErrors***REMOVED*** ${plural(
						childErrors,
						"ERROR",
						"ERRORS"
					)***REMOVED*** in child compilations${
						compilation.children
							? ""
							: " (Use 'stats.children: true' resp. '--stats-children' for more details)"
					***REMOVED***`
				);
			***REMOVED***
		***REMOVED***
	***REMOVED***
***REMOVED***;

/**
 * @typedef {Printers<KnownStatsAsset, "asset"> &
 * Printers<KnownStatsAsset["info"], "asset.info"> &
 * Exclamation<KnownStatsAsset, "asset.separator", "asset"> &
 * { ["asset.filteredChildren"]?: SimplePrinter<number, "asset"> ***REMOVED*** &
 * { assetChunk?: SimplePrinter<KnownStatsAssetChunk, "asset"> ***REMOVED*** &
 * { assetChunkName?: SimplePrinter<KnownStatsAssetChunkName, "asset"> ***REMOVED*** &
 * { assetChunkIdHint?: SimplePrinter<KnownStatsAssetChunkIdHint, "asset"> ***REMOVED******REMOVED*** AssetSimplePrinters
 */

/** @type {AssetSimplePrinters***REMOVED*** */
const ASSET_SIMPLE_PRINTERS = {
	"asset.type": type => type,
	"asset.name": (name, { formatFilename, asset: { isOverSizeLimit ***REMOVED*** ***REMOVED***) =>
		formatFilename(name, isOverSizeLimit),
	"asset.size": (size, { asset: { isOverSizeLimit ***REMOVED***, yellow, formatSize ***REMOVED***) =>
		isOverSizeLimit ? yellow(formatSize(size)) : formatSize(size),
	"asset.emitted": (emitted, { green, formatFlag ***REMOVED***) =>
		emitted ? green(formatFlag("emitted")) : undefined,
	"asset.comparedForEmit": (comparedForEmit, { yellow, formatFlag ***REMOVED***) =>
		comparedForEmit ? yellow(formatFlag("compared for emit")) : undefined,
	"asset.cached": (cached, { green, formatFlag ***REMOVED***) =>
		cached ? green(formatFlag("cached")) : undefined,
	"asset.isOverSizeLimit": (isOverSizeLimit, { yellow, formatFlag ***REMOVED***) =>
		isOverSizeLimit ? yellow(formatFlag("big")) : undefined,

	"asset.info.immutable": (immutable, { green, formatFlag ***REMOVED***) =>
		immutable ? green(formatFlag("immutable")) : undefined,
	"asset.info.javascriptModule": (javascriptModule, { formatFlag ***REMOVED***) =>
		javascriptModule ? formatFlag("javascript module") : undefined,
	"asset.info.sourceFilename": (sourceFilename, { formatFlag ***REMOVED***) =>
		sourceFilename ? formatFlag(`from: ${sourceFilename***REMOVED***`) : undefined,
	"asset.info.development": (development, { green, formatFlag ***REMOVED***) =>
		development ? green(formatFlag("dev")) : undefined,
	"asset.info.hotModuleReplacement": (
		hotModuleReplacement,
		{ green, formatFlag ***REMOVED***
	) => (hotModuleReplacement ? green(formatFlag("hmr")) : undefined),
	"asset.separator!": () => "\n",
	"asset.filteredRelated": (filteredRelated, { asset: { related ***REMOVED*** ***REMOVED***) =>
		filteredRelated > 0
			? `${moreCount(related, filteredRelated)***REMOVED*** related ${plural(
					filteredRelated,
					"asset",
					"assets"
				)***REMOVED***`
			: undefined,
	"asset.filteredChildren": (filteredChildren, { asset: { children ***REMOVED*** ***REMOVED***) =>
		filteredChildren > 0
			? `${moreCount(children, filteredChildren)***REMOVED*** ${plural(
					filteredChildren,
					"asset",
					"assets"
				)***REMOVED***`
			: undefined,

	assetChunk: (id, { formatChunkId ***REMOVED***) => formatChunkId(id),

	assetChunkName: name => name || undefined,
	assetChunkIdHint: name => name || undefined
***REMOVED***;

/**
 * @typedef {Printers<KnownStatsModule, "module"> &
 * Exclamation<KnownStatsModule, "module.separator", "module"> &
 * { ["module.filteredChildren"]?: SimplePrinter<number, "module"> ***REMOVED*** &
 * { ["module.filteredReasons"]?: SimplePrinter<number, "module"> ***REMOVED******REMOVED*** ModuleSimplePrinters
 */

/** @type {ModuleSimplePrinters***REMOVED*** */
const MODULE_SIMPLE_PRINTERS = {
	"module.type": type => (type !== "module" ? type : undefined),
	"module.id": (id, { formatModuleId ***REMOVED***) =>
		isValidId(id) ? formatModuleId(id) : undefined,
	"module.name": (name, { bold ***REMOVED***) => {
		const [prefix, resource] = getModuleName(name);
		return `${prefix || ""***REMOVED***${bold(resource || "")***REMOVED***`;
	***REMOVED***,
	"module.identifier": identifier => undefined,
	"module.layer": (layer, { formatLayer ***REMOVED***) =>
		layer ? formatLayer(layer) : undefined,
	"module.sizes": printSizes,
	"module.chunks[]": (id, { formatChunkId ***REMOVED***) => formatChunkId(id),
	"module.depth": (depth, { formatFlag ***REMOVED***) =>
		depth !== null ? formatFlag(`depth ${depth***REMOVED***`) : undefined,
	"module.cacheable": (cacheable, { formatFlag, red ***REMOVED***) =>
		cacheable === false ? red(formatFlag("not cacheable")) : undefined,
	"module.orphan": (orphan, { formatFlag, yellow ***REMOVED***) =>
		orphan ? yellow(formatFlag("orphan")) : undefined,
	// "module.runtime": (runtime, { formatFlag, yellow ***REMOVED***) =>
	// 	runtime ? yellow(formatFlag("runtime")) : undefined,
	"module.optional": (optional, { formatFlag, yellow ***REMOVED***) =>
		optional ? yellow(formatFlag("optional")) : undefined,
	"module.dependent": (dependent, { formatFlag, cyan ***REMOVED***) =>
		dependent ? cyan(formatFlag("dependent")) : undefined,
	"module.built": (built, { formatFlag, yellow ***REMOVED***) =>
		built ? yellow(formatFlag("built")) : undefined,
	"module.codeGenerated": (codeGenerated, { formatFlag, yellow ***REMOVED***) =>
		codeGenerated ? yellow(formatFlag("code generated")) : undefined,
	"module.buildTimeExecuted": (buildTimeExecuted, { formatFlag, green ***REMOVED***) =>
		buildTimeExecuted ? green(formatFlag("build time executed")) : undefined,
	"module.cached": (cached, { formatFlag, green ***REMOVED***) =>
		cached ? green(formatFlag("cached")) : undefined,
	"module.assets": (assets, { formatFlag, magenta ***REMOVED***) =>
		assets && assets.length
			? magenta(
					formatFlag(
						`${assets.length***REMOVED*** ${plural(assets.length, "asset", "assets")***REMOVED***`
					)
				)
			: undefined,
	"module.warnings": (warnings, { formatFlag, yellow ***REMOVED***) =>
		warnings
			? yellow(
					formatFlag(`${warnings***REMOVED*** ${plural(warnings, "warning", "warnings")***REMOVED***`)
				)
			: undefined,
	"module.errors": (errors, { formatFlag, red ***REMOVED***) =>
		errors
			? red(formatFlag(`${errors***REMOVED*** ${plural(errors, "error", "errors")***REMOVED***`))
			: undefined,
	"module.providedExports": (providedExports, { formatFlag, cyan ***REMOVED***) => {
		if (Array.isArray(providedExports)) {
			if (providedExports.length === 0) return cyan(formatFlag("no exports"));
			return cyan(formatFlag(`exports: ${providedExports.join(", ")***REMOVED***`));
		***REMOVED***
	***REMOVED***,
	"module.usedExports": (usedExports, { formatFlag, cyan, module ***REMOVED***) => {
		if (usedExports !== true) {
			if (usedExports === null) return cyan(formatFlag("used exports unknown"));
			if (usedExports === false) return cyan(formatFlag("module unused"));
			if (Array.isArray(usedExports)) {
				if (usedExports.length === 0)
					return cyan(formatFlag("no exports used"));
				const providedExportsCount = Array.isArray(module.providedExports)
					? module.providedExports.length
					: null;
				if (
					providedExportsCount !== null &&
					providedExportsCount === usedExports.length
				) {
					return cyan(formatFlag("all exports used"));
				***REMOVED***

				return cyan(
					formatFlag(`only some exports used: ${usedExports.join(", ")***REMOVED***`)
				);
			***REMOVED***
		***REMOVED***
	***REMOVED***,
	"module.optimizationBailout[]": (optimizationBailout, { yellow ***REMOVED***) =>
		yellow(optimizationBailout),
	"module.issuerPath": (issuerPath, { module ***REMOVED***) =>
		module.profile ? undefined : "",
	"module.profile": profile => undefined,
	"module.filteredModules": (filteredModules, { module: { modules ***REMOVED*** ***REMOVED***) =>
		filteredModules > 0
			? `${moreCount(modules, filteredModules)***REMOVED*** nested ${plural(
					filteredModules,
					"module",
					"modules"
				)***REMOVED***`
			: undefined,
	"module.filteredReasons": (filteredReasons, { module: { reasons ***REMOVED*** ***REMOVED***) =>
		filteredReasons > 0
			? `${moreCount(reasons, filteredReasons)***REMOVED*** ${plural(
					filteredReasons,
					"reason",
					"reasons"
				)***REMOVED***`
			: undefined,
	"module.filteredChildren": (filteredChildren, { module: { children ***REMOVED*** ***REMOVED***) =>
		filteredChildren > 0
			? `${moreCount(children, filteredChildren)***REMOVED*** ${plural(
					filteredChildren,
					"module",
					"modules"
				)***REMOVED***`
			: undefined,
	"module.separator!": () => "\n"
***REMOVED***;

/**
 * @typedef {Printers<KnownStatsModuleIssuer, "moduleIssuer"> &
 * Printers<KnownStatsModuleIssuer["profile"], "moduleIssuer.profile", "moduleIssuer">***REMOVED*** ModuleIssuerPrinters
 */

/** @type {ModuleIssuerPrinters***REMOVED*** */
const MODULE_ISSUER_PRINTERS = {
	"moduleIssuer.id": (id, { formatModuleId ***REMOVED***) => formatModuleId(id),
	"moduleIssuer.profile.total": (value, { formatTime ***REMOVED***) => formatTime(value)
***REMOVED***;

/**
 * @typedef {Printers<KnownStatsModuleReason, "moduleReason"> &
 * { ["moduleReason.filteredChildren"]?: SimplePrinter<number, "moduleReason"> ***REMOVED******REMOVED*** ModuleReasonsPrinters
 */

/** @type {ModuleReasonsPrinters***REMOVED*** */
const MODULE_REASON_PRINTERS = {
	"moduleReason.type": type => type || undefined,
	"moduleReason.userRequest": (userRequest, { cyan ***REMOVED***) =>
		cyan(getResourceName(userRequest)),
	"moduleReason.moduleId": (moduleId, { formatModuleId ***REMOVED***) =>
		isValidId(moduleId) ? formatModuleId(moduleId) : undefined,
	"moduleReason.module": (module, { magenta ***REMOVED***) =>
		module ? magenta(module) : undefined,
	"moduleReason.loc": loc => loc || undefined,
	"moduleReason.explanation": (explanation, { cyan ***REMOVED***) =>
		explanation ? cyan(explanation) : undefined,
	"moduleReason.active": (active, { formatFlag ***REMOVED***) =>
		active ? undefined : formatFlag("inactive"),
	"moduleReason.resolvedModule": (module, { magenta ***REMOVED***) =>
		module ? magenta(module) : undefined,
	"moduleReason.filteredChildren": (
		filteredChildren,
		{ moduleReason: { children ***REMOVED*** ***REMOVED***
	) =>
		filteredChildren > 0
			? `${moreCount(children, filteredChildren)***REMOVED*** ${plural(
					filteredChildren,
					"reason",
					"reasons"
				)***REMOVED***`
			: undefined
***REMOVED***;

/** @typedef {Printers<KnownStatsProfile, "module.profile", "profile">***REMOVED*** ModuleProfilePrinters */

/** @type {ModuleProfilePrinters***REMOVED*** */
const MODULE_PROFILE_PRINTERS = {
	"module.profile.total": (value, { formatTime ***REMOVED***) => formatTime(value),
	"module.profile.resolving": (value, { formatTime ***REMOVED***) =>
		`resolving: ${formatTime(value)***REMOVED***`,
	"module.profile.restoring": (value, { formatTime ***REMOVED***) =>
		`restoring: ${formatTime(value)***REMOVED***`,
	"module.profile.integration": (value, { formatTime ***REMOVED***) =>
		`integration: ${formatTime(value)***REMOVED***`,
	"module.profile.building": (value, { formatTime ***REMOVED***) =>
		`building: ${formatTime(value)***REMOVED***`,
	"module.profile.storing": (value, { formatTime ***REMOVED***) =>
		`storing: ${formatTime(value)***REMOVED***`,
	"module.profile.additionalResolving": (value, { formatTime ***REMOVED***) =>
		value ? `additional resolving: ${formatTime(value)***REMOVED***` : undefined,
	"module.profile.additionalIntegration": (value, { formatTime ***REMOVED***) =>
		value ? `additional integration: ${formatTime(value)***REMOVED***` : undefined
***REMOVED***;

/**
 * @typedef {Exclamation<KnownStatsChunkGroup, "chunkGroup.kind", "chunkGroupKind"> &
 * Exclamation<KnownStatsChunkGroup, "chunkGroup.separator", "chunkGroup"> &
 * Printers<KnownStatsChunkGroup, "chunkGroup"> &
 * Exclamation<KnownStatsChunkGroup, "chunkGroup.is", "chunkGroup"> &
 * Printers<Exclude<KnownStatsChunkGroup["assets"], undefined>[number], "chunkGroupAsset" | "chunkGroup"> &
 * { ['chunkGroupChildGroup.type']?: SimplePrinter<string, "chunkGroupAsset"> ***REMOVED*** &
 * { ['chunkGroupChild.assets[]']?: SimplePrinter<string, "chunkGroupAsset"> ***REMOVED*** &
 * { ['chunkGroupChild.chunks[]']?: SimplePrinter<ChunkId, "chunkGroupAsset"> ***REMOVED*** &
 * { ['chunkGroupChild.name']?: SimplePrinter<ChunkName, "chunkGroupAsset"> ***REMOVED******REMOVED*** ChunkGroupPrinters
 */

/** @type {ChunkGroupPrinters***REMOVED*** */
const CHUNK_GROUP_PRINTERS = {
	"chunkGroup.kind!": (_, { chunkGroupKind ***REMOVED***) => chunkGroupKind,
	"chunkGroup.separator!": () => "\n",
	"chunkGroup.name": (name, { bold ***REMOVED***) => (name ? bold(name) : undefined),
	"chunkGroup.isOverSizeLimit": (isOverSizeLimit, { formatFlag, yellow ***REMOVED***) =>
		isOverSizeLimit ? yellow(formatFlag("big")) : undefined,
	"chunkGroup.assetsSize": (size, { formatSize ***REMOVED***) =>
		size ? formatSize(size) : undefined,
	"chunkGroup.auxiliaryAssetsSize": (size, { formatSize ***REMOVED***) =>
		size ? `(${formatSize(size)***REMOVED***)` : undefined,
	"chunkGroup.filteredAssets": (n, { chunkGroup: { assets ***REMOVED*** ***REMOVED***) =>
		n > 0
			? `${moreCount(assets, n)***REMOVED*** ${plural(n, "asset", "assets")***REMOVED***`
			: undefined,
	"chunkGroup.filteredAuxiliaryAssets": (
		n,
		{ chunkGroup: { auxiliaryAssets ***REMOVED*** ***REMOVED***
	) =>
		n > 0
			? `${moreCount(auxiliaryAssets, n)***REMOVED*** auxiliary ${plural(
					n,
					"asset",
					"assets"
				)***REMOVED***`
			: undefined,
	"chunkGroup.is!": () => "=",
	"chunkGroupAsset.name": (asset, { green ***REMOVED***) => green(asset),
	"chunkGroupAsset.size": (size, { formatSize, chunkGroup ***REMOVED***) =>
		chunkGroup.assets &&
		(chunkGroup.assets.length > 1 ||
		(chunkGroup.auxiliaryAssets && chunkGroup.auxiliaryAssets.length > 0)
			? formatSize(size)
			: undefined),
	"chunkGroup.children": (children, context, printer) =>
		Array.isArray(children)
			? undefined
			: printer.print(
					context.type,
					Object.keys(children).map(key => ({
						type: key,
						children: children[key]
					***REMOVED***)),
					context
				),
	"chunkGroupChildGroup.type": type => `${type***REMOVED***:`,
	"chunkGroupChild.assets[]": (file, { formatFilename ***REMOVED***) =>
		formatFilename(file),
	"chunkGroupChild.chunks[]": (id, { formatChunkId ***REMOVED***) => formatChunkId(id),
	"chunkGroupChild.name": name => (name ? `(name: ${name***REMOVED***)` : undefined)
***REMOVED***;

/**
 * @typedef {Printers<KnownStatsChunk, "chunk"> &
 * { ["chunk.childrenByOrder[].type"]: SimplePrinter<string, "chunk"> ***REMOVED*** &
 * { ["chunk.childrenByOrder[].children[]"]: SimplePrinter<ChunkId, "chunk"> ***REMOVED*** &
 * Exclamation<KnownStatsChunk, "chunk.separator", "chunk"> &
 * Printers<KnownStatsChunkOrigin, "chunkOrigin">***REMOVED*** ChunkPrinters
 */

/** @type {ChunkPrinters***REMOVED*** */
const CHUNK_PRINTERS = {
	"chunk.id": (id, { formatChunkId ***REMOVED***) => formatChunkId(id),
	"chunk.files[]": (file, { formatFilename ***REMOVED***) => formatFilename(file),
	"chunk.names[]": name => name,
	"chunk.idHints[]": name => name,
	"chunk.runtime[]": name => name,
	"chunk.sizes": (sizes, context) => printSizes(sizes, context),
	"chunk.parents[]": (parents, context) =>
		context.formatChunkId(parents, "parent"),
	"chunk.siblings[]": (siblings, context) =>
		context.formatChunkId(siblings, "sibling"),
	"chunk.children[]": (children, context) =>
		context.formatChunkId(children, "child"),
	"chunk.childrenByOrder": (childrenByOrder, context, printer) =>
		Array.isArray(childrenByOrder)
			? undefined
			: printer.print(
					context.type,
					Object.keys(childrenByOrder).map(key => ({
						type: key,
						children: childrenByOrder[key]
					***REMOVED***)),
					context
				),
	"chunk.childrenByOrder[].type": type => `${type***REMOVED***:`,
	"chunk.childrenByOrder[].children[]": (id, { formatChunkId ***REMOVED***) =>
		isValidId(id) ? formatChunkId(id) : undefined,
	"chunk.entry": (entry, { formatFlag, yellow ***REMOVED***) =>
		entry ? yellow(formatFlag("entry")) : undefined,
	"chunk.initial": (initial, { formatFlag, yellow ***REMOVED***) =>
		initial ? yellow(formatFlag("initial")) : undefined,
	"chunk.rendered": (rendered, { formatFlag, green ***REMOVED***) =>
		rendered ? green(formatFlag("rendered")) : undefined,
	"chunk.recorded": (recorded, { formatFlag, green ***REMOVED***) =>
		recorded ? green(formatFlag("recorded")) : undefined,
	"chunk.reason": (reason, { yellow ***REMOVED***) => (reason ? yellow(reason) : undefined),
	"chunk.filteredModules": (filteredModules, { chunk: { modules ***REMOVED*** ***REMOVED***) =>
		filteredModules > 0
			? `${moreCount(modules, filteredModules)***REMOVED*** chunk ${plural(
					filteredModules,
					"module",
					"modules"
				)***REMOVED***`
			: undefined,
	"chunk.separator!": () => "\n",

	"chunkOrigin.request": request => request,
	"chunkOrigin.moduleId": (moduleId, { formatModuleId ***REMOVED***) =>
		isValidId(moduleId) ? formatModuleId(moduleId) : undefined,
	"chunkOrigin.moduleName": (moduleName, { bold ***REMOVED***) => bold(moduleName),
	"chunkOrigin.loc": loc => loc
***REMOVED***;

/**
 * @typedef {Printers<KnownStatsError, "error"> &
 * { ["error.filteredDetails"]?: SimplePrinter<number, "error"> ***REMOVED*** &
 * Exclamation<KnownStatsError, "error.separator", "error">***REMOVED*** ErrorPrinters
 */

/**
 * @type {ErrorPrinters***REMOVED***
 */
const ERROR_PRINTERS = {
	"error.compilerPath": (compilerPath, { bold ***REMOVED***) =>
		compilerPath ? bold(`(${compilerPath***REMOVED***)`) : undefined,
	"error.chunkId": (chunkId, { formatChunkId ***REMOVED***) =>
		isValidId(chunkId) ? formatChunkId(chunkId) : undefined,
	"error.chunkEntry": (chunkEntry, { formatFlag ***REMOVED***) =>
		chunkEntry ? formatFlag("entry") : undefined,
	"error.chunkInitial": (chunkInitial, { formatFlag ***REMOVED***) =>
		chunkInitial ? formatFlag("initial") : undefined,
	"error.file": (file, { bold ***REMOVED***) => bold(file),
	"error.moduleName": (moduleName, { bold ***REMOVED***) =>
		moduleName.includes("!")
			? `${bold(moduleName.replace(/^(\s|\S)*!/, ""))***REMOVED*** (${moduleName***REMOVED***)`
			: `${bold(moduleName)***REMOVED***`,
	"error.loc": (loc, { green ***REMOVED***) => green(loc),
	"error.message": (message, { bold, formatError ***REMOVED***) =>
		message.includes("\u001B[") ? message : bold(formatError(message)),
	"error.details": (details, { formatError ***REMOVED***) => formatError(details),
	"error.filteredDetails": filteredDetails =>
		filteredDetails ? `+ ${filteredDetails***REMOVED*** hidden lines` : undefined,
	"error.stack": stack => stack,
	"error.cause": (cause, context, printer) =>
		cause
			? indent(
					`[cause]: ${
						/** @type {string***REMOVED*** */
						(printer.print(`${context.type***REMOVED***.error`, cause, context))
					***REMOVED***`,
					"  "
				)
			: undefined,
	"error.moduleTrace": moduleTrace => undefined,
	"error.separator!": () => "\n"
***REMOVED***;

/**
 * @typedef {Printers<KnownStatsLoggingEntry, `loggingEntry(${LogTypeEnum***REMOVED***).loggingEntry`> &
 * { ["loggingEntry(clear).loggingEntry"]?: SimplePrinter<KnownStatsLoggingEntry, "logging"> ***REMOVED*** &
 * { ["loggingEntry.trace[]"]?: SimplePrinter<Exclude<KnownStatsLoggingEntry["trace"], undefined>[number], "logging"> ***REMOVED*** &
 * { loggingGroup?: SimplePrinter<KnownStatsLogging[], "logging"> ***REMOVED*** &
 * Printers<KnownStatsLogging & { name: string ***REMOVED***, `loggingGroup`> &
 * Exclamation<KnownStatsLogging, "loggingGroup.separator", "loggingGroup">***REMOVED*** LogEntryPrinters
 */

/** @type {LogEntryPrinters***REMOVED*** */
const LOG_ENTRY_PRINTERS = {
	"loggingEntry(error).loggingEntry.message": (message, { red ***REMOVED***) =>
		mapLines(message, x => `<e> ${red(x)***REMOVED***`),
	"loggingEntry(warn).loggingEntry.message": (message, { yellow ***REMOVED***) =>
		mapLines(message, x => `<w> ${yellow(x)***REMOVED***`),
	"loggingEntry(info).loggingEntry.message": (message, { green ***REMOVED***) =>
		mapLines(message, x => `<i> ${green(x)***REMOVED***`),
	"loggingEntry(log).loggingEntry.message": (message, { bold ***REMOVED***) =>
		mapLines(message, x => `    ${bold(x)***REMOVED***`),
	"loggingEntry(debug).loggingEntry.message": message =>
		mapLines(message, x => `    ${x***REMOVED***`),
	"loggingEntry(trace).loggingEntry.message": message =>
		mapLines(message, x => `    ${x***REMOVED***`),
	"loggingEntry(status).loggingEntry.message": (message, { magenta ***REMOVED***) =>
		mapLines(message, x => `<s> ${magenta(x)***REMOVED***`),
	"loggingEntry(profile).loggingEntry.message": (message, { magenta ***REMOVED***) =>
		mapLines(message, x => `<p> ${magenta(x)***REMOVED***`),
	"loggingEntry(profileEnd).loggingEntry.message": (message, { magenta ***REMOVED***) =>
		mapLines(message, x => `</p> ${magenta(x)***REMOVED***`),
	"loggingEntry(time).loggingEntry.message": (message, { magenta ***REMOVED***) =>
		mapLines(message, x => `<t> ${magenta(x)***REMOVED***`),
	"loggingEntry(group).loggingEntry.message": (message, { cyan ***REMOVED***) =>
		mapLines(message, x => `<-> ${cyan(x)***REMOVED***`),
	"loggingEntry(groupCollapsed).loggingEntry.message": (message, { cyan ***REMOVED***) =>
		mapLines(message, x => `<+> ${cyan(x)***REMOVED***`),
	"loggingEntry(clear).loggingEntry": () => "    -------",
	"loggingEntry(groupCollapsed).loggingEntry.children": () => "",
	"loggingEntry.trace[]": trace =>
		trace ? mapLines(trace, x => `| ${x***REMOVED***`) : undefined,

	loggingGroup: loggingGroup =>
		loggingGroup.entries.length === 0 ? "" : undefined,
	"loggingGroup.debug": (flag, { red ***REMOVED***) => (flag ? red("DEBUG") : undefined),
	"loggingGroup.name": (name, { bold ***REMOVED***) => bold(`LOG from ${name***REMOVED***`),
	"loggingGroup.separator!": () => "\n",
	"loggingGroup.filteredEntries": filteredEntries =>
		filteredEntries > 0 ? `+ ${filteredEntries***REMOVED*** hidden lines` : undefined
***REMOVED***;

/** @typedef {Printers<KnownStatsModuleTraceItem, "moduleTraceItem">***REMOVED*** ModuleTraceItemPrinters */

/** @type {ModuleTraceItemPrinters***REMOVED*** */
const MODULE_TRACE_ITEM_PRINTERS = {
	"moduleTraceItem.originName": originName => originName
***REMOVED***;

/** @typedef {Printers<KnownStatsModuleTraceDependency, "moduleTraceDependency">***REMOVED*** ModuleTraceDependencyPrinters */

/** @type {ModuleTraceDependencyPrinters***REMOVED*** */
const MODULE_TRACE_DEPENDENCY_PRINTERS = {
	"moduleTraceDependency.loc": loc => loc
***REMOVED***;

/**
 * @type {Record<string, string | ((item: KnownStatsLoggingEntry) => string)>***REMOVED***
 */
const ITEM_NAMES = {
	"compilation.assets[]": "asset",
	"compilation.modules[]": "module",
	"compilation.chunks[]": "chunk",
	"compilation.entrypoints[]": "chunkGroup",
	"compilation.namedChunkGroups[]": "chunkGroup",
	"compilation.errors[]": "error",
	"compilation.warnings[]": "error",
	"compilation.logging[]": "loggingGroup",
	"compilation.children[]": "compilation",
	"asset.related[]": "asset",
	"asset.children[]": "asset",
	"asset.chunks[]": "assetChunk",
	"asset.auxiliaryChunks[]": "assetChunk",
	"asset.chunkNames[]": "assetChunkName",
	"asset.chunkIdHints[]": "assetChunkIdHint",
	"asset.auxiliaryChunkNames[]": "assetChunkName",
	"asset.auxiliaryChunkIdHints[]": "assetChunkIdHint",
	"chunkGroup.assets[]": "chunkGroupAsset",
	"chunkGroup.auxiliaryAssets[]": "chunkGroupAsset",
	"chunkGroupChild.assets[]": "chunkGroupAsset",
	"chunkGroupChild.auxiliaryAssets[]": "chunkGroupAsset",
	"chunkGroup.children[]": "chunkGroupChildGroup",
	"chunkGroupChildGroup.children[]": "chunkGroupChild",
	"module.modules[]": "module",
	"module.children[]": "module",
	"module.reasons[]": "moduleReason",
	"moduleReason.children[]": "moduleReason",
	"module.issuerPath[]": "moduleIssuer",
	"chunk.origins[]": "chunkOrigin",
	"chunk.modules[]": "module",
	"loggingGroup.entries[]": logEntry =>
		`loggingEntry(${logEntry.type***REMOVED***).loggingEntry`,
	"loggingEntry.children[]": logEntry =>
		`loggingEntry(${logEntry.type***REMOVED***).loggingEntry`,
	"error.moduleTrace[]": "moduleTraceItem",
	"error.errors[]": "error",
	"moduleTraceItem.dependencies[]": "moduleTraceDependency"
***REMOVED***;

const ERROR_PREFERRED_ORDER = [
	"compilerPath",
	"chunkId",
	"chunkEntry",
	"chunkInitial",
	"file",
	"separator!",
	"moduleName",
	"loc",
	"separator!",
	"message",
	"separator!",
	"details",
	"separator!",
	"filteredDetails",
	"separator!",
	"stack",
	"separator!",
	"cause",
	"separator!",
	"missing",
	"separator!",
	"moduleTrace"
];

/** @type {Record<string, string[]>***REMOVED*** */
const PREFERRED_ORDERS = {
	compilation: [
		"name",
		"hash",
		"version",
		"time",
		"builtAt",
		"env",
		"publicPath",
		"assets",
		"filteredAssets",
		"entrypoints",
		"namedChunkGroups",
		"chunks",
		"modules",
		"filteredModules",
		"children",
		"logging",
		"warnings",
		"warningsInChildren!",
		"filteredWarningDetailsCount",
		"errors",
		"errorsInChildren!",
		"filteredErrorDetailsCount",
		"summary!",
		"needAdditionalPass"
	],
	asset: [
		"type",
		"name",
		"size",
		"chunks",
		"auxiliaryChunks",
		"emitted",
		"comparedForEmit",
		"cached",
		"info",
		"isOverSizeLimit",
		"chunkNames",
		"auxiliaryChunkNames",
		"chunkIdHints",
		"auxiliaryChunkIdHints",
		"related",
		"filteredRelated",
		"children",
		"filteredChildren"
	],
	"asset.info": [
		"immutable",
		"sourceFilename",
		"javascriptModule",
		"development",
		"hotModuleReplacement"
	],
	chunkGroup: [
		"kind!",
		"name",
		"isOverSizeLimit",
		"assetsSize",
		"auxiliaryAssetsSize",
		"is!",
		"assets",
		"filteredAssets",
		"auxiliaryAssets",
		"filteredAuxiliaryAssets",
		"separator!",
		"children"
	],
	chunkGroupAsset: ["name", "size"],
	chunkGroupChildGroup: ["type", "children"],
	chunkGroupChild: ["assets", "chunks", "name"],
	module: [
		"type",
		"name",
		"identifier",
		"id",
		"layer",
		"sizes",
		"chunks",
		"depth",
		"cacheable",
		"orphan",
		"runtime",
		"optional",
		"dependent",
		"built",
		"codeGenerated",
		"cached",
		"assets",
		"failed",
		"warnings",
		"errors",
		"children",
		"filteredChildren",
		"providedExports",
		"usedExports",
		"optimizationBailout",
		"reasons",
		"filteredReasons",
		"issuerPath",
		"profile",
		"modules",
		"filteredModules"
	],
	moduleReason: [
		"active",
		"type",
		"userRequest",
		"moduleId",
		"module",
		"resolvedModule",
		"loc",
		"explanation",
		"children",
		"filteredChildren"
	],
	"module.profile": [
		"total",
		"separator!",
		"resolving",
		"restoring",
		"integration",
		"building",
		"storing",
		"additionalResolving",
		"additionalIntegration"
	],
	chunk: [
		"id",
		"runtime",
		"files",
		"names",
		"idHints",
		"sizes",
		"parents",
		"siblings",
		"children",
		"childrenByOrder",
		"entry",
		"initial",
		"rendered",
		"recorded",
		"reason",
		"separator!",
		"origins",
		"separator!",
		"modules",
		"separator!",
		"filteredModules"
	],
	chunkOrigin: ["request", "moduleId", "moduleName", "loc"],
	error: ERROR_PREFERRED_ORDER,
	warning: ERROR_PREFERRED_ORDER,
	"chunk.childrenByOrder[]": ["type", "children"],
	loggingGroup: [
		"debug",
		"name",
		"separator!",
		"entries",
		"separator!",
		"filteredEntries"
	],
	loggingEntry: ["message", "trace", "children"]
***REMOVED***;

/** @typedef {(items: string[]) => string | undefined***REMOVED*** SimpleItemsJoiner */

/** @type {SimpleItemsJoiner***REMOVED*** */
const itemsJoinOneLine = items => items.filter(Boolean).join(" ");
/** @type {SimpleItemsJoiner***REMOVED*** */
const itemsJoinOneLineBrackets = items =>
	items.length > 0 ? `(${items.filter(Boolean).join(" ")***REMOVED***)` : undefined;
/** @type {SimpleItemsJoiner***REMOVED*** */
const itemsJoinMoreSpacing = items => items.filter(Boolean).join("\n\n");
/** @type {SimpleItemsJoiner***REMOVED*** */
const itemsJoinComma = items => items.filter(Boolean).join(", ");
/** @type {SimpleItemsJoiner***REMOVED*** */
const itemsJoinCommaBrackets = items =>
	items.length > 0 ? `(${items.filter(Boolean).join(", ")***REMOVED***)` : undefined;
/** @type {(item: string) => SimpleItemsJoiner***REMOVED*** */
const itemsJoinCommaBracketsWithName = name => items =>
	items.length > 0
		? `(${name***REMOVED***: ${items.filter(Boolean).join(", ")***REMOVED***)`
		: undefined;

/** @type {Record<string, SimpleItemsJoiner>***REMOVED*** */
const SIMPLE_ITEMS_JOINER = {
	"chunk.parents": itemsJoinOneLine,
	"chunk.siblings": itemsJoinOneLine,
	"chunk.children": itemsJoinOneLine,
	"chunk.names": itemsJoinCommaBrackets,
	"chunk.idHints": itemsJoinCommaBracketsWithName("id hint"),
	"chunk.runtime": itemsJoinCommaBracketsWithName("runtime"),
	"chunk.files": itemsJoinComma,
	"chunk.childrenByOrder": itemsJoinOneLine,
	"chunk.childrenByOrder[].children": itemsJoinOneLine,
	"chunkGroup.assets": itemsJoinOneLine,
	"chunkGroup.auxiliaryAssets": itemsJoinOneLineBrackets,
	"chunkGroupChildGroup.children": itemsJoinComma,
	"chunkGroupChild.assets": itemsJoinOneLine,
	"chunkGroupChild.auxiliaryAssets": itemsJoinOneLineBrackets,
	"asset.chunks": itemsJoinComma,
	"asset.auxiliaryChunks": itemsJoinCommaBrackets,
	"asset.chunkNames": itemsJoinCommaBracketsWithName("name"),
	"asset.auxiliaryChunkNames": itemsJoinCommaBracketsWithName("auxiliary name"),
	"asset.chunkIdHints": itemsJoinCommaBracketsWithName("id hint"),
	"asset.auxiliaryChunkIdHints":
		itemsJoinCommaBracketsWithName("auxiliary id hint"),
	"module.chunks": itemsJoinOneLine,
	"module.issuerPath": items =>
		items
			.filter(Boolean)
			.map(item => `${item***REMOVED*** ->`)
			.join(" "),
	"compilation.errors": itemsJoinMoreSpacing,
	"compilation.warnings": itemsJoinMoreSpacing,
	"compilation.logging": itemsJoinMoreSpacing,
	"compilation.children": items =>
		indent(/** @type {string***REMOVED*** */ (itemsJoinMoreSpacing(items)), "  "),
	"moduleTraceItem.dependencies": itemsJoinOneLine,
	"loggingEntry.children": items =>
		indent(items.filter(Boolean).join("\n"), "  ", false)
***REMOVED***;

/**
 * @param {Item[]***REMOVED*** items items
 * @returns {string***REMOVED*** result
 */
const joinOneLine = items =>
	items
		.map(item => item.content)
		.filter(Boolean)
		.join(" ");

/**
 * @param {Item[]***REMOVED*** items items
 * @returns {string***REMOVED*** result
 */
const joinInBrackets = items => {
	const res = [];
	let mode = 0;
	for (const item of items) {
		if (item.element === "separator!") {
			switch (mode) {
				case 0:
				case 1:
					mode += 2;
					break;
				case 4:
					res.push(")");
					mode = 3;
					break;
			***REMOVED***
		***REMOVED***
		if (!item.content) continue;
		switch (mode) {
			case 0:
				mode = 1;
				break;
			case 1:
				res.push(" ");
				break;
			case 2:
				res.push("(");
				mode = 4;
				break;
			case 3:
				res.push(" (");
				mode = 4;
				break;
			case 4:
				res.push(", ");
				break;
		***REMOVED***
		res.push(item.content);
	***REMOVED***
	if (mode === 4) res.push(")");
	return res.join("");
***REMOVED***;

/**
 * @param {string***REMOVED*** str a string
 * @param {string***REMOVED*** prefix prefix
 * @param {boolean=***REMOVED*** noPrefixInFirstLine need prefix in the first line?
 * @returns {string***REMOVED*** result
 */
const indent = (str, prefix, noPrefixInFirstLine) => {
	const rem = str.replace(/\n([^\n])/g, `\n${prefix***REMOVED***$1`);
	if (noPrefixInFirstLine) return rem;
	const ind = str[0] === "\n" ? "" : prefix;
	return ind + rem;
***REMOVED***;

/**
 * @param {(false | Item)[]***REMOVED*** items items
 * @param {string***REMOVED*** indenter indenter
 * @returns {string***REMOVED*** result
 */
const joinExplicitNewLine = (items, indenter) => {
	let firstInLine = true;
	let first = true;
	return items
		.map(item => {
			if (!item || !item.content) return;
			let content = indent(item.content, first ? "" : indenter, !firstInLine);
			if (firstInLine) {
				content = content.replace(/^\n+/, "");
			***REMOVED***
			if (!content) return;
			first = false;
			const noJoiner = firstInLine || content.startsWith("\n");
			firstInLine = content.endsWith("\n");
			return noJoiner ? content : ` ${content***REMOVED***`;
		***REMOVED***)
		.filter(Boolean)
		.join("")
		.trim();
***REMOVED***;

/**
 * @param {boolean***REMOVED*** error is an error
 * @returns {SimpleElementJoiner***REMOVED*** joiner
 */
const joinError =
	error =>
	/**
	 * @param {Item[]***REMOVED*** items items
	 * @param {StatsPrinterContextWithExtra***REMOVED*** ctx context
	 * @returns {string***REMOVED*** result
	 */
	(items, { red, yellow ***REMOVED***) =>
		`${error ? red("ERROR") : yellow("WARNING")***REMOVED*** in ${joinExplicitNewLine(
			items,
			""
		)***REMOVED***`;

/** @typedef {{ element: string, content: string | undefined ***REMOVED******REMOVED*** Item */
/** @typedef {(items: Item[], context: StatsPrinterContextWithExtra & Required<KnownStatsPrinterContext>) => string***REMOVED*** SimpleElementJoiner */

/** @type {Record<string, SimpleElementJoiner>***REMOVED*** */
const SIMPLE_ELEMENT_JOINERS = {
	compilation: items => {
		const result = [];
		let lastNeedMore = false;
		for (const item of items) {
			if (!item.content) continue;
			const needMoreSpace =
				item.element === "warnings" ||
				item.element === "filteredWarningDetailsCount" ||
				item.element === "errors" ||
				item.element === "filteredErrorDetailsCount" ||
				item.element === "logging";
			if (result.length !== 0) {
				result.push(needMoreSpace || lastNeedMore ? "\n\n" : "\n");
			***REMOVED***
			result.push(item.content);
			lastNeedMore = needMoreSpace;
		***REMOVED***
		if (lastNeedMore) result.push("\n");
		return result.join("");
	***REMOVED***,
	asset: items =>
		joinExplicitNewLine(
			items.map(item => {
				if (
					(item.element === "related" || item.element === "children") &&
					item.content
				) {
					return {
						...item,
						content: `\n${item.content***REMOVED***\n`
					***REMOVED***;
				***REMOVED***
				return item;
			***REMOVED***),
			"  "
		),
	"asset.info": joinOneLine,
	module: (items, { module ***REMOVED***) => {
		let hasName = false;
		return joinExplicitNewLine(
			items.map(item => {
				switch (item.element) {
					case "id":
						if (module.id === module.name) {
							if (hasName) return false;
							if (item.content) hasName = true;
						***REMOVED***
						break;
					case "name":
						if (hasName) return false;
						if (item.content) hasName = true;
						break;
					case "providedExports":
					case "usedExports":
					case "optimizationBailout":
					case "reasons":
					case "issuerPath":
					case "profile":
					case "children":
					case "modules":
						if (item.content) {
							return {
								...item,
								content: `\n${item.content***REMOVED***\n`
							***REMOVED***;
						***REMOVED***
						break;
				***REMOVED***
				return item;
			***REMOVED***),
			"  "
		);
	***REMOVED***,
	chunk: items => {
		let hasEntry = false;
		return `chunk ${joinExplicitNewLine(
			items.filter(item => {
				switch (item.element) {
					case "entry":
						if (item.content) hasEntry = true;
						break;
					case "initial":
						if (hasEntry) return false;
						break;
				***REMOVED***
				return true;
			***REMOVED***),
			"  "
		)***REMOVED***`;
	***REMOVED***,
	"chunk.childrenByOrder[]": items => `(${joinOneLine(items)***REMOVED***)`,
	chunkGroup: items => joinExplicitNewLine(items, "  "),
	chunkGroupAsset: joinOneLine,
	chunkGroupChildGroup: joinOneLine,
	chunkGroupChild: joinOneLine,
	moduleReason: (items, { moduleReason ***REMOVED***) => {
		let hasName = false;
		return joinExplicitNewLine(
			items.map(item => {
				switch (item.element) {
					case "moduleId":
						if (moduleReason.moduleId === moduleReason.module && item.content)
							hasName = true;
						break;
					case "module":
						if (hasName) return false;
						break;
					case "resolvedModule":
						if (moduleReason.module === moduleReason.resolvedModule)
							return false;
						break;
					case "children":
						if (item.content) {
							return {
								...item,
								content: `\n${item.content***REMOVED***\n`
							***REMOVED***;
						***REMOVED***
						break;
				***REMOVED***
				return item;
			***REMOVED***),
			"  "
		);
	***REMOVED***,
	"module.profile": joinInBrackets,
	moduleIssuer: joinOneLine,
	chunkOrigin: items => `> ${joinOneLine(items)***REMOVED***`,
	"errors[].error": joinError(true),
	"warnings[].error": joinError(false),
	error: items => joinExplicitNewLine(items, ""),
	"error.errors[].error": items =>
		indent(`[errors]: ${joinExplicitNewLine(items, "")***REMOVED***`, "  "),
	loggingGroup: items => joinExplicitNewLine(items, "").trimEnd(),
	moduleTraceItem: items => ` @ ${joinOneLine(items)***REMOVED***`,
	moduleTraceDependency: joinOneLine
***REMOVED***;

/** @type {Record<keyof KnownStatsPrinterColorFunctions, string>***REMOVED*** */
const AVAILABLE_COLORS = {
	bold: "\u001B[1m",
	yellow: "\u001B[1m\u001B[33m",
	red: "\u001B[1m\u001B[31m",
	green: "\u001B[1m\u001B[32m",
	cyan: "\u001B[1m\u001B[36m",
	magenta: "\u001B[1m\u001B[35m"
***REMOVED***;

/** @typedef {Required<{ [Key in keyof KnownStatsPrinterFormatters]: (value: Parameters<NonNullable<KnownStatsPrinterFormatters[Key]>>[0], options: Required<KnownStatsPrinterColorFunctions> & StatsPrinterContext, ...args: TODO[]) => string ***REMOVED***>***REMOVED*** AvailableFormats */

/** @type {AvailableFormats***REMOVED*** */
const AVAILABLE_FORMATS = {
	formatChunkId: (id, { yellow ***REMOVED***, direction) => {
		switch (direction) {
			case "parent":
				return `<{${yellow(id)***REMOVED******REMOVED***>`;
			case "sibling":
				return `={${yellow(id)***REMOVED******REMOVED***=`;
			case "child":
				return `>{${yellow(id)***REMOVED******REMOVED***<`;
			default:
				return `{${yellow(id)***REMOVED******REMOVED***`;
		***REMOVED***
	***REMOVED***,
	formatModuleId: id => `[${id***REMOVED***]`,
	formatFilename: (filename, { green, yellow ***REMOVED***, oversize) =>
		(oversize ? yellow : green)(filename),
	formatFlag: flag => `[${flag***REMOVED***]`,
	formatLayer: layer => `(in ${layer***REMOVED***)`,
	formatSize: require("../SizeFormatHelpers").formatSize,
	formatDateTime: (dateTime, { bold ***REMOVED***) => {
		const d = new Date(dateTime);
		const x = twoDigit;
		const date = `${d.getFullYear()***REMOVED***-${x(d.getMonth() + 1)***REMOVED***-${x(d.getDate())***REMOVED***`;
		const time = `${x(d.getHours())***REMOVED***:${x(d.getMinutes())***REMOVED***:${x(d.getSeconds())***REMOVED***`;
		return `${date***REMOVED*** ${bold(time)***REMOVED***`;
	***REMOVED***,
	formatTime: (
		time,
		{ timeReference, bold, green, yellow, red ***REMOVED***,
		boldQuantity
	) => {
		const unit = " ms";
		if (timeReference && time !== timeReference) {
			const times = [
				timeReference / 2,
				timeReference / 4,
				timeReference / 8,
				timeReference / 16
			];
			if (time < times[3]) return `${time***REMOVED***${unit***REMOVED***`;
			else if (time < times[2]) return bold(`${time***REMOVED***${unit***REMOVED***`);
			else if (time < times[1]) return green(`${time***REMOVED***${unit***REMOVED***`);
			else if (time < times[0]) return yellow(`${time***REMOVED***${unit***REMOVED***`);
			return red(`${time***REMOVED***${unit***REMOVED***`);
		***REMOVED***
		return `${boldQuantity ? bold(time) : time***REMOVED***${unit***REMOVED***`;
	***REMOVED***,
	formatError: (message, { green, yellow, red ***REMOVED***) => {
		if (message.includes("\u001B[")) return message;
		const highlights = [
			{ regExp: /(Did you mean .+)/g, format: green ***REMOVED***,
			{
				regExp: /(Set 'mode' option to 'development' or 'production')/g,
				format: green
			***REMOVED***,
			{ regExp: /(\(module has no exports\))/g, format: red ***REMOVED***,
			{ regExp: /\(possible exports: (.+)\)/g, format: green ***REMOVED***,
			{ regExp: /(?:^|\n)(.* doesn't exist)/g, format: red ***REMOVED***,
			{ regExp: /('\w+' option has not been set)/g, format: red ***REMOVED***,
			{
				regExp: /(Emitted value instead of an instance of Error)/g,
				format: yellow
			***REMOVED***,
			{ regExp: /(Used? .+ instead)/gi, format: yellow ***REMOVED***,
			{ regExp: /\b(deprecated|must|required)\b/g, format: yellow ***REMOVED***,
			{
				regExp: /\b(BREAKING CHANGE)\b/gi,
				format: red
			***REMOVED***,
			{
				regExp:
					/\b(error|failed|unexpected|invalid|not found|not supported|not available|not possible|not implemented|doesn't support|conflict|conflicting|not existing|duplicate)\b/gi,
				format: red
			***REMOVED***
		];
		for (const { regExp, format ***REMOVED*** of highlights) {
			message = message.replace(
				regExp,
				/**
				 * @param {string***REMOVED*** match match
				 * @param {string***REMOVED*** content content
				 * @returns {string***REMOVED*** result
				 */
				(match, content) => match.replace(content, format(content))
			);
		***REMOVED***
		return message;
	***REMOVED***
***REMOVED***;

/** @typedef {(result: string) => string***REMOVED*** ResultModifierFn */
/** @type {Record<string, ResultModifierFn>***REMOVED*** */
const RESULT_MODIFIER = {
	"module.modules": result => indent(result, "| ")
***REMOVED***;

/**
 * @param {string[]***REMOVED*** array array
 * @param {string[]***REMOVED*** preferredOrder preferred order
 * @returns {string[]***REMOVED*** result
 */
const createOrder = (array, preferredOrder) => {
	const originalArray = array.slice();
	/** @type {Set<string>***REMOVED*** */
	const set = new Set(array);
	/** @type {Set<string>***REMOVED*** */
	const usedSet = new Set();
	array.length = 0;
	for (const element of preferredOrder) {
		if (element.endsWith("!") || set.has(element)) {
			array.push(element);
			usedSet.add(element);
		***REMOVED***
	***REMOVED***
	for (const element of originalArray) {
		if (!usedSet.has(element)) {
			array.push(element);
		***REMOVED***
	***REMOVED***
	return array;
***REMOVED***;

const PLUGIN_NAME = "DefaultStatsPrinterPlugin";

class DefaultStatsPrinterPlugin {
	/**
	 * Apply the plugin
	 * @param {Compiler***REMOVED*** compiler the compiler instance
	 * @returns {void***REMOVED***
	 */
	apply(compiler) {
		compiler.hooks.compilation.tap(PLUGIN_NAME, compilation => {
			compilation.hooks.statsPrinter.tap(PLUGIN_NAME, (stats, options) => {
				// Put colors into context
				stats.hooks.print
					.for("compilation")
					.tap(PLUGIN_NAME, (compilation, context) => {
						for (const color of Object.keys(AVAILABLE_COLORS)) {
							const name =
								/** @type {keyof KnownStatsPrinterColorFunctions***REMOVED*** */
								(color);
							/** @type {string | undefined***REMOVED*** */
							let start;
							if (options.colors) {
								if (
									typeof options.colors === "object" &&
									typeof options.colors[name] === "string"
								) {
									start = options.colors[name];
								***REMOVED*** else {
									start = AVAILABLE_COLORS[name];
								***REMOVED***
							***REMOVED***
							if (start) {
								/** @type {ColorFunction***REMOVED*** */
								context[color] = str =>
									`${start***REMOVED***${
										typeof str === "string"
											? str.replace(
													/((\u001B\[39m|\u001B\[22m|\u001B\[0m)+)/g,
													`$1${start***REMOVED***`
												)
											: str
									***REMOVED***\u001B[39m\u001B[22m`;
							***REMOVED*** else {
								/**
								 * @param {string***REMOVED*** str string
								 * @returns {string***REMOVED*** str string
								 */
								context[color] = str => str;
							***REMOVED***
						***REMOVED***
						for (const format of Object.keys(AVAILABLE_FORMATS)) {
							context[format] =
								/**
								 * @param {string | number***REMOVED*** content content
								 * @param {...TODO***REMOVED*** args args
								 * @returns {string***REMOVED*** result
								 */
								(content, ...args) =>
									/** @type {TODO***REMOVED*** */
									(
										AVAILABLE_FORMATS[
											/** @type {keyof AvailableFormats***REMOVED*** */
											(format)
										]
									)(
										content,
										/** @type {StatsPrinterContext & Required<KnownStatsPrinterColorFunctions>***REMOVED*** */
										(context),
										...args
									);
						***REMOVED***
						context.timeReference = compilation.time;
					***REMOVED***);

				for (const key of Object.keys(COMPILATION_SIMPLE_PRINTERS)) {
					stats.hooks.print.for(key).tap(PLUGIN_NAME, (obj, ctx) =>
						/** @type {TODO***REMOVED*** */
						(
							COMPILATION_SIMPLE_PRINTERS[
								/** @type {keyof CompilationSimplePrinters***REMOVED*** */
								(key)
							]
						)(
							obj,
							/** @type {DefineStatsPrinterContext<"compilation">***REMOVED*** */
							(ctx),
							stats
						)
					);
				***REMOVED***

				for (const key of Object.keys(ASSET_SIMPLE_PRINTERS)) {
					stats.hooks.print.for(key).tap(PLUGIN_NAME, (obj, ctx) =>
						/** @type {NonNullable<AssetSimplePrinters[keyof AssetSimplePrinters]>***REMOVED*** */
						(
							ASSET_SIMPLE_PRINTERS[
								/** @type {keyof AssetSimplePrinters***REMOVED*** */
								(key)
							]
						)(
							obj,
							/** @type {DefineStatsPrinterContext<"asset" | "asset.info">***REMOVED*** */
							(ctx),
							stats
						)
					);
				***REMOVED***

				for (const key of Object.keys(MODULE_SIMPLE_PRINTERS)) {
					stats.hooks.print.for(key).tap(PLUGIN_NAME, (obj, ctx) =>
						/** @type {TODO***REMOVED*** */
						(
							MODULE_SIMPLE_PRINTERS[
								/** @type {keyof ModuleSimplePrinters***REMOVED*** */
								(key)
							]
						)(
							obj,
							/** @type {DefineStatsPrinterContext<"module">***REMOVED*** */
							(ctx),
							stats
						)
					);
				***REMOVED***

				for (const key of Object.keys(MODULE_ISSUER_PRINTERS)) {
					stats.hooks.print.for(key).tap(PLUGIN_NAME, (obj, ctx) =>
						/** @type {NonNullable<ModuleIssuerPrinters[keyof ModuleIssuerPrinters]>***REMOVED*** */
						(
							MODULE_ISSUER_PRINTERS[
								/** @type {keyof ModuleIssuerPrinters***REMOVED*** */
								(key)
							]
						)(
							obj,
							/** @type {DefineStatsPrinterContext<"moduleIssuer">***REMOVED*** */
							(ctx),
							stats
						)
					);
				***REMOVED***

				for (const key of Object.keys(MODULE_REASON_PRINTERS)) {
					stats.hooks.print.for(key).tap(PLUGIN_NAME, (obj, ctx) =>
						/** @type {TODO***REMOVED*** */
						(
							MODULE_REASON_PRINTERS[
								/** @type {keyof ModuleReasonsPrinters***REMOVED*** */
								(key)
							]
						)(
							obj,
							/** @type {DefineStatsPrinterContext<"moduleReason">***REMOVED*** */
							(ctx),
							stats
						)
					);
				***REMOVED***

				for (const key of Object.keys(MODULE_PROFILE_PRINTERS)) {
					stats.hooks.print.for(key).tap(PLUGIN_NAME, (obj, ctx) =>
						/** @type {NonNullable<ModuleProfilePrinters[keyof ModuleProfilePrinters]>***REMOVED*** */
						(
							MODULE_PROFILE_PRINTERS[
								/** @type {keyof ModuleProfilePrinters***REMOVED*** */
								(key)
							]
						)(
							obj,
							/** @type {DefineStatsPrinterContext<"profile">***REMOVED*** */
							(ctx),
							stats
						)
					);
				***REMOVED***

				for (const key of Object.keys(CHUNK_GROUP_PRINTERS)) {
					stats.hooks.print.for(key).tap(PLUGIN_NAME, (obj, ctx) =>
						/** @type {TODO***REMOVED*** */
						(
							CHUNK_GROUP_PRINTERS[
								/** @type {keyof ChunkGroupPrinters***REMOVED*** */
								(key)
							]
						)(
							obj,
							/** @type {DefineStatsPrinterContext<"chunkGroupKind" | "chunkGroup">***REMOVED*** */
							(ctx),
							stats
						)
					);
				***REMOVED***

				for (const key of Object.keys(CHUNK_PRINTERS)) {
					stats.hooks.print.for(key).tap(PLUGIN_NAME, (obj, ctx) =>
						/** @type {TODO***REMOVED*** */
						(CHUNK_PRINTERS[/** @type {keyof ChunkPrinters***REMOVED*** */ (key)])(
							obj,
							/** @type {DefineStatsPrinterContext<"chunk">***REMOVED*** */
							(ctx),
							stats
						)
					);
				***REMOVED***

				for (const key of Object.keys(ERROR_PRINTERS)) {
					stats.hooks.print.for(key).tap(PLUGIN_NAME, (obj, ctx) =>
						/** @type {TODO***REMOVED*** */
						(ERROR_PRINTERS[/** @type {keyof ErrorPrinters***REMOVED*** */ (key)])(
							obj,
							/** @type {DefineStatsPrinterContext<"error">***REMOVED*** */
							(ctx),
							stats
						)
					);
				***REMOVED***

				for (const key of Object.keys(LOG_ENTRY_PRINTERS)) {
					stats.hooks.print.for(key).tap(PLUGIN_NAME, (obj, ctx) =>
						/** @type {TODO***REMOVED*** */
						(
							LOG_ENTRY_PRINTERS[
								/** @type {keyof LogEntryPrinters***REMOVED*** */
								(key)
							]
						)(
							obj,
							/** @type {DefineStatsPrinterContext<"logging">***REMOVED*** */
							(ctx),
							stats
						)
					);
				***REMOVED***

				for (const key of Object.keys(MODULE_TRACE_DEPENDENCY_PRINTERS)) {
					stats.hooks.print.for(key).tap(PLUGIN_NAME, (obj, ctx) =>
						/** @type {NonNullable<ModuleTraceDependencyPrinters[keyof ModuleTraceDependencyPrinters]>***REMOVED*** */
						(
							MODULE_TRACE_DEPENDENCY_PRINTERS[
								/** @type {keyof ModuleTraceDependencyPrinters***REMOVED*** */
								(key)
							]
						)(
							obj,
							/** @type {DefineStatsPrinterContext<"moduleTraceDependency">***REMOVED*** */
							(ctx),
							stats
						)
					);
				***REMOVED***

				for (const key of Object.keys(MODULE_TRACE_ITEM_PRINTERS)) {
					stats.hooks.print.for(key).tap(PLUGIN_NAME, (obj, ctx) =>
						/** @type {NonNullable<ModuleTraceItemPrinters[keyof ModuleTraceItemPrinters]>***REMOVED*** */
						(
							MODULE_TRACE_ITEM_PRINTERS[
								/** @type {keyof ModuleTraceItemPrinters***REMOVED*** */
								(key)
							]
						)(
							obj,
							/** @type {DefineStatsPrinterContext<"moduleTraceItem">***REMOVED*** */
							(ctx),
							stats
						)
					);
				***REMOVED***

				for (const key of Object.keys(PREFERRED_ORDERS)) {
					const preferredOrder = PREFERRED_ORDERS[key];
					stats.hooks.sortElements
						.for(key)
						.tap(PLUGIN_NAME, (elements, context) => {
							createOrder(elements, preferredOrder);
						***REMOVED***);
				***REMOVED***

				for (const key of Object.keys(ITEM_NAMES)) {
					const itemName = ITEM_NAMES[key];
					stats.hooks.getItemName
						.for(key)
						.tap(
							PLUGIN_NAME,
							typeof itemName === "string" ? () => itemName : itemName
						);
				***REMOVED***

				for (const key of Object.keys(SIMPLE_ITEMS_JOINER)) {
					const joiner = SIMPLE_ITEMS_JOINER[key];
					stats.hooks.printItems.for(key).tap(PLUGIN_NAME, joiner);
				***REMOVED***

				for (const key of Object.keys(SIMPLE_ELEMENT_JOINERS)) {
					const joiner = SIMPLE_ELEMENT_JOINERS[key];
					stats.hooks.printElements
						.for(key)
						.tap(PLUGIN_NAME, /** @type {TODO***REMOVED*** */ (joiner));
				***REMOVED***

				for (const key of Object.keys(RESULT_MODIFIER)) {
					const modifier = RESULT_MODIFIER[key];
					stats.hooks.result.for(key).tap(PLUGIN_NAME, modifier);
				***REMOVED***
			***REMOVED***);
		***REMOVED***);
	***REMOVED***
***REMOVED***
module.exports = DefaultStatsPrinterPlugin;
