'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
***REMOVED***);
exports.default = getSnapshotSummary;

function _chalk() {
  const data = _interopRequireDefault(require('chalk'));

  _chalk = function () {
    return data;
  ***REMOVED***;

  return data;
***REMOVED***

function _jestUtil() {
  const data = require('jest-util');

  _jestUtil = function () {
    return data;
  ***REMOVED***;

  return data;
***REMOVED***

var _utils = require('./utils');

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {default: obj***REMOVED***;
***REMOVED***

/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
const ARROW = ' \u203A ';
const DOWN_ARROW = ' \u21B3 ';
const DOT = ' \u2022 ';

const FAIL_COLOR = _chalk().default.bold.red;

const OBSOLETE_COLOR = _chalk().default.bold.yellow;

const SNAPSHOT_ADDED = _chalk().default.bold.green;

const SNAPSHOT_NOTE = _chalk().default.dim;

const SNAPSHOT_REMOVED = _chalk().default.bold.green;

const SNAPSHOT_SUMMARY = _chalk().default.bold;

const SNAPSHOT_UPDATED = _chalk().default.bold.green;

function getSnapshotSummary(snapshots, globalConfig, updateCommand) {
  const summary = [];
  summary.push(SNAPSHOT_SUMMARY('Snapshot Summary'));

  if (snapshots.added) {
    summary.push(
      SNAPSHOT_ADDED(
        ARROW +
          (0, _jestUtil().pluralize)('snapshot', snapshots.added) +
          ' written '
      ) +
        `from ${(0, _jestUtil().pluralize)(
          'test suite',
          snapshots.filesAdded
        )***REMOVED***.`
    );
  ***REMOVED***

  if (snapshots.unmatched) {
    summary.push(
      FAIL_COLOR(
        `${ARROW***REMOVED***${(0, _jestUtil().pluralize)(
          'snapshot',
          snapshots.unmatched
        )***REMOVED*** failed`
      ) +
        ` from ${(0, _jestUtil().pluralize)(
          'test suite',
          snapshots.filesUnmatched
        )***REMOVED***. ` +
        SNAPSHOT_NOTE(
          'Inspect your code changes or ' + updateCommand + ' to update them.'
        )
    );
  ***REMOVED***

  if (snapshots.updated) {
    summary.push(
      SNAPSHOT_UPDATED(
        ARROW +
          (0, _jestUtil().pluralize)('snapshot', snapshots.updated) +
          ' updated '
      ) +
        `from ${(0, _jestUtil().pluralize)(
          'test suite',
          snapshots.filesUpdated
        )***REMOVED***.`
    );
  ***REMOVED***

  if (snapshots.filesRemoved) {
    if (snapshots.didUpdate) {
      summary.push(
        SNAPSHOT_REMOVED(
          `${ARROW***REMOVED***${(0, _jestUtil().pluralize)(
            'snapshot file',
            snapshots.filesRemoved
          )***REMOVED*** removed `
        ) +
          `from ${(0, _jestUtil().pluralize)(
            'test suite',
            snapshots.filesRemoved
          )***REMOVED***.`
      );
    ***REMOVED*** else {
      summary.push(
        OBSOLETE_COLOR(
          `${ARROW***REMOVED***${(0, _jestUtil().pluralize)(
            'snapshot file',
            snapshots.filesRemoved
          )***REMOVED*** obsolete `
        ) +
          `from ${(0, _jestUtil().pluralize)(
            'test suite',
            snapshots.filesRemoved
          )***REMOVED***. ` +
          SNAPSHOT_NOTE(
            `To remove ${
              snapshots.filesRemoved === 1 ? 'it' : 'them all'
            ***REMOVED***, ${updateCommand***REMOVED***.`
          )
      );
    ***REMOVED***
  ***REMOVED***

  if (snapshots.filesRemovedList && snapshots.filesRemovedList.length) {
    const [head, ...tail] = snapshots.filesRemovedList;
    summary.push(
      `  ${DOWN_ARROW***REMOVED*** ${DOT***REMOVED***${(0, _utils.formatTestPath)(globalConfig, head)***REMOVED***`
    );
    tail.forEach(key => {
      summary.push(
        `      ${DOT***REMOVED***${(0, _utils.formatTestPath)(globalConfig, key)***REMOVED***`
      );
    ***REMOVED***);
  ***REMOVED***

  if (snapshots.unchecked) {
    if (snapshots.didUpdate) {
      summary.push(
        SNAPSHOT_REMOVED(
          `${ARROW***REMOVED***${(0, _jestUtil().pluralize)(
            'snapshot',
            snapshots.unchecked
          )***REMOVED*** removed `
        ) +
          `from ${(0, _jestUtil().pluralize)(
            'test suite',
            snapshots.uncheckedKeysByFile.length
          )***REMOVED***.`
      );
    ***REMOVED*** else {
      summary.push(
        OBSOLETE_COLOR(
          `${ARROW***REMOVED***${(0, _jestUtil().pluralize)(
            'snapshot',
            snapshots.unchecked
          )***REMOVED*** obsolete `
        ) +
          `from ${(0, _jestUtil().pluralize)(
            'test suite',
            snapshots.uncheckedKeysByFile.length
          )***REMOVED***. ` +
          SNAPSHOT_NOTE(
            `To remove ${
              snapshots.unchecked === 1 ? 'it' : 'them all'
            ***REMOVED***, ${updateCommand***REMOVED***.`
          )
      );
    ***REMOVED***

    snapshots.uncheckedKeysByFile.forEach(uncheckedFile => {
      summary.push(
        `  ${DOWN_ARROW***REMOVED***${(0, _utils.formatTestPath)(
          globalConfig,
          uncheckedFile.filePath
        )***REMOVED***`
      );
      uncheckedFile.keys.forEach(key => {
        summary.push(`      ${DOT***REMOVED***${key***REMOVED***`);
      ***REMOVED***);
    ***REMOVED***);
  ***REMOVED***

  return summary;
***REMOVED***
