/**
 * @fileoverview A rule to suggest using arrow functions as callbacks.
 * @author Toru Nagashima
 */

"use strict";

const astUtils = require("./utils/ast-utils");

//------------------------------------------------------------------------------
// Helpers
//------------------------------------------------------------------------------

/**
 * Checks whether or not a given variable is a function name.
 * @param {eslint-scope.Variable***REMOVED*** variable A variable to check.
 * @returns {boolean***REMOVED*** `true` if the variable is a function name.
 */
function isFunctionName(variable) {
	return variable && variable.defs[0].type === "FunctionName";
***REMOVED***

/**
 * Checks whether or not a given MetaProperty node equals to a given value.
 * @param {ASTNode***REMOVED*** node A MetaProperty node to check.
 * @param {string***REMOVED*** metaName The name of `MetaProperty.meta`.
 * @param {string***REMOVED*** propertyName The name of `MetaProperty.property`.
 * @returns {boolean***REMOVED*** `true` if the node is the specific value.
 */
function checkMetaProperty(node, metaName, propertyName) {
	return node.meta.name === metaName && node.property.name === propertyName;
***REMOVED***

/**
 * Gets the variable object of `arguments` which is defined implicitly.
 * @param {eslint-scope.Scope***REMOVED*** scope A scope to get.
 * @returns {eslint-scope.Variable***REMOVED*** The found variable object.
 */
function getVariableOfArguments(scope) {
	const variables = scope.variables;

	for (let i = 0; i < variables.length; ++i) {
		const variable = variables[i];

		if (variable.name === "arguments") {
			/*
			 * If there was a parameter which is named "arguments", the
			 * implicit "arguments" is not defined.
			 * So does fast return with null.
			 */
			return variable.identifiers.length === 0 ? variable : null;
		***REMOVED***
	***REMOVED***

	/* c8 ignore next */
	return null;
***REMOVED***

/**
 * Checks whether or not a given node is a callback.
 * @param {ASTNode***REMOVED*** node A node to check.
 * @throws {Error***REMOVED*** (Unreachable.)
 * @returns {Object***REMOVED***
 *   {boolean***REMOVED*** retv.isCallback - `true` if the node is a callback.
 *   {boolean***REMOVED*** retv.isLexicalThis - `true` if the node is with `.bind(this)`.
 */
function getCallbackInfo(node) {
	const retv = { isCallback: false, isLexicalThis: false ***REMOVED***;
	let currentNode = node;
	let parent = node.parent;
	let bound = false;

	while (currentNode) {
		switch (parent.type) {
			// Checks parents recursively.

			case "LogicalExpression":
			case "ChainExpression":
			case "ConditionalExpression":
				break;

			// Checks whether the parent node is `.bind(this)` call.
			case "MemberExpression":
				if (
					parent.object === currentNode &&
					!parent.property.computed &&
					parent.property.type === "Identifier" &&
					parent.property.name === "bind"
				) {
					const maybeCallee =
						parent.parent.type === "ChainExpression"
							? parent.parent
							: parent;

					if (astUtils.isCallee(maybeCallee)) {
						if (!bound) {
							bound = true; // Use only the first `.bind()` to make `isLexicalThis` value.
							retv.isLexicalThis =
								maybeCallee.parent.arguments.length === 1 &&
								maybeCallee.parent.arguments[0].type ===
									"ThisExpression";
						***REMOVED***
						parent = maybeCallee.parent;
					***REMOVED*** else {
						return retv;
					***REMOVED***
				***REMOVED*** else {
					return retv;
				***REMOVED***
				break;

			// Checks whether the node is a callback.
			case "CallExpression":
			case "NewExpression":
				if (parent.callee !== currentNode) {
					retv.isCallback = true;
				***REMOVED***
				return retv;

			default:
				return retv;
		***REMOVED***

		currentNode = parent;
		parent = parent.parent;
	***REMOVED***

	/* c8 ignore next */
	throw new Error("unreachable");
***REMOVED***

/**
 * Checks whether a simple list of parameters contains any duplicates. This does not handle complex
 * parameter lists (e.g. with destructuring), since complex parameter lists are a SyntaxError with duplicate
 * parameter names anyway. Instead, it always returns `false` for complex parameter lists.
 * @param {ASTNode[]***REMOVED*** paramsList The list of parameters for a function
 * @returns {boolean***REMOVED*** `true` if the list of parameters contains any duplicates
 */
function hasDuplicateParams(paramsList) {
	return (
		paramsList.every(param => param.type === "Identifier") &&
		paramsList.length !== new Set(paramsList.map(param => param.name)).size
	);
***REMOVED***

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

/** @type {import('../types').Rule.RuleModule***REMOVED*** */
module.exports = {
	meta: {
		type: "suggestion",

		defaultOptions: [
			{ allowNamedFunctions: false, allowUnboundThis: true ***REMOVED***,
		],

		docs: {
			description: "Require using arrow functions for callbacks",
			recommended: false,
			frozen: true,
			url: "https://eslint.org/docs/latest/rules/prefer-arrow-callback",
		***REMOVED***,

		schema: [
			{
				type: "object",
				properties: {
					allowNamedFunctions: {
						type: "boolean",
					***REMOVED***,
					allowUnboundThis: {
						type: "boolean",
					***REMOVED***,
				***REMOVED***,
				additionalProperties: false,
			***REMOVED***,
		],

		fixable: "code",

		messages: {
			preferArrowCallback: "Unexpected function expression.",
		***REMOVED***,
	***REMOVED***,

	create(context) {
		const [{ allowNamedFunctions, allowUnboundThis ***REMOVED***] = context.options;
		const sourceCode = context.sourceCode;

		/*
		 * {Array<{this: boolean, super: boolean, meta: boolean***REMOVED***>***REMOVED***
		 * - this - A flag which shows there are one or more ThisExpression.
		 * - super - A flag which shows there are one or more Super.
		 * - meta - A flag which shows there are one or more MethProperty.
		 */
		let stack = [];

		/**
		 * Pushes new function scope with all `false` flags.
		 * @returns {void***REMOVED***
		 */
		function enterScope() {
			stack.push({ this: false, super: false, meta: false ***REMOVED***);
		***REMOVED***

		/**
		 * Pops a function scope from the stack.
		 * @returns {{this: boolean, super: boolean, meta: boolean***REMOVED******REMOVED*** The information of the last scope.
		 */
		function exitScope() {
			return stack.pop();
		***REMOVED***

		return {
			// Reset internal state.
			Program() {
				stack = [];
			***REMOVED***,

			// If there are below, it cannot replace with arrow functions merely.
			ThisExpression() {
				const info = stack.at(-1);

				if (info) {
					info.this = true;
				***REMOVED***
			***REMOVED***,

			Super() {
				const info = stack.at(-1);

				if (info) {
					info.super = true;
				***REMOVED***
			***REMOVED***,

			MetaProperty(node) {
				const info = stack.at(-1);

				if (info && checkMetaProperty(node, "new", "target")) {
					info.meta = true;
				***REMOVED***
			***REMOVED***,

			// To skip nested scopes.
			FunctionDeclaration: enterScope,
			"FunctionDeclaration:exit": exitScope,

			// Main.
			FunctionExpression: enterScope,
			"FunctionExpression:exit"(node) {
				const scopeInfo = exitScope();

				// Skip named function expressions
				if (allowNamedFunctions && node.id && node.id.name) {
					return;
				***REMOVED***

				// Skip generators.
				if (node.generator) {
					return;
				***REMOVED***

				// Skip recursive functions.
				const nameVar = sourceCode.getDeclaredVariables(node)[0];

				if (isFunctionName(nameVar) && nameVar.references.length > 0) {
					return;
				***REMOVED***

				// Skip if it's using arguments.
				const variable = getVariableOfArguments(
					sourceCode.getScope(node),
				);

				if (variable && variable.references.length > 0) {
					return;
				***REMOVED***

				// Reports if it's a callback which can replace with arrows.
				const callbackInfo = getCallbackInfo(node);

				if (
					callbackInfo.isCallback &&
					(!allowUnboundThis ||
						!scopeInfo.this ||
						callbackInfo.isLexicalThis) &&
					!scopeInfo.super &&
					!scopeInfo.meta
				) {
					context.report({
						node,
						messageId: "preferArrowCallback",
						*fix(fixer) {
							if (
								(!callbackInfo.isLexicalThis &&
									scopeInfo.this) ||
								hasDuplicateParams(node.params)
							) {
								/*
								 * If the callback function does not have .bind(this) and contains a reference to `this`, there
								 * is no way to determine what `this` should be, so don't perform any fixes.
								 * If the callback function has duplicates in its list of parameters (possible in sloppy mode),
								 * don't replace it with an arrow function, because this is a SyntaxError with arrow functions.
								 */
								return;
							***REMOVED***

							// Remove `.bind(this)` if exists.
							if (callbackInfo.isLexicalThis) {
								const memberNode = node.parent;

								/*
								 * If `.bind(this)` exists but the parent is not `.bind(this)`, don't remove it automatically.
								 * E.g. `(foo || function(){***REMOVED***).bind(this)`
								 */
								if (memberNode.type !== "MemberExpression") {
									return;
								***REMOVED***

								const callNode = memberNode.parent;
								const firstTokenToRemove =
									sourceCode.getTokenAfter(
										memberNode.object,
										astUtils.isNotClosingParenToken,
									);
								const lastTokenToRemove =
									sourceCode.getLastToken(callNode);

								/*
								 * If the member expression is parenthesized, don't remove the right paren.
								 * E.g. `(function(){***REMOVED***.bind)(this)`
								 *                    ^^^^^^^^^^^^
								 */
								if (
									astUtils.isParenthesised(
										sourceCode,
										memberNode,
									)
								) {
									return;
								***REMOVED***

								// If comments exist in the `.bind(this)`, don't remove those.
								if (
									sourceCode.commentsExistBetween(
										firstTokenToRemove,
										lastTokenToRemove,
									)
								) {
									return;
								***REMOVED***

								yield fixer.removeRange([
									firstTokenToRemove.range[0],
									lastTokenToRemove.range[1],
								]);
							***REMOVED***

							// Convert the function expression to an arrow function.
							const functionToken = sourceCode.getFirstToken(
								node,
								node.async ? 1 : 0,
							);
							const leftParenToken = sourceCode.getTokenAfter(
								functionToken,
								astUtils.isOpeningParenToken,
							);
							const tokenBeforeBody = sourceCode.getTokenBefore(
								node.body,
							);

							if (
								sourceCode.commentsExistBetween(
									functionToken,
									leftParenToken,
								)
							) {
								// Remove only extra tokens to keep comments.
								yield fixer.remove(functionToken);
								if (node.id) {
									yield fixer.remove(node.id);
								***REMOVED***
							***REMOVED*** else {
								// Remove extra tokens and spaces.
								yield fixer.removeRange([
									functionToken.range[0],
									leftParenToken.range[0],
								]);
							***REMOVED***
							yield fixer.insertTextAfter(tokenBeforeBody, " =>");

							// Get the node that will become the new arrow function.
							let replacedNode = callbackInfo.isLexicalThis
								? node.parent.parent
								: node;

							if (replacedNode.type === "ChainExpression") {
								replacedNode = replacedNode.parent;
							***REMOVED***

							/*
							 * If the replaced node is part of a BinaryExpression, LogicalExpression, or MemberExpression, then
							 * the arrow function needs to be parenthesized, because `foo || () => {***REMOVED***` is invalid syntax even
							 * though `foo || function() {***REMOVED***` is valid.
							 */
							if (
								replacedNode.parent.type !== "CallExpression" &&
								replacedNode.parent.type !==
									"ConditionalExpression" &&
								!astUtils.isParenthesised(
									sourceCode,
									replacedNode,
								) &&
								!astUtils.isParenthesised(sourceCode, node)
							) {
								yield fixer.insertTextBefore(replacedNode, "(");
								yield fixer.insertTextAfter(replacedNode, ")");
							***REMOVED***
						***REMOVED***,
					***REMOVED***);
				***REMOVED***
			***REMOVED***,
		***REMOVED***;
	***REMOVED***,
***REMOVED***;
