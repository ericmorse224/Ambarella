/*
	MIT License http://www.opensource.org/licenses/mit-license.php
*/

"use strict";

/** @typedef {import("./ObjectMiddleware").ObjectDeserializerContext***REMOVED*** ObjectDeserializerContext */
/** @typedef {import("./ObjectMiddleware").ObjectSerializerContext***REMOVED*** ObjectSerializerContext */

/** @typedef {Error & { cause: unknown, errors: EXPECTED_ANY[] ***REMOVED******REMOVED*** AggregateError */

class AggregateErrorSerializer {
	/**
	 * @param {AggregateError***REMOVED*** obj error
	 * @param {ObjectSerializerContext***REMOVED*** context context
	 */
	serialize(obj, context) {
		context.write(obj.errors);
		context.write(obj.message);
		context.write(obj.stack);
		context.write(obj.cause);
	***REMOVED***

	/**
	 * @param {ObjectDeserializerContext***REMOVED*** context context
	 * @returns {AggregateError***REMOVED*** error
	 */
	deserialize(context) {
		const errors = context.read();
		// @ts-expect-error ES2018 doesn't `AggregateError`, but it can be used by developers
		// eslint-disable-next-line n/no-unsupported-features/es-builtins, n/no-unsupported-features/es-syntax
		const err = new AggregateError(errors);

		err.message = context.read();
		err.stack = context.read();
		err.cause = context.read();

		return err;
	***REMOVED***
***REMOVED***

module.exports = AggregateErrorSerializer;
