/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const { UsageState ***REMOVED*** = require("../ExportsInfo");
const makeSerializable = require("../util/makeSerializable");
const { filterRuntime, runtimeToString ***REMOVED*** = require("../util/runtime");
const NullDependency = require("./NullDependency");

/** @typedef {import("webpack-sources").ReplaceSource***REMOVED*** ReplaceSource */
/** @typedef {import("../ChunkGraph")***REMOVED*** ChunkGraph */
/** @typedef {import("../Dependency")***REMOVED*** Dependency */
/** @typedef {import("../Dependency").RuntimeSpec***REMOVED*** RuntimeSpec */
/** @typedef {import("../Dependency").UpdateHashContext***REMOVED*** UpdateHashContext */
/** @typedef {import("../DependencyTemplate").DependencyTemplateContext***REMOVED*** DependencyTemplateContext */
/** @typedef {import("../Module")***REMOVED*** Module */
/** @typedef {import("../ModuleGraph")***REMOVED*** ModuleGraph */
/** @typedef {import("../ModuleGraphConnection").ConnectionState***REMOVED*** ConnectionState */
/** @typedef {import("../javascript/JavascriptParser").Range***REMOVED*** Range */
/** @typedef {import("../serialization/ObjectMiddleware").ObjectDeserializerContext***REMOVED*** ObjectDeserializerContext */
/** @typedef {import("../serialization/ObjectMiddleware").ObjectSerializerContext***REMOVED*** ObjectSerializerContext */
/** @typedef {import("../util/Hash")***REMOVED*** Hash */

class PureExpressionDependency extends NullDependency {
	/**
	 * @param {Range***REMOVED*** range the source range
	 */
	constructor(range) {
		super();
		this.range = range;
		/** @type {Set<string> | false***REMOVED*** */
		this.usedByExports = false;
	***REMOVED***

	/**
	 * @param {ModuleGraph***REMOVED*** moduleGraph module graph
	 * @param {RuntimeSpec***REMOVED*** runtime current runtimes
	 * @returns {boolean | RuntimeSpec***REMOVED*** runtime condition
	 */
	_getRuntimeCondition(moduleGraph, runtime) {
		const usedByExports = this.usedByExports;
		if (usedByExports !== false) {
			const selfModule =
				/** @type {Module***REMOVED*** */
				(moduleGraph.getParentModule(this));
			const exportsInfo = moduleGraph.getExportsInfo(selfModule);
			const runtimeCondition = filterRuntime(runtime, runtime => {
				for (const exportName of usedByExports) {
					if (exportsInfo.getUsed(exportName, runtime) !== UsageState.Unused) {
						return true;
					***REMOVED***
				***REMOVED***
				return false;
			***REMOVED***);
			return runtimeCondition;
		***REMOVED***
		return false;
	***REMOVED***

	/**
	 * Update the hash
	 * @param {Hash***REMOVED*** hash hash to be updated
	 * @param {UpdateHashContext***REMOVED*** context context
	 * @returns {void***REMOVED***
	 */
	updateHash(hash, context) {
		const runtimeCondition = this._getRuntimeCondition(
			context.chunkGraph.moduleGraph,
			context.runtime
		);
		if (runtimeCondition === true) {
			return;
		***REMOVED*** else if (runtimeCondition === false) {
			hash.update("null");
		***REMOVED*** else {
			hash.update(
				`${runtimeToString(runtimeCondition)***REMOVED***|${runtimeToString(
					context.runtime
				)***REMOVED***`
			);
		***REMOVED***
		hash.update(String(this.range));
	***REMOVED***

	/**
	 * @param {ModuleGraph***REMOVED*** moduleGraph the module graph
	 * @returns {ConnectionState***REMOVED*** how this dependency connects the module to referencing modules
	 */
	getModuleEvaluationSideEffectsState(moduleGraph) {
		return false;
	***REMOVED***

	/**
	 * @param {ObjectSerializerContext***REMOVED*** context context
	 */
	serialize(context) {
		const { write ***REMOVED*** = context;
		write(this.range);
		write(this.usedByExports);
		super.serialize(context);
	***REMOVED***

	/**
	 * @param {ObjectDeserializerContext***REMOVED*** context context
	 */
	deserialize(context) {
		const { read ***REMOVED*** = context;
		this.range = read();
		this.usedByExports = read();
		super.deserialize(context);
	***REMOVED***
***REMOVED***

makeSerializable(
	PureExpressionDependency,
	"webpack/lib/dependencies/PureExpressionDependency"
);

PureExpressionDependency.Template = class PureExpressionDependencyTemplate extends (
	NullDependency.Template
) {
	/**
	 * @param {Dependency***REMOVED*** dependency the dependency for which the template should be applied
	 * @param {ReplaceSource***REMOVED*** source the current replace source which can be modified
	 * @param {DependencyTemplateContext***REMOVED*** templateContext the context object
	 * @returns {void***REMOVED***
	 */
	apply(
		dependency,
		source,
		{ chunkGraph, moduleGraph, runtime, runtimeTemplate, runtimeRequirements ***REMOVED***
	) {
		const dep = /** @type {PureExpressionDependency***REMOVED*** */ (dependency);
		const runtimeCondition = dep._getRuntimeCondition(moduleGraph, runtime);
		if (runtimeCondition === true) {
			// Do nothing
		***REMOVED*** else if (runtimeCondition === false) {
			source.insert(
				dep.range[0],
				"(/* unused pure expression or super */ null && ("
			);
			source.insert(dep.range[1], "))");
		***REMOVED*** else {
			const condition = runtimeTemplate.runtimeConditionExpression({
				chunkGraph,
				runtime,
				runtimeCondition,
				runtimeRequirements
			***REMOVED***);
			source.insert(
				dep.range[0],
				`(/* runtime-dependent pure expression or super */ ${condition***REMOVED*** ? (`
			);
			source.insert(dep.range[1], ") : null)");
		***REMOVED***
	***REMOVED***
***REMOVED***;

module.exports = PureExpressionDependency;
