/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const { RawSource ***REMOVED*** = require("webpack-sources");
const Generator = require("../Generator");
const { WEBASSEMBLY_TYPES ***REMOVED*** = require("../ModuleSourceTypesConstants");

/** @typedef {import("webpack-sources").Source***REMOVED*** Source */
/** @typedef {import("../Generator").GenerateContext***REMOVED*** GenerateContext */
/** @typedef {import("../Module").SourceTypes***REMOVED*** SourceTypes */
/** @typedef {import("../NormalModule")***REMOVED*** NormalModule */

/**
 * @typedef {object***REMOVED*** AsyncWebAssemblyGeneratorOptions
 * @property {boolean=***REMOVED*** mangleImports mangle imports
 */

class AsyncWebAssemblyGenerator extends Generator {
	/**
	 * @param {AsyncWebAssemblyGeneratorOptions***REMOVED*** options options
	 */
	constructor(options) {
		super();
		this.options = options;
	***REMOVED***

	/**
	 * @param {NormalModule***REMOVED*** module fresh module
	 * @returns {SourceTypes***REMOVED*** available types (do not mutate)
	 */
	getTypes(module) {
		return WEBASSEMBLY_TYPES;
	***REMOVED***

	/**
	 * @param {NormalModule***REMOVED*** module the module
	 * @param {string=***REMOVED*** type source type
	 * @returns {number***REMOVED*** estimate size of the module
	 */
	getSize(module, type) {
		const originalSource = module.originalSource();
		if (!originalSource) {
			return 0;
		***REMOVED***
		return originalSource.size();
	***REMOVED***

	/**
	 * @param {NormalModule***REMOVED*** module module for which the code should be generated
	 * @param {GenerateContext***REMOVED*** generateContext context for generate
	 * @returns {Source | null***REMOVED*** generated code
	 */
	generate(module, generateContext) {
		return /** @type {Source***REMOVED*** */ (module.originalSource());
	***REMOVED***

	/**
	 * @param {Error***REMOVED*** error the error
	 * @param {NormalModule***REMOVED*** module module for which the code should be generated
	 * @param {GenerateContext***REMOVED*** generateContext context for generate
	 * @returns {Source | null***REMOVED*** generated code
	 */
	generateError(error, module, generateContext) {
		return new RawSource(error.message);
	***REMOVED***
***REMOVED***

module.exports = AsyncWebAssemblyGenerator;
