// @remove-on-eject-begin
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
// @remove-on-eject-end
'use strict';

const fs = require('fs');
const path = require('path');
const crypto = require('crypto');
const chalk = require('react-dev-utils/chalk');
const paths = require('./paths');

// Ensure the certificate and key provided are valid and if not
// throw an easy to debug error
function validateKeyAndCerts({ cert, key, keyFile, crtFile ***REMOVED***) {
  let encrypted;
  try {
    // publicEncrypt will throw an error with an invalid cert
    encrypted = crypto.publicEncrypt(cert, Buffer.from('test'));
  ***REMOVED*** catch (err) {
    throw new Error(
      `The certificate "${chalk.yellow(crtFile)***REMOVED***" is invalid.\n${err.message***REMOVED***`
    );
  ***REMOVED***

  try {
    // privateDecrypt will throw an error with an invalid key
    crypto.privateDecrypt(key, encrypted);
  ***REMOVED*** catch (err) {
    throw new Error(
      `The certificate key "${chalk.yellow(keyFile)***REMOVED***" is invalid.\n${
        err.message
      ***REMOVED***`
    );
  ***REMOVED***
***REMOVED***

// Read file and throw an error if it doesn't exist
function readEnvFile(file, type) {
  if (!fs.existsSync(file)) {
    throw new Error(
      `You specified ${chalk.cyan(
        type
      )***REMOVED*** in your env, but the file "${chalk.yellow(file)***REMOVED***" can't be found.`
    );
  ***REMOVED***
  return fs.readFileSync(file);
***REMOVED***

// Get the https config
// Return cert files if provided in env, otherwise just true or false
function getHttpsConfig() {
  const { SSL_CRT_FILE, SSL_KEY_FILE, HTTPS ***REMOVED*** = process.env;
  const isHttps = HTTPS === 'true';

  if (isHttps && SSL_CRT_FILE && SSL_KEY_FILE) {
    const crtFile = path.resolve(paths.appPath, SSL_CRT_FILE);
    const keyFile = path.resolve(paths.appPath, SSL_KEY_FILE);
    const config = {
      cert: readEnvFile(crtFile, 'SSL_CRT_FILE'),
      key: readEnvFile(keyFile, 'SSL_KEY_FILE'),
    ***REMOVED***;

    validateKeyAndCerts({ ...config, keyFile, crtFile ***REMOVED***);
    return config;
  ***REMOVED***
  return isHttps;
***REMOVED***

module.exports = getHttpsConfig;
