/**
 * @fileoverview Restrict usage of specified node modules.
 * @author Christian Schulz
 * @deprecated in ESLint v7.0.0
 */
"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const astUtils = require("./utils/ast-utils");

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

const ignore = require("ignore");

const arrayOfStrings = {
    type: "array",
    items: { type: "string" ***REMOVED***,
    uniqueItems: true
***REMOVED***;

const arrayOfStringsOrObjects = {
    type: "array",
    items: {
        anyOf: [
            { type: "string" ***REMOVED***,
            {
                type: "object",
                properties: {
                    name: { type: "string" ***REMOVED***,
                    message: {
                        type: "string",
                        minLength: 1
                    ***REMOVED***
                ***REMOVED***,
                additionalProperties: false,
                required: ["name"]
            ***REMOVED***
        ]
    ***REMOVED***,
    uniqueItems: true
***REMOVED***;

/** @type {import('../shared/types').Rule***REMOVED*** */
module.exports = {
    meta: {
        deprecated: true,

        replacedBy: [],

        type: "suggestion",

        docs: {
            description: "Disallow specified modules when loaded by `require`",
            recommended: false,
            url: "https://eslint.org/docs/latest/rules/no-restricted-modules"
        ***REMOVED***,

        schema: {
            anyOf: [
                arrayOfStringsOrObjects,
                {
                    type: "array",
                    items: {
                        type: "object",
                        properties: {
                            paths: arrayOfStringsOrObjects,
                            patterns: arrayOfStrings
                        ***REMOVED***,
                        additionalProperties: false
                    ***REMOVED***,
                    additionalItems: false
                ***REMOVED***
            ]
        ***REMOVED***,

        messages: {
            defaultMessage: "'{{name***REMOVED******REMOVED***' module is restricted from being used.",
            // eslint-disable-next-line eslint-plugin/report-message-format -- Custom message might not end in a period
            customMessage: "'{{name***REMOVED******REMOVED***' module is restricted from being used. {{customMessage***REMOVED******REMOVED***",
            patternMessage: "'{{name***REMOVED******REMOVED***' module is restricted from being used by a pattern."
        ***REMOVED***
    ***REMOVED***,

    create(context) {
        const options = Array.isArray(context.options) ? context.options : [];
        const isPathAndPatternsObject =
            typeof options[0] === "object" &&
            (Object.prototype.hasOwnProperty.call(options[0], "paths") || Object.prototype.hasOwnProperty.call(options[0], "patterns"));

        const restrictedPaths = (isPathAndPatternsObject ? options[0].paths : context.options) || [];
        const restrictedPatterns = (isPathAndPatternsObject ? options[0].patterns : []) || [];

        const restrictedPathMessages = restrictedPaths.reduce((memo, importName) => {
            if (typeof importName === "string") {
                memo[importName] = null;
            ***REMOVED*** else {
                memo[importName.name] = importName.message;
            ***REMOVED***
            return memo;
        ***REMOVED***, {***REMOVED***);

        // if no imports are restricted we don't need to check
        if (Object.keys(restrictedPaths).length === 0 && restrictedPatterns.length === 0) {
            return {***REMOVED***;
        ***REMOVED***

        // relative paths are supported for this rule
        const ig = ignore({ allowRelativePaths: true ***REMOVED***).add(restrictedPatterns);


        /**
         * Function to check if a node is a string literal.
         * @param {ASTNode***REMOVED*** node The node to check.
         * @returns {boolean***REMOVED*** If the node is a string literal.
         */
        function isStringLiteral(node) {
            return node && node.type === "Literal" && typeof node.value === "string";
        ***REMOVED***

        /**
         * Function to check if a node is a require call.
         * @param {ASTNode***REMOVED*** node The node to check.
         * @returns {boolean***REMOVED*** If the node is a require call.
         */
        function isRequireCall(node) {
            return node.callee.type === "Identifier" && node.callee.name === "require";
        ***REMOVED***

        /**
         * Extract string from Literal or TemplateLiteral node
         * @param {ASTNode***REMOVED*** node The node to extract from
         * @returns {string|null***REMOVED*** Extracted string or null if node doesn't represent a string
         */
        function getFirstArgumentString(node) {
            if (isStringLiteral(node)) {
                return node.value.trim();
            ***REMOVED***

            if (astUtils.isStaticTemplateLiteral(node)) {
                return node.quasis[0].value.cooked.trim();
            ***REMOVED***

            return null;
        ***REMOVED***

        /**
         * Report a restricted path.
         * @param {node***REMOVED*** node representing the restricted path reference
         * @param {string***REMOVED*** name restricted path
         * @returns {void***REMOVED***
         * @private
         */
        function reportPath(node, name) {
            const customMessage = restrictedPathMessages[name];
            const messageId = customMessage
                ? "customMessage"
                : "defaultMessage";

            context.report({
                node,
                messageId,
                data: {
                    name,
                    customMessage
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***

        /**
         * Check if the given name is a restricted path name
         * @param {string***REMOVED*** name name of a variable
         * @returns {boolean***REMOVED*** whether the variable is a restricted path or not
         * @private
         */
        function isRestrictedPath(name) {
            return Object.prototype.hasOwnProperty.call(restrictedPathMessages, name);
        ***REMOVED***

        return {
            CallExpression(node) {
                if (isRequireCall(node)) {

                    // node has arguments
                    if (node.arguments.length) {
                        const name = getFirstArgumentString(node.arguments[0]);

                        // if first argument is a string literal or a static string template literal
                        if (name) {

                            // check if argument value is in restricted modules array
                            if (isRestrictedPath(name)) {
                                reportPath(node, name);
                            ***REMOVED***

                            if (restrictedPatterns.length > 0 && ig.ignores(name)) {
                                context.report({
                                    node,
                                    messageId: "patternMessage",
                                    data: { name ***REMOVED***
                                ***REMOVED***);
                            ***REMOVED***
                        ***REMOVED***
                    ***REMOVED***
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***;
    ***REMOVED***
***REMOVED***;
