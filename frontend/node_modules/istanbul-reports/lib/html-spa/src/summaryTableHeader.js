const React = require('react');

function getSortDetails(sortKey, activeSort) {
    let newSort = { sortKey, order: 'desc' ***REMOVED***;
    let sortClass = '';
    if (activeSort && activeSort.sortKey === sortKey) {
        sortClass = 'sorted';
        if (activeSort.order === 'desc') {
            sortClass += '-desc';
            newSort.order = 'asc';
        ***REMOVED*** else {
            if (sortKey !== 'file') {
                newSort = { sortKey: 'file', order: 'desc' ***REMOVED***;
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***

    return {
        newSort,
        sortClass
    ***REMOVED***;
***REMOVED***

function SummaryTableHeaderCell({ name, onSort, sortKey, activeSort ***REMOVED***) {
    const { newSort, sortClass ***REMOVED*** = getSortDetails(sortKey, activeSort);
    return (
        <th
            className={'sortable headercell ' + sortClass***REMOVED***
            onClick={() => onSort(newSort)***REMOVED***
        >
            {name***REMOVED***
            <span className="sorter" />
        </th>
    );
***REMOVED***

function FileHeaderCell({ onSort, activeSort ***REMOVED***) {
    const { newSort, sortClass ***REMOVED*** = getSortDetails('file', activeSort);

    return (
        <th
            className={'sortable file ' + sortClass***REMOVED***
            onClick={() => onSort(newSort)***REMOVED***
        >
            File
            <span className="sorter" />
        </th>
    );
***REMOVED***

function SubHeadings({ sortKeyPrefix, onSort, activeSort ***REMOVED***) {
    return (
        <>
            <SummaryTableHeaderCell
                name="%"
                onSort={onSort***REMOVED***
                sortKey={sortKeyPrefix + '.pct'***REMOVED***
                activeSort={activeSort***REMOVED***
            />
            <th className="headercell"></th>
            <SummaryTableHeaderCell
                name="Covered"
                onSort={onSort***REMOVED***
                sortKey={sortKeyPrefix + '.covered'***REMOVED***
                activeSort={activeSort***REMOVED***
            />
            <SummaryTableHeaderCell
                name="Missed"
                onSort={onSort***REMOVED***
                sortKey={sortKeyPrefix + '.missed'***REMOVED***
                activeSort={activeSort***REMOVED***
            />
            <SummaryTableHeaderCell
                name="Total"
                onSort={onSort***REMOVED***
                sortKey={sortKeyPrefix + '.total'***REMOVED***
                activeSort={activeSort***REMOVED***
            />
        </>
    );
***REMOVED***

module.exports = function SummaryTableHeader({
    onSort,
    activeSort,
    metricsToShow
***REMOVED***) {
    return (
        <thead>
            <tr className="topheading">
                <th></th>
                {metricsToShow.statements && <th colSpan={4***REMOVED***>Statements</th>***REMOVED***
                {metricsToShow.branches && <th colSpan={4***REMOVED***>Branches</th>***REMOVED***
                {metricsToShow.functions && <th colSpan={4***REMOVED***>Functions</th>***REMOVED***
                {metricsToShow.lines && <th colSpan={4***REMOVED***>Lines</th>***REMOVED***
            </tr>
            <tr className="subheading">
                <FileHeaderCell onSort={onSort***REMOVED*** activeSort={activeSort***REMOVED*** />
                {metricsToShow.statements && (
                    <SubHeadings
                        sortKeyPrefix="statements"
                        onSort={onSort***REMOVED***
                        activeSort={activeSort***REMOVED***
                    />
                )***REMOVED***
                {metricsToShow.branches && (
                    <SubHeadings
                        sortKeyPrefix="branches"
                        onSort={onSort***REMOVED***
                        activeSort={activeSort***REMOVED***
                    />
                )***REMOVED***
                {metricsToShow.functions && (
                    <SubHeadings
                        sortKeyPrefix="functions"
                        onSort={onSort***REMOVED***
                        activeSort={activeSort***REMOVED***
                    />
                )***REMOVED***
                {metricsToShow.lines && (
                    <SubHeadings
                        sortKeyPrefix="lines"
                        onSort={onSort***REMOVED***
                        activeSort={activeSort***REMOVED***
                    />
                )***REMOVED***
            </tr>
        </thead>
    );
***REMOVED***;
