'use strict';
/**
 * @param {string | undefined***REMOVED*** value
 * @return {string | undefined***REMOVED***
 */
function trimValue(value) {
  return value ? value.trim() : value;
***REMOVED***

/**
 * @param {{nodes: import('postcss').Node[]***REMOVED******REMOVED*** node
 * @return {boolean***REMOVED***
 */
function empty(node) {
  return !node.nodes.filter((child) => child.type !== 'comment').length;
***REMOVED***

/**
 * @param {import('postcss').AnyNode***REMOVED*** nodeA
 * @param {import('postcss').AnyNode***REMOVED*** nodeB
 * @return {boolean***REMOVED***
 */
function equals(nodeA, nodeB) {
  const a = /** @type {any***REMOVED*** */ (nodeA);
  const b = /** @type {any***REMOVED*** */ (nodeB);
  if (a.type !== b.type) {
    return false;
  ***REMOVED***

  if (a.important !== b.important) {
    return false;
  ***REMOVED***

  if ((a.raws && !b.raws) || (!a.raws && b.raws)) {
    return false;
  ***REMOVED***

  switch (a.type) {
    case 'rule':
      if (a.selector !== b.selector) {
        return false;
      ***REMOVED***
      break;
    case 'atrule':
      if (a.name !== b.name || a.params !== b.params) {
        return false;
      ***REMOVED***

      if (a.raws && trimValue(a.raws.before) !== trimValue(b.raws.before)) {
        return false;
      ***REMOVED***

      if (
        a.raws &&
        trimValue(a.raws.afterName) !== trimValue(b.raws.afterName)
      ) {
        return false;
      ***REMOVED***
      break;
    case 'decl':
      if (a.prop !== b.prop || a.value !== b.value) {
        return false;
      ***REMOVED***

      if (a.raws && trimValue(a.raws.before) !== trimValue(b.raws.before)) {
        return false;
      ***REMOVED***
      break;
  ***REMOVED***

  if (a.nodes) {
    if (a.nodes.length !== b.nodes.length) {
      return false;
    ***REMOVED***

    for (let i = 0; i < a.nodes.length; i++) {
      if (!equals(a.nodes[i], b.nodes[i])) {
        return false;
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***
  return true;
***REMOVED***

/**
 * @param {import('postcss').Rule***REMOVED*** last
 * @param {import('postcss').AnyNode[]***REMOVED*** nodes
 * @return {void***REMOVED***
 */
function dedupeRule(last, nodes) {
  let index = nodes.indexOf(last) - 1;
  while (index >= 0) {
    const node = nodes[index--];
    if (node && node.type === 'rule' && node.selector === last.selector) {
      last.each((child) => {
        if (child.type === 'decl') {
          dedupeNode(child, node.nodes);
        ***REMOVED***
      ***REMOVED***);

      if (empty(node)) {
        node.remove();
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***
***REMOVED***

/**
 * @param {import('postcss').AtRule | import('postcss').Declaration***REMOVED*** last
 * @param {import('postcss').AnyNode[]***REMOVED*** nodes
 * @return {void***REMOVED***
 */
function dedupeNode(last, nodes) {
  let index = nodes.includes(last) ? nodes.indexOf(last) - 1 : nodes.length - 1;

  while (index >= 0) {
    const node = nodes[index--];
    if (node && equals(node, last)) {
      node.remove();
    ***REMOVED***
  ***REMOVED***
***REMOVED***

/**
 * @param {import('postcss').AnyNode***REMOVED*** root
 * @return {void***REMOVED***
 */
function dedupe(root) {
  const { nodes ***REMOVED*** =
    /** @type {import('postcss').Container<import('postcss').ChildNode>***REMOVED*** */ (
      root
    );

  if (!nodes) {
    return;
  ***REMOVED***

  let index = nodes.length - 1;
  while (index >= 0) {
    let last = nodes[index--];
    if (!last || !last.parent) {
      continue;
    ***REMOVED***
    dedupe(last);
    if (last.type === 'rule') {
      dedupeRule(last, nodes);
    ***REMOVED*** else if (last.type === 'atrule' || last.type === 'decl') {
      dedupeNode(last, nodes);
    ***REMOVED***
  ***REMOVED***
***REMOVED***

/**
 * @type {import('postcss').PluginCreator<void>***REMOVED***
 * @return {import('postcss').Plugin***REMOVED***
 */
function pluginCreator() {
  return {
    postcssPlugin: 'postcss-discard-duplicates',
    OnceExit(css) {
      dedupe(css);
    ***REMOVED***,
  ***REMOVED***;
***REMOVED***

pluginCreator.postcss = true;
module.exports = pluginCreator;
