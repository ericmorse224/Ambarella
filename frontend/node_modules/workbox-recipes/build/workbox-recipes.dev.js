this.workbox = this.workbox || {***REMOVED***;
this.workbox.recipes = (function (exports, registerRoute_js, StaleWhileRevalidate_js, CacheFirst_js, CacheableResponsePlugin_js, ExpirationPlugin_js, NetworkFirst_js, setCatchHandler_js, matchPrecache_js) {
    'use strict';

    try {
      self['workbox:recipes:6.5.4'] && _();
    ***REMOVED*** catch (e) {***REMOVED***

    /*
      Copyright 2020 Google LLC

      Use of this source code is governed by an MIT-style
      license that can be found in the LICENSE file or at
      https://opensource.org/licenses/MIT.
    */
    /**
     * An implementation of the [Google fonts]{@link https://developers.google.com/web/tools/workbox/guides/common-recipes#google_fonts***REMOVED*** caching recipe
     *
     * @memberof workbox-recipes
     *
     * @param {Object***REMOVED*** [options]
     * @param {string***REMOVED*** [options.cachePrefix] Cache prefix for caching stylesheets and webfonts. Defaults to google-fonts
     * @param {number***REMOVED*** [options.maxAgeSeconds] Maximum age, in seconds, that font entries will be cached for. Defaults to 1 year
     * @param {number***REMOVED*** [options.maxEntries] Maximum number of fonts that will be cached. Defaults to 30
     */

    function googleFontsCache(options = {***REMOVED***) {
      const sheetCacheName = `${options.cachePrefix || 'google-fonts'***REMOVED***-stylesheets`;
      const fontCacheName = `${options.cachePrefix || 'google-fonts'***REMOVED***-webfonts`;
      const maxAgeSeconds = options.maxAgeSeconds || 60 * 60 * 24 * 365;
      const maxEntries = options.maxEntries || 30; // Cache the Google Fonts stylesheets with a stale-while-revalidate strategy.

      registerRoute_js.registerRoute(({
        url
      ***REMOVED***) => url.origin === 'https://fonts.googleapis.com', new StaleWhileRevalidate_js.StaleWhileRevalidate({
        cacheName: sheetCacheName
      ***REMOVED***)); // Cache the underlying font files with a cache-first strategy for 1 year.

      registerRoute_js.registerRoute(({
        url
      ***REMOVED***) => url.origin === 'https://fonts.gstatic.com', new CacheFirst_js.CacheFirst({
        cacheName: fontCacheName,
        plugins: [new CacheableResponsePlugin_js.CacheableResponsePlugin({
          statuses: [0, 200]
        ***REMOVED***), new ExpirationPlugin_js.ExpirationPlugin({
          maxAgeSeconds,
          maxEntries
        ***REMOVED***)]
      ***REMOVED***));
    ***REMOVED***

    /**
     * @memberof workbox-recipes
     
     * @param {Object***REMOVED*** options
     * @param {string[]***REMOVED*** options.urls Paths to warm the strategy's cache with
     * @param {Strategy***REMOVED*** options.strategy Strategy to use
     */

    function warmStrategyCache(options) {
      self.addEventListener('install', event => {
        const done = options.urls.map(path => options.strategy.handleAll({
          event,
          request: new Request(path)
        ***REMOVED***)[1]);
        event.waitUntil(Promise.all(done));
      ***REMOVED***);
    ***REMOVED***

    /*
      Copyright 2020 Google LLC

      Use of this source code is governed by an MIT-style
      license that can be found in the LICENSE file or at
      https://opensource.org/licenses/MIT.
    */
    /**
     * An implementation of the [image caching recipe]{@link https://developers.google.com/web/tools/workbox/guides/common-recipes#caching_images***REMOVED***
     *
     * @memberof workbox-recipes
     *
     * @param {Object***REMOVED*** [options]
     * @param {string***REMOVED*** [options.cacheName] Name for cache. Defaults to images
     * @param {RouteMatchCallback***REMOVED*** [options.matchCallback] Workbox callback function to call to match to. Defaults to request.destination === 'image';
     * @param {number***REMOVED*** [options.maxAgeSeconds] Maximum age, in seconds, that font entries will be cached for. Defaults to 30 days
     * @param {number***REMOVED*** [options.maxEntries] Maximum number of images that will be cached. Defaults to 60
     * @param {WorkboxPlugin[]***REMOVED*** [options.plugins] Additional plugins to use for this recipe
     * @param {string[]***REMOVED*** [options.warmCache] Paths to call to use to warm this cache
     */

    function imageCache(options = {***REMOVED***) {
      const defaultMatchCallback = ({
        request
      ***REMOVED***) => request.destination === 'image';

      const cacheName = options.cacheName || 'images';
      const matchCallback = options.matchCallback || defaultMatchCallback;
      const maxAgeSeconds = options.maxAgeSeconds || 30 * 24 * 60 * 60;
      const maxEntries = options.maxEntries || 60;
      const plugins = options.plugins || [];
      plugins.push(new CacheableResponsePlugin_js.CacheableResponsePlugin({
        statuses: [0, 200]
      ***REMOVED***));
      plugins.push(new ExpirationPlugin_js.ExpirationPlugin({
        maxEntries,
        maxAgeSeconds
      ***REMOVED***));
      const strategy = new CacheFirst_js.CacheFirst({
        cacheName,
        plugins
      ***REMOVED***);
      registerRoute_js.registerRoute(matchCallback, strategy); // Warms the cache

      if (options.warmCache) {
        warmStrategyCache({
          urls: options.warmCache,
          strategy
        ***REMOVED***);
      ***REMOVED***
    ***REMOVED***

    /*
      Copyright 2020 Google LLC

      Use of this source code is governed by an MIT-style
      license that can be found in the LICENSE file or at
      https://opensource.org/licenses/MIT.
    */
    /**
     * An implementation of the [CSS and JavaScript files recipe]{@link https://developers.google.com/web/tools/workbox/guides/common-recipes#cache_css_and_javascript_files***REMOVED***
     *
     * @memberof workbox-recipes
     *
     * @param {Object***REMOVED*** [options]
     * @param {string***REMOVED*** [options.cacheName] Name for cache. Defaults to static-resources
     * @param {RouteMatchCallback***REMOVED*** [options.matchCallback] Workbox callback function to call to match to. Defaults to request.destination === 'style' || request.destination === 'script' || request.destination === 'worker';
     * @param {WorkboxPlugin[]***REMOVED*** [options.plugins] Additional plugins to use for this recipe
     * @param {string[]***REMOVED*** [options.warmCache] Paths to call to use to warm this cache
     */

    function staticResourceCache(options = {***REMOVED***) {
      const defaultMatchCallback = ({
        request
      ***REMOVED***) => request.destination === 'style' || request.destination === 'script' || request.destination === 'worker';

      const cacheName = options.cacheName || 'static-resources';
      const matchCallback = options.matchCallback || defaultMatchCallback;
      const plugins = options.plugins || [];
      plugins.push(new CacheableResponsePlugin_js.CacheableResponsePlugin({
        statuses: [0, 200]
      ***REMOVED***));
      const strategy = new StaleWhileRevalidate_js.StaleWhileRevalidate({
        cacheName,
        plugins
      ***REMOVED***);
      registerRoute_js.registerRoute(matchCallback, strategy); // Warms the cache

      if (options.warmCache) {
        warmStrategyCache({
          urls: options.warmCache,
          strategy
        ***REMOVED***);
      ***REMOVED***
    ***REMOVED***

    /*
      Copyright 2020 Google LLC

      Use of this source code is governed by an MIT-style
      license that can be found in the LICENSE file or at
      https://opensource.org/licenses/MIT.
    */
    /**
     * An implementation of a page caching recipe with a network timeout
     *
     * @memberof workbox-recipes
     *
     * @param {Object***REMOVED*** [options]
     * @param {string***REMOVED*** [options.cacheName] Name for cache. Defaults to pages
     * @param {RouteMatchCallback***REMOVED*** [options.matchCallback] Workbox callback function to call to match to. Defaults to request.mode === 'navigate';
     * @param {number***REMOVED*** [options.networkTimoutSeconds] Maximum amount of time, in seconds, to wait on the network before falling back to cache. Defaults to 3
     * @param {WorkboxPlugin[]***REMOVED*** [options.plugins] Additional plugins to use for this recipe
     * @param {string[]***REMOVED*** [options.warmCache] Paths to call to use to warm this cache
     */

    function pageCache(options = {***REMOVED***) {
      const defaultMatchCallback = ({
        request
      ***REMOVED***) => request.mode === 'navigate';

      const cacheName = options.cacheName || 'pages';
      const matchCallback = options.matchCallback || defaultMatchCallback;
      const networkTimeoutSeconds = options.networkTimeoutSeconds || 3;
      const plugins = options.plugins || [];
      plugins.push(new CacheableResponsePlugin_js.CacheableResponsePlugin({
        statuses: [0, 200]
      ***REMOVED***));
      const strategy = new NetworkFirst_js.NetworkFirst({
        networkTimeoutSeconds,
        cacheName,
        plugins
      ***REMOVED***); // Registers the route

      registerRoute_js.registerRoute(matchCallback, strategy); // Warms the cache

      if (options.warmCache) {
        warmStrategyCache({
          urls: options.warmCache,
          strategy
        ***REMOVED***);
      ***REMOVED***
    ***REMOVED***

    /*
      Copyright 2020 Google LLC

      Use of this source code is governed by an MIT-style
      license that can be found in the LICENSE file or at
      https://opensource.org/licenses/MIT.
    */
    /**
     * An implementation of the [comprehensive fallbacks recipe]{@link https://developers.google.com/web/tools/workbox/guides/advanced-recipes#comprehensive_fallbacks***REMOVED***. Be sure to include the fallbacks in your precache injection
     *
     * @memberof workbox-recipes
     *
     * @param {Object***REMOVED*** [options]
     * @param {string***REMOVED*** [options.pageFallback] Precache name to match for pag fallbacks. Defaults to offline.html
     * @param {string***REMOVED*** [options.imageFallback] Precache name to match for image fallbacks.
     * @param {string***REMOVED*** [options.fontFallback] Precache name to match for font fallbacks.
     */

    function offlineFallback(options = {***REMOVED***) {
      const pageFallback = options.pageFallback || 'offline.html';
      const imageFallback = options.imageFallback || false;
      const fontFallback = options.fontFallback || false;
      self.addEventListener('install', event => {
        const files = [pageFallback];

        if (imageFallback) {
          files.push(imageFallback);
        ***REMOVED***

        if (fontFallback) {
          files.push(fontFallback);
        ***REMOVED***

        event.waitUntil(self.caches.open('workbox-offline-fallbacks').then(cache => cache.addAll(files)));
      ***REMOVED***);

      const handler = async options => {
        const dest = options.request.destination;
        const cache = await self.caches.open('workbox-offline-fallbacks');

        if (dest === 'document') {
          const match = (await matchPrecache_js.matchPrecache(pageFallback)) || (await cache.match(pageFallback));
          return match || Response.error();
        ***REMOVED***

        if (dest === 'image' && imageFallback !== false) {
          const match = (await matchPrecache_js.matchPrecache(imageFallback)) || (await cache.match(imageFallback));
          return match || Response.error();
        ***REMOVED***

        if (dest === 'font' && fontFallback !== false) {
          const match = (await matchPrecache_js.matchPrecache(fontFallback)) || (await cache.match(fontFallback));
          return match || Response.error();
        ***REMOVED***

        return Response.error();
      ***REMOVED***;

      setCatchHandler_js.setCatchHandler(handler);
    ***REMOVED***

    exports.googleFontsCache = googleFontsCache;
    exports.imageCache = imageCache;
    exports.offlineFallback = offlineFallback;
    exports.pageCache = pageCache;
    exports.staticResourceCache = staticResourceCache;
    exports.warmStrategyCache = warmStrategyCache;

    return exports;

***REMOVED***({***REMOVED***, workbox.routing, workbox.strategies, workbox.strategies, workbox.cacheableResponse, workbox.expiration, workbox.strategies, workbox.routing, workbox.precaching));
//# sourceMappingURL=workbox-recipes.dev.js.map
