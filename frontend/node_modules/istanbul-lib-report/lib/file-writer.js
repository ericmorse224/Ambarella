'use strict';
/*
 Copyright 2012-2015, Yahoo Inc.
 Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */
const path = require('path');
const fs = require('fs');
const mkdirp = require('make-dir');
const supportsColor = require('supports-color');

/**
 * Base class for writing content
 * @class ContentWriter
 * @constructor
 */
class ContentWriter {
    /**
     * returns the colorized version of a string. Typically,
     * content writers that write to files will return the
     * same string and ones writing to a tty will wrap it in
     * appropriate escape sequences.
     * @param {String***REMOVED*** str the string to colorize
     * @param {String***REMOVED*** clazz one of `high`, `medium` or `low`
     * @returns {String***REMOVED*** the colorized form of the string
     */
    colorize(str /*, clazz*/) {
        return str;
    ***REMOVED***

    /**
     * writes a string appended with a newline to the destination
     * @param {String***REMOVED*** str the string to write
     */
    println(str) {
        this.write(`${str***REMOVED***\n`);
    ***REMOVED***

    /**
     * closes this content writer. Should be called after all writes are complete.
     */
    close() {***REMOVED***
***REMOVED***

/**
 * a content writer that writes to a file
 * @param {Number***REMOVED*** fd - the file descriptor
 * @extends ContentWriter
 * @constructor
 */
class FileContentWriter extends ContentWriter {
    constructor(fd) {
        super();

        this.fd = fd;
    ***REMOVED***

    write(str) {
        fs.writeSync(this.fd, str);
    ***REMOVED***

    close() {
        fs.closeSync(this.fd);
    ***REMOVED***
***REMOVED***

// allow stdout to be captured for tests.
let capture = false;
let output = '';

/**
 * a content writer that writes to the console
 * @extends ContentWriter
 * @constructor
 */
class ConsoleWriter extends ContentWriter {
    write(str) {
        if (capture) {
            output += str;
        ***REMOVED*** else {
            process.stdout.write(str);
        ***REMOVED***
    ***REMOVED***

    colorize(str, clazz) {
        const colors = {
            low: '31;1',
            medium: '33;1',
            high: '32;1'
        ***REMOVED***;

        /* istanbul ignore next: different modes for CI and local */
        if (supportsColor.stdout && colors[clazz]) {
            return `\u001b[${colors[clazz]***REMOVED***m${str***REMOVED***\u001b[0m`;
        ***REMOVED***
        return str;
    ***REMOVED***
***REMOVED***

/**
 * utility for writing files under a specific directory
 * @class FileWriter
 * @param {String***REMOVED*** baseDir the base directory under which files should be written
 * @constructor
 */
class FileWriter {
    constructor(baseDir) {
        if (!baseDir) {
            throw new Error('baseDir must be specified');
        ***REMOVED***
        this.baseDir = baseDir;
    ***REMOVED***

    /**
     * static helpers for capturing stdout report output;
     * super useful for tests!
     */
    static startCapture() {
        capture = true;
    ***REMOVED***

    static stopCapture() {
        capture = false;
    ***REMOVED***

    static getOutput() {
        return output;
    ***REMOVED***

    static resetOutput() {
        output = '';
    ***REMOVED***

    /**
     * returns a FileWriter that is rooted at the supplied subdirectory
     * @param {String***REMOVED*** subdir the subdirectory under which to root the
     *  returned FileWriter
     * @returns {FileWriter***REMOVED***
     */
    writerForDir(subdir) {
        if (path.isAbsolute(subdir)) {
            throw new Error(
                `Cannot create subdir writer for absolute path: ${subdir***REMOVED***`
            );
        ***REMOVED***
        return new FileWriter(`${this.baseDir***REMOVED***/${subdir***REMOVED***`);
    ***REMOVED***

    /**
     * copies a file from a source directory to a destination name
     * @param {String***REMOVED*** source path to source file
     * @param {String***REMOVED*** dest relative path to destination file
     * @param {String***REMOVED*** [header=undefined] optional text to prepend to destination
     *  (e.g., an "this file is autogenerated" comment, copyright notice, etc.)
     */
    copyFile(source, dest, header) {
        if (path.isAbsolute(dest)) {
            throw new Error(`Cannot write to absolute path: ${dest***REMOVED***`);
        ***REMOVED***
        dest = path.resolve(this.baseDir, dest);
        mkdirp.sync(path.dirname(dest));
        let contents;
        if (header) {
            contents = header + fs.readFileSync(source, 'utf8');
        ***REMOVED*** else {
            contents = fs.readFileSync(source);
        ***REMOVED***
        fs.writeFileSync(dest, contents);
    ***REMOVED***

    /**
     * returns a content writer for writing content to the supplied file.
     * @param {String|null***REMOVED*** file the relative path to the file or the special
     *  values `"-"` or `null` for writing to the console
     * @returns {ContentWriter***REMOVED***
     */
    writeFile(file) {
        if (file === null || file === '-') {
            return new ConsoleWriter();
        ***REMOVED***
        if (path.isAbsolute(file)) {
            throw new Error(`Cannot write to absolute path: ${file***REMOVED***`);
        ***REMOVED***
        file = path.resolve(this.baseDir, file);
        mkdirp.sync(path.dirname(file));
        return new FileContentWriter(fs.openSync(file, 'w'));
    ***REMOVED***
***REMOVED***

module.exports = FileWriter;
