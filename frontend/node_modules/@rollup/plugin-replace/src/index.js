import MagicString from 'magic-string';
import { createFilter ***REMOVED*** from '@rollup/pluginutils';

function escape(str) {
  return str.replace(/[-[\]/{***REMOVED***()*+?.\\^$|]/g, '\\$&');
***REMOVED***

function ensureFunction(functionOrValue) {
  if (typeof functionOrValue === 'function') return functionOrValue;
  return () => functionOrValue;
***REMOVED***

function longest(a, b) {
  return b.length - a.length;
***REMOVED***

function getReplacements(options) {
  if (options.values) {
    return Object.assign({***REMOVED***, options.values);
  ***REMOVED***
  const values = Object.assign({***REMOVED***, options);
  delete values.delimiters;
  delete values.include;
  delete values.exclude;
  delete values.sourcemap;
  delete values.sourceMap;
  return values;
***REMOVED***

function mapToFunctions(object) {
  return Object.keys(object).reduce((fns, key) => {
    const functions = Object.assign({***REMOVED***, fns);
    functions[key] = ensureFunction(object[key]);
    return functions;
  ***REMOVED***, {***REMOVED***);
***REMOVED***

export default function replace(options = {***REMOVED***) {
  const filter = createFilter(options.include, options.exclude);
  const { delimiters, preventAssignment ***REMOVED*** = options;
  const functionValues = mapToFunctions(getReplacements(options));
  const keys = Object.keys(functionValues).sort(longest).map(escape);
  const lookahead = preventAssignment ? '(?!\\s*=[^=])' : '';
  const pattern = delimiters
    ? new RegExp(
        `${escape(delimiters[0])***REMOVED***(${keys.join('|')***REMOVED***)${escape(delimiters[1])***REMOVED***${lookahead***REMOVED***`,
        'g'
      )
    : new RegExp(`\\b(${keys.join('|')***REMOVED***)\\b${lookahead***REMOVED***`, 'g');

  return {
    name: 'replace',

    buildStart() {
      if (![true, false].includes(preventAssignment)) {
        this.warn({
          message:
            "@rollup/plugin-replace: 'preventAssignment' currently defaults to false. It is recommended to set this option to `true`, as the next major version will default this option to `true`."
        ***REMOVED***);
      ***REMOVED***
    ***REMOVED***,

    renderChunk(code, chunk) {
      const id = chunk.fileName;
      if (!keys.length) return null;
      if (!filter(id)) return null;
      return executeReplacement(code, id);
    ***REMOVED***,

    transform(code, id) {
      if (!keys.length) return null;
      if (!filter(id)) return null;
      return executeReplacement(code, id);
    ***REMOVED***
  ***REMOVED***;

  function executeReplacement(code, id) {
    const magicString = new MagicString(code);
    if (!codeHasReplacements(code, id, magicString)) {
      return null;
    ***REMOVED***

    const result = { code: magicString.toString() ***REMOVED***;
    if (isSourceMapEnabled()) {
      result.map = magicString.generateMap({ hires: true ***REMOVED***);
    ***REMOVED***
    return result;
  ***REMOVED***

  function codeHasReplacements(code, id, magicString) {
    let result = false;
    let match;

    // eslint-disable-next-line no-cond-assign
    while ((match = pattern.exec(code))) {
      result = true;

      const start = match.index;
      const end = start + match[0].length;
      const replacement = String(functionValues[match[1]](id));
      magicString.overwrite(start, end, replacement);
    ***REMOVED***
    return result;
  ***REMOVED***

  function isSourceMapEnabled() {
    return options.sourceMap !== false && options.sourcemap !== false;
  ***REMOVED***
***REMOVED***
