"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
***REMOVED***);
exports.default = void 0;
var _helperPluginUtils = require("@babel/helper-plugin-utils");
var _pluginSyntaxPrivatePropertyInObject = require("@babel/plugin-syntax-private-property-in-object");
var _helperCreateClassFeaturesPlugin = require("@babel/helper-create-class-features-plugin");
var _helperAnnotateAsPure = require("@babel/helper-annotate-as-pure");
var _default = (0, _helperPluginUtils.declare)((api, opt) => {
  api.assertVersion(7);
  const {
    types: t,
    template
  ***REMOVED*** = api;
  const {
    loose
  ***REMOVED*** = opt;
  const classWeakSets = new WeakMap();
  const fieldsWeakSets = new WeakMap();
  function unshadow(name, targetScope, scope) {
    while (scope !== targetScope) {
      if (scope.hasOwnBinding(name)) scope.rename(name);
      scope = scope.parent;
    ***REMOVED***
  ***REMOVED***
  function injectToFieldInit(fieldPath, expr, before = false) {
    if (fieldPath.node.value) {
      const value = fieldPath.get("value");
      if (before) {
        value.insertBefore(expr);
      ***REMOVED*** else {
        value.insertAfter(expr);
      ***REMOVED***
    ***REMOVED*** else {
      fieldPath.set("value", t.unaryExpression("void", expr));
    ***REMOVED***
  ***REMOVED***
  function injectInitialization(classPath, init) {
    let firstFieldPath;
    let constructorPath;
    for (const el of classPath.get("body.body")) {
      if ((el.isClassProperty() || el.isClassPrivateProperty()) && !el.node.static) {
        firstFieldPath = el;
        break;
      ***REMOVED***
      if (!constructorPath && el.isClassMethod({
        kind: "constructor"
      ***REMOVED***)) {
        constructorPath = el;
      ***REMOVED***
    ***REMOVED***
    if (firstFieldPath) {
      injectToFieldInit(firstFieldPath, init, true);
    ***REMOVED*** else {
      (0, _helperCreateClassFeaturesPlugin.injectInitialization)(classPath, constructorPath, [t.expressionStatement(init)]);
    ***REMOVED***
  ***REMOVED***
  function getWeakSetId(weakSets, outerClass, reference, name = "", inject) {
    let id = weakSets.get(reference.node);
    if (!id) {
      id = outerClass.scope.generateUidIdentifier(`${name || ""***REMOVED*** brandCheck`);
      weakSets.set(reference.node, id);
      inject(reference, template.expression.ast`${t.cloneNode(id)***REMOVED***.add(this)`);
      const newExpr = t.newExpression(t.identifier("WeakSet"), []);
      (0, _helperAnnotateAsPure.default)(newExpr);
      outerClass.insertBefore(template.ast`var ${id***REMOVED*** = ${newExpr***REMOVED***`);
    ***REMOVED***
    return t.cloneNode(id);
  ***REMOVED***
  return {
    name: "proposal-private-property-in-object",
    inherits: _pluginSyntaxPrivatePropertyInObject.default,
    pre() {
      (0, _helperCreateClassFeaturesPlugin.enableFeature)(this.file, _helperCreateClassFeaturesPlugin.FEATURES.privateIn, loose);
    ***REMOVED***,
    visitor: {
      BinaryExpression(path, state) {
        const {
          node
        ***REMOVED*** = path;
        const {
          file
        ***REMOVED*** = state;
        if (node.operator !== "in") return;
        if (!t.isPrivateName(node.left)) return;
        const {
          name
        ***REMOVED*** = node.left.id;
        let privateElement;
        const outerClass = path.findParent(path => {
          if (!path.isClass()) return false;
          privateElement = path.get("body.body").find(({
            node
          ***REMOVED***) => t.isPrivate(node) && node.key.id.name === name);
          return !!privateElement;
        ***REMOVED***);
        if (outerClass.parentPath.scope.path.isPattern()) {
          outerClass.replaceWith(template.ast`(() => ${outerClass.node***REMOVED***)()`);
          return;
        ***REMOVED***
        if (privateElement.node.type === "ClassPrivateMethod") {
          if (privateElement.node.static) {
            if (outerClass.node.id) {
              unshadow(outerClass.node.id.name, outerClass.scope, path.scope);
            ***REMOVED*** else {
              outerClass.set("id", path.scope.generateUidIdentifier("class"));
            ***REMOVED***
            path.replaceWith(template.expression.ast`
                ${t.cloneNode(outerClass.node.id)***REMOVED*** === ${(0, _helperCreateClassFeaturesPlugin.buildCheckInRHS)(node.right, file)***REMOVED***
              `);
          ***REMOVED*** else {
            var _outerClass$node$id;
            const id = getWeakSetId(classWeakSets, outerClass, outerClass, (_outerClass$node$id = outerClass.node.id) == null ? void 0 : _outerClass$node$id.name, injectInitialization);
            path.replaceWith(template.expression.ast`${id***REMOVED***.has(${(0, _helperCreateClassFeaturesPlugin.buildCheckInRHS)(node.right, file)***REMOVED***)`);
          ***REMOVED***
        ***REMOVED*** else {
          const id = getWeakSetId(fieldsWeakSets, outerClass, privateElement, privateElement.node.key.id.name, injectToFieldInit);
          path.replaceWith(template.expression.ast`${id***REMOVED***.has(${(0, _helperCreateClassFeaturesPlugin.buildCheckInRHS)(node.right, file)***REMOVED***)`);
        ***REMOVED***
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***;
***REMOVED***);
exports.default = _default;

//# sourceMappingURL=index.js.map
