function sortStarts(a, b) {
  return (a.range ? a.range[0] : a.start) - (b.range ? b.range[0] : b.start);
***REMOVED***

/**
 * Returns the string value of a template literal object.
 * Tries to build it as best as it can based on the passed
 * prop. For instance `This is a ${prop***REMOVED***` will return 'This is a {prop***REMOVED***'.
 *
 * If the template literal builds to undefined (`${undefined***REMOVED***`), then
 * this should return "undefined".
 */
export default function extractValueFromTemplateLiteral(value) {
  const {
    quasis,
    expressions,
  ***REMOVED*** = value;
  const partitions = quasis.concat(expressions);

  return partitions.sort(sortStarts).map(({ type, value: { raw ***REMOVED*** = {***REMOVED***, name ***REMOVED***) => {
    if (type === 'TemplateElement') {
      return raw;
    ***REMOVED***

    if (type === 'Identifier') {
      return name === 'undefined' ? name : `{${name***REMOVED******REMOVED***`;
    ***REMOVED***

    if (type.indexOf('Expression') > -1) {
      return `{${type***REMOVED******REMOVED***`;
    ***REMOVED***

    return '';
  ***REMOVED***).join('');
***REMOVED***
