/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const InitFragment = require("../InitFragment");
const RuntimeGlobals = require("../RuntimeGlobals");
const { first ***REMOVED*** = require("../util/SetHelpers");
const { propertyName ***REMOVED*** = require("../util/propertyName");

/** @typedef {import("webpack-sources").Source***REMOVED*** Source */
/** @typedef {import("../Generator").GenerateContext***REMOVED*** GenerateContext */

/**
 * @param {Iterable<string>***REMOVED*** iterable iterable strings
 * @returns {string***REMOVED*** result
 */
const joinIterableWithComma = iterable => {
	// This is more performant than Array.from().join(", ")
	// as it doesn't create an array
	let str = "";
	let first = true;
	for (const item of iterable) {
		if (first) {
			first = false;
		***REMOVED*** else {
			str += ", ";
		***REMOVED***
		str += item;
	***REMOVED***
	return str;
***REMOVED***;

const EMPTY_MAP = new Map();
const EMPTY_SET = new Set();

/**
 * @extends {InitFragment<GenerateContext>***REMOVED*** Context
 */
class HarmonyExportInitFragment extends InitFragment {
	/**
	 * @param {string***REMOVED*** exportsArgument the exports identifier
	 * @param {Map<string, string>***REMOVED*** exportMap mapping from used name to exposed variable name
	 * @param {Set<string>***REMOVED*** unusedExports list of unused export names
	 */
	constructor(
		exportsArgument,
		exportMap = EMPTY_MAP,
		unusedExports = EMPTY_SET
	) {
		super(undefined, InitFragment.STAGE_HARMONY_EXPORTS, 1, "harmony-exports");
		this.exportsArgument = exportsArgument;
		this.exportMap = exportMap;
		this.unusedExports = unusedExports;
	***REMOVED***

	/**
	 * @param {HarmonyExportInitFragment[]***REMOVED*** fragments all fragments to merge
	 * @returns {HarmonyExportInitFragment***REMOVED*** merged fragment
	 */
	mergeAll(fragments) {
		let exportMap;
		let exportMapOwned = false;
		let unusedExports;
		let unusedExportsOwned = false;

		for (const fragment of fragments) {
			if (fragment.exportMap.size !== 0) {
				if (exportMap === undefined) {
					exportMap = fragment.exportMap;
					exportMapOwned = false;
				***REMOVED*** else {
					if (!exportMapOwned) {
						exportMap = new Map(exportMap);
						exportMapOwned = true;
					***REMOVED***
					for (const [key, value] of fragment.exportMap) {
						if (!exportMap.has(key)) exportMap.set(key, value);
					***REMOVED***
				***REMOVED***
			***REMOVED***
			if (fragment.unusedExports.size !== 0) {
				if (unusedExports === undefined) {
					unusedExports = fragment.unusedExports;
					unusedExportsOwned = false;
				***REMOVED*** else {
					if (!unusedExportsOwned) {
						unusedExports = new Set(unusedExports);
						unusedExportsOwned = true;
					***REMOVED***
					for (const value of fragment.unusedExports) {
						unusedExports.add(value);
					***REMOVED***
				***REMOVED***
			***REMOVED***
		***REMOVED***
		return new HarmonyExportInitFragment(
			this.exportsArgument,
			exportMap,
			unusedExports
		);
	***REMOVED***

	/**
	 * @param {HarmonyExportInitFragment***REMOVED*** other other
	 * @returns {HarmonyExportInitFragment***REMOVED*** merged result
	 */
	merge(other) {
		let exportMap;
		if (this.exportMap.size === 0) {
			exportMap = other.exportMap;
		***REMOVED*** else if (other.exportMap.size === 0) {
			exportMap = this.exportMap;
		***REMOVED*** else {
			exportMap = new Map(other.exportMap);
			for (const [key, value] of this.exportMap) {
				if (!exportMap.has(key)) exportMap.set(key, value);
			***REMOVED***
		***REMOVED***
		let unusedExports;
		if (this.unusedExports.size === 0) {
			unusedExports = other.unusedExports;
		***REMOVED*** else if (other.unusedExports.size === 0) {
			unusedExports = this.unusedExports;
		***REMOVED*** else {
			unusedExports = new Set(other.unusedExports);
			for (const value of this.unusedExports) {
				unusedExports.add(value);
			***REMOVED***
		***REMOVED***
		return new HarmonyExportInitFragment(
			this.exportsArgument,
			exportMap,
			unusedExports
		);
	***REMOVED***

	/**
	 * @param {GenerateContext***REMOVED*** context context
	 * @returns {string | Source | undefined***REMOVED*** the source code that will be included as initialization code
	 */
	getContent({ runtimeTemplate, runtimeRequirements ***REMOVED***) {
		runtimeRequirements.add(RuntimeGlobals.exports);
		runtimeRequirements.add(RuntimeGlobals.definePropertyGetters);

		const unusedPart =
			this.unusedExports.size > 1
				? `/* unused harmony exports ${joinIterableWithComma(
						this.unusedExports
					)***REMOVED*** */\n`
				: this.unusedExports.size > 0
					? `/* unused harmony export ${first(this.unusedExports)***REMOVED*** */\n`
					: "";
		const definitions = [];
		const orderedExportMap = Array.from(this.exportMap).sort(([a], [b]) =>
			a < b ? -1 : 1
		);
		for (const [key, value] of orderedExportMap) {
			definitions.push(
				`\n/* harmony export */   ${propertyName(
					key
				)***REMOVED***: ${runtimeTemplate.returningFunction(value)***REMOVED***`
			);
		***REMOVED***
		const definePart =
			this.exportMap.size > 0
				? `/* harmony export */ ${RuntimeGlobals.definePropertyGetters***REMOVED***(${
						this.exportsArgument
					***REMOVED***, {${definitions.join(",")***REMOVED***\n/* harmony export */ ***REMOVED***);\n`
				: "";
		return `${definePart***REMOVED***${unusedPart***REMOVED***`;
	***REMOVED***
***REMOVED***

module.exports = HarmonyExportInitFragment;
