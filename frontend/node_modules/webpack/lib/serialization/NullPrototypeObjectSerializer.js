/*
	MIT License http://www.opensource.org/licenses/mit-license.php
*/

"use strict";

/** @typedef {import("./ObjectMiddleware").ObjectDeserializerContext***REMOVED*** ObjectDeserializerContext */
/** @typedef {import("./ObjectMiddleware").ObjectSerializerContext***REMOVED*** ObjectSerializerContext */

class NullPrototypeObjectSerializer {
	/**
	 * @template {object***REMOVED*** T
	 * @param {T***REMOVED*** obj null object
	 * @param {ObjectSerializerContext***REMOVED*** context context
	 */
	serialize(obj, context) {
		/** @type {string[]***REMOVED*** */
		const keys = Object.keys(obj);
		for (const key of keys) {
			context.write(key);
		***REMOVED***
		context.write(null);
		for (const key of keys) {
			context.write(obj[/** @type {keyof T***REMOVED*** */ (key)]);
		***REMOVED***
	***REMOVED***

	/**
	 * @template {object***REMOVED*** T
	 * @param {ObjectDeserializerContext***REMOVED*** context context
	 * @returns {T***REMOVED*** null object
	 */
	deserialize(context) {
		/** @type {T***REMOVED*** */
		const obj = Object.create(null);
		/** @type {string[]***REMOVED*** */
		const keys = [];
		/** @type {string | null***REMOVED*** */
		let key = context.read();
		while (key !== null) {
			keys.push(key);
			key = context.read();
		***REMOVED***
		for (const key of keys) {
			obj[/** @type {keyof T***REMOVED*** */ (key)] = context.read();
		***REMOVED***
		return obj;
	***REMOVED***
***REMOVED***

module.exports = NullPrototypeObjectSerializer;
