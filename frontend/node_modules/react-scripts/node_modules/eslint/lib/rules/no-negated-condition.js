/**
 * @fileoverview Rule to disallow a negated condition
 * @author Alberto Rodr√≠guez
 */
"use strict";

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

/** @type {import('../shared/types').Rule***REMOVED*** */
module.exports = {
    meta: {
        type: "suggestion",

        docs: {
            description: "Disallow negated conditions",
            recommended: false,
            url: "https://eslint.org/docs/latest/rules/no-negated-condition"
        ***REMOVED***,

        schema: [],

        messages: {
            unexpectedNegated: "Unexpected negated condition."
        ***REMOVED***
    ***REMOVED***,

    create(context) {

        /**
         * Determines if a given node is an if-else without a condition on the else
         * @param {ASTNode***REMOVED*** node The node to check.
         * @returns {boolean***REMOVED*** True if the node has an else without an if.
         * @private
         */
        function hasElseWithoutCondition(node) {
            return node.alternate && node.alternate.type !== "IfStatement";
        ***REMOVED***

        /**
         * Determines if a given node is a negated unary expression
         * @param {Object***REMOVED*** test The test object to check.
         * @returns {boolean***REMOVED*** True if the node is a negated unary expression.
         * @private
         */
        function isNegatedUnaryExpression(test) {
            return test.type === "UnaryExpression" && test.operator === "!";
        ***REMOVED***

        /**
         * Determines if a given node is a negated binary expression
         * @param {Test***REMOVED*** test The test to check.
         * @returns {boolean***REMOVED*** True if the node is a negated binary expression.
         * @private
         */
        function isNegatedBinaryExpression(test) {
            return test.type === "BinaryExpression" &&
                (test.operator === "!=" || test.operator === "!==");
        ***REMOVED***

        /**
         * Determines if a given node has a negated if expression
         * @param {ASTNode***REMOVED*** node The node to check.
         * @returns {boolean***REMOVED*** True if the node has a negated if expression.
         * @private
         */
        function isNegatedIf(node) {
            return isNegatedUnaryExpression(node.test) || isNegatedBinaryExpression(node.test);
        ***REMOVED***

        return {
            IfStatement(node) {
                if (!hasElseWithoutCondition(node)) {
                    return;
                ***REMOVED***

                if (isNegatedIf(node)) {
                    context.report({
                        node,
                        messageId: "unexpectedNegated"
                    ***REMOVED***);
                ***REMOVED***
            ***REMOVED***,
            ConditionalExpression(node) {
                if (isNegatedIf(node)) {
                    context.report({
                        node,
                        messageId: "unexpectedNegated"
                    ***REMOVED***);
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***;
    ***REMOVED***
***REMOVED***;
