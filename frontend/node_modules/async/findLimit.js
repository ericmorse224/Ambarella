'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
***REMOVED***);

var _createTester = require('./internal/createTester.js');

var _createTester2 = _interopRequireDefault(_createTester);

var _eachOfLimit = require('./internal/eachOfLimit.js');

var _eachOfLimit2 = _interopRequireDefault(_eachOfLimit);

var _awaitify = require('./internal/awaitify.js');

var _awaitify2 = _interopRequireDefault(_awaitify);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj ***REMOVED***; ***REMOVED***

/**
 * The same as [`detect`]{@link module:Collections.detect***REMOVED*** but runs a maximum of `limit` async operations at a
 * time.
 *
 * @name detectLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.detect]{@link module:Collections.detect***REMOVED***
 * @alias findLimit
 * @category Collections
 * @param {Array|Iterable|AsyncIterable|Object***REMOVED*** coll - A collection to iterate over.
 * @param {number***REMOVED*** limit - The maximum number of async operations at a time.
 * @param {AsyncFunction***REMOVED*** iteratee - A truth test to apply to each item in `coll`.
 * The iteratee must complete with a boolean value as its result.
 * Invoked with (item, callback).
 * @param {Function***REMOVED*** [callback] - A callback which is called as soon as any
 * iteratee returns `true`, or after all the `iteratee` functions have finished.
 * Result will be the first item in the array that passes the truth test
 * (iteratee) or the value `undefined` if none passed. Invoked with
 * (err, result).
 * @returns {Promise***REMOVED*** a promise, if a callback is omitted
 */
function detectLimit(coll, limit, iteratee, callback) {
    return (0, _createTester2.default)(bool => bool, (res, item) => item)((0, _eachOfLimit2.default)(limit), coll, iteratee, callback);
***REMOVED***
exports.default = (0, _awaitify2.default)(detectLimit, 4);
module.exports = exports.default;