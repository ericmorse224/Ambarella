import type {
  CodeKeywordDefinition,
  ErrorObject,
  KeywordErrorDefinition,
  AnySchema,
***REMOVED*** from "../../types"
import type {KeywordCxt***REMOVED*** from "../../compile/validate"
import {_, str, not, Name***REMOVED*** from "../../compile/codegen"
import {alwaysValidSchema, Type***REMOVED*** from "../../compile/util"

export type UnevaluatedItemsError = ErrorObject<"unevaluatedItems", {limit: number***REMOVED***, AnySchema>

const error: KeywordErrorDefinition = {
  message: ({params: {len***REMOVED******REMOVED***) => str`must NOT have more than ${len***REMOVED*** items`,
  params: ({params: {len***REMOVED******REMOVED***) => _`{limit: ${len***REMOVED******REMOVED***`,
***REMOVED***

const def: CodeKeywordDefinition = {
  keyword: "unevaluatedItems",
  type: "array",
  schemaType: ["boolean", "object"],
  error,
  code(cxt: KeywordCxt) {
    const {gen, schema, data, it***REMOVED*** = cxt
    const items = it.items || 0
    if (items === true) return
    const len = gen.const("len", _`${data***REMOVED***.length`)
    if (schema === false) {
      cxt.setParams({len: items***REMOVED***)
      cxt.fail(_`${len***REMOVED*** > ${items***REMOVED***`)
    ***REMOVED*** else if (typeof schema == "object" && !alwaysValidSchema(it, schema)) {
      const valid = gen.var("valid", _`${len***REMOVED*** <= ${items***REMOVED***`)
      gen.if(not(valid), () => validateItems(valid, items))
      cxt.ok(valid)
    ***REMOVED***
    it.items = true

    function validateItems(valid: Name, from: Name | number): void {
      gen.forRange("i", from, len, (i) => {
        cxt.subschema({keyword: "unevaluatedItems", dataProp: i, dataPropType: Type.Num***REMOVED***, valid)
        if (!it.allErrors) gen.if(not(valid), () => gen.break())
      ***REMOVED***)
    ***REMOVED***
  ***REMOVED***,
***REMOVED***

export default def
