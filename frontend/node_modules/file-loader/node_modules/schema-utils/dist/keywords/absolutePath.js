"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
***REMOVED***);
exports.default = void 0;

/** @typedef {import("ajv").Ajv***REMOVED*** Ajv */

/** @typedef {import("ajv").ValidateFunction***REMOVED*** ValidateFunction */

/** @typedef {import("../validate").SchemaUtilErrorObject***REMOVED*** SchemaUtilErrorObject */

/**
 * @param {string***REMOVED*** message
 * @param {object***REMOVED*** schema
 * @param {string***REMOVED*** data
 * @returns {SchemaUtilErrorObject***REMOVED***
 */
function errorMessage(message, schema, data) {
  return {
    // @ts-ignore
    // eslint-disable-next-line no-undefined
    dataPath: undefined,
    // @ts-ignore
    // eslint-disable-next-line no-undefined
    schemaPath: undefined,
    keyword: "absolutePath",
    params: {
      absolutePath: data
    ***REMOVED***,
    message,
    parentSchema: schema
  ***REMOVED***;
***REMOVED***
/**
 * @param {boolean***REMOVED*** shouldBeAbsolute
 * @param {object***REMOVED*** schema
 * @param {string***REMOVED*** data
 * @returns {SchemaUtilErrorObject***REMOVED***
 */


function getErrorFor(shouldBeAbsolute, schema, data) {
  const message = shouldBeAbsolute ? `The provided value ${JSON.stringify(data)***REMOVED*** is not an absolute path!` : `A relative path is expected. However, the provided value ${JSON.stringify(data)***REMOVED*** is an absolute path!`;
  return errorMessage(message, schema, data);
***REMOVED***
/**
 *
 * @param {Ajv***REMOVED*** ajv
 * @returns {Ajv***REMOVED***
 */


function addAbsolutePathKeyword(ajv) {
  ajv.addKeyword("absolutePath", {
    errors: true,
    type: "string",

    compile(schema, parentSchema) {
      /** @type {ValidateFunction***REMOVED*** */
      const callback = data => {
        let passes = true;
        const isExclamationMarkPresent = data.includes("!");

        if (isExclamationMarkPresent) {
          callback.errors = [errorMessage(`The provided value ${JSON.stringify(data)***REMOVED*** contains exclamation mark (!) which is not allowed because it's reserved for loader syntax.`, parentSchema, data)];
          passes = false;
        ***REMOVED*** // ?:[A-Za-z]:\\ - Windows absolute path
        // \\\\ - Windows network absolute path
        // \/ - Unix-like OS absolute path


        const isCorrectAbsolutePath = schema === /^(?:[A-Za-z]:(\\|\/)|\\\\|\/)/.test(data);

        if (!isCorrectAbsolutePath) {
          callback.errors = [getErrorFor(schema, parentSchema, data)];
          passes = false;
        ***REMOVED***

        return passes;
      ***REMOVED***;

      callback.errors = [];
      return callback;
    ***REMOVED***

  ***REMOVED***);
  return ajv;
***REMOVED***

var _default = addAbsolutePathKeyword;
exports.default = _default;