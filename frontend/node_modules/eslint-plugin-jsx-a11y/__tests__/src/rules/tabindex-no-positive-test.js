/**
 * @fileoverview Enforce tabIndex value is not greater than zero.
 * @author Ethan Cohen
 */

// -----------------------------------------------------------------------------
// Requirements
// -----------------------------------------------------------------------------

import { RuleTester ***REMOVED*** from 'eslint';
import parserOptionsMapper from '../../__util__/parserOptionsMapper';
import parsers from '../../__util__/helpers/parsers';
import rule from '../../../src/rules/tabindex-no-positive';

// -----------------------------------------------------------------------------
// Tests
// -----------------------------------------------------------------------------

const ruleTester = new RuleTester();

const expectedError = {
  message: 'Avoid positive integer values for tabIndex.',
  type: 'JSXAttribute',
***REMOVED***;

ruleTester.run('tabindex-no-positive', rule, {
  valid: parsers.all([].concat(
    { code: '<div />;' ***REMOVED***,
    { code: '<div {...props***REMOVED*** />' ***REMOVED***,
    { code: '<div id="main" />' ***REMOVED***,
    { code: '<div tabIndex={undefined***REMOVED*** />' ***REMOVED***,
    { code: '<div tabIndex={`${undefined***REMOVED***`***REMOVED*** />' ***REMOVED***,
    { code: '<div tabIndex={`${undefined***REMOVED***${undefined***REMOVED***`***REMOVED*** />' ***REMOVED***,
    { code: '<div tabIndex={0***REMOVED*** />' ***REMOVED***,
    { code: '<div tabIndex={-1***REMOVED*** />' ***REMOVED***,
    { code: '<div tabIndex={null***REMOVED*** />' ***REMOVED***,
    { code: '<div tabIndex={bar()***REMOVED*** />' ***REMOVED***,
    { code: '<div tabIndex={bar***REMOVED*** />' ***REMOVED***,
    { code: '<div tabIndex={"foobar"***REMOVED*** />' ***REMOVED***,
    { code: '<div tabIndex="0" />' ***REMOVED***,
    { code: '<div tabIndex="-1" />' ***REMOVED***,
    { code: '<div tabIndex="-5" />' ***REMOVED***,
    { code: '<div tabIndex="-5.5" />' ***REMOVED***,
    { code: '<div tabIndex={-5.5***REMOVED*** />' ***REMOVED***,
    { code: '<div tabIndex={-5***REMOVED*** />' ***REMOVED***,
  )).map(parserOptionsMapper),

  invalid: parsers.all([].concat(
    { code: '<div tabIndex="1" />', errors: [expectedError] ***REMOVED***,
    { code: '<div tabIndex={1***REMOVED*** />', errors: [expectedError] ***REMOVED***,
    { code: '<div tabIndex={"1"***REMOVED*** />', errors: [expectedError] ***REMOVED***,
    { code: '<div tabIndex={`1`***REMOVED*** />', errors: [expectedError] ***REMOVED***,
    { code: '<div tabIndex={1.589***REMOVED*** />', errors: [expectedError] ***REMOVED***,
  )).map(parserOptionsMapper),
***REMOVED***);
