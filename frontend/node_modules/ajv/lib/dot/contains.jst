{{# def.definitions ***REMOVED******REMOVED***
{{# def.errors ***REMOVED******REMOVED***
{{# def.setupKeyword ***REMOVED******REMOVED***
{{# def.setupNextLevel ***REMOVED******REMOVED***


{{
  var $idx = 'i' + $lvl
    , $dataNxt = $it.dataLevel = it.dataLevel + 1
    , $nextData = 'data' + $dataNxt
    , $currentBaseId = it.baseId
    , $nonEmptySchema = {{# def.nonEmptySchema:$schema ***REMOVED******REMOVED***;
***REMOVED******REMOVED***

var {{=$errs***REMOVED******REMOVED*** = errors;
var {{=$valid***REMOVED******REMOVED***;

{{? $nonEmptySchema ***REMOVED******REMOVED***
  {{# def.setCompositeRule ***REMOVED******REMOVED***

  {{
    $it.schema = $schema;
    $it.schemaPath = $schemaPath;
    $it.errSchemaPath = $errSchemaPath;
  ***REMOVED******REMOVED***

  var {{=$nextValid***REMOVED******REMOVED*** = false;

  for (var {{=$idx***REMOVED******REMOVED*** = 0; {{=$idx***REMOVED******REMOVED*** < {{=$data***REMOVED******REMOVED***.length; {{=$idx***REMOVED******REMOVED***++) {
    {{
      $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);
      var $passData = $data + '[' + $idx + ']';
      $it.dataPathArr[$dataNxt] = $idx;
    ***REMOVED******REMOVED***

    {{# def.generateSubschemaCode ***REMOVED******REMOVED***
    {{# def.optimizeValidate ***REMOVED******REMOVED***

    if ({{=$nextValid***REMOVED******REMOVED***) break;
  ***REMOVED***

  {{# def.resetCompositeRule ***REMOVED******REMOVED***
  {{= $closingBraces ***REMOVED******REMOVED***

  if (!{{=$nextValid***REMOVED******REMOVED***) {
{{??***REMOVED******REMOVED***
  if ({{=$data***REMOVED******REMOVED***.length == 0) {
{{?***REMOVED******REMOVED***

    {{# def.error:'contains' ***REMOVED******REMOVED***
  ***REMOVED*** else {
    {{? $nonEmptySchema ***REMOVED******REMOVED***
      {{# def.resetErrors ***REMOVED******REMOVED***
    {{?***REMOVED******REMOVED***
  {{? it.opts.allErrors ***REMOVED******REMOVED*** ***REMOVED*** {{?***REMOVED******REMOVED***
