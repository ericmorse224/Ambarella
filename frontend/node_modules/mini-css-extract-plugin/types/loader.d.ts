export = loader;
/**
 * @this {import("webpack").LoaderContext<LoaderOptions>***REMOVED***
 * @param {string***REMOVED*** content
 */
declare function loader(
  this: import("webpack").LoaderContext<MiniCssExtractPlugin.LoaderOptions>,
  content: string
): string | undefined;
declare namespace loader {
  export {
    pitch,
    hotLoader,
    Schema,
    Compiler,
    Compilation,
    Chunk,
    Module,
    Source,
    AssetInfo,
    NormalModule,
    LoaderOptions,
    Locals,
    TODO,
    Dependency,
  ***REMOVED***;
***REMOVED***
import MiniCssExtractPlugin = require("./index");
/**
 * @this {import("webpack").LoaderContext<LoaderOptions>***REMOVED***
 * @param {string***REMOVED*** request
 */
declare function pitch(
  this: import("webpack").LoaderContext<MiniCssExtractPlugin.LoaderOptions>,
  request: string
): void;
/** @typedef {import("schema-utils/declarations/validate").Schema***REMOVED*** Schema */
/** @typedef {import("webpack").Compiler***REMOVED*** Compiler */
/** @typedef {import("webpack").Compilation***REMOVED*** Compilation */
/** @typedef {import("webpack").Chunk***REMOVED*** Chunk */
/** @typedef {import("webpack").Module***REMOVED*** Module */
/** @typedef {import("webpack").sources.Source***REMOVED*** Source */
/** @typedef {import("webpack").AssetInfo***REMOVED*** AssetInfo */
/** @typedef {import("webpack").NormalModule***REMOVED*** NormalModule */
/** @typedef {import("./index.js").LoaderOptions***REMOVED*** LoaderOptions */
/** @typedef {{ [key: string]: string | function ***REMOVED******REMOVED*** Locals */
/** @typedef {any***REMOVED*** TODO */
/**
 * @typedef {Object***REMOVED*** Dependency
 * @property {string***REMOVED*** identifier
 * @property {string | null***REMOVED*** context
 * @property {Buffer***REMOVED*** content
 * @property {string***REMOVED*** media
 * @property {string***REMOVED*** [supports]
 * @property {string***REMOVED*** [layer]
 * @property {Buffer***REMOVED*** [sourceMap]
 */
/**
 * @param {string***REMOVED*** content
 * @param {{ loaderContext: import("webpack").LoaderContext<LoaderOptions>, options: LoaderOptions, locals: Locals | undefined ***REMOVED******REMOVED*** context
 * @returns {string***REMOVED***
 */
declare function hotLoader(
  content: string,
  context: {
    loaderContext: import("webpack").LoaderContext<LoaderOptions>;
    options: LoaderOptions;
    locals: Locals | undefined;
  ***REMOVED***
): string;
type Schema = import("schema-utils/declarations/validate").Schema;
type Compiler = import("webpack").Compiler;
type Compilation = import("webpack").Compilation;
type Chunk = import("webpack").Chunk;
type Module = import("webpack").Module;
type Source = import("webpack").sources.Source;
type AssetInfo = import("webpack").AssetInfo;
type NormalModule = import("webpack").NormalModule;
type LoaderOptions = import("./index.js").LoaderOptions;
type Locals = {
  [key: string]: string | Function;
***REMOVED***;
type TODO = any;
type Dependency = {
  identifier: string;
  context: string | null;
  content: Buffer;
  media: string;
  supports?: string | undefined;
  layer?: string | undefined;
  sourceMap?: Buffer | undefined;
***REMOVED***;
