/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const forEachBail = require("./forEachBail");
const getPaths = require("./getPaths");

/** @typedef {import("./Resolver")***REMOVED*** Resolver */
/** @typedef {import("./Resolver").ResolveRequest***REMOVED*** ResolveRequest */
/** @typedef {import("./Resolver").ResolveStepHook***REMOVED*** ResolveStepHook */

module.exports = class ModulesInHierarchicalDirectoriesPlugin {
	/**
	 * @param {string | ResolveStepHook***REMOVED*** source source
	 * @param {string | Array<string>***REMOVED*** directories directories
	 * @param {string | ResolveStepHook***REMOVED*** target target
	 */
	constructor(source, directories, target) {
		this.source = source;
		this.directories = /** @type {Array<string>***REMOVED*** */ ([]).concat(directories);
		this.target = target;
	***REMOVED***

	/**
	 * @param {Resolver***REMOVED*** resolver the resolver
	 * @returns {void***REMOVED***
	 */
	apply(resolver) {
		const target = resolver.ensureHook(this.target);
		resolver
			.getHook(this.source)
			.tapAsync(
				"ModulesInHierarchicalDirectoriesPlugin",
				(request, resolveContext, callback) => {
					const fs = resolver.fileSystem;
					const addrs = getPaths(/** @type {string***REMOVED*** */ (request.path))
						.paths.map(p => {
							return this.directories.map(d => resolver.join(p, d));
						***REMOVED***)
						.reduce((array, p) => {
							array.push.apply(array, p);
							return array;
						***REMOVED***, []);
					forEachBail(
						addrs,
						/**
						 * @param {string***REMOVED*** addr addr
						 * @param {(err?: null|Error, result?: null|ResolveRequest) => void***REMOVED*** callback callback
						 * @returns {void***REMOVED***
						 */
						(addr, callback) => {
							fs.stat(addr, (err, stat) => {
								if (!err && stat && stat.isDirectory()) {
									/** @type {ResolveRequest***REMOVED*** */
									const obj = {
										...request,
										path: addr,
										request: "./" + request.request,
										module: false
									***REMOVED***;
									const message = "looking for modules in " + addr;
									return resolver.doResolve(
										target,
										obj,
										message,
										resolveContext,
										callback
									);
								***REMOVED***
								if (resolveContext.log)
									resolveContext.log(
										addr + " doesn't exist or is not a directory"
									);
								if (resolveContext.missingDependencies)
									resolveContext.missingDependencies.add(addr);
								return callback();
							***REMOVED***);
						***REMOVED***,
						callback
					);
				***REMOVED***
			);
	***REMOVED***
***REMOVED***;
