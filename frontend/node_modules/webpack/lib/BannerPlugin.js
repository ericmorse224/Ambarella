/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const { ConcatSource ***REMOVED*** = require("webpack-sources");
const Compilation = require("./Compilation");
const ModuleFilenameHelpers = require("./ModuleFilenameHelpers");
const Template = require("./Template");
const createSchemaValidation = require("./util/create-schema-validation");

/** @typedef {import("../declarations/plugins/BannerPlugin").BannerFunction***REMOVED*** BannerFunction */
/** @typedef {import("../declarations/plugins/BannerPlugin").BannerPluginArgument***REMOVED*** BannerPluginArgument */
/** @typedef {import("../declarations/plugins/BannerPlugin").BannerPluginOptions***REMOVED*** BannerPluginOptions */
/** @typedef {import("./Compilation").PathData***REMOVED*** PathData */
/** @typedef {import("./Compiler")***REMOVED*** Compiler */
/** @typedef {import("./TemplatedPathPlugin").TemplatePath***REMOVED*** TemplatePath */

const validate = createSchemaValidation(
	/** @type {((value: typeof import("../schemas/plugins/BannerPlugin.json")) => boolean)***REMOVED*** */
	(require("../schemas/plugins/BannerPlugin.check.js")),
	() => require("../schemas/plugins/BannerPlugin.json"),
	{
		name: "Banner Plugin",
		baseDataPath: "options"
	***REMOVED***
);

/**
 * @param {string***REMOVED*** str string to wrap
 * @returns {string***REMOVED*** wrapped string
 */
const wrapComment = str => {
	if (!str.includes("\n")) {
		return Template.toComment(str);
	***REMOVED***
	return `/*!\n * ${str
		.replace(/\*\//g, "* /")
		.split("\n")
		.join("\n * ")
		.replace(/\s+\n/g, "\n")
		.trimEnd()***REMOVED***\n */`;
***REMOVED***;

const PLUGIN_NAME = "BannerPlugin";

class BannerPlugin {
	/**
	 * @param {BannerPluginArgument***REMOVED*** options options object
	 */
	constructor(options) {
		if (typeof options === "string" || typeof options === "function") {
			options = {
				banner: options
			***REMOVED***;
		***REMOVED***

		validate(options);

		this.options = options;

		const bannerOption = options.banner;
		if (typeof bannerOption === "function") {
			const getBanner = bannerOption;
			/** @type {BannerFunction***REMOVED*** */
			this.banner = this.options.raw
				? getBanner
				: /** @type {BannerFunction***REMOVED*** */ data => wrapComment(getBanner(data));
		***REMOVED*** else {
			const banner = this.options.raw
				? bannerOption
				: wrapComment(bannerOption);
			/** @type {BannerFunction***REMOVED*** */
			this.banner = () => banner;
		***REMOVED***
	***REMOVED***

	/**
	 * Apply the plugin
	 * @param {Compiler***REMOVED*** compiler the compiler instance
	 * @returns {void***REMOVED***
	 */
	apply(compiler) {
		const options = this.options;
		const banner = this.banner;
		const matchObject = ModuleFilenameHelpers.matchObject.bind(
			undefined,
			options
		);
		const cache = new WeakMap();
		const stage =
			this.options.stage || Compilation.PROCESS_ASSETS_STAGE_ADDITIONS;

		compiler.hooks.compilation.tap(PLUGIN_NAME, compilation => {
			compilation.hooks.processAssets.tap({ name: PLUGIN_NAME, stage ***REMOVED***, () => {
				for (const chunk of compilation.chunks) {
					if (options.entryOnly && !chunk.canBeInitial()) {
						continue;
					***REMOVED***

					for (const file of chunk.files) {
						if (!matchObject(file)) {
							continue;
						***REMOVED***

						/** @type {PathData***REMOVED*** */
						const data = { chunk, filename: file ***REMOVED***;

						const comment = compilation.getPath(
							/** @type {TemplatePath***REMOVED*** */
							(banner),
							data
						);

						compilation.updateAsset(file, old => {
							const cached = cache.get(old);
							if (!cached || cached.comment !== comment) {
								const source = options.footer
									? new ConcatSource(old, "\n", comment)
									: new ConcatSource(comment, "\n", old);
								cache.set(old, { source, comment ***REMOVED***);
								return source;
							***REMOVED***
							return cached.source;
						***REMOVED***);
					***REMOVED***
				***REMOVED***
			***REMOVED***);
		***REMOVED***);
	***REMOVED***
***REMOVED***

module.exports = BannerPlugin;
