export type ESLint = import('eslint').ESLint;
export type LintResult = import('eslint').ESLint.LintResult;
export type Options = import('./options').Options;
export type AsyncTask = () => Promise<void>;
export type LintTask = (files: string | string[]) => Promise<LintResult[]>;
export type Linter = {
  threads: number;
  ESLint: ESLint;
  eslint: ESLint;
  lintFiles: LintTask;
  cleanup: AsyncTask;
***REMOVED***;
export type Worker = JestWorker & {
  lintFiles: LintTask;
***REMOVED***;
/** @typedef {import('eslint').ESLint***REMOVED*** ESLint */
/** @typedef {import('eslint').ESLint.LintResult***REMOVED*** LintResult */
/** @typedef {import('./options').Options***REMOVED*** Options */
/** @typedef {() => Promise<void>***REMOVED*** AsyncTask */
/** @typedef {(files: string|string[]) => Promise<LintResult[]>***REMOVED*** LintTask */
/** @typedef {{threads: number, ESLint: ESLint, eslint: ESLint, lintFiles: LintTask, cleanup: AsyncTask***REMOVED******REMOVED*** Linter */
/** @typedef {JestWorker & {lintFiles: LintTask***REMOVED******REMOVED*** Worker */
/**
 * @param {Options***REMOVED*** options
 * @returns {Linter***REMOVED***
 */
export function loadESLint(options: Options): Linter;
/**
 * @param {string|undefined***REMOVED*** key
 * @param {number***REMOVED*** poolSize
 * @param {Options***REMOVED*** options
 * @returns {Linter***REMOVED***
 */
export function loadESLintThreaded(
  key: string | undefined,
  poolSize: number,
  options: Options
): Linter;
/**
 * @param {string|undefined***REMOVED*** key
 * @param {Options***REMOVED*** options
 * @returns {Linter***REMOVED***
 */
export function getESLint(
  key: string | undefined,
  { threads, ...options ***REMOVED***: Options
): Linter;
import { Worker as JestWorker ***REMOVED*** from 'jest-worker';
