function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); ***REMOVED*** ***REMOVED***
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); ***REMOVED*** ***REMOVED***
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false ***REMOVED***); return Constructor; ***REMOVED***
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); ***REMOVED***
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); ***REMOVED*** return (hint === "string" ? String : Number)(input); ***REMOVED***
import SockJS from "../modules/sockjs-client/index.js";
import { log ***REMOVED*** from "../utils/log.js";
var SockJSClient = /*#__PURE__*/function () {
  /**
   * @param {string***REMOVED*** url
   */
  function SockJSClient(url) {
    _classCallCheck(this, SockJSClient);
    // SockJS requires `http` and `https` protocols
    this.sock = new SockJS(url.replace(/^ws:/i, "http:").replace(/^wss:/i, "https:"));
    this.sock.onerror =
    /**
     * @param {Error***REMOVED*** error
     */
    function (error) {
      log.error(error);
    ***REMOVED***;
  ***REMOVED***

  /**
   * @param {(...args: any[]) => void***REMOVED*** f
   */
  _createClass(SockJSClient, [{
    key: "onOpen",
    value: function onOpen(f) {
      this.sock.onopen = f;
    ***REMOVED***

    /**
     * @param {(...args: any[]) => void***REMOVED*** f
     */
  ***REMOVED***, {
    key: "onClose",
    value: function onClose(f) {
      this.sock.onclose = f;
    ***REMOVED***

    // call f with the message string as the first argument
    /**
     * @param {(...args: any[]) => void***REMOVED*** f
     */
  ***REMOVED***, {
    key: "onMessage",
    value: function onMessage(f) {
      this.sock.onmessage =
      /**
       * @param {Error & { data: string ***REMOVED******REMOVED*** e
       */
      function (e) {
        f(e.data);
      ***REMOVED***;
    ***REMOVED***
  ***REMOVED***]);
  return SockJSClient;
***REMOVED***();
export { SockJSClient as default ***REMOVED***;