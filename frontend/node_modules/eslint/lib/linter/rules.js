/**
 * @fileoverview Defines a storage for rules.
 * @author Nicholas C. Zakas
 * @author aladdin-add
 */

"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const builtInRules = require("../rules");

//------------------------------------------------------------------------------
// Typedefs
//------------------------------------------------------------------------------

/** @typedef {import("../types").Rule.RuleModule***REMOVED*** Rule */

//------------------------------------------------------------------------------
// Public Interface
//------------------------------------------------------------------------------

/**
 * A storage for rules.
 */
class Rules {
	constructor() {
		this._rules = Object.create(null);
	***REMOVED***

	/**
	 * Registers a rule module for rule id in storage.
	 * @param {string***REMOVED*** ruleId Rule id (file name).
	 * @param {Rule***REMOVED*** rule Rule object.
	 * @returns {void***REMOVED***
	 */
	define(ruleId, rule) {
		this._rules[ruleId] = rule;
	***REMOVED***

	/**
	 * Access rule handler by id (file name).
	 * @param {string***REMOVED*** ruleId Rule id (file name).
	 * @returns {Rule***REMOVED*** Rule object.
	 */
	get(ruleId) {
		if (typeof this._rules[ruleId] === "string") {
			this.define(ruleId, require(this._rules[ruleId]));
		***REMOVED***
		if (this._rules[ruleId]) {
			return this._rules[ruleId];
		***REMOVED***
		if (builtInRules.has(ruleId)) {
			return builtInRules.get(ruleId);
		***REMOVED***

		return null;
	***REMOVED***

	*[Symbol.iterator]() {
		yield* builtInRules;

		for (const ruleId of Object.keys(this._rules)) {
			yield [ruleId, this.get(ruleId)];
		***REMOVED***
	***REMOVED***
***REMOVED***

module.exports = Rules;
