/**
 * @flow
 */

'use strict';

/*
 * Flow types for the Babylon AST.
 */

// Abstract types. Something must extend these.

export type Comment = {
  type: 'CommentLine',
  _CommentLine?: void,
  value: string,
  end: number,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
***REMOVED*** | {
  type: 'CommentBlock',
  _CommentBlock?: void,
  value: string,
  end: number,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
***REMOVED***;

export type Declaration = {
  type: 'ClassBody',
  _ClassBody?: void,
  body: Array<Node>,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'ClassDeclaration',
  _ClassDeclaration?: void,
  body: ClassBody,
  id: ?Identifier,
  superClass: ?Expression,
  decorators: any,
  superTypeParameters: any,
  typeParameters: any,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'FunctionDeclaration',
  _FunctionDeclaration?: void,
  body: BlockStatement,
  id: Identifier,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
  async: boolean,
  defaults: Array<?Expression>,
  expression: boolean,
  generator: boolean,
  params: Array<Pattern>,
  rest: ?Identifier,
  returnType: ?TypeAnnotation,
  typeParameters: ?TypeParameterDeclaration,
***REMOVED*** | {
  type: 'MethodDefinition',
  _MethodDefinition?: void,
  computed: boolean,
  key: Node,
  kind: 'constructor' | 'method' | 'get' | 'set',
  static: boolean,
  value: FunctionExpression,
  decorators: ?Array<Decorator>,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'VariableDeclaration',
  _VariableDeclaration?: void,
  declarations: Array<VariableDeclarator>,
  kind: 'var' | 'let' | 'const',
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'ClassProperty',
  _ClassProperty?: void,
  computed: boolean,
  key: Node,
  static: boolean,
  typeAnnotation: ?TypeAnnotation,
  value: ?Expression,
  decorators: Array<Decorator>,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type Expression = {
  type: 'ArrayExpression',
  _ArrayExpression?: void,
  elements: Array<?Node>,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'AssignmentExpression',
  _AssignmentExpression?: void,
  left: Pattern,
  operator: AssignmentOperator,
  right: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'AwaitExpression',
  _AwaitExpression?: void,
  all: boolean,
  argument: ?Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'BinaryExpression',
  _BinaryExpression?: void,
  left: Expression,
  operator: BinaryOperator,
  right: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'BindExpression',
  _BindExpression?: void,
  callee: Node,
  object: Node,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'CallExpression',
  _CallExpression?: void,
  arguments: Array<Node>,
  callee: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'ClassExpression',
  _ClassExpression?: void,
  body: ClassBody,
  id: ?Identifier,
  superClass: ?Expression,
  decorators: any,
  superTypeParameters: any,
  typeParameters: any,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'ComprehensionExpression',
  _ComprehensionExpression?: void,
  body: Expression,
  blocks: Array<ComprehensionBlock>,
  filter: ?Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'ConditionalExpression',
  _ConditionalExpression?: void,
  alternate: Expression,
  consequent: Expression,
  test: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'DoExpression',
  _DoExpression?: void,
  body: Statement,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'FunctionExpression',
  _FunctionExpression?: void,
  body: BlockStatement,
  id: ?Identifier,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
  async: boolean,
  defaults: Array<?Expression>,
  expression: boolean,
  generator: boolean,
  params: Array<Pattern>,
  rest: ?Identifier,
  returnType: ?TypeAnnotation,
  typeParameters: ?TypeParameterDeclaration,
***REMOVED*** | {
  type: 'Identifier',
  _Identifier?: void,
  name: string,
  typeAnnotation: ?TypeAnnotation,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'Literal',
  _Literal?: void,
  raw: string,
  regex: ?{pattern: string, flags: string***REMOVED***,
  value: ?(string | boolean | number | RegExp),
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'LogicalExpression',
  _LogicalExpression?: void,
  left: Expression,
  operator: LogicalOperator,
  right: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'MemberExpression',
  _MemberExpression?: void,
  computed: boolean,
  object: Expression,
  property: Node,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'NewExpression',
  _NewExpression?: void,
  arguments: Array<Node>,
  callee: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'ObjectExpression',
  _ObjectExpression?: void,
  properties: Array<Node>,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'SequenceExpression',
  _SequenceExpression?: void,
  expression: Array<Expression>,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'TaggedTemplateExpression',
  _TaggedTemplateExpression?: void,
  quasi: TemplateLiteral,
  tag: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'TemplateLiteral',
  _TemplateLiteral?: void,
  expressions: Array<Expression>,
  quasis: Array<TemplateElement>,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'ThisExpression',
  _ThisExpression?: void,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'UnaryExpression',
  _UnaryExpression?: void,
  argument: Expression,
  operator: UnaryOperator,
  prefix: true,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'UpdateExpression',
  _UpdateExpression?: void,
  argument: Expression,
  operator: UpdateOperator,
  prefix: boolean,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'YieldExpression',
  _YieldExpression?: void,
  argument: ?Expression,
  delegate: boolean,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'TypeCastExpression',
  _TypeCastExpression?: void,
  expression: Expression,
  typeAnnotation: TypeAnnotation,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'JSXElement',
  _JSXElement?: void,
  children: Array<Node>,
  closingElement: ?JSXClosingElement,
  openingElement: JSXOpeningElement,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'JSXEmptyExpression',
  _JSXEmptyExpression?: void,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'JSXExpressionContainer',
  _JSXExpressionContainer?: void,
  expression: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'JSXMemberExpression',
  _JSXMemberExpression?: void,
  computed: boolean,
  object: Node,
  property: JSXIdentifier,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type Function = {
  type: 'ArrowFunctionExpression',
  _ArrowFunctionExpression?: void,
  body: Node,
  id: ?Identifier,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
  async: boolean,
  defaults: Array<?Expression>,
  expression: boolean,
  generator: boolean,
  params: Array<Pattern>,
  rest: ?Identifier,
  returnType: ?TypeAnnotation,
  typeParameters: ?TypeParameterDeclaration,
***REMOVED*** | {
  type: 'FunctionDeclaration',
  _FunctionDeclaration?: void,
  body: BlockStatement,
  id: Identifier,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
  async: boolean,
  defaults: Array<?Expression>,
  expression: boolean,
  generator: boolean,
  params: Array<Pattern>,
  rest: ?Identifier,
  returnType: ?TypeAnnotation,
  typeParameters: ?TypeParameterDeclaration,
***REMOVED*** | {
  type: 'FunctionExpression',
  _FunctionExpression?: void,
  body: BlockStatement,
  id: ?Identifier,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
  async: boolean,
  defaults: Array<?Expression>,
  expression: boolean,
  generator: boolean,
  params: Array<Pattern>,
  rest: ?Identifier,
  returnType: ?TypeAnnotation,
  typeParameters: ?TypeParameterDeclaration,
***REMOVED***;

export type Node = {
  type: 'ArrayExpression',
  _ArrayExpression?: void,
  elements: Array<?Node>,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'ArrayPattern',
  _ArrayPattern?: void,
  elements: Array<?Node>,
  typeAnnotation: ?TypeAnnotation,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'ArrowFunctionExpression',
  _ArrowFunctionExpression?: void,
  body: Node,
  id: ?Identifier,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
  async: boolean,
  defaults: Array<?Expression>,
  expression: boolean,
  generator: boolean,
  params: Array<Pattern>,
  rest: ?Identifier,
  returnType: ?TypeAnnotation,
  typeParameters: ?TypeParameterDeclaration,
***REMOVED*** | {
  type: 'AssignmentExpression',
  _AssignmentExpression?: void,
  left: Pattern,
  operator: AssignmentOperator,
  right: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'AssignmentPattern',
  _AssignmentPattern?: void,
  left: Pattern,
  right: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'AwaitExpression',
  _AwaitExpression?: void,
  all: boolean,
  argument: ?Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'BinaryExpression',
  _BinaryExpression?: void,
  left: Expression,
  operator: BinaryOperator,
  right: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'BindExpression',
  _BindExpression?: void,
  callee: Node,
  object: Node,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'BlockStatement',
  _BlockStatement?: void,
  body: Array<Statement>,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'BreakStatement',
  _BreakStatement?: void,
  label: ?Identifier,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'CallExpression',
  _CallExpression?: void,
  arguments: Array<Node>,
  callee: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'CatchClause',
  _CatchClause?: void,
  body: BlockStatement,
  param: Pattern,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'ClassBody',
  _ClassBody?: void,
  body: Array<Node>,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'ClassDeclaration',
  _ClassDeclaration?: void,
  body: ClassBody,
  id: ?Identifier,
  superClass: ?Expression,
  decorators: any,
  superTypeParameters: any,
  typeParameters: any,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'ClassExpression',
  _ClassExpression?: void,
  body: ClassBody,
  id: ?Identifier,
  superClass: ?Expression,
  decorators: any,
  superTypeParameters: any,
  typeParameters: any,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'ComprehensionBlock',
  _ComprehensionBlock?: void,
  each: boolean,
  left: Pattern,
  right: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'ComprehensionExpression',
  _ComprehensionExpression?: void,
  body: Expression,
  blocks: Array<ComprehensionBlock>,
  filter: ?Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'ConditionalExpression',
  _ConditionalExpression?: void,
  alternate: Expression,
  consequent: Expression,
  test: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'ContinueStatement',
  _ContinueStatement?: void,
  label: ?Identifier,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'Decorator',
  _Decorator?: void,
  expression: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'DebuggerStatement',
  _DebuggerStatement?: void,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'DoWhileStatement',
  _DoWhileStatement?: void,
  body: Statement,
  test: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'DoExpression',
  _DoExpression?: void,
  body: Statement,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'EmptyStatement',
  _EmptyStatement?: void,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'ExpressionStatement',
  _ExpressionStatement?: void,
  expression: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'File',
  _File?: void,
  program: Program,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'ForInStatement',
  _ForInStatement?: void,
  body: Statement,
  left: Node,
  right: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'ForOfStatement',
  _ForOfStatement?: void,
  body: Statement,
  left: Node,
  right: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'ForStatement',
  _ForStatement?: void,
  init: ?Node,
  test: ?Expression,
  update: ?Expression,
  body: Statement,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'FunctionDeclaration',
  _FunctionDeclaration?: void,
  body: BlockStatement,
  id: Identifier,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
  async: boolean,
  defaults: Array<?Expression>,
  expression: boolean,
  generator: boolean,
  params: Array<Pattern>,
  rest: ?Identifier,
  returnType: ?TypeAnnotation,
  typeParameters: ?TypeParameterDeclaration,
***REMOVED*** | {
  type: 'FunctionExpression',
  _FunctionExpression?: void,
  body: BlockStatement,
  id: ?Identifier,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
  async: boolean,
  defaults: Array<?Expression>,
  expression: boolean,
  generator: boolean,
  params: Array<Pattern>,
  rest: ?Identifier,
  returnType: ?TypeAnnotation,
  typeParameters: ?TypeParameterDeclaration,
***REMOVED*** | {
  type: 'Identifier',
  _Identifier?: void,
  name: string,
  typeAnnotation: ?TypeAnnotation,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'IfStatement',
  _IfStatement?: void,
  alternate: ?Statement,
  consequent: Statement,
  test: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'ImportDefaultSpecifier',
  _ImportDefaultSpecifier?: void,
  local: Node,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'ImportNamespaceSpecifier',
  _ImportNamespaceSpecifier?: void,
  local: Node,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'ImportDeclaration',
  _ImportDeclaration?: void,
  specifiers: Array<Node>,
  source: Literal,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'ImportSpecifier',
  _ImportSpecifier?: void,
  imported: Node,
  local: Node,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'LabeledStatement',
  _LabeledStatement?: void,
  body: Statement,
  label: Identifier,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'Literal',
  _Literal?: void,
  raw: string,
  regex: ?{pattern: string, flags: string***REMOVED***,
  value: ?(string | boolean | number | RegExp),
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'LogicalExpression',
  _LogicalExpression?: void,
  left: Expression,
  operator: LogicalOperator,
  right: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'MemberExpression',
  _MemberExpression?: void,
  computed: boolean,
  object: Expression,
  property: Node,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'MetaProperty',
  _MetaProperty?: void,
  meta: Node,
  property: Node,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'MethodDefinition',
  _MethodDefinition?: void,
  computed: boolean,
  key: Node,
  kind: 'constructor' | 'method' | 'get' | 'set',
  static: boolean,
  value: FunctionExpression,
  decorators: ?Array<Decorator>,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'NewExpression',
  _NewExpression?: void,
  arguments: Array<Node>,
  callee: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'Noop',
  _Noop?: void,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'ObjectExpression',
  _ObjectExpression?: void,
  properties: Array<Node>,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'ObjectPattern',
  _ObjectPattern?: void,
  properties: Array<Node>,
  typeAnnotation: ?TypeAnnotation,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'Program',
  _Program?: void,
  body: Array<Statement>,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'Property',
  _Property?: void,
  computed: boolean,
  key: Node,
  kind: 'init' | 'get' | 'set',
  method: boolean,
  shorthand: boolean,
  value: Node,
  decorators: ?Array<Decorator>,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'RestElement',
  _RestElement?: void,
  argument: Pattern,
  typeAnnotation: ?TypeAnnotation,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'ReturnStatement',
  _ReturnStatement?: void,
  argument: ?Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'SequenceExpression',
  _SequenceExpression?: void,
  expression: Array<Expression>,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'SpreadElement',
  _SpreadElement?: void,
  argument: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'SpreadProperty',
  _SpreadProperty?: void,
  argument: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'Super',
  _Super?: void,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'SwitchCase',
  _SwitchCase?: void,
  consequent: Array<Statement>,
  test: ?Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'SwitchStatement',
  _SwitchStatement?: void,
  cases: Array<SwitchCase>,
  discriminant: Expression,
  lexical: boolean,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'TaggedTemplateExpression',
  _TaggedTemplateExpression?: void,
  quasi: TemplateLiteral,
  tag: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'TemplateElement',
  _TemplateElement?: void,
  tail: boolean,
  value: {cooked: string, raw: string***REMOVED***,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'TemplateLiteral',
  _TemplateLiteral?: void,
  expressions: Array<Expression>,
  quasis: Array<TemplateElement>,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'ThisExpression',
  _ThisExpression?: void,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'ThrowStatement',
  _ThrowStatement?: void,
  argument: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'TryStatement',
  _TryStatement?: void,
  block: BlockStatement,
  finalizer: ?BlockStatement,
  guardedHandlers: Array<CatchClause>,
  handler: ?CatchClause,
  handlers: ?Array<CatchClause>,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'UnaryExpression',
  _UnaryExpression?: void,
  argument: Expression,
  operator: UnaryOperator,
  prefix: true,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'UpdateExpression',
  _UpdateExpression?: void,
  argument: Expression,
  operator: UpdateOperator,
  prefix: boolean,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'VariableDeclaration',
  _VariableDeclaration?: void,
  declarations: Array<VariableDeclarator>,
  kind: 'var' | 'let' | 'const',
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'VariableDeclarator',
  _VariableDeclarator?: void,
  id: Pattern,
  init: ?Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'WhileStatement',
  _WhileStatement?: void,
  body: Statement,
  test: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'WithStatement',
  _WithStatement?: void,
  body: Statement,
  object: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'YieldExpression',
  _YieldExpression?: void,
  argument: ?Expression,
  delegate: boolean,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'ExportAllDeclaration',
  _ExportAllDeclaration?: void,
  exported: Node,
  source: Node,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'ExportDefaultDeclaration',
  _ExportDefaultDeclaration?: void,
  declaration: Node,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'ExportNamedDeclaration',
  _ExportNamedDeclaration?: void,
  declaration: Node,
  source: Literal,
  specifiers: Array<Node>,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'ExportDefaultSpecifier',
  _ExportDefaultSpecifier?: void,
  exported: Node,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'ExportNamespaceSpecifier',
  _ExportNamespaceSpecifier?: void,
  exported: Node,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'ExportSpecifier',
  _ExportSpecifier?: void,
  local: Node,
  exported: Node,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'AnyTypeAnnotation',
  _AnyTypeAnnotation?: void,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'ArrayTypeAnnotation',
  _ArrayTypeAnnotation?: void,
  elementType: Type,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'BooleanLiteralTypeAnnotation',
  _BooleanLiteralTypeAnnotation?: void,
  raw: string,
  value: boolean,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'BooleanTypeAnnotation',
  _BooleanTypeAnnotation?: void,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'ClassImplements',
  _ClassImplements?: void,
  id: Identifier,
  typeParameters: ?TypeParameterInstantiation,
  superClass: ?Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'ClassProperty',
  _ClassProperty?: void,
  computed: boolean,
  key: Node,
  static: boolean,
  typeAnnotation: ?TypeAnnotation,
  value: ?Expression,
  decorators: Array<Decorator>,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'DeclareClass',
  _DeclareClass?: void,
  body: ObjectTypeAnnotation,
  extends: Array<InterfaceExtends>,
  id: Identifier,
  typeParameters: ?TypeParameterDeclaration,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'DeclareFunction',
  _DeclareFunction?: void,
  id: Identifier,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'DeclareModule',
  _DeclareModule?: void,
  body: BlockStatement,
  id: Node,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'DeclareVariable',
  _DeclareVariable?: void,
  id: Identifier,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'FunctionTypeAnnotation',
  _FunctionTypeAnnotation?: void,
  params: Array<FunctionTypeParam>,
  rest: ?FunctionTypeParam,
  returnType: Type,
  typeParameters: ?TypeParameterDeclaration,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'FunctionTypeParam',
  _FunctionTypeParam?: void,
  name: Identifier,
  optional: boolean,
  typeAnnotation: Type,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'GenericTypeAnnotation',
  _GenericTypeAnnotation?: void,
  id: Node,
  typeParameters: ?TypeParameterInstantiation,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'InterfaceExtends',
  _InterfaceExtends?: void,
  id: Identifier,
  typeParameters: ?TypeParameterInstantiation,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'InterfaceDeclaration',
  _InterfaceDeclaration?: void,
  body: ObjectTypeAnnotation,
  extends: Array<InterfaceExtends>,
  id: Identifier,
  typeParameters: ?TypeParameterDeclaration,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'IntersectionTypeAnnotation',
  _IntersectionTypeAnnotation?: void,
  types: Array<Type>,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'MixedTypeAnnotation',
  _MixedTypeAnnotation?: void,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'NullableTypeAnnotation',
  _NullableTypeAnnotation?: void,
  typeAnnotation: Type,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'NumberLiteralTypeAnnotation',
  _NumberLiteralTypeAnnotation?: void,
  raw: string,
  value: number,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'NumberTypeAnnotation',
  _NumberTypeAnnotation?: void,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'StringLiteralTypeAnnotation',
  _StringLiteralTypeAnnotation?: void,
  raw: string,
  value: string,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'StringTypeAnnotation',
  _StringTypeAnnotation?: void,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'TupleTypeAnnotation',
  _TupleTypeAnnotation?: void,
  types: Array<Type>,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'TypeofTypeAnnotation',
  _TypeofTypeAnnotation?: void,
  argument: Type,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'TypeAlias',
  _TypeAlias?: void,
  id: Identifier,
  right: Type,
  typeParameters: ?TypeParameterDeclaration,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'TypeAnnotation',
  _TypeAnnotation?: void,
  typeAnnotation: Type,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'TypeCastExpression',
  _TypeCastExpression?: void,
  expression: Expression,
  typeAnnotation: TypeAnnotation,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'TypeParameterDeclaration',
  _TypeParameterDeclaration?: void,
  params: Array<Identifier>,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'TypeParameterInstantiation',
  _TypeParameterInstantiation?: void,
  params: Array<Type>,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'ObjectTypeAnnotation',
  _ObjectTypeAnnotation?: void,
  callProperties: Array<ObjectTypeCallProperty>,
  indexers: Array<ObjectTypeIndexer>,
  properties: Array<ObjectTypeProperty>,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'ObjectTypeCallProperty',
  _ObjectTypeCallProperty?: void,
  static: boolean,
  value: FunctionTypeAnnotation,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'ObjectTypeIndexer',
  _ObjectTypeIndexer?: void,
  id: Identifier,
  key: Type,
  value: Type,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'ObjectTypeProperty',
  _ObjectTypeProperty?: void,
  key: Node,
  optional: boolean,
  value: Type,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'QualifiedTypeIdentifier',
  _QualifiedTypeIdentifier?: void,
  id: Identifier,
  qualification: Node,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'UnionTypeAnnotation',
  _UnionTypeAnnotation?: void,
  types: Array<Type>,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'VoidTypeAnnotation',
  _VoidTypeAnnotation?: void,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'JSXAttribute',
  _JSXAttribute?: void,
  name: Node,
  value: ?Node,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'JSXClosingElement',
  _JSXClosingElement?: void,
  name: Node,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'JSXElement',
  _JSXElement?: void,
  children: Array<Node>,
  closingElement: ?JSXClosingElement,
  openingElement: JSXOpeningElement,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'JSXEmptyExpression',
  _JSXEmptyExpression?: void,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'JSXExpressionContainer',
  _JSXExpressionContainer?: void,
  expression: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'JSXIdentifier',
  _JSXIdentifier?: void,
  name: string,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'JSXMemberExpression',
  _JSXMemberExpression?: void,
  computed: boolean,
  object: Node,
  property: JSXIdentifier,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'JSXNamespacedName',
  _JSXNamespacedName?: void,
  name: JSXIdentifier,
  namespace: JSXIdentifier,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'JSXOpeningElement',
  _JSXOpeningElement?: void,
  attributes: Array<Node>,
  name: Array<Node>,
  selfClosing: boolean,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'JSXSpreadAttribute',
  _JSXSpreadAttribute?: void,
  argument: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type Pattern = {
  type: 'ArrayPattern',
  _ArrayPattern?: void,
  elements: Array<?Node>,
  typeAnnotation: ?TypeAnnotation,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'AssignmentPattern',
  _AssignmentPattern?: void,
  left: Pattern,
  right: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'Identifier',
  _Identifier?: void,
  name: string,
  typeAnnotation: ?TypeAnnotation,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'ObjectPattern',
  _ObjectPattern?: void,
  properties: Array<Node>,
  typeAnnotation: ?TypeAnnotation,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'RestElement',
  _RestElement?: void,
  argument: Pattern,
  typeAnnotation: ?TypeAnnotation,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type Statement = {
  type: 'BlockStatement',
  _BlockStatement?: void,
  body: Array<Statement>,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'BreakStatement',
  _BreakStatement?: void,
  label: ?Identifier,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'ContinueStatement',
  _ContinueStatement?: void,
  label: ?Identifier,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'DoWhileStatement',
  _DoWhileStatement?: void,
  body: Statement,
  test: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'EmptyStatement',
  _EmptyStatement?: void,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'ExpressionStatement',
  _ExpressionStatement?: void,
  expression: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'ForInStatement',
  _ForInStatement?: void,
  body: Statement,
  left: Node,
  right: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'ForOfStatement',
  _ForOfStatement?: void,
  body: Statement,
  left: Node,
  right: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'ForStatement',
  _ForStatement?: void,
  init: ?Node,
  test: ?Expression,
  update: ?Expression,
  body: Statement,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'IfStatement',
  _IfStatement?: void,
  alternate: ?Statement,
  consequent: Statement,
  test: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'LabeledStatement',
  _LabeledStatement?: void,
  body: Statement,
  label: Identifier,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'ReturnStatement',
  _ReturnStatement?: void,
  argument: ?Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'SwitchStatement',
  _SwitchStatement?: void,
  cases: Array<SwitchCase>,
  discriminant: Expression,
  lexical: boolean,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'ThrowStatement',
  _ThrowStatement?: void,
  argument: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'TryStatement',
  _TryStatement?: void,
  block: BlockStatement,
  finalizer: ?BlockStatement,
  guardedHandlers: Array<CatchClause>,
  handler: ?CatchClause,
  handlers: ?Array<CatchClause>,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'WhileStatement',
  _WhileStatement?: void,
  body: Statement,
  test: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'WithStatement',
  _WithStatement?: void,
  body: Statement,
  object: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'DeclareClass',
  _DeclareClass?: void,
  body: ObjectTypeAnnotation,
  extends: Array<InterfaceExtends>,
  id: Identifier,
  typeParameters: ?TypeParameterDeclaration,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'DeclareFunction',
  _DeclareFunction?: void,
  id: Identifier,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'DeclareModule',
  _DeclareModule?: void,
  body: BlockStatement,
  id: Node,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'DeclareVariable',
  _DeclareVariable?: void,
  id: Identifier,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'InterfaceDeclaration',
  _InterfaceDeclaration?: void,
  body: ObjectTypeAnnotation,
  extends: Array<InterfaceExtends>,
  id: Identifier,
  typeParameters: ?TypeParameterDeclaration,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'TypeAlias',
  _TypeAlias?: void,
  id: Identifier,
  right: Type,
  typeParameters: ?TypeParameterDeclaration,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type Type = {
  type: 'AnyTypeAnnotation',
  _AnyTypeAnnotation?: void,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'ArrayTypeAnnotation',
  _ArrayTypeAnnotation?: void,
  elementType: Type,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'BooleanLiteralTypeAnnotation',
  _BooleanLiteralTypeAnnotation?: void,
  raw: string,
  value: boolean,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'BooleanTypeAnnotation',
  _BooleanTypeAnnotation?: void,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'FunctionTypeAnnotation',
  _FunctionTypeAnnotation?: void,
  params: Array<FunctionTypeParam>,
  rest: ?FunctionTypeParam,
  returnType: Type,
  typeParameters: ?TypeParameterDeclaration,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'GenericTypeAnnotation',
  _GenericTypeAnnotation?: void,
  id: Node,
  typeParameters: ?TypeParameterInstantiation,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'IntersectionTypeAnnotation',
  _IntersectionTypeAnnotation?: void,
  types: Array<Type>,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'MixedTypeAnnotation',
  _MixedTypeAnnotation?: void,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'NullableTypeAnnotation',
  _NullableTypeAnnotation?: void,
  typeAnnotation: Type,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'NumberLiteralTypeAnnotation',
  _NumberLiteralTypeAnnotation?: void,
  raw: string,
  value: number,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'NumberTypeAnnotation',
  _NumberTypeAnnotation?: void,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'StringLiteralTypeAnnotation',
  _StringLiteralTypeAnnotation?: void,
  raw: string,
  value: string,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'StringTypeAnnotation',
  _StringTypeAnnotation?: void,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'TupleTypeAnnotation',
  _TupleTypeAnnotation?: void,
  types: Array<Type>,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'ObjectTypeAnnotation',
  _ObjectTypeAnnotation?: void,
  callProperties: Array<ObjectTypeCallProperty>,
  indexers: Array<ObjectTypeIndexer>,
  properties: Array<ObjectTypeProperty>,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'UnionTypeAnnotation',
  _UnionTypeAnnotation?: void,
  types: Array<Type>,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED*** | {
  type: 'VoidTypeAnnotation',
  _VoidTypeAnnotation?: void,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

// Concrete Types. Nothing can extend these.

export type CommentLine = {
  type: 'CommentLine',
  _CommentLine?: void,
  value: string,
  end: number,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
***REMOVED***;

export type CommentBlock = {
  type: 'CommentBlock',
  _CommentBlock?: void,
  value: string,
  end: number,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
***REMOVED***;

// Babel concrete types.

export type ArrayExpression = {
  type: 'ArrayExpression',
  _ArrayExpression?: void,
  elements: Array<?Node>,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type ArrayPattern = {
  type: 'ArrayPattern',
  _ArrayPattern?: void,
  elements: Array<?Node>,
  typeAnnotation: ?TypeAnnotation,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type ArrowFunctionExpression = {
  type: 'ArrowFunctionExpression',
  _ArrowFunctionExpression?: void,
  body: Node,
  id: ?Identifier,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
  async: boolean,
  defaults: Array<?Expression>,
  expression: boolean,
  generator: boolean,
  params: Array<Pattern>,
  rest: ?Identifier,
  returnType: ?TypeAnnotation,
  typeParameters: ?TypeParameterDeclaration,
***REMOVED***;

type AssignmentOperator =
  '=' |
  '+=' |
  '-=' |
  '*=' |
  '/=' |
  '%=' |
  '<<=' |
  '>>=' |
  '>>>=' |
  '|=' |
  '^=' |
  '&=';

export type AssignmentExpression = {
  type: 'AssignmentExpression',
  _AssignmentExpression?: void,
  left: Pattern,
  operator: AssignmentOperator,
  right: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type AssignmentPattern = {
  type: 'AssignmentPattern',
  _AssignmentPattern?: void,
  left: Pattern,
  right: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type AwaitExpression = {
  type: 'AwaitExpression',
  _AwaitExpression?: void,
  all: boolean,
  argument: ?Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

type BinaryOperator =
  '==' |
  '!=' |
  '===' |
  '!==' |
  '<' |
  '<=' |
  '>' |
  '>=' |
  '<<' |
  '>>' |
  '>>>' |
  '+' |
  '-' |
  '*' |
  '/' |
  '%' |
  '&' |
  '|' |
  '^' |
  'in' |
  'instanceof' |
  '..';

export type BinaryExpression = {
  type: 'BinaryExpression',
  _BinaryExpression?: void,
  left: Expression,
  operator: BinaryOperator,
  right: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

// TODO: What is this?
export type BindExpression = {
  type: 'BindExpression',
  _BindExpression?: void,
  callee: Node,
  object: Node,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type BlockStatement = {
  type: 'BlockStatement',
  _BlockStatement?: void,
  body: Array<Statement>,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type BreakStatement = {
  type: 'BreakStatement',
  _BreakStatement?: void,
  label: ?Identifier,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type CallExpression = {
  type: 'CallExpression',
  _CallExpression?: void,
  arguments: Array<Node>,
  callee: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type CatchClause = {
  type: 'CatchClause',
  _CatchClause?: void,
  body: BlockStatement,
  param: Pattern,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type ClassBody = {
  type: 'ClassBody',
  _ClassBody?: void,
  body: Array<Node>,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type ClassDeclaration = {
  type: 'ClassDeclaration',
  _ClassDeclaration?: void,
  body: ClassBody,
  id: ?Identifier,
  superClass: ?Expression,
  decorators: any,
  superTypeParameters: any,
  typeParameters: any,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type ClassExpression = {
  type: 'ClassExpression',
  _ClassExpression?: void,
  body: ClassBody,
  id: ?Identifier,
  superClass: ?Expression,
  decorators: any,
  superTypeParameters: any,
  typeParameters: any,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type ComprehensionBlock = {
  type: 'ComprehensionBlock',
  _ComprehensionBlock?: void,
  each: boolean,
  left: Pattern,
  right: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type ComprehensionExpression = {
  type: 'ComprehensionExpression',
  _ComprehensionExpression?: void,
  body: Expression,
  blocks: Array<ComprehensionBlock>,
  filter: ?Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type ConditionalExpression = {
  type: 'ConditionalExpression',
  _ConditionalExpression?: void,
  alternate: Expression,
  consequent: Expression,
  test: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type ContinueStatement = {
  type: 'ContinueStatement',
  _ContinueStatement?: void,
  label: ?Identifier,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

// TODO: Make this correct.
export type Decorator = {
  type: 'Decorator',
  _Decorator?: void,
  expression: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type DebuggerStatement = {
  type: 'DebuggerStatement',
  _DebuggerStatement?: void,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type DoWhileStatement = {
  type: 'DoWhileStatement',
  _DoWhileStatement?: void,
  body: Statement,
  test: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

// TODO: Make this correct.
export type DoExpression = {
  type: 'DoExpression',
  _DoExpression?: void,
  body: Statement,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type EmptyStatement = {
  type: 'EmptyStatement',
  _EmptyStatement?: void,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type ExpressionStatement = {
  type: 'ExpressionStatement',
  _ExpressionStatement?: void,
  expression: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type File = {
  type: 'File',
  _File?: void,
  program: Program,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type ForInStatement = {
  type: 'ForInStatement',
  _ForInStatement?: void,
  body: Statement,
  left: Node,
  right: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

// TODO: Make this correct.
export type ForOfStatement = {
  type: 'ForOfStatement',
  _ForOfStatement?: void,
  body: Statement,
  left: Node,
  right: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type ForStatement = {
  type: 'ForStatement',
  _ForStatement?: void,
  init: ?Node,
  test: ?Expression,
  update: ?Expression,
  body: Statement,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type FunctionDeclaration = {
  type: 'FunctionDeclaration',
  _FunctionDeclaration?: void,
  body: BlockStatement,
  id: Identifier,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
  async: boolean,
  defaults: Array<?Expression>,
  expression: boolean,
  generator: boolean,
  params: Array<Pattern>,
  rest: ?Identifier,
  returnType: ?TypeAnnotation,
  typeParameters: ?TypeParameterDeclaration,
***REMOVED***;

export type FunctionExpression = {
  type: 'FunctionExpression',
  _FunctionExpression?: void,
  body: BlockStatement,
  id: ?Identifier,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
  async: boolean,
  defaults: Array<?Expression>,
  expression: boolean,
  generator: boolean,
  params: Array<Pattern>,
  rest: ?Identifier,
  returnType: ?TypeAnnotation,
  typeParameters: ?TypeParameterDeclaration,
***REMOVED***;

export type Identifier = {
  type: 'Identifier',
  _Identifier?: void,
  name: string,
  typeAnnotation: ?TypeAnnotation,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type IfStatement = {
  type: 'IfStatement',
  _IfStatement?: void,
  alternate: ?Statement,
  consequent: Statement,
  test: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

// TODO: Make this correct.
export type ImportDefaultSpecifier = {
  type: 'ImportDefaultSpecifier',
  _ImportDefaultSpecifier?: void,
  local: Node,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

// TODO: Make this correct.
export type ImportNamespaceSpecifier = {
  type: 'ImportNamespaceSpecifier',
  _ImportNamespaceSpecifier?: void,
  local: Node,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

// TODO: Make this correct.
export type ImportDeclaration = {
  type: 'ImportDeclaration',
  _ImportDeclaration?: void,
  specifiers: Array<Node>,
  source: Literal,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

// TODO: Make this correct.
export type ImportSpecifier = {
  type: 'ImportSpecifier',
  _ImportSpecifier?: void,
  imported: Node,
  local: Node,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type LabeledStatement = {
  type: 'LabeledStatement',
  _LabeledStatement?: void,
  body: Statement,
  label: Identifier,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type Literal = {
  type: 'Literal',
  _Literal?: void,
  raw: string,
  regex: ?{pattern: string, flags: string***REMOVED***,
  value: ?(string | boolean | number | RegExp),
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

type LogicalOperator = '||' | '&&';

export type LogicalExpression = {
  type: 'LogicalExpression',
  _LogicalExpression?: void,
  left: Expression,
  operator: LogicalOperator,
  right: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type MemberExpression = {
  type: 'MemberExpression',
  _MemberExpression?: void,
  computed: boolean,
  object: Expression,
  property: Node,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

// TODO: Make this correct.
export type MetaProperty = {
  type: 'MetaProperty',
  _MetaProperty?: void,
  meta: Node,
  property: Node,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type MethodDefinition = {
  type: 'MethodDefinition',
  _MethodDefinition?: void,
  computed: boolean,
  key: Node,
  kind: 'constructor' | 'method' | 'get' | 'set',
  static: boolean,
  value: FunctionExpression,
  decorators: ?Array<Decorator>,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type NewExpression = {
  type: 'NewExpression',
  _NewExpression?: void,
  arguments: Array<Node>,
  callee: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type Noop = {
  type: 'Noop',
  _Noop?: void,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type ObjectExpression = {
  type: 'ObjectExpression',
  _ObjectExpression?: void,
  properties: Array<Node>,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type ObjectPattern = {
  type: 'ObjectPattern',
  _ObjectPattern?: void,
  properties: Array<Node>,
  typeAnnotation: ?TypeAnnotation,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type Program = {
  type: 'Program',
  _Program?: void,
  body: Array<Statement>,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type Property = {
  type: 'Property',
  _Property?: void,
  computed: boolean,
  key: Node,
  kind: 'init' | 'get' | 'set',
  method: boolean,
  shorthand: boolean,
  value: Node,
  decorators: ?Array<Decorator>,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type RestElement = {
  type: 'RestElement',
  _RestElement?: void,
  argument: Pattern,
  typeAnnotation: ?TypeAnnotation,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type ReturnStatement = {
  type: 'ReturnStatement',
  _ReturnStatement?: void,
  argument: ?Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type SequenceExpression = {
  type: 'SequenceExpression',
  _SequenceExpression?: void,
  expression: Array<Expression>,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type SpreadElement = {
  type: 'SpreadElement',
  _SpreadElement?: void,
  argument: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type SpreadProperty = {
  type: 'SpreadProperty',
  _SpreadProperty?: void,
  argument: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type Super = {
  type: 'Super',
  _Super?: void,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type SwitchCase = {
  type: 'SwitchCase',
  _SwitchCase?: void,
  consequent: Array<Statement>,
  test: ?Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type SwitchStatement = {
  type: 'SwitchStatement',
  _SwitchStatement?: void,
  cases: Array<SwitchCase>,
  discriminant: Expression,
  lexical: boolean,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type TaggedTemplateExpression = {
  type: 'TaggedTemplateExpression',
  _TaggedTemplateExpression?: void,
  quasi: TemplateLiteral,
  tag: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type TemplateElement = {
  type: 'TemplateElement',
  _TemplateElement?: void,
  tail: boolean,
  value: {cooked: string, raw: string***REMOVED***,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type TemplateLiteral = {
  type: 'TemplateLiteral',
  _TemplateLiteral?: void,
  expressions: Array<Expression>,
  quasis: Array<TemplateElement>,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type ThisExpression = {
  type: 'ThisExpression',
  _ThisExpression?: void,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type ThrowStatement = {
  type: 'ThrowStatement',
  _ThrowStatement?: void,
  argument: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type TryStatement = {
  type: 'TryStatement',
  _TryStatement?: void,
  block: BlockStatement,
  finalizer: ?BlockStatement,
  guardedHandlers: Array<CatchClause>,
  handler: ?CatchClause,
  handlers: ?Array<CatchClause>,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

type UnaryOperator = '-' | '+' | '!' | '~' | 'typeof' | 'void' | 'delete';

export type UnaryExpression = {
  type: 'UnaryExpression',
  _UnaryExpression?: void,
  argument: Expression,
  operator: UnaryOperator,
  prefix: true,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

type UpdateOperator = '++' | '--';

export type UpdateExpression = {
  type: 'UpdateExpression',
  _UpdateExpression?: void,
  argument: Expression,
  operator: UpdateOperator,
  prefix: boolean,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type VariableDeclaration = {
  type: 'VariableDeclaration',
  _VariableDeclaration?: void,
  declarations: Array<VariableDeclarator>,
  kind: 'var' | 'let' | 'const',
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type VariableDeclarator = {
  type: 'VariableDeclarator',
  _VariableDeclarator?: void,
  id: Pattern,
  init: ?Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type WhileStatement = {
  type: 'WhileStatement',
  _WhileStatement?: void,
  body: Statement,
  test: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type WithStatement = {
  type: 'WithStatement',
  _WithStatement?: void,
  body: Statement,
  object: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type YieldExpression = {
  type: 'YieldExpression',
  _YieldExpression?: void,
  argument: ?Expression,
  delegate: boolean,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

// TODO: Make this correct.
export type ExportAllDeclaration = {
  type: 'ExportAllDeclaration',
  _ExportAllDeclaration?: void,
  exported: Node,
  source: Node,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

// TODO: Make this correct.
export type ExportDefaultDeclaration = {
  type: 'ExportDefaultDeclaration',
  _ExportDefaultDeclaration?: void,
  declaration: Node,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

// TODO: Make this correct.
export type ExportNamedDeclaration = {
  type: 'ExportNamedDeclaration',
  _ExportNamedDeclaration?: void,
  declaration: Node,
  source: Literal,
  specifiers: Array<Node>,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

// TODO: Make this correct.
export type ExportDefaultSpecifier = {
  type: 'ExportDefaultSpecifier',
  _ExportDefaultSpecifier?: void,
  exported: Node,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

// TODO: Make this correct.
export type ExportNamespaceSpecifier = {
  type: 'ExportNamespaceSpecifier',
  _ExportNamespaceSpecifier?: void,
  exported: Node,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

// TODO: Make this correct.
export type ExportSpecifier = {
  type: 'ExportSpecifier',
  _ExportSpecifier?: void,
  local: Node,
  exported: Node,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type AnyTypeAnnotation = {
  type: 'AnyTypeAnnotation',
  _AnyTypeAnnotation?: void,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type ArrayTypeAnnotation = {
  type: 'ArrayTypeAnnotation',
  _ArrayTypeAnnotation?: void,
  elementType: Type,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type BooleanLiteralTypeAnnotation = {
  type: 'BooleanLiteralTypeAnnotation',
  _BooleanLiteralTypeAnnotation?: void,
  raw: string,
  value: boolean,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type BooleanTypeAnnotation = {
  type: 'BooleanTypeAnnotation',
  _BooleanTypeAnnotation?: void,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type ClassImplements = {
  type: 'ClassImplements',
  _ClassImplements?: void,
  id: Identifier,
  typeParameters: ?TypeParameterInstantiation,
  superClass: ?Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type ClassProperty = {
  type: 'ClassProperty',
  _ClassProperty?: void,
  computed: boolean,
  key: Node,
  static: boolean,
  typeAnnotation: ?TypeAnnotation,
  value: ?Expression,
  decorators: Array<Decorator>,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type DeclareClass = {
  type: 'DeclareClass',
  _DeclareClass?: void,
  body: ObjectTypeAnnotation,
  extends: Array<InterfaceExtends>,
  id: Identifier,
  typeParameters: ?TypeParameterDeclaration,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

// TODO: Make this correct.
export type DeclareFunction = {
  type: 'DeclareFunction',
  _DeclareFunction?: void,
  id: Identifier,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type DeclareModule = {
  type: 'DeclareModule',
  _DeclareModule?: void,
  body: BlockStatement,
  id: Node,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

// TODO: Make this correct.
export type DeclareVariable = {
  type: 'DeclareVariable',
  _DeclareVariable?: void,
  id: Identifier,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type FunctionTypeAnnotation = {
  type: 'FunctionTypeAnnotation',
  _FunctionTypeAnnotation?: void,
  params: Array<FunctionTypeParam>,
  rest: ?FunctionTypeParam,
  returnType: Type,
  typeParameters: ?TypeParameterDeclaration,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type FunctionTypeParam = {
  type: 'FunctionTypeParam',
  _FunctionTypeParam?: void,
  name: Identifier,
  optional: boolean,
  typeAnnotation: Type,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type GenericTypeAnnotation = {
  type: 'GenericTypeAnnotation',
  _GenericTypeAnnotation?: void,
  id: Node,
  typeParameters: ?TypeParameterInstantiation,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type InterfaceExtends = {
  type: 'InterfaceExtends',
  _InterfaceExtends?: void,
  id: Identifier,
  typeParameters: ?TypeParameterInstantiation,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type InterfaceDeclaration = {
  type: 'InterfaceDeclaration',
  _InterfaceDeclaration?: void,
  body: ObjectTypeAnnotation,
  extends: Array<InterfaceExtends>,
  id: Identifier,
  typeParameters: ?TypeParameterDeclaration,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type IntersectionTypeAnnotation = {
  type: 'IntersectionTypeAnnotation',
  _IntersectionTypeAnnotation?: void,
  types: Array<Type>,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type MixedTypeAnnotation = {
  type: 'MixedTypeAnnotation',
  _MixedTypeAnnotation?: void,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type NullableTypeAnnotation = {
  type: 'NullableTypeAnnotation',
  _NullableTypeAnnotation?: void,
  typeAnnotation: Type,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type NumberLiteralTypeAnnotation = {
  type: 'NumberLiteralTypeAnnotation',
  _NumberLiteralTypeAnnotation?: void,
  raw: string,
  value: number,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type NumberTypeAnnotation = {
  type: 'NumberTypeAnnotation',
  _NumberTypeAnnotation?: void,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type StringLiteralTypeAnnotation = {
  type: 'StringLiteralTypeAnnotation',
  _StringLiteralTypeAnnotation?: void,
  raw: string,
  value: string,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type StringTypeAnnotation = {
  type: 'StringTypeAnnotation',
  _StringTypeAnnotation?: void,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type TupleTypeAnnotation = {
  type: 'TupleTypeAnnotation',
  _TupleTypeAnnotation?: void,
  types: Array<Type>,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type TypeofTypeAnnotation = {
  type: 'TypeofTypeAnnotation',
  _TypeofTypeAnnotation?: void,
  argument: Type,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type TypeAlias = {
  type: 'TypeAlias',
  _TypeAlias?: void,
  id: Identifier,
  right: Type,
  typeParameters: ?TypeParameterDeclaration,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type TypeAnnotation = {
  type: 'TypeAnnotation',
  _TypeAnnotation?: void,
  typeAnnotation: Type,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type TypeCastExpression = {
  type: 'TypeCastExpression',
  _TypeCastExpression?: void,
  expression: Expression,
  typeAnnotation: TypeAnnotation,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type TypeParameterDeclaration = {
  type: 'TypeParameterDeclaration',
  _TypeParameterDeclaration?: void,
  params: Array<Identifier>,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type TypeParameterInstantiation = {
  type: 'TypeParameterInstantiation',
  _TypeParameterInstantiation?: void,
  params: Array<Type>,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type ObjectTypeAnnotation = {
  type: 'ObjectTypeAnnotation',
  _ObjectTypeAnnotation?: void,
  callProperties: Array<ObjectTypeCallProperty>,
  indexers: Array<ObjectTypeIndexer>,
  properties: Array<ObjectTypeProperty>,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type ObjectTypeCallProperty = {
  type: 'ObjectTypeCallProperty',
  _ObjectTypeCallProperty?: void,
  static: boolean,
  value: FunctionTypeAnnotation,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type ObjectTypeIndexer = {
  type: 'ObjectTypeIndexer',
  _ObjectTypeIndexer?: void,
  id: Identifier,
  key: Type,
  value: Type,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type ObjectTypeProperty = {
  type: 'ObjectTypeProperty',
  _ObjectTypeProperty?: void,
  key: Node,
  optional: boolean,
  value: Type,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type QualifiedTypeIdentifier = {
  type: 'QualifiedTypeIdentifier',
  _QualifiedTypeIdentifier?: void,
  id: Identifier,
  qualification: Node,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type UnionTypeAnnotation = {
  type: 'UnionTypeAnnotation',
  _UnionTypeAnnotation?: void,
  types: Array<Type>,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type VoidTypeAnnotation = {
  type: 'VoidTypeAnnotation',
  _VoidTypeAnnotation?: void,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type JSXAttribute = {
  type: 'JSXAttribute',
  _JSXAttribute?: void,
  name: Node,
  value: ?Node,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type JSXClosingElement = {
  type: 'JSXClosingElement',
  _JSXClosingElement?: void,
  name: Node,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type JSXElement = {
  type: 'JSXElement',
  _JSXElement?: void,
  children: Array<Node>,
  closingElement: ?JSXClosingElement,
  openingElement: JSXOpeningElement,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type JSXEmptyExpression = {
  type: 'JSXEmptyExpression',
  _JSXEmptyExpression?: void,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type JSXExpressionContainer = {
  type: 'JSXExpressionContainer',
  _JSXExpressionContainer?: void,
  expression: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type JSXIdentifier = {
  type: 'JSXIdentifier',
  _JSXIdentifier?: void,
  name: string,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type JSXMemberExpression = {
  type: 'JSXMemberExpression',
  _JSXMemberExpression?: void,
  computed: boolean,
  object: Node,
  property: JSXIdentifier,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type JSXNamespacedName = {
  type: 'JSXNamespacedName',
  _JSXNamespacedName?: void,
  name: JSXIdentifier,
  namespace: JSXIdentifier,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type JSXOpeningElement = {
  type: 'JSXOpeningElement',
  _JSXOpeningElement?: void,
  attributes: Array<Node>,
  name: Array<Node>,
  selfClosing: boolean,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;

export type JSXSpreadAttribute = {
  type: 'JSXSpreadAttribute',
  _JSXSpreadAttribute?: void,
  argument: Expression,
  end: number,
  innerComments: ?Array<Comment>,
  leadingComments: ?Array<Comment>,
  loc: {
    end: {column: number, line: number***REMOVED***,
    start: {column: number, line: number***REMOVED***,
  ***REMOVED***,
  start: number,
  trailingComments: ?Array<Comment>,
***REMOVED***;
