/**
 * @fileoverview Rule to enforce a particular function style
 * @author Nicholas C. Zakas
 */
"use strict";

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

/** @type {import('../types').Rule.RuleModule***REMOVED*** */
module.exports = {
	meta: {
		type: "suggestion",

		defaultOptions: [
			"expression",
			{
				allowArrowFunctions: false,
				overrides: {***REMOVED***,
			***REMOVED***,
		],

		docs: {
			description:
				"Enforce the consistent use of either `function` declarations or expressions assigned to variables",
			recommended: false,
			frozen: true,
			url: "https://eslint.org/docs/latest/rules/func-style",
		***REMOVED***,

		schema: [
			{
				enum: ["declaration", "expression"],
			***REMOVED***,
			{
				type: "object",
				properties: {
					allowArrowFunctions: {
						type: "boolean",
					***REMOVED***,
					overrides: {
						type: "object",
						properties: {
							namedExports: {
								enum: ["declaration", "expression", "ignore"],
							***REMOVED***,
						***REMOVED***,
						additionalProperties: false,
					***REMOVED***,
				***REMOVED***,
				additionalProperties: false,
			***REMOVED***,
		],

		messages: {
			expression: "Expected a function expression.",
			declaration: "Expected a function declaration.",
		***REMOVED***,
	***REMOVED***,

	create(context) {
		const [style, { allowArrowFunctions, overrides ***REMOVED***] = context.options;
		const enforceDeclarations = style === "declaration";
		const { namedExports: exportFunctionStyle ***REMOVED*** = overrides;
		const stack = [];

		const nodesToCheck = {
			FunctionDeclaration(node) {
				stack.push(false);

				if (
					!enforceDeclarations &&
					node.parent.type !== "ExportDefaultDeclaration" &&
					(typeof exportFunctionStyle === "undefined" ||
						node.parent.type !== "ExportNamedDeclaration")
				) {
					context.report({ node, messageId: "expression" ***REMOVED***);
				***REMOVED***

				if (
					node.parent.type === "ExportNamedDeclaration" &&
					exportFunctionStyle === "expression"
				) {
					context.report({ node, messageId: "expression" ***REMOVED***);
				***REMOVED***
			***REMOVED***,
			"FunctionDeclaration:exit"() {
				stack.pop();
			***REMOVED***,

			FunctionExpression(node) {
				stack.push(false);

				if (
					enforceDeclarations &&
					node.parent.type === "VariableDeclarator" &&
					(typeof exportFunctionStyle === "undefined" ||
						node.parent.parent.parent.type !==
							"ExportNamedDeclaration")
				) {
					context.report({
						node: node.parent,
						messageId: "declaration",
					***REMOVED***);
				***REMOVED***

				if (
					node.parent.type === "VariableDeclarator" &&
					node.parent.parent.parent.type ===
						"ExportNamedDeclaration" &&
					exportFunctionStyle === "declaration"
				) {
					context.report({
						node: node.parent,
						messageId: "declaration",
					***REMOVED***);
				***REMOVED***
			***REMOVED***,
			"FunctionExpression:exit"() {
				stack.pop();
			***REMOVED***,

			"ThisExpression, Super"() {
				if (stack.length > 0) {
					stack[stack.length - 1] = true;
				***REMOVED***
			***REMOVED***,
		***REMOVED***;

		if (!allowArrowFunctions) {
			nodesToCheck.ArrowFunctionExpression = function () {
				stack.push(false);
			***REMOVED***;

			nodesToCheck["ArrowFunctionExpression:exit"] = function (node) {
				const hasThisOrSuperExpr = stack.pop();

				if (
					!hasThisOrSuperExpr &&
					node.parent.type === "VariableDeclarator"
				) {
					if (
						enforceDeclarations &&
						(typeof exportFunctionStyle === "undefined" ||
							node.parent.parent.parent.type !==
								"ExportNamedDeclaration")
					) {
						context.report({
							node: node.parent,
							messageId: "declaration",
						***REMOVED***);
					***REMOVED***

					if (
						node.parent.parent.parent.type ===
							"ExportNamedDeclaration" &&
						exportFunctionStyle === "declaration"
					) {
						context.report({
							node: node.parent,
							messageId: "declaration",
						***REMOVED***);
					***REMOVED***
				***REMOVED***
			***REMOVED***;
		***REMOVED***

		return nodesToCheck;
	***REMOVED***,
***REMOVED***;
