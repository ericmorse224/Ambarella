var globToRegexp = require("./index.js");
var assert = require("assert");

function assertMatch(glob, str, opts) {
  //console.log(glob, globToRegexp(glob, opts));
  assert.ok(globToRegexp(glob, opts).test(str));
***REMOVED***

function assertNotMatch(glob, str, opts) {
  //console.log(glob, globToRegexp(glob, opts));
  assert.equal(false, globToRegexp(glob, opts).test(str));
***REMOVED***

function test(globstar) {
  // Match everything
  assertMatch("*", "foo");
  assertMatch("*", "foo", { flags: 'g' ***REMOVED***);

  // Match the end
  assertMatch("f*", "foo");
  assertMatch("f*", "foo", { flags: 'g' ***REMOVED***);

  // Match the start
  assertMatch("*o", "foo");
  assertMatch("*o", "foo", { flags: 'g' ***REMOVED***);

  // Match the middle
  assertMatch("f*uck", "firetruck");
  assertMatch("f*uck", "firetruck", { flags: 'g' ***REMOVED***);

  // Don't match without Regexp 'g'
  assertNotMatch("uc", "firetruck");
  // Match anywhere with RegExp 'g'
  assertMatch("uc", "firetruck", { flags: 'g' ***REMOVED***);

  // Match zero characters
  assertMatch("f*uck", "fuck");
  assertMatch("f*uck", "fuck", { flags: 'g' ***REMOVED***);

  // More complex matches
  assertMatch("*.min.js", "http://example.com/jquery.min.js", {globstar: false***REMOVED***);
  assertMatch("*.min.*", "http://example.com/jquery.min.js", {globstar: false***REMOVED***);
  assertMatch("*/js/*.js", "http://example.com/js/jquery.min.js", {globstar: false***REMOVED***);

  // More complex matches with RegExp 'g' flag (complex regression)
  assertMatch("*.min.*", "http://example.com/jquery.min.js", { flags: 'g' ***REMOVED***);
  assertMatch("*.min.js", "http://example.com/jquery.min.js", { flags: 'g' ***REMOVED***);
  assertMatch("*/js/*.js", "http://example.com/js/jquery.min.js", { flags: 'g' ***REMOVED***);

  // Test string  "\\\\/$^+?.()=!|{***REMOVED***,[].*"  represents  <glob>\\/$^+?.()=!|{***REMOVED***,[].*</glob>
  // The equivalent regex is:  /^\\\/\$\^\+\?\.\(\)\=\!\|\{\***REMOVED***\,\[\]\..*$/
  // Both glob and regex match:  \/$^+?.()=!|{***REMOVED***,[].*
  var testStr = "\\\\/$^+?.()=!|{***REMOVED***,[].*";
  var targetStr = "\\/$^+?.()=!|{***REMOVED***,[].*";
  assertMatch(testStr, targetStr);
  assertMatch(testStr, targetStr, { flags: 'g' ***REMOVED***);

  // Equivalent matches without/with using RegExp 'g'
  assertNotMatch(".min.", "http://example.com/jquery.min.js");
  assertMatch("*.min.*", "http://example.com/jquery.min.js");
  assertMatch(".min.", "http://example.com/jquery.min.js", { flags: 'g' ***REMOVED***);

  assertNotMatch("http:", "http://example.com/jquery.min.js");
  assertMatch("http:*", "http://example.com/jquery.min.js");
  assertMatch("http:", "http://example.com/jquery.min.js", { flags: 'g' ***REMOVED***);

  assertNotMatch("min.js", "http://example.com/jquery.min.js");
  assertMatch("*.min.js", "http://example.com/jquery.min.js");
  assertMatch("min.js", "http://example.com/jquery.min.js", { flags: 'g' ***REMOVED***);

  // Match anywhere (globally) using RegExp 'g'
  assertMatch("min", "http://example.com/jquery.min.js", { flags: 'g' ***REMOVED***);
  assertMatch("/js/", "http://example.com/js/jquery.min.js", { flags: 'g' ***REMOVED***);

  assertNotMatch("/js*jq*.js", "http://example.com/js/jquery.min.js");
  assertMatch("/js*jq*.js", "http://example.com/js/jquery.min.js", { flags: 'g' ***REMOVED***);

  // Extended mode

  // ?: Match one character, no more and no less
  assertMatch("f?o", "foo", { extended: true ***REMOVED***);
  assertNotMatch("f?o", "fooo", { extended: true ***REMOVED***);
  assertNotMatch("f?oo", "foo", { extended: true ***REMOVED***);

  // ?: Match one character with RegExp 'g'
  assertMatch("f?o", "foo", { extended: true,  globstar: globstar, flags: 'g' ***REMOVED***);
  assertMatch("f?o", "fooo", { extended: true,  globstar: globstar, flags: 'g' ***REMOVED***);
  assertMatch("f?o?", "fooo", { extended: true,  globstar: globstar, flags: 'g' ***REMOVED***);
  assertNotMatch("?fo", "fooo", { extended: true,  globstar: globstar, flags: 'g' ***REMOVED***);
  assertNotMatch("f?oo", "foo", { extended: true,  globstar: globstar, flags: 'g' ***REMOVED***);
  assertNotMatch("foo?", "foo", { extended: true,  globstar: globstar, flags: 'g' ***REMOVED***);

  // []: Match a character range
  assertMatch("fo[oz]", "foo", { extended: true ***REMOVED***);
  assertMatch("fo[oz]", "foz", { extended: true ***REMOVED***);
  assertNotMatch("fo[oz]", "fog", { extended: true ***REMOVED***);

  // []: Match a character range and RegExp 'g' (regresion)
  assertMatch("fo[oz]", "foo", { extended: true,  globstar: globstar, flags: 'g' ***REMOVED***);
  assertMatch("fo[oz]", "foz", { extended: true,  globstar: globstar, flags: 'g' ***REMOVED***);
  assertNotMatch("fo[oz]", "fog", { extended: true,  globstar: globstar, flags: 'g' ***REMOVED***);

  // {***REMOVED***: Match a choice of different substrings
  assertMatch("foo{bar,baaz***REMOVED***", "foobaaz", { extended: true ***REMOVED***);
  assertMatch("foo{bar,baaz***REMOVED***", "foobar", { extended: true ***REMOVED***);
  assertNotMatch("foo{bar,baaz***REMOVED***", "foobuzz", { extended: true ***REMOVED***);
  assertMatch("foo{bar,b*z***REMOVED***", "foobuzz", { extended: true ***REMOVED***);

  // {***REMOVED***: Match a choice of different substrings and RegExp 'g' (regression)
  assertMatch("foo{bar,baaz***REMOVED***", "foobaaz", { extended: true,  globstar: globstar, flags: 'g' ***REMOVED***);
  assertMatch("foo{bar,baaz***REMOVED***", "foobar", { extended: true,  globstar: globstar, flags: 'g' ***REMOVED***);
  assertNotMatch("foo{bar,baaz***REMOVED***", "foobuzz", { extended: true,  globstar: globstar, flags: 'g' ***REMOVED***);
  assertMatch("foo{bar,b*z***REMOVED***", "foobuzz", { extended: true,  globstar: globstar, flags: 'g' ***REMOVED***);

  // More complex extended matches
  assertMatch("http://?o[oz].b*z.com/{*.js,*.html***REMOVED***",
              "http://foo.baaz.com/jquery.min.js",
              { extended: true ***REMOVED***);
  assertMatch("http://?o[oz].b*z.com/{*.js,*.html***REMOVED***",
              "http://moz.buzz.com/index.html",
              { extended: true ***REMOVED***);
  assertNotMatch("http://?o[oz].b*z.com/{*.js,*.html***REMOVED***",
                 "http://moz.buzz.com/index.htm",
                 { extended: true ***REMOVED***);
  assertNotMatch("http://?o[oz].b*z.com/{*.js,*.html***REMOVED***",
                 "http://moz.bar.com/index.html",
                 { extended: true ***REMOVED***);
  assertNotMatch("http://?o[oz].b*z.com/{*.js,*.html***REMOVED***",
                 "http://flozz.buzz.com/index.html",
                 { extended: true ***REMOVED***);

  // More complex extended matches and RegExp 'g' (regresion)
  assertMatch("http://?o[oz].b*z.com/{*.js,*.html***REMOVED***",
              "http://foo.baaz.com/jquery.min.js",
              { extended: true,  globstar: globstar, flags: 'g' ***REMOVED***);
  assertMatch("http://?o[oz].b*z.com/{*.js,*.html***REMOVED***",
              "http://moz.buzz.com/index.html",
              { extended: true,  globstar: globstar, flags: 'g' ***REMOVED***);
  assertNotMatch("http://?o[oz].b*z.com/{*.js,*.html***REMOVED***",
                 "http://moz.buzz.com/index.htm",
                 { extended: true,  globstar: globstar, flags: 'g' ***REMOVED***);
  assertNotMatch("http://?o[oz].b*z.com/{*.js,*.html***REMOVED***",
                 "http://moz.bar.com/index.html",
                 { extended: true,  globstar: globstar, flags: 'g' ***REMOVED***);
  assertNotMatch("http://?o[oz].b*z.com/{*.js,*.html***REMOVED***",
                 "http://flozz.buzz.com/index.html",
                 { extended: true,  globstar: globstar, flags: 'g' ***REMOVED***);

  // globstar
  assertMatch("http://foo.com/**/{*.js,*.html***REMOVED***",
              "http://foo.com/bar/jquery.min.js",
              { extended: true,  globstar: globstar, flags: 'g' ***REMOVED***);
  assertMatch("http://foo.com/**/{*.js,*.html***REMOVED***",
              "http://foo.com/bar/baz/jquery.min.js",
              { extended: true,  globstar: globstar, flags: 'g' ***REMOVED***);
  assertMatch("http://foo.com/**",
              "http://foo.com/bar/baz/jquery.min.js",
              { extended: true,  globstar: globstar, flags: 'g' ***REMOVED***);

  // Remaining special chars should still match themselves
  // Test string  "\\\\/$^+.()=!|,.*"  represents  <glob>\\/$^+.()=!|,.*</glob>
  // The equivalent regex is:  /^\\\/\$\^\+\.\(\)\=\!\|\,\..*$/
  // Both glob and regex match:  \/$^+.()=!|,.*
  var testExtStr = "\\\\/$^+.()=!|,.*";
  var targetExtStr = "\\/$^+.()=!|,.*";
  assertMatch(testExtStr, targetExtStr, { extended: true ***REMOVED***);
  assertMatch(testExtStr, targetExtStr, { extended: true,  globstar: globstar, flags: 'g' ***REMOVED***);
***REMOVED***

// regression
// globstar false
test(false)
// globstar true
test(true);

// globstar specific tests
assertMatch("/foo/*", "/foo/bar.txt", {globstar: true ***REMOVED***);
assertMatch("/foo/**", "/foo/baz.txt", {globstar: true ***REMOVED***);
assertMatch("/foo/**", "/foo/bar/baz.txt", {globstar: true ***REMOVED***);
assertMatch("/foo/*/*.txt", "/foo/bar/baz.txt", {globstar: true ***REMOVED***);
assertMatch("/foo/**/*.txt", "/foo/bar/baz.txt", {globstar: true ***REMOVED***);
assertMatch("/foo/**/*.txt", "/foo/bar/baz/qux.txt", {globstar: true ***REMOVED***);
assertMatch("/foo/**/bar.txt", "/foo/bar.txt", {globstar: true ***REMOVED***);
assertMatch("/foo/**/**/bar.txt", "/foo/bar.txt", {globstar: true ***REMOVED***);
assertMatch("/foo/**/*/baz.txt", "/foo/bar/baz.txt", {globstar: true ***REMOVED***);
assertMatch("/foo/**/*.txt", "/foo/bar.txt", {globstar: true ***REMOVED***);
assertMatch("/foo/**/**/*.txt", "/foo/bar.txt", {globstar: true ***REMOVED***);
assertMatch("/foo/**/*/*.txt", "/foo/bar/baz.txt", {globstar: true ***REMOVED***);
assertMatch("**/*.txt", "/foo/bar/baz/qux.txt", {globstar: true ***REMOVED***);
assertMatch("**/foo.txt", "foo.txt", {globstar: true ***REMOVED***);
assertMatch("**/*.txt", "foo.txt", {globstar: true ***REMOVED***);

assertNotMatch("/foo/*", "/foo/bar/baz.txt", {globstar: true ***REMOVED***);
assertNotMatch("/foo/*.txt", "/foo/bar/baz.txt", {globstar: true ***REMOVED***);
assertNotMatch("/foo/*/*.txt", "/foo/bar/baz/qux.txt", {globstar: true ***REMOVED***);
assertNotMatch("/foo/*/bar.txt", "/foo/bar.txt", {globstar: true ***REMOVED***);
assertNotMatch("/foo/*/*/baz.txt", "/foo/bar/baz.txt", {globstar: true ***REMOVED***);
assertNotMatch("/foo/**.txt", "/foo/bar/baz/qux.txt", {globstar: true ***REMOVED***);
assertNotMatch("/foo/bar**/*.txt", "/foo/bar/baz/qux.txt", {globstar: true ***REMOVED***);
assertNotMatch("/foo/bar**", "/foo/bar/baz.txt", {globstar: true ***REMOVED***);
assertNotMatch("**/.txt", "/foo/bar/baz/qux.txt", {globstar: true ***REMOVED***);
assertNotMatch("*/*.txt", "/foo/bar/baz/qux.txt", {globstar: true ***REMOVED***);
assertNotMatch("*/*.txt", "foo.txt", {globstar: true ***REMOVED***);

assertNotMatch("http://foo.com/*",
               "http://foo.com/bar/baz/jquery.min.js",
               { extended: true,  globstar: true ***REMOVED***);
assertNotMatch("http://foo.com/*",
               "http://foo.com/bar/baz/jquery.min.js",
               { globstar: true ***REMOVED***);

assertMatch("http://foo.com/*",
            "http://foo.com/bar/baz/jquery.min.js",
            { globstar: false ***REMOVED***);
assertMatch("http://foo.com/**",
            "http://foo.com/bar/baz/jquery.min.js",
            { globstar: true ***REMOVED***);

assertMatch("http://foo.com/*/*/jquery.min.js",
            "http://foo.com/bar/baz/jquery.min.js",
            { globstar: true ***REMOVED***);
assertMatch("http://foo.com/**/jquery.min.js",
            "http://foo.com/bar/baz/jquery.min.js",
            { globstar: true ***REMOVED***);
assertMatch("http://foo.com/*/*/jquery.min.js",
            "http://foo.com/bar/baz/jquery.min.js",
            { globstar: false ***REMOVED***);
assertMatch("http://foo.com/*/jquery.min.js",
            "http://foo.com/bar/baz/jquery.min.js",
            { globstar: false ***REMOVED***);
assertNotMatch("http://foo.com/*/jquery.min.js",
               "http://foo.com/bar/baz/jquery.min.js",
               { globstar: true ***REMOVED***);

console.log("Ok!");
