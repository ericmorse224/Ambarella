{{# def.definitions ***REMOVED******REMOVED***
{{# def.errors ***REMOVED******REMOVED***
{{# def.setupKeyword ***REMOVED******REMOVED***
{{# def.$data ***REMOVED******REMOVED***

{{
  var $rule = this
    , $definition = 'definition' + $lvl
    , $rDef = $rule.definition
    , $closingBraces = '';
  var $validate = $rDef.validate;
  var $compile, $inline, $macro, $ruleValidate, $validateCode;
***REMOVED******REMOVED***

{{? $isData && $rDef.$data ***REMOVED******REMOVED***
  {{
    $validateCode = 'keywordValidate' + $lvl;
    var $validateSchema = $rDef.validateSchema;
  ***REMOVED******REMOVED***
  var {{=$definition***REMOVED******REMOVED*** = RULES.custom['{{=$keyword***REMOVED******REMOVED***'].definition;
  var {{=$validateCode***REMOVED******REMOVED*** = {{=$definition***REMOVED******REMOVED***.validate;
{{??***REMOVED******REMOVED***
  {{
    $ruleValidate = it.useCustomRule($rule, $schema, it.schema, it);
    if (!$ruleValidate) return;
    $schemaValue = 'validate.schema' + $schemaPath;
    $validateCode = $ruleValidate.code;
    $compile = $rDef.compile;
    $inline = $rDef.inline;
    $macro = $rDef.macro;
  ***REMOVED******REMOVED***
{{?***REMOVED******REMOVED***

{{
  var $ruleErrs = $validateCode + '.errors'
    , $i = 'i' + $lvl
    , $ruleErr = 'ruleErr' + $lvl
    , $asyncKeyword = $rDef.async;

  if ($asyncKeyword && !it.async)
    throw new Error('async keyword in sync schema');
***REMOVED******REMOVED***


{{? !($inline || $macro) ***REMOVED******REMOVED***{{=$ruleErrs***REMOVED******REMOVED*** = null;{{?***REMOVED******REMOVED***
var {{=$errs***REMOVED******REMOVED*** = errors;
var {{=$valid***REMOVED******REMOVED***;

{{## def.callRuleValidate:
  {{=$validateCode***REMOVED******REMOVED***.call(
    {{? it.opts.passContext ***REMOVED******REMOVED***this{{??***REMOVED******REMOVED***self{{?***REMOVED******REMOVED***
    {{? $compile || $rDef.schema === false ***REMOVED******REMOVED***
      , {{=$data***REMOVED******REMOVED***
    {{??***REMOVED******REMOVED***
      , {{=$schemaValue***REMOVED******REMOVED***
      , {{=$data***REMOVED******REMOVED***
      , validate.schema{{=it.schemaPath***REMOVED******REMOVED***
    {{?***REMOVED******REMOVED***
    , {{# def.dataPath ***REMOVED******REMOVED***
    {{# def.passParentData ***REMOVED******REMOVED***
    , rootData
  )
#***REMOVED******REMOVED***

{{## def.extendErrors:_inline:
  for (var {{=$i***REMOVED******REMOVED***={{=$errs***REMOVED******REMOVED***; {{=$i***REMOVED******REMOVED***<errors; {{=$i***REMOVED******REMOVED***++) {
    var {{=$ruleErr***REMOVED******REMOVED*** = vErrors[{{=$i***REMOVED******REMOVED***];
    if ({{=$ruleErr***REMOVED******REMOVED***.dataPath === undefined)
      {{=$ruleErr***REMOVED******REMOVED***.dataPath = (dataPath || '') + {{= it.errorPath ***REMOVED******REMOVED***;
    {{# _inline ? 'if (\{\{=$ruleErr\***REMOVED***\***REMOVED***.schemaPath === undefined) {' : '' ***REMOVED******REMOVED***
      {{=$ruleErr***REMOVED******REMOVED***.schemaPath = "{{=$errSchemaPath***REMOVED******REMOVED***";
    {{# _inline ? '***REMOVED***' : '' ***REMOVED******REMOVED***
    {{? it.opts.verbose ***REMOVED******REMOVED***
      {{=$ruleErr***REMOVED******REMOVED***.schema = {{=$schemaValue***REMOVED******REMOVED***;
      {{=$ruleErr***REMOVED******REMOVED***.data = {{=$data***REMOVED******REMOVED***;
    {{?***REMOVED******REMOVED***
  ***REMOVED***
#***REMOVED******REMOVED***


{{? $isData && $rDef.$data ***REMOVED******REMOVED***
  {{ $closingBraces += '***REMOVED***'; ***REMOVED******REMOVED***
  if ({{=$schemaValue***REMOVED******REMOVED*** === undefined) {
    {{=$valid***REMOVED******REMOVED*** = true;
  ***REMOVED*** else {
  {{? $validateSchema ***REMOVED******REMOVED***
    {{ $closingBraces += '***REMOVED***'; ***REMOVED******REMOVED***
    {{=$valid***REMOVED******REMOVED*** = {{=$definition***REMOVED******REMOVED***.validateSchema({{=$schemaValue***REMOVED******REMOVED***);
    if ({{=$valid***REMOVED******REMOVED***) {
  {{?***REMOVED******REMOVED***
{{?***REMOVED******REMOVED***

{{? $inline ***REMOVED******REMOVED***
  {{? $rDef.statements ***REMOVED******REMOVED***
    {{= $ruleValidate.validate ***REMOVED******REMOVED***
  {{??***REMOVED******REMOVED***
    {{=$valid***REMOVED******REMOVED*** = {{= $ruleValidate.validate ***REMOVED******REMOVED***;
  {{?***REMOVED******REMOVED***
{{?? $macro ***REMOVED******REMOVED***
  {{# def.setupNextLevel ***REMOVED******REMOVED***
  {{
    $it.schema = $ruleValidate.validate;
    $it.schemaPath = '';
  ***REMOVED******REMOVED***
  {{# def.setCompositeRule ***REMOVED******REMOVED***
  {{ var $code = it.validate($it).replace(/validate\.schema/g, $validateCode); ***REMOVED******REMOVED***
  {{# def.resetCompositeRule ***REMOVED******REMOVED***
  {{= $code ***REMOVED******REMOVED***
{{??***REMOVED******REMOVED***
  {{# def.beginDefOut***REMOVED******REMOVED***
    {{# def.callRuleValidate ***REMOVED******REMOVED***
  {{# def.storeDefOut:def_callRuleValidate ***REMOVED******REMOVED***

  {{? $rDef.errors === false ***REMOVED******REMOVED***
    {{=$valid***REMOVED******REMOVED*** = {{? $asyncKeyword ***REMOVED******REMOVED***await {{?***REMOVED******REMOVED***{{= def_callRuleValidate ***REMOVED******REMOVED***;
  {{??***REMOVED******REMOVED***
    {{? $asyncKeyword ***REMOVED******REMOVED***
      {{ $ruleErrs = 'customErrors' + $lvl; ***REMOVED******REMOVED***
      var {{=$ruleErrs***REMOVED******REMOVED*** = null;
      try {
        {{=$valid***REMOVED******REMOVED*** = await {{= def_callRuleValidate ***REMOVED******REMOVED***;
      ***REMOVED*** catch (e) {
        {{=$valid***REMOVED******REMOVED*** = false;
        if (e instanceof ValidationError) {{=$ruleErrs***REMOVED******REMOVED*** = e.errors;
        else throw e;
      ***REMOVED***
    {{??***REMOVED******REMOVED***
      {{=$ruleErrs***REMOVED******REMOVED*** = null;
      {{=$valid***REMOVED******REMOVED*** = {{= def_callRuleValidate ***REMOVED******REMOVED***;
    {{?***REMOVED******REMOVED***
  {{?***REMOVED******REMOVED***
{{?***REMOVED******REMOVED***

{{? $rDef.modifying ***REMOVED******REMOVED***
  if ({{=$parentData***REMOVED******REMOVED***) {{=$data***REMOVED******REMOVED*** = {{=$parentData***REMOVED******REMOVED***[{{=$parentDataProperty***REMOVED******REMOVED***];
{{?***REMOVED******REMOVED***

{{= $closingBraces ***REMOVED******REMOVED***

{{## def.notValidationResult:
  {{? $rDef.valid === undefined ***REMOVED******REMOVED***
    !{{? $macro ***REMOVED******REMOVED***{{=$nextValid***REMOVED******REMOVED***{{??***REMOVED******REMOVED***{{=$valid***REMOVED******REMOVED***{{?***REMOVED******REMOVED***
  {{??***REMOVED******REMOVED***
    {{= !$rDef.valid ***REMOVED******REMOVED***
  {{?***REMOVED******REMOVED***
#***REMOVED******REMOVED***

{{? $rDef.valid ***REMOVED******REMOVED***
  {{? $breakOnError ***REMOVED******REMOVED*** if (true) { {{?***REMOVED******REMOVED***
{{??***REMOVED******REMOVED***
  if ({{# def.notValidationResult ***REMOVED******REMOVED***) {
    {{ $errorKeyword = $rule.keyword; ***REMOVED******REMOVED***
    {{# def.beginDefOut***REMOVED******REMOVED***
      {{# def.error:'custom' ***REMOVED******REMOVED***
    {{# def.storeDefOut:def_customError ***REMOVED******REMOVED***

    {{? $inline ***REMOVED******REMOVED***
      {{? $rDef.errors ***REMOVED******REMOVED***
        {{? $rDef.errors != 'full' ***REMOVED******REMOVED***
          {{# def.extendErrors:true ***REMOVED******REMOVED***
        {{?***REMOVED******REMOVED***
      {{??***REMOVED******REMOVED***
        {{? $rDef.errors === false***REMOVED******REMOVED***
          {{= def_customError ***REMOVED******REMOVED***
        {{??***REMOVED******REMOVED***
          if ({{=$errs***REMOVED******REMOVED*** == errors) {
            {{= def_customError ***REMOVED******REMOVED***
          ***REMOVED*** else {
            {{# def.extendErrors:true ***REMOVED******REMOVED***
          ***REMOVED***
        {{?***REMOVED******REMOVED***
      {{?***REMOVED******REMOVED***
    {{?? $macro ***REMOVED******REMOVED***
      {{# def.extraError:'custom' ***REMOVED******REMOVED***
    {{??***REMOVED******REMOVED***
      {{? $rDef.errors === false***REMOVED******REMOVED***
        {{= def_customError ***REMOVED******REMOVED***
      {{??***REMOVED******REMOVED***
        if (Array.isArray({{=$ruleErrs***REMOVED******REMOVED***)) {
          if (vErrors === null) vErrors = {{=$ruleErrs***REMOVED******REMOVED***;
          else vErrors = vErrors.concat({{=$ruleErrs***REMOVED******REMOVED***);
          errors = vErrors.length;
          {{# def.extendErrors:false ***REMOVED******REMOVED***
        ***REMOVED*** else {
          {{= def_customError ***REMOVED******REMOVED***
        ***REMOVED***
      {{?***REMOVED******REMOVED***
    {{?***REMOVED******REMOVED***

  ***REMOVED*** {{? $breakOnError ***REMOVED******REMOVED*** else { {{?***REMOVED******REMOVED***
{{?***REMOVED******REMOVED***
