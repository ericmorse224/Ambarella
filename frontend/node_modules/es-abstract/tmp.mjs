import { dirname, join ***REMOVED*** from 'path';
import { readFileSync ***REMOVED*** from 'fs';
import hasTypes from 'hastypes';
import semver from 'semver';
import { execSync ***REMOVED*** from 'child_process';
import { createRequire ***REMOVED*** from 'module';
import { pathToFileURL ***REMOVED*** from 'url';

const packageJSONpath = join(process.cwd(), 'package.json');

const require = createRequire(pathToFileURL(packageJSONpath));

const { dependencies, devDependencies ***REMOVED*** = JSON.parse(readFileSync(packageJSONpath));

const typesPackagesPresent = Object.entries(devDependencies).filter(([name]) => name.startsWith('@types/'));

console.log(`Found ${typesPackagesPresent.length***REMOVED*** \`@types/\` packages...`);

const typesPackagesToRemove = Promise.all(typesPackagesPresent.filter(([x]) => x !== '@types/node').map(async ([name, version]) => {
	const actualName = name.replace('@types/', '');
	let actualVersion;
	try {
		actualVersion = JSON.parse(readFileSync(join(process.cwd(), 'node_modules', actualName, 'package.json'))).version;
	***REMOVED*** catch (e) {
		console.error(e, join(actualName, '/package.json'));
		return [name, , true];
	***REMOVED***
	const expectedVersion = `${semver.major(actualVersion)***REMOVED***.${semver.minor(actualVersion)***REMOVED***`;
	const specifier = `${actualName***REMOVED***@${expectedVersion***REMOVED***`;

	return [name, expectedVersion, await hasTypes(specifier)];
***REMOVED***)).then((x) => x.filter(([, , hasTypes]) => hasTypes === true));// .then((x) => x.map(([name, expectedVersion]) => [name, expectedVersion]));

typesPackagesToRemove.then((x) => {
	console.log(`Found ${x.length***REMOVED*** \`@types/\` packages to remove...`);
	console.log(x);
	if (x.length > 0) {
		execSync(`npm uninstall --save ${x.map(([name, version]) => `"${name***REMOVED***@${version***REMOVED***"`).join(' ')***REMOVED***`, { cwd: process.cwd() ***REMOVED***);
	***REMOVED***
***REMOVED***);

// const typesPackagesToAdd = Promise.all(
// 	Object.entries(dependencies)
// 		.filter(([name]) => !typesPackagesPresent.includes(`@types/${name***REMOVED***`))
// 		.map(async ([name, version]) => {
// 			const actualVersion = require(`${name***REMOVED***/package.json`).version;
// 			const expectedVersion = `${semver.major(actualVersion)***REMOVED***.${semver.minor(actualVersion)***REMOVED***`;
// 			console.log(specifier);
// 		***REMOVED***)
// )
