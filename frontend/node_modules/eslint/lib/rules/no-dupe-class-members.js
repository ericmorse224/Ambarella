/**
 * @fileoverview A rule to disallow duplicate name in class members.
 * @author Toru Nagashima
 */

"use strict";

const astUtils = require("./utils/ast-utils");

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = {
    meta: {
        type: "problem",

        docs: {
            description: "disallow duplicate class members",
            category: "ECMAScript 6",
            recommended: true,
            url: "https://eslint.org/docs/rules/no-dupe-class-members"
        ***REMOVED***,

        schema: [],

        messages: {
            unexpected: "Duplicate name '{{name***REMOVED******REMOVED***'."
        ***REMOVED***
    ***REMOVED***,

    create(context) {
        let stack = [];

        /**
         * Gets state of a given member name.
         * @param {string***REMOVED*** name A name of a member.
         * @param {boolean***REMOVED*** isStatic A flag which specifies that is a static member.
         * @returns {Object***REMOVED*** A state of a given member name.
         *   - retv.init {boolean***REMOVED*** A flag which shows the name is declared as normal member.
         *   - retv.get {boolean***REMOVED*** A flag which shows the name is declared as getter.
         *   - retv.set {boolean***REMOVED*** A flag which shows the name is declared as setter.
         */
        function getState(name, isStatic) {
            const stateMap = stack[stack.length - 1];
            const key = `$${name***REMOVED***`; // to avoid "__proto__".

            if (!stateMap[key]) {
                stateMap[key] = {
                    nonStatic: { init: false, get: false, set: false ***REMOVED***,
                    static: { init: false, get: false, set: false ***REMOVED***
                ***REMOVED***;
            ***REMOVED***

            return stateMap[key][isStatic ? "static" : "nonStatic"];
        ***REMOVED***

        return {

            // Initializes the stack of state of member declarations.
            Program() {
                stack = [];
            ***REMOVED***,

            // Initializes state of member declarations for the class.
            ClassBody() {
                stack.push(Object.create(null));
            ***REMOVED***,

            // Disposes the state for the class.
            "ClassBody:exit"() {
                stack.pop();
            ***REMOVED***,

            // Reports the node if its name has been declared already.
            MethodDefinition(node) {
                const name = astUtils.getStaticPropertyName(node);

                if (name === null || node.kind === "constructor") {
                    return;
                ***REMOVED***

                const state = getState(name, node.static);
                let isDuplicate = false;

                if (node.kind === "get") {
                    isDuplicate = (state.init || state.get);
                    state.get = true;
                ***REMOVED*** else if (node.kind === "set") {
                    isDuplicate = (state.init || state.set);
                    state.set = true;
                ***REMOVED*** else {
                    isDuplicate = (state.init || state.get || state.set);
                    state.init = true;
                ***REMOVED***

                if (isDuplicate) {
                    context.report({ node, messageId: "unexpected", data: { name ***REMOVED*** ***REMOVED***);
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***;
    ***REMOVED***
***REMOVED***;
