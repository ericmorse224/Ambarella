/**
 * @fileoverview Enforce that elements with onClick handlers must be focusable.
 * @author Ethan Cohen
 */

// -----------------------------------------------------------------------------
// Requirements
// -----------------------------------------------------------------------------

import includes from 'array-includes';
import { RuleTester ***REMOVED*** from 'eslint';
import {
  eventHandlers,
  eventHandlersByType,
***REMOVED*** from 'jsx-ast-utils';
import { configs ***REMOVED*** from '../../../src/index';
import parserOptionsMapper from '../../__util__/parserOptionsMapper';
import parsers from '../../__util__/helpers/parsers';
import rule from '../../../src/rules/interactive-supports-focus';
import ruleOptionsMapperFactory from '../../__util__/ruleOptionsMapperFactory';

// -----------------------------------------------------------------------------
// Tests
// -----------------------------------------------------------------------------

const ruleTester = new RuleTester();

function template(strings, ...keys) {
  return (...values) => keys.reduce(
    (acc, k, i) => acc + (values[k] || '') + strings[i + 1],
    strings[0],
  );
***REMOVED***

const ruleName = 'interactive-supports-focus';
const type = 'JSXOpeningElement';
const codeTemplate = template`<${0***REMOVED*** role="${1***REMOVED***" ${2***REMOVED***={() => void 0***REMOVED*** />`;
const tabindexTemplate = template`<${0***REMOVED*** role="${1***REMOVED***" ${2***REMOVED***={() => void 0***REMOVED*** tabIndex="0" />`;
const tabbableTemplate = template`Elements with the '${0***REMOVED***' interactive role must be tabbable.`;
const focusableTemplate = template`Elements with the '${0***REMOVED***' interactive role must be focusable.`;

const componentsSettings = {
  'jsx-a11y': {
    components: {
      Div: 'div',
    ***REMOVED***,
  ***REMOVED***,
***REMOVED***;

const buttonError = { message: tabbableTemplate('button'), type ***REMOVED***;

const recommendedOptions = configs.recommended.rules[`jsx-a11y/${ruleName***REMOVED***`][1] || {***REMOVED***;

const strictOptions = configs.strict.rules[`jsx-a11y/${ruleName***REMOVED***`][1] || {***REMOVED***;

const alwaysValid = [
  { code: '<div />' ***REMOVED***,
  { code: '<div aria-hidden onClick={() => void 0***REMOVED*** />' ***REMOVED***,
  { code: '<div aria-hidden={true == true***REMOVED*** onClick={() => void 0***REMOVED*** />' ***REMOVED***,
  { code: '<div aria-hidden={true === true***REMOVED*** onClick={() => void 0***REMOVED*** />' ***REMOVED***,
  { code: '<div aria-hidden={hidden !== false***REMOVED*** onClick={() => void 0***REMOVED*** />' ***REMOVED***,
  { code: '<div aria-hidden={hidden != false***REMOVED*** onClick={() => void 0***REMOVED*** />' ***REMOVED***,
  { code: '<div aria-hidden={1 < 2***REMOVED*** onClick={() => void 0***REMOVED*** />' ***REMOVED***,
  { code: '<div aria-hidden={1 <= 2***REMOVED*** onClick={() => void 0***REMOVED*** />' ***REMOVED***,
  { code: '<div aria-hidden={2 > 1***REMOVED*** onClick={() => void 0***REMOVED*** />' ***REMOVED***,
  { code: '<div aria-hidden={2 >= 1***REMOVED*** onClick={() => void 0***REMOVED*** />' ***REMOVED***,
  { code: '<div onClick={() => void 0***REMOVED*** />;' ***REMOVED***,
  { code: '<div onClick={() => void 0***REMOVED*** tabIndex={undefined***REMOVED*** />;' ***REMOVED***,
  { code: '<div onClick={() => void 0***REMOVED*** tabIndex="bad" />;' ***REMOVED***,
  { code: '<div onClick={() => void 0***REMOVED*** role={undefined***REMOVED*** />;' ***REMOVED***,
  { code: '<div role="section" onClick={() => void 0***REMOVED*** />' ***REMOVED***,
  { code: '<div onClick={() => void 0***REMOVED*** aria-hidden={false***REMOVED*** />;' ***REMOVED***,
  { code: '<div onClick={() => void 0***REMOVED*** {...props***REMOVED*** />;' ***REMOVED***,
  { code: '<input type="text" onClick={() => void 0***REMOVED*** />' ***REMOVED***,
  { code: '<input type="hidden" onClick={() => void 0***REMOVED*** tabIndex="-1" />' ***REMOVED***,
  { code: '<input type="hidden" onClick={() => void 0***REMOVED*** tabIndex={-1***REMOVED*** />' ***REMOVED***,
  { code: '<input onClick={() => void 0***REMOVED*** />' ***REMOVED***,
  { code: '<input onClick={() => void 0***REMOVED*** role="combobox" />' ***REMOVED***,
  { code: '<button onClick={() => void 0***REMOVED*** className="foo" />' ***REMOVED***,
  { code: '<option onClick={() => void 0***REMOVED*** className="foo" />' ***REMOVED***,
  { code: '<select onClick={() => void 0***REMOVED*** className="foo" />' ***REMOVED***,
  { code: '<area href="#" onClick={() => void 0***REMOVED*** className="foo" />' ***REMOVED***,
  { code: '<area onClick={() => void 0***REMOVED*** className="foo" />' ***REMOVED***,
  { code: '<summary onClick={() => void 0***REMOVED*** />' ***REMOVED***,
  { code: '<textarea onClick={() => void 0***REMOVED*** className="foo" />' ***REMOVED***,
  { code: '<a onClick="showNextPage();">Next page</a>' ***REMOVED***,
  { code: '<a onClick="showNextPage();" tabIndex={undefined***REMOVED***>Next page</a>' ***REMOVED***,
  { code: '<a onClick="showNextPage();" tabIndex="bad">Next page</a>' ***REMOVED***,
  { code: '<a onClick={() => void 0***REMOVED*** />' ***REMOVED***,
  { code: '<a tabIndex="0" onClick={() => void 0***REMOVED*** />' ***REMOVED***,
  { code: '<a tabIndex={dynamicTabIndex***REMOVED*** onClick={() => void 0***REMOVED*** />' ***REMOVED***,
  { code: '<a tabIndex={0***REMOVED*** onClick={() => void 0***REMOVED*** />' ***REMOVED***,
  { code: '<a role="button" href="#" onClick={() => void 0***REMOVED*** />' ***REMOVED***,
  { code: '<a onClick={() => void 0***REMOVED*** href="http://x.y.z" />' ***REMOVED***,
  { code: '<a onClick={() => void 0***REMOVED*** href="http://x.y.z" tabIndex="0" />' ***REMOVED***,
  { code: '<a onClick={() => void 0***REMOVED*** href="http://x.y.z" tabIndex={0***REMOVED*** />' ***REMOVED***,
  { code: '<a onClick={() => void 0***REMOVED*** href="http://x.y.z" role="button" />' ***REMOVED***,
  { code: '<TestComponent onClick={doFoo***REMOVED*** />' ***REMOVED***,
  { code: '<input onClick={() => void 0***REMOVED*** type="hidden" />;' ***REMOVED***,
  { code: '<span onClick="submitForm();">Submit</span>' ***REMOVED***,
  { code: '<span onClick="submitForm();" tabIndex={undefined***REMOVED***>Submit</span>' ***REMOVED***,
  { code: '<span onClick="submitForm();" tabIndex="bad">Submit</span>' ***REMOVED***,
  { code: '<span onClick="doSomething();" tabIndex="0">Click me!</span>' ***REMOVED***,
  { code: '<span onClick="doSomething();" tabIndex={0***REMOVED***>Click me!</span>' ***REMOVED***,
  { code: '<span onClick="doSomething();" tabIndex="-1">Click me too!</span>' ***REMOVED***,
  {
    code: '<a href="javascript:void(0);" onClick="doSomething();">Click ALL the things!</a>',
  ***REMOVED***,
  { code: '<section onClick={() => void 0***REMOVED*** />;' ***REMOVED***,
  { code: '<main onClick={() => void 0***REMOVED*** />;' ***REMOVED***,
  { code: '<article onClick={() => void 0***REMOVED*** />;' ***REMOVED***,
  { code: '<header onClick={() => void 0***REMOVED*** />;' ***REMOVED***,
  { code: '<footer onClick={() => void 0***REMOVED*** />;' ***REMOVED***,
  { code: '<div role="button" tabIndex="0" onClick={() => void 0***REMOVED*** />' ***REMOVED***,
  { code: '<div role="checkbox" tabIndex="0" onClick={() => void 0***REMOVED*** />' ***REMOVED***,
  { code: '<div role="link" tabIndex="0" onClick={() => void 0***REMOVED*** />' ***REMOVED***,
  { code: '<div role="menuitem" tabIndex="0" onClick={() => void 0***REMOVED*** />' ***REMOVED***,
  { code: '<div role="menuitemcheckbox" tabIndex="0" onClick={() => void 0***REMOVED*** />' ***REMOVED***,
  { code: '<div role="menuitemradio" tabIndex="0" onClick={() => void 0***REMOVED*** />' ***REMOVED***,
  { code: '<div role="option" tabIndex="0" onClick={() => void 0***REMOVED*** />' ***REMOVED***,
  { code: '<div role="radio" tabIndex="0" onClick={() => void 0***REMOVED*** />' ***REMOVED***,
  { code: '<div role="spinbutton" tabIndex="0" onClick={() => void 0***REMOVED*** />' ***REMOVED***,
  { code: '<div role="switch" tabIndex="0" onClick={() => void 0***REMOVED*** />' ***REMOVED***,
  { code: '<div role="tablist" tabIndex="0" onClick={() => void 0***REMOVED*** />' ***REMOVED***,
  { code: '<div role="tab" tabIndex="0" onClick={() => void 0***REMOVED*** />' ***REMOVED***,
  { code: '<div role="textbox" tabIndex="0" onClick={() => void 0***REMOVED*** />' ***REMOVED***,
  { code: '<div role="textbox" aria-disabled="true" onClick={() => void 0***REMOVED*** />' ***REMOVED***,
  { code: '<Foo.Bar onClick={() => void 0***REMOVED*** aria-hidden={false***REMOVED*** />;' ***REMOVED***,
  { code: '<Input onClick={() => void 0***REMOVED*** type="hidden" />;' ***REMOVED***,
  { code: '<Div onClick={() => void 0***REMOVED*** role="button" tabIndex="0" />', settings: componentsSettings ***REMOVED***,
];

const neverValid = [
  { code: '<Div onClick={() => void 0***REMOVED*** role="button" />', errors: [buttonError], settings: componentsSettings ***REMOVED***,
];

const interactiveRoles = [
  'button',
  'checkbox',
  'link',
  'gridcell',
  'menuitem',
  'menuitemcheckbox',
  'menuitemradio',
  'option',
  'radio',
  'searchbox',
  'slider',
  'spinbutton',
  'switch',
  'tab',
  'textbox',
  'treeitem',
];

const recommendedRoles = [
  'button',
  'checkbox',
  'link',
  'searchbox',
  'spinbutton',
  'switch',
  'textbox',
];

const strictRoles = [
  'button',
  'checkbox',
  'link',
  'progressbar',
  'searchbox',
  'slider',
  'spinbutton',
  'switch',
  'textbox',
];

const staticElements = [
  'div',
];

const triggeringHandlers = [
  ...eventHandlersByType.mouse,
  ...eventHandlersByType.keyboard,
];

const passReducer = (roles, handlers, messageTemplate) => (
  staticElements.reduce((elementAcc, element) => (
    elementAcc.concat(roles.reduce((roleAcc, role) => (
      roleAcc.concat(handlers.map((handler) => ({
        code: messageTemplate(element, role, handler),
      ***REMOVED***)))
    ), []))
  ), [])
);

const failReducer = (roles, handlers, messageTemplate) => (
  staticElements.reduce((elementAcc, element) => (
    elementAcc.concat(roles.reduce((roleAcc, role) => (
      roleAcc.concat(handlers.map((handler) => ({
        code: codeTemplate(element, role, handler),
        errors: [{
          type,
          message: messageTemplate(role),
        ***REMOVED***],
      ***REMOVED***)))
    ), []))
  ), [])
);

ruleTester.run(`${ruleName***REMOVED***:recommended`, rule, {
  valid: parsers.all([].concat(
    ...alwaysValid,
    ...passReducer(
      interactiveRoles,
      eventHandlers.filter((handler) => !includes(triggeringHandlers, handler)),
      codeTemplate,
    ),
    ...passReducer(
      interactiveRoles.filter((role) => !includes(recommendedRoles, role)),
      eventHandlers.filter((handler) => includes(triggeringHandlers, handler)),
      tabindexTemplate,
    ),
  ))
    .map(ruleOptionsMapperFactory(recommendedOptions))
    .map(parserOptionsMapper),
  invalid: parsers.all([].concat(
    ...neverValid,
    ...failReducer(recommendedRoles, triggeringHandlers, tabbableTemplate),
    ...failReducer(
      interactiveRoles.filter((role) => !includes(recommendedRoles, role)),
      triggeringHandlers,
      focusableTemplate,
    ),
  ))
    .map(ruleOptionsMapperFactory(recommendedOptions))
    .map(parserOptionsMapper),
***REMOVED***);

ruleTester.run(`${ruleName***REMOVED***:strict`, rule, {
  valid: parsers.all([].concat(
    ...alwaysValid,
    ...passReducer(
      interactiveRoles,
      eventHandlers.filter((handler) => !includes(triggeringHandlers, handler)),
      codeTemplate,
    ),
    ...passReducer(
      interactiveRoles.filter((role) => !includes(strictRoles, role)),
      eventHandlers.filter((handler) => includes(triggeringHandlers, handler)),
      tabindexTemplate,
    ),
  ))
    .map(ruleOptionsMapperFactory(strictOptions))
    .map(parserOptionsMapper),
  invalid: parsers.all([].concat(
    ...neverValid,
    ...failReducer(strictRoles, triggeringHandlers, tabbableTemplate),
    ...failReducer(
      interactiveRoles.filter((role) => !includes(strictRoles, role)),
      triggeringHandlers,
      focusableTemplate,
    ),
  ))
    .map(ruleOptionsMapperFactory(strictOptions))
    .map(parserOptionsMapper),
***REMOVED***);
