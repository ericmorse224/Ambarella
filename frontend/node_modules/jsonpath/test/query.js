var assert = require('assert');
var jp = require('../');

var data = require('./data/store.json');

suite('query', function() {

  test('first-level member', function() {
    var results = jp.nodes(data, '$.store');
    assert.deepEqual(results, [ { path: ['$', 'store'], value: data.store ***REMOVED*** ]);
  ***REMOVED***);

  test('authors of all books in the store', function() {
    var results = jp.nodes(data, '$.store.book[*].author');
    assert.deepEqual(results, [
      { path: ['$', 'store', 'book', 0, 'author'], value: 'Nigel Rees' ***REMOVED***,
      { path: ['$', 'store', 'book', 1, 'author'], value: 'Evelyn Waugh' ***REMOVED***,
      { path: ['$', 'store', 'book', 2, 'author'], value: 'Herman Melville' ***REMOVED***,
      { path: ['$', 'store', 'book', 3, 'author'], value: 'J. R. R. Tolkien' ***REMOVED***
    ]);
  ***REMOVED***);

  test('all authors', function() {
    var results = jp.nodes(data, '$..author');
    assert.deepEqual(results, [
      { path: ['$', 'store', 'book', 0, 'author'], value: 'Nigel Rees' ***REMOVED***,
      { path: ['$', 'store', 'book', 1, 'author'], value: 'Evelyn Waugh' ***REMOVED***,
      { path: ['$', 'store', 'book', 2, 'author'], value: 'Herman Melville' ***REMOVED***,
      { path: ['$', 'store', 'book', 3, 'author'], value: 'J. R. R. Tolkien' ***REMOVED***
    ]);
  ***REMOVED***);

  test('all authors via subscript descendant string literal', function() {
    var results = jp.nodes(data, "$..['author']");
    assert.deepEqual(results, [
      { path: ['$', 'store', 'book', 0, 'author'], value: 'Nigel Rees' ***REMOVED***,
      { path: ['$', 'store', 'book', 1, 'author'], value: 'Evelyn Waugh' ***REMOVED***,
      { path: ['$', 'store', 'book', 2, 'author'], value: 'Herman Melville' ***REMOVED***,
      { path: ['$', 'store', 'book', 3, 'author'], value: 'J. R. R. Tolkien' ***REMOVED***
    ]);
  ***REMOVED***);

  test('all things in store', function() {
    var results = jp.nodes(data, '$.store.*');
    assert.deepEqual(results, [
      { path: ['$', 'store', 'book'], value: data.store.book ***REMOVED***,
      { path: ['$', 'store', 'bicycle'], value: data.store.bicycle ***REMOVED***
    ]);
  ***REMOVED***);

  test('price of everything in the store', function() {
    var results = jp.nodes(data, '$.store..price');
    assert.deepEqual(results, [
      { path: ['$', 'store', 'book', 0, 'price'], value: 8.95 ***REMOVED***,
      { path: ['$', 'store', 'book', 1, 'price'], value: 12.99 ***REMOVED***,
      { path: ['$', 'store', 'book', 2, 'price'], value: 8.99 ***REMOVED***,
      { path: ['$', 'store', 'book', 3, 'price'], value: 22.99 ***REMOVED***,
      { path: ['$', 'store', 'bicycle', 'price'], value: 19.95 ***REMOVED***
    ]);
  ***REMOVED***);

  test('last book in order via expression', function() {
    var results = jp.nodes(data, '$..book[(@.length-1)]');
    assert.deepEqual(results, [ { path: ['$', 'store', 'book', 3], value: data.store.book[3] ***REMOVED***]);
  ***REMOVED***);

  test('first two books via union', function() {
    var results = jp.nodes(data, '$..book[0,1]');
    assert.deepEqual(results, [
      { path: ['$', 'store', 'book', 0], value: data.store.book[0] ***REMOVED***,
      { path: ['$', 'store', 'book', 1], value: data.store.book[1] ***REMOVED***
    ]);
  ***REMOVED***);

  test('first two books via slice', function() {
    var results = jp.nodes(data, '$..book[0:2]');
    assert.deepEqual(results, [
      { path: ['$', 'store', 'book', 0], value: data.store.book[0] ***REMOVED***,
      { path: ['$', 'store', 'book', 1], value: data.store.book[1] ***REMOVED***
    ]);
  ***REMOVED***);

  test('filter all books with isbn number', function() {
    var results = jp.nodes(data, '$..book[?(@.isbn)]');
    assert.deepEqual(results, [
      { path: ['$', 'store', 'book', 2], value: data.store.book[2] ***REMOVED***,
      { path: ['$', 'store', 'book', 3], value: data.store.book[3] ***REMOVED***
    ]);
  ***REMOVED***);

  test('filter all books with a price less than 10', function() {
    var results = jp.nodes(data, '$..book[?(@.price<10)]');
    assert.deepEqual(results, [
      { path: ['$', 'store', 'book', 0], value: data.store.book[0] ***REMOVED***,
      { path: ['$', 'store', 'book', 2], value: data.store.book[2] ***REMOVED***
    ]);
  ***REMOVED***);

  test('first ten of all elements', function() {
    var results = jp.nodes(data, '$..*', 10);
    assert.deepEqual(results, [
      { path: [ '$', 'store' ], value: data.store ***REMOVED***,
      { path: [ '$', 'store', 'book' ], value: data.store.book ***REMOVED***,
      { path: [ '$', 'store', 'bicycle' ], value: data.store.bicycle ***REMOVED***,
      { path: [ '$', 'store', 'book', 0 ], value: data.store.book[0] ***REMOVED***,
      { path: [ '$', 'store', 'book', 1 ], value: data.store.book[1] ***REMOVED***,
      { path: [ '$', 'store', 'book', 2 ], value: data.store.book[2] ***REMOVED***,
      { path: [ '$', 'store', 'book', 3 ], value: data.store.book[3] ***REMOVED***,
      { path: [ '$', 'store', 'book', 0, 'category' ], value: 'reference' ***REMOVED***,
      { path: [ '$', 'store', 'book', 0, 'author' ], value: 'Nigel Rees' ***REMOVED***,
      { path: [ '$', 'store', 'book', 0, 'title' ], value: 'Sayings of the Century' ***REMOVED***
    ])
  ***REMOVED***);

  test('all elements', function() {
    var results = jp.nodes(data, '$..*');

    assert.deepEqual(results, [
      { path: [ '$', 'store' ], value: data.store ***REMOVED***,
      { path: [ '$', 'store', 'book' ], value: data.store.book ***REMOVED***,
      { path: [ '$', 'store', 'bicycle' ], value: data.store.bicycle ***REMOVED***,
      { path: [ '$', 'store', 'book', 0 ], value: data.store.book[0] ***REMOVED***,
      { path: [ '$', 'store', 'book', 1 ], value: data.store.book[1] ***REMOVED***,
      { path: [ '$', 'store', 'book', 2 ], value: data.store.book[2] ***REMOVED***,
      { path: [ '$', 'store', 'book', 3 ], value: data.store.book[3] ***REMOVED***,
      { path: [ '$', 'store', 'book', 0, 'category' ], value: 'reference' ***REMOVED***,
      { path: [ '$', 'store', 'book', 0, 'author' ], value: 'Nigel Rees' ***REMOVED***,
      { path: [ '$', 'store', 'book', 0, 'title' ], value: 'Sayings of the Century' ***REMOVED***,
      { path: [ '$', 'store', 'book', 0, 'price' ], value: 8.95 ***REMOVED***,
      { path: [ '$', 'store', 'book', 1, 'category' ], value: 'fiction' ***REMOVED***,
      { path: [ '$', 'store', 'book', 1, 'author' ], value: 'Evelyn Waugh' ***REMOVED***,
      { path: [ '$', 'store', 'book', 1, 'title' ], value: 'Sword of Honour' ***REMOVED***,
      { path: [ '$', 'store', 'book', 1, 'price' ], value: 12.99 ***REMOVED***,
      { path: [ '$', 'store', 'book', 2, 'category' ], value: 'fiction' ***REMOVED***,
      { path: [ '$', 'store', 'book', 2, 'author' ], value: 'Herman Melville' ***REMOVED***,
      { path: [ '$', 'store', 'book', 2, 'title' ], value: 'Moby Dick' ***REMOVED***,
      { path: [ '$', 'store', 'book', 2, 'isbn' ], value: '0-553-21311-3' ***REMOVED***,
      { path: [ '$', 'store', 'book', 2, 'price' ], value: 8.99 ***REMOVED***,
      { path: [ '$', 'store', 'book', 3, 'category' ], value: 'fiction' ***REMOVED***,
      { path: [ '$', 'store', 'book', 3, 'author' ], value: 'J. R. R. Tolkien' ***REMOVED***,
      { path: [ '$', 'store', 'book', 3, 'title' ], value: 'The Lord of the Rings' ***REMOVED***,
      { path: [ '$', 'store', 'book', 3, 'isbn' ], value: '0-395-19395-8' ***REMOVED***,
      { path: [ '$', 'store', 'book', 3, 'price' ], value: 22.99 ***REMOVED***,
      { path: [ '$', 'store', 'bicycle', 'color' ], value: 'red' ***REMOVED***,
      { path: [ '$', 'store', 'bicycle', 'price' ], value: 19.95 ***REMOVED***
    ]);
  ***REMOVED***);

  test('all elements via subscript wildcard', function() {
    var results = jp.nodes(data, '$..*');
    assert.deepEqual(jp.nodes(data, '$..[*]'), jp.nodes(data, '$..*'));
  ***REMOVED***);

  test('object subscript wildcard', function() {
    var results = jp.query(data, '$.store[*]');
    assert.deepEqual(results, [ data.store.book, data.store.bicycle ]);
  ***REMOVED***);

  test('no match returns empty array', function() {
    var results = jp.nodes(data, '$..bookz');
    assert.deepEqual(results, []);
  ***REMOVED***);

  test('member numeric literal gets first element', function() {
    var results = jp.nodes(data, '$.store.book.0');
    assert.deepEqual(results, [ { path: [ '$', 'store', 'book', 0 ], value: data.store.book[0] ***REMOVED*** ]);
  ***REMOVED***);

  test('member numeric literal matches string-numeric key', function() {
    var data = { authors: { '1': 'Herman Melville', '2': 'J. R. R. Tolkien' ***REMOVED*** ***REMOVED***;
    var results = jp.nodes(data, '$.authors.1');
    assert.deepEqual(results, [ { path: [ '$', 'authors', 1 ], value: 'Herman Melville' ***REMOVED*** ]);
  ***REMOVED***);

  test('descendant numeric literal gets first element', function() {
    var results = jp.nodes(data, '$.store.book..0');
    assert.deepEqual(results, [ { path: [ '$', 'store', 'book', 0 ], value: data.store.book[0] ***REMOVED*** ]);
  ***REMOVED***);

  test('root element gets us original obj', function() {
    var results = jp.nodes(data, '$');
    assert.deepEqual(results, [ { path: ['$'], value: data ***REMOVED*** ]);
  ***REMOVED***);

  test('subscript double-quoted string', function() {
    var results = jp.nodes(data, '$["store"]');
    assert.deepEqual(results, [ { path: ['$', 'store'], value: data.store***REMOVED*** ]);
  ***REMOVED***);

  test('subscript single-quoted string', function() {
    var results = jp.nodes(data, "$['store']");
    assert.deepEqual(results, [ { path: ['$', 'store'], value: data.store***REMOVED*** ]);
  ***REMOVED***);

  test('leading member component', function() {
    var results = jp.nodes(data, "store");
    assert.deepEqual(results, [ { path: ['$', 'store'], value: data.store***REMOVED*** ]);
  ***REMOVED***);

  test('union of three array slices', function() {
    var results = jp.query(data, "$.store.book[0:1,1:2,2:3]");
    assert.deepEqual(results, data.store.book.slice(0,3));
  ***REMOVED***);

  test('slice with step > 1', function() {
    var results = jp.query(data, "$.store.book[0:4:2]");
    assert.deepEqual(results, [ data.store.book[0], data.store.book[2]]);
  ***REMOVED***);

  test('union of subscript string literal keys', function() {
    var results = jp.nodes(data, "$.store['book','bicycle']");
    assert.deepEqual(results, [
      { path: ['$', 'store', 'book'], value: data.store.book ***REMOVED***,
      { path: ['$', 'store', 'bicycle'], value: data.store.bicycle ***REMOVED***,
    ]);
  ***REMOVED***);

  test('union of subscript string literal three keys', function() {
    var results = jp.nodes(data, "$.store.book[0]['title','author','price']");
    assert.deepEqual(results, [
      { path: ['$', 'store', 'book', 0, 'title'], value: data.store.book[0].title ***REMOVED***,
      { path: ['$', 'store', 'book', 0, 'author'], value: data.store.book[0].author ***REMOVED***,
      { path: ['$', 'store', 'book', 0, 'price'], value: data.store.book[0].price ***REMOVED***
    ]);
  ***REMOVED***);

  test('union of subscript integer three keys followed by member-child-identifier', function() {
    var results = jp.nodes(data, "$.store.book[1,2,3]['title']");
    assert.deepEqual(results, [
      { path: ['$', 'store', 'book', 1, 'title'], value: data.store.book[1].title ***REMOVED***,
      { path: ['$', 'store', 'book', 2, 'title'], value: data.store.book[2].title ***REMOVED***,
      { path: ['$', 'store', 'book', 3, 'title'], value: data.store.book[3].title ***REMOVED***
    ]);
  ***REMOVED***);

  test('union of subscript integer three keys followed by union of subscript string literal three keys', function() {
    var results = jp.nodes(data, "$.store.book[0,1,2,3]['title','author','price']");
    assert.deepEqual(results, [
      { path: ['$', 'store', 'book', 0, 'title'], value: data.store.book[0].title ***REMOVED***,
      { path: ['$', 'store', 'book', 0, 'author'], value: data.store.book[0].author ***REMOVED***,
      { path: ['$', 'store', 'book', 0, 'price'], value: data.store.book[0].price ***REMOVED***,
      { path: ['$', 'store', 'book', 1, 'title'], value: data.store.book[1].title ***REMOVED***,
      { path: ['$', 'store', 'book', 1, 'author'], value: data.store.book[1].author ***REMOVED***,
      { path: ['$', 'store', 'book', 1, 'price'], value: data.store.book[1].price ***REMOVED***,
      { path: ['$', 'store', 'book', 2, 'title'], value: data.store.book[2].title ***REMOVED***,
      { path: ['$', 'store', 'book', 2, 'author'], value: data.store.book[2].author ***REMOVED***,
      { path: ['$', 'store', 'book', 2, 'price'], value: data.store.book[2].price ***REMOVED***,
      { path: ['$', 'store', 'book', 3, 'title'], value: data.store.book[3].title ***REMOVED***,
      { path: ['$', 'store', 'book', 3, 'author'], value: data.store.book[3].author ***REMOVED***,
      { path: ['$', 'store', 'book', 3, 'price'], value: data.store.book[3].price ***REMOVED***
    ]);
  ***REMOVED***);
  
  test('union of subscript integer four keys, including an inexistent one, followed by union of subscript string literal three keys', function() {
    var results = jp.nodes(data, "$.store.book[0,1,2,3,151]['title','author','price']");
    assert.deepEqual(results, [
      { path: ['$', 'store', 'book', 0, 'title'], value: data.store.book[0].title ***REMOVED***,
      { path: ['$', 'store', 'book', 0, 'author'], value: data.store.book[0].author ***REMOVED***,
      { path: ['$', 'store', 'book', 0, 'price'], value: data.store.book[0].price ***REMOVED***,
      { path: ['$', 'store', 'book', 1, 'title'], value: data.store.book[1].title ***REMOVED***,
      { path: ['$', 'store', 'book', 1, 'author'], value: data.store.book[1].author ***REMOVED***,
      { path: ['$', 'store', 'book', 1, 'price'], value: data.store.book[1].price ***REMOVED***,
      { path: ['$', 'store', 'book', 2, 'title'], value: data.store.book[2].title ***REMOVED***,
      { path: ['$', 'store', 'book', 2, 'author'], value: data.store.book[2].author ***REMOVED***,
      { path: ['$', 'store', 'book', 2, 'price'], value: data.store.book[2].price ***REMOVED***,
      { path: ['$', 'store', 'book', 3, 'title'], value: data.store.book[3].title ***REMOVED***,
      { path: ['$', 'store', 'book', 3, 'author'], value: data.store.book[3].author ***REMOVED***,
      { path: ['$', 'store', 'book', 3, 'price'], value: data.store.book[3].price ***REMOVED***
    ]);
  ***REMOVED***);
  
  test('union of subscript integer three keys followed by union of subscript string literal three keys, followed by inexistent literal key', function() {
    var results = jp.nodes(data, "$.store.book[0,1,2,3]['title','author','price','fruit']");
    assert.deepEqual(results, [
      { path: ['$', 'store', 'book', 0, 'title'], value: data.store.book[0].title ***REMOVED***,
      { path: ['$', 'store', 'book', 0, 'author'], value: data.store.book[0].author ***REMOVED***,
      { path: ['$', 'store', 'book', 0, 'price'], value: data.store.book[0].price ***REMOVED***,
      { path: ['$', 'store', 'book', 1, 'title'], value: data.store.book[1].title ***REMOVED***,
      { path: ['$', 'store', 'book', 1, 'author'], value: data.store.book[1].author ***REMOVED***,
      { path: ['$', 'store', 'book', 1, 'price'], value: data.store.book[1].price ***REMOVED***,
      { path: ['$', 'store', 'book', 2, 'title'], value: data.store.book[2].title ***REMOVED***,
      { path: ['$', 'store', 'book', 2, 'author'], value: data.store.book[2].author ***REMOVED***,
      { path: ['$', 'store', 'book', 2, 'price'], value: data.store.book[2].price ***REMOVED***,
      { path: ['$', 'store', 'book', 3, 'title'], value: data.store.book[3].title ***REMOVED***,
      { path: ['$', 'store', 'book', 3, 'author'], value: data.store.book[3].author ***REMOVED***,
      { path: ['$', 'store', 'book', 3, 'price'], value: data.store.book[3].price ***REMOVED***
    ]);
  ***REMOVED***);

  test('union of subscript 4 array slices followed by union of subscript string literal three keys', function() {
    var results = jp.nodes(data, "$.store.book[0:1,1:2,2:3,3:4]['title','author','price']");
    assert.deepEqual(results, [
      { path: ['$', 'store', 'book', 0, 'title'], value: data.store.book[0].title ***REMOVED***,
      { path: ['$', 'store', 'book', 0, 'author'], value: data.store.book[0].author ***REMOVED***,
      { path: ['$', 'store', 'book', 0, 'price'], value: data.store.book[0].price ***REMOVED***,
      { path: ['$', 'store', 'book', 1, 'title'], value: data.store.book[1].title ***REMOVED***,
      { path: ['$', 'store', 'book', 1, 'author'], value: data.store.book[1].author ***REMOVED***,
      { path: ['$', 'store', 'book', 1, 'price'], value: data.store.book[1].price ***REMOVED***,
      { path: ['$', 'store', 'book', 2, 'title'], value: data.store.book[2].title ***REMOVED***,
      { path: ['$', 'store', 'book', 2, 'author'], value: data.store.book[2].author ***REMOVED***,
      { path: ['$', 'store', 'book', 2, 'price'], value: data.store.book[2].price ***REMOVED***,
      { path: ['$', 'store', 'book', 3, 'title'], value: data.store.book[3].title ***REMOVED***,
      { path: ['$', 'store', 'book', 3, 'author'], value: data.store.book[3].author ***REMOVED***,
      { path: ['$', 'store', 'book', 3, 'price'], value: data.store.book[3].price ***REMOVED***
    ]);
  ***REMOVED***);


  test('nested parentheses eval', function() {
    var pathExpression = '$..book[?( @.price && (@.price + 20 || false) )]'
    var results = jp.query(data, pathExpression);
    assert.deepEqual(results, data.store.book);
  ***REMOVED***);

  test('array indexes from 0 to 100', function() {
    var data = [];
    for (var i = 0; i <= 100; ++i)
      data[i] = Math.random();

    for (var i = 0; i <= 100; ++i) {
      var results = jp.query(data, '$[' + i.toString() +  ']');
      assert.deepEqual(results, [data[i]]);
    ***REMOVED***
  ***REMOVED***);

  test('descendant subscript numeric literal', function() {
    var data = [ 0, [ 1, 2, 3 ], [ 4, 5, 6 ] ];
    var results = jp.query(data, '$..[0]');
    assert.deepEqual(results, [ 0, 1, 4 ]);
  ***REMOVED***);

  test('descendant subscript numeric literal', function() {
    var data = [ 0, 1, [ 2, 3, 4 ], [ 5, 6, 7, [ 8, 9 , 10 ] ] ];
    var results = jp.query(data, '$..[0,1]');
    assert.deepEqual(results, [ 0, 1, 2, 3, 5, 6, 8, 9 ]);
  ***REMOVED***);

  test('throws for no input', function() {
    assert.throws(function() { jp.query() ***REMOVED***, /needs to be an object/);
  ***REMOVED***);

  test('throws for bad input', function() {
    assert.throws(function() { jp.query("string", "string") ***REMOVED***, /needs to be an object/);
  ***REMOVED***);

  test('throws for bad input', function() {
    assert.throws(function() { jp.query({***REMOVED***, null) ***REMOVED***, /we need a path/);
  ***REMOVED***);

  test('throws for bad input', function() {
    assert.throws(function() { jp.query({***REMOVED***, 42) ***REMOVED***, /we need a path/);
  ***REMOVED***);

  test('union on objects', function() {
    assert.deepEqual(jp.query({a: 1, b: 2, c: null***REMOVED***, '$..["a","b","c","d"]'), [1, 2, null]);
  ***REMOVED***);

***REMOVED***);

