import type {
  CodeKeywordDefinition,
  ErrorObject,
  KeywordErrorDefinition,
  AnySchema,
***REMOVED*** from "../../types"
import type {SchemaObjCxt***REMOVED*** from "../../compile"
import type {KeywordCxt***REMOVED*** from "../../compile/validate"
import {_, str, not, Name***REMOVED*** from "../../compile/codegen"
import {alwaysValidSchema, checkStrictMode***REMOVED*** from "../../compile/util"

export type IfKeywordError = ErrorObject<"if", {failingKeyword: string***REMOVED***, AnySchema>

const error: KeywordErrorDefinition = {
  message: ({params***REMOVED***) => str`must match "${params.ifClause***REMOVED***" schema`,
  params: ({params***REMOVED***) => _`{failingKeyword: ${params.ifClause***REMOVED******REMOVED***`,
***REMOVED***

const def: CodeKeywordDefinition = {
  keyword: "if",
  schemaType: ["object", "boolean"],
  trackErrors: true,
  error,
  code(cxt: KeywordCxt) {
    const {gen, parentSchema, it***REMOVED*** = cxt
    if (parentSchema.then === undefined && parentSchema.else === undefined) {
      checkStrictMode(it, '"if" without "then" and "else" is ignored')
    ***REMOVED***
    const hasThen = hasSchema(it, "then")
    const hasElse = hasSchema(it, "else")
    if (!hasThen && !hasElse) return

    const valid = gen.let("valid", true)
    const schValid = gen.name("_valid")
    validateIf()
    cxt.reset()

    if (hasThen && hasElse) {
      const ifClause = gen.let("ifClause")
      cxt.setParams({ifClause***REMOVED***)
      gen.if(schValid, validateClause("then", ifClause), validateClause("else", ifClause))
    ***REMOVED*** else if (hasThen) {
      gen.if(schValid, validateClause("then"))
    ***REMOVED*** else {
      gen.if(not(schValid), validateClause("else"))
    ***REMOVED***

    cxt.pass(valid, () => cxt.error(true))

    function validateIf(): void {
      const schCxt = cxt.subschema(
        {
          keyword: "if",
          compositeRule: true,
          createErrors: false,
          allErrors: false,
        ***REMOVED***,
        schValid
      )
      cxt.mergeEvaluated(schCxt)
    ***REMOVED***

    function validateClause(keyword: string, ifClause?: Name): () => void {
      return () => {
        const schCxt = cxt.subschema({keyword***REMOVED***, schValid)
        gen.assign(valid, schValid)
        cxt.mergeValidEvaluated(schCxt, valid)
        if (ifClause) gen.assign(ifClause, _`${keyword***REMOVED***`)
        else cxt.setParams({ifClause: keyword***REMOVED***)
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***,
***REMOVED***

function hasSchema(it: SchemaObjCxt, keyword: string): boolean {
  const schema = it.schema[keyword]
  return schema !== undefined && !alwaysValidSchema(it, schema)
***REMOVED***

export default def
