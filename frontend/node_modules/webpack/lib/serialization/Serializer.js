/*
	MIT License http://www.opensource.org/licenses/mit-license.php
*/

"use strict";

/**
 * @template T, K, C
 * @typedef {import("./SerializerMiddleware")<T, K, C>***REMOVED*** SerializerMiddleware
 */

/**
 * @template DeserializedValue
 * @template SerializedValue
 * @template Context
 */
class Serializer {
	/**
	 * @param {SerializerMiddleware<EXPECTED_ANY, EXPECTED_ANY, EXPECTED_ANY>[]***REMOVED*** middlewares serializer middlewares
	 * @param {Context=***REMOVED*** context context
	 */
	constructor(middlewares, context) {
		this.serializeMiddlewares = middlewares.slice();
		this.deserializeMiddlewares = middlewares.slice().reverse();
		this.context = context;
	***REMOVED***

	/**
	 * @template ExtendedContext
	 * @param {DeserializedValue | Promise<DeserializedValue>***REMOVED*** obj object
	 * @param {Context & ExtendedContext***REMOVED*** context context object
	 * @returns {Promise<SerializedValue>***REMOVED*** result
	 */
	serialize(obj, context) {
		const ctx = { ...context, ...this.context ***REMOVED***;
		let current = obj;
		for (const middleware of this.serializeMiddlewares) {
			if (
				current &&
				typeof (/** @type {Promise<DeserializedValue>***REMOVED*** */ (current).then) ===
					"function"
			) {
				current =
					/** @type {Promise<DeserializedValue>***REMOVED*** */
					(current).then(data => data && middleware.serialize(data, ctx));
			***REMOVED*** else if (current) {
				try {
					current = middleware.serialize(current, ctx);
				***REMOVED*** catch (err) {
					current = Promise.reject(err);
				***REMOVED***
			***REMOVED*** else break;
		***REMOVED***
		return /** @type {Promise<SerializedValue>***REMOVED*** */ (current);
	***REMOVED***

	/**
	 * @template ExtendedContext
	 * @param {SerializedValue | Promise<SerializedValue>***REMOVED*** value value
	 * @param {Context & ExtendedContext***REMOVED*** context object
	 * @returns {Promise<DeserializedValue>***REMOVED*** result
	 */
	deserialize(value, context) {
		const ctx = { ...context, ...this.context ***REMOVED***;
		let current = value;
		for (const middleware of this.deserializeMiddlewares) {
			current =
				current &&
				typeof (/** @type {Promise<SerializedValue>***REMOVED*** */ (current).then) ===
					"function"
					? /** @type {Promise<SerializedValue>***REMOVED*** */ (current).then(data =>
							middleware.deserialize(data, ctx)
						)
					: middleware.deserialize(current, ctx);
		***REMOVED***
		return /** @type {Promise<DeserializedValue>***REMOVED*** */ (current);
	***REMOVED***
***REMOVED***

module.exports = Serializer;
