/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const EntryDependency = require("./dependencies/EntryDependency");

/** @typedef {import("./Compiler")***REMOVED*** Compiler */
/** @typedef {import("./Entrypoint").EntryOptions***REMOVED*** EntryOptions */

const PLUGIN_NAME = "EntryPlugin";

class EntryPlugin {
	/**
	 * An entry plugin which will handle creation of the EntryDependency
	 * @param {string***REMOVED*** context context path
	 * @param {string***REMOVED*** entry entry path
	 * @param {EntryOptions | string=***REMOVED*** options entry options (passing a string is deprecated)
	 */
	constructor(context, entry, options) {
		this.context = context;
		this.entry = entry;
		this.options = options || "";
	***REMOVED***

	/**
	 * Apply the plugin
	 * @param {Compiler***REMOVED*** compiler the compiler instance
	 * @returns {void***REMOVED***
	 */
	apply(compiler) {
		compiler.hooks.compilation.tap(
			PLUGIN_NAME,
			(compilation, { normalModuleFactory ***REMOVED***) => {
				compilation.dependencyFactories.set(
					EntryDependency,
					normalModuleFactory
				);
			***REMOVED***
		);

		const { entry, options, context ***REMOVED*** = this;
		const dep = EntryPlugin.createDependency(entry, options);

		compiler.hooks.make.tapAsync(PLUGIN_NAME, (compilation, callback) => {
			compilation.addEntry(context, dep, options, err => {
				callback(err);
			***REMOVED***);
		***REMOVED***);
	***REMOVED***

	/**
	 * @param {string***REMOVED*** entry entry request
	 * @param {EntryOptions | string***REMOVED*** options entry options (passing string is deprecated)
	 * @returns {EntryDependency***REMOVED*** the dependency
	 */
	static createDependency(entry, options) {
		const dep = new EntryDependency(entry);
		// TODO webpack 6 remove string option
		dep.loc = {
			name:
				typeof options === "object"
					? /** @type {string***REMOVED*** */ (options.name)
					: options
		***REMOVED***;
		return dep;
	***REMOVED***
***REMOVED***

module.exports = EntryPlugin;
