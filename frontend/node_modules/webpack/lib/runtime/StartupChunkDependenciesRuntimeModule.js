/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const RuntimeGlobals = require("../RuntimeGlobals");
const RuntimeModule = require("../RuntimeModule");
const Template = require("../Template");

/** @typedef {import("../Chunk")***REMOVED*** Chunk */
/** @typedef {import("../ChunkGraph")***REMOVED*** ChunkGraph */
/** @typedef {import("../Compilation")***REMOVED*** Compilation */

class StartupChunkDependenciesRuntimeModule extends RuntimeModule {
	/**
	 * @param {boolean***REMOVED*** asyncChunkLoading use async chunk loading
	 */
	constructor(asyncChunkLoading) {
		super("startup chunk dependencies", RuntimeModule.STAGE_TRIGGER);
		this.asyncChunkLoading = asyncChunkLoading;
	***REMOVED***

	/**
	 * @returns {string | null***REMOVED*** runtime code
	 */
	generate() {
		const chunkGraph = /** @type {ChunkGraph***REMOVED*** */ (this.chunkGraph);
		const chunk = /** @type {Chunk***REMOVED*** */ (this.chunk);
		const chunkIds = Array.from(
			chunkGraph.getChunkEntryDependentChunksIterable(chunk)
		).map(chunk => chunk.id);
		const compilation = /** @type {Compilation***REMOVED*** */ (this.compilation);
		const { runtimeTemplate ***REMOVED*** = compilation;
		return Template.asString([
			`var next = ${RuntimeGlobals.startup***REMOVED***;`,
			`${RuntimeGlobals.startup***REMOVED*** = ${runtimeTemplate.basicFunction(
				"",
				!this.asyncChunkLoading
					? chunkIds
							.map(
								id => `${RuntimeGlobals.ensureChunk***REMOVED***(${JSON.stringify(id)***REMOVED***);`
							)
							.concat("return next();")
					: chunkIds.length === 1
						? `return ${RuntimeGlobals.ensureChunk***REMOVED***(${JSON.stringify(
								chunkIds[0]
							)***REMOVED***).then(next);`
						: chunkIds.length > 2
							? [
									// using map is shorter for 3 or more chunks
									`return Promise.all(${JSON.stringify(chunkIds)***REMOVED***.map(${
										RuntimeGlobals.ensureChunk
									***REMOVED***, ${RuntimeGlobals.require***REMOVED***)).then(next);`
								]
							: [
									// calling ensureChunk directly is shorter for 0 - 2 chunks
									"return Promise.all([",
									Template.indent(
										chunkIds
											.map(
												id =>
													`${RuntimeGlobals.ensureChunk***REMOVED***(${JSON.stringify(id)***REMOVED***)`
											)
											.join(",\n")
									),
									"]).then(next);"
								]
			)***REMOVED***;`
		]);
	***REMOVED***
***REMOVED***

module.exports = StartupChunkDependenciesRuntimeModule;
