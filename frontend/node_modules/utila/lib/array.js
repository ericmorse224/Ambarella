// Generated by CoffeeScript 1.6.3
var array;

module.exports = array = {
  /*
  	Tries to turn anything into an array.
  */

  from: function(r) {
    return Array.prototype.slice.call(r);
  ***REMOVED***,
  /*
  	Clone of an array. Properties will be shallow copies.
  */

  simpleClone: function(a) {
    return a.slice(0);
  ***REMOVED***,
  shallowEqual: function(a1, a2) {
    var i, val, _i, _len;
    if (!(Array.isArray(a1) && Array.isArray(a2) && a1.length === a2.length)) {
      return false;
    ***REMOVED***
    for (i = _i = 0, _len = a1.length; _i < _len; i = ++_i) {
      val = a1[i];
      if (a2[i] !== val) {
        return false;
      ***REMOVED***
    ***REMOVED***
    return true;
  ***REMOVED***,
  pluck: function(a, i) {
    var index, value, _i, _len;
    if (a.length < 1) {
      return a;
    ***REMOVED***
    for (index = _i = 0, _len = a.length; _i < _len; index = ++_i) {
      value = a[index];
      if (index > i) {
        a[index - 1] = a[index];
      ***REMOVED***
    ***REMOVED***
    a.length = a.length - 1;
    return a;
  ***REMOVED***,
  pluckItem: function(a, item) {
    var index, removed, value, _i, _len;
    if (a.length < 1) {
      return a;
    ***REMOVED***
    removed = 0;
    for (index = _i = 0, _len = a.length; _i < _len; index = ++_i) {
      value = a[index];
      if (value === item) {
        removed++;
        continue;
      ***REMOVED***
      if (removed !== 0) {
        a[index - removed] = a[index];
      ***REMOVED***
    ***REMOVED***
    if (removed > 0) {
      a.length = a.length - removed;
    ***REMOVED***
    return a;
  ***REMOVED***,
  pluckOneItem: function(a, item) {
    var index, reached, value, _i, _len;
    if (a.length < 1) {
      return a;
    ***REMOVED***
    reached = false;
    for (index = _i = 0, _len = a.length; _i < _len; index = ++_i) {
      value = a[index];
      if (!reached) {
        if (value === item) {
          reached = true;
          continue;
        ***REMOVED***
      ***REMOVED*** else {
        a[index - 1] = a[index];
      ***REMOVED***
    ***REMOVED***
    if (reached) {
      a.length = a.length - 1;
    ***REMOVED***
    return a;
  ***REMOVED***,
  pluckByCallback: function(a, cb) {
    var index, removed, value, _i, _len;
    if (a.length < 1) {
      return a;
    ***REMOVED***
    removed = 0;
    for (index = _i = 0, _len = a.length; _i < _len; index = ++_i) {
      value = a[index];
      if (cb(value, index)) {
        removed++;
        continue;
      ***REMOVED***
      if (removed !== 0) {
        a[index - removed] = a[index];
      ***REMOVED***
    ***REMOVED***
    if (removed > 0) {
      a.length = a.length - removed;
    ***REMOVED***
    return a;
  ***REMOVED***,
  pluckMultiple: function(array, indexesToRemove) {
    var i, removedSoFar, _i, _len;
    if (array.length < 1) {
      return array;
    ***REMOVED***
    removedSoFar = 0;
    indexesToRemove.sort();
    for (_i = 0, _len = indexesToRemove.length; _i < _len; _i++) {
      i = indexesToRemove[_i];
      this.pluck(array, i - removedSoFar);
      removedSoFar++;
    ***REMOVED***
    return array;
  ***REMOVED***,
  injectByCallback: function(a, toInject, shouldInject) {
    var i, len, val, valA, valB, _i, _len;
    valA = null;
    valB = null;
    len = a.length;
    if (len < 1) {
      a.push(toInject);
      return a;
    ***REMOVED***
    for (i = _i = 0, _len = a.length; _i < _len; i = ++_i) {
      val = a[i];
      valA = valB;
      valB = val;
      if (shouldInject(valA, valB, toInject)) {
        return a.splice(i, 0, toInject);
      ***REMOVED***
    ***REMOVED***
    a.push(toInject);
    return a;
  ***REMOVED***,
  injectInIndex: function(a, index, toInject) {
    var i, len, toPut, toPutNext;
    len = a.length;
    i = index;
    if (len < 1) {
      a.push(toInject);
      return a;
    ***REMOVED***
    toPut = toInject;
    toPutNext = null;
    for(; i <= len; i++){

			toPutNext = a[i];

			a[i] = toPut;

			toPut = toPutNext;

		***REMOVED***;
    return null;
  ***REMOVED***
***REMOVED***;
