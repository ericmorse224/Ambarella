/**
 * @fileoverview Rule to flag use constant conditions
 * @author Christian Schulz <http://rndm.de>
 */

"use strict";

const { isConstant ***REMOVED*** = require("./utils/ast-utils");

//------------------------------------------------------------------------------
// Helpers
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

/** @type {import('../types').Rule.RuleModule***REMOVED*** */
module.exports = {
	meta: {
		type: "problem",

		defaultOptions: [{ checkLoops: "allExceptWhileTrue" ***REMOVED***],

		docs: {
			description: "Disallow constant expressions in conditions",
			recommended: true,
			url: "https://eslint.org/docs/latest/rules/no-constant-condition",
		***REMOVED***,

		schema: [
			{
				type: "object",
				properties: {
					checkLoops: {
						enum: [
							"all",
							"allExceptWhileTrue",
							"none",
							true,
							false,
						],
					***REMOVED***,
				***REMOVED***,
				additionalProperties: false,
			***REMOVED***,
		],

		messages: {
			unexpected: "Unexpected constant condition.",
		***REMOVED***,
	***REMOVED***,

	create(context) {
		const loopSetStack = [];
		const sourceCode = context.sourceCode;
		let [{ checkLoops ***REMOVED***] = context.options;

		if (checkLoops === true) {
			checkLoops = "all";
		***REMOVED*** else if (checkLoops === false) {
			checkLoops = "none";
		***REMOVED***

		let loopsInCurrentScope = new Set();

		//--------------------------------------------------------------------------
		// Helpers
		//--------------------------------------------------------------------------

		/**
		 * Tracks when the given node contains a constant condition.
		 * @param {ASTNode***REMOVED*** node The AST node to check.
		 * @returns {void***REMOVED***
		 * @private
		 */
		function trackConstantConditionLoop(node) {
			if (
				node.test &&
				isConstant(sourceCode.getScope(node), node.test, true)
			) {
				loopsInCurrentScope.add(node);
			***REMOVED***
		***REMOVED***

		/**
		 * Reports when the set contains the given constant condition node
		 * @param {ASTNode***REMOVED*** node The AST node to check.
		 * @returns {void***REMOVED***
		 * @private
		 */
		function checkConstantConditionLoopInSet(node) {
			if (loopsInCurrentScope.has(node)) {
				loopsInCurrentScope.delete(node);
				context.report({ node: node.test, messageId: "unexpected" ***REMOVED***);
			***REMOVED***
		***REMOVED***

		/**
		 * Reports when the given node contains a constant condition.
		 * @param {ASTNode***REMOVED*** node The AST node to check.
		 * @returns {void***REMOVED***
		 * @private
		 */
		function reportIfConstant(node) {
			if (
				node.test &&
				isConstant(sourceCode.getScope(node), node.test, true)
			) {
				context.report({ node: node.test, messageId: "unexpected" ***REMOVED***);
			***REMOVED***
		***REMOVED***

		/**
		 * Stores current set of constant loops in loopSetStack temporarily
		 * and uses a new set to track constant loops
		 * @returns {void***REMOVED***
		 * @private
		 */
		function enterFunction() {
			loopSetStack.push(loopsInCurrentScope);
			loopsInCurrentScope = new Set();
		***REMOVED***

		/**
		 * Reports when the set still contains stored constant conditions
		 * @returns {void***REMOVED***
		 * @private
		 */
		function exitFunction() {
			loopsInCurrentScope = loopSetStack.pop();
		***REMOVED***

		/**
		 * Checks node when checkLoops option is enabled
		 * @param {ASTNode***REMOVED*** node The AST node to check.
		 * @returns {void***REMOVED***
		 * @private
		 */
		function checkLoop(node) {
			if (checkLoops === "all" || checkLoops === "allExceptWhileTrue") {
				trackConstantConditionLoop(node);
			***REMOVED***
		***REMOVED***

		//--------------------------------------------------------------------------
		// Public
		//--------------------------------------------------------------------------

		return {
			ConditionalExpression: reportIfConstant,
			IfStatement: reportIfConstant,
			WhileStatement(node) {
				if (
					node.test.type === "Literal" &&
					node.test.value === true &&
					checkLoops === "allExceptWhileTrue"
				) {
					return;
				***REMOVED***

				checkLoop(node);
			***REMOVED***,
			"WhileStatement:exit": checkConstantConditionLoopInSet,
			DoWhileStatement: checkLoop,
			"DoWhileStatement:exit": checkConstantConditionLoopInSet,
			ForStatement: checkLoop,
			"ForStatement > .test": node => checkLoop(node.parent),
			"ForStatement:exit": checkConstantConditionLoopInSet,
			FunctionDeclaration: enterFunction,
			"FunctionDeclaration:exit": exitFunction,
			FunctionExpression: enterFunction,
			"FunctionExpression:exit": exitFunction,
			YieldExpression: () => loopsInCurrentScope.clear(),
		***REMOVED***;
	***REMOVED***,
***REMOVED***;
