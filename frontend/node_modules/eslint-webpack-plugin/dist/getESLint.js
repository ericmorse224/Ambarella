"use strict";

const {
  cpus
***REMOVED*** = require('os');

const {
  Worker: JestWorker
***REMOVED*** = require('jest-worker');

const {
  getESLintOptions
***REMOVED*** = require('./options');

const {
  jsonStringifyReplacerSortKeys
***REMOVED*** = require('./utils');
/** @type {{[key: string]: any***REMOVED******REMOVED*** */


const cache = {***REMOVED***;
/** @typedef {import('eslint').ESLint***REMOVED*** ESLint */

/** @typedef {import('eslint').ESLint.LintResult***REMOVED*** LintResult */

/** @typedef {import('./options').Options***REMOVED*** Options */

/** @typedef {() => Promise<void>***REMOVED*** AsyncTask */

/** @typedef {(files: string|string[]) => Promise<LintResult[]>***REMOVED*** LintTask */

/** @typedef {{threads: number, ESLint: ESLint, eslint: ESLint, lintFiles: LintTask, cleanup: AsyncTask***REMOVED******REMOVED*** Linter */

/** @typedef {JestWorker & {lintFiles: LintTask***REMOVED******REMOVED*** Worker */

/**
 * @param {Options***REMOVED*** options
 * @returns {Linter***REMOVED***
 */

function loadESLint(options) {
  const {
    eslintPath
  ***REMOVED*** = options;

  const {
    ESLint
  ***REMOVED*** = require(eslintPath || 'eslint'); // Filter out loader options before passing the options to ESLint.


  const eslint = new ESLint(getESLintOptions(options));
  return {
    threads: 1,
    ESLint,
    eslint,
    lintFiles: async files => {
      const results = await eslint.lintFiles(files); // istanbul ignore else

      if (options.fix) {
        await ESLint.outputFixes(results);
      ***REMOVED***

      return results;
    ***REMOVED***,
    // no-op for non-threaded
    cleanup: async () => {***REMOVED***
  ***REMOVED***;
***REMOVED***
/**
 * @param {string|undefined***REMOVED*** key
 * @param {number***REMOVED*** poolSize
 * @param {Options***REMOVED*** options
 * @returns {Linter***REMOVED***
 */


function loadESLintThreaded(key, poolSize, options) {
  const cacheKey = getCacheKey(key, options);
  const {
    eslintPath = 'eslint'
  ***REMOVED*** = options;

  const source = require.resolve('./worker');

  const workerOptions = {
    enableWorkerThreads: true,
    numWorkers: poolSize,
    setupArgs: [{
      eslintPath,
      eslintOptions: getESLintOptions(options)
    ***REMOVED***]
  ***REMOVED***;
  const local = loadESLint(options);
  let worker =
  /** @type {Worker?***REMOVED*** */
  new JestWorker(source, workerOptions);
  /** @type {Linter***REMOVED*** */

  const context = { ...local,
    threads: poolSize,
    lintFiles: async files => worker && (await worker.lintFiles(files)) ||
    /* istanbul ignore next */
    [],
    cleanup: async () => {
      cache[cacheKey] = local;

      context.lintFiles = files => local.lintFiles(files);

      if (worker) {
        worker.end();
        worker = null;
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***;
  return context;
***REMOVED***
/**
 * @param {string|undefined***REMOVED*** key
 * @param {Options***REMOVED*** options
 * @returns {Linter***REMOVED***
 */


function getESLint(key, {
  threads,
  ...options
***REMOVED***) {
  const max = typeof threads !== 'number' ? threads ? cpus().length - 1 : 1 :
  /* istanbul ignore next */
  threads;
  const cacheKey = getCacheKey(key, {
    threads,
    ...options
  ***REMOVED***);

  if (!cache[cacheKey]) {
    cache[cacheKey] = max > 1 ? loadESLintThreaded(key, max, options) : loadESLint(options);
  ***REMOVED***

  return cache[cacheKey];
***REMOVED***
/**
 * @param {string|undefined***REMOVED*** key
 * @param {Options***REMOVED*** options
 * @returns {string***REMOVED***
 */


function getCacheKey(key, options) {
  return JSON.stringify({
    key,
    options
  ***REMOVED***, jsonStringifyReplacerSortKeys);
***REMOVED***

module.exports = {
  loadESLint,
  loadESLintThreaded,
  getESLint
***REMOVED***;