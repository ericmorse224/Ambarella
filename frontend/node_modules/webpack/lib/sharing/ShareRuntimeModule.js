/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const RuntimeGlobals = require("../RuntimeGlobals");
const RuntimeModule = require("../RuntimeModule");
const Template = require("../Template");
const {
	compareModulesByIdentifier,
	compareStrings
***REMOVED*** = require("../util/comparators");

/** @typedef {import("../Chunk")***REMOVED*** Chunk */
/** @typedef {import("../ChunkGraph")***REMOVED*** ChunkGraph */
/** @typedef {import("../Compilation")***REMOVED*** Compilation */

class ShareRuntimeModule extends RuntimeModule {
	constructor() {
		super("sharing");
	***REMOVED***

	/**
	 * @returns {string | null***REMOVED*** runtime code
	 */
	generate() {
		const compilation = /** @type {Compilation***REMOVED*** */ (this.compilation);
		const {
			runtimeTemplate,
			codeGenerationResults,
			outputOptions: { uniqueName, ignoreBrowserWarnings ***REMOVED***
		***REMOVED*** = compilation;
		const chunkGraph = /** @type {ChunkGraph***REMOVED*** */ (this.chunkGraph);
		/** @type {Map<string, Map<number, Set<string>>>***REMOVED*** */
		const initCodePerScope = new Map();
		for (const chunk of /** @type {Chunk***REMOVED*** */ (
			this.chunk
		).getAllReferencedChunks()) {
			const modules = chunkGraph.getOrderedChunkModulesIterableBySourceType(
				chunk,
				"share-init",
				compareModulesByIdentifier
			);
			if (!modules) continue;
			for (const m of modules) {
				const data = codeGenerationResults.getData(
					m,
					chunk.runtime,
					"share-init"
				);
				if (!data) continue;
				for (const item of data) {
					const { shareScope, initStage, init ***REMOVED*** = item;
					let stages = initCodePerScope.get(shareScope);
					if (stages === undefined) {
						initCodePerScope.set(shareScope, (stages = new Map()));
					***REMOVED***
					let list = stages.get(initStage || 0);
					if (list === undefined) {
						stages.set(initStage || 0, (list = new Set()));
					***REMOVED***
					list.add(init);
				***REMOVED***
			***REMOVED***
		***REMOVED***
		return Template.asString([
			`${RuntimeGlobals.shareScopeMap***REMOVED*** = {***REMOVED***;`,
			"var initPromises = {***REMOVED***;",
			"var initTokens = {***REMOVED***;",
			`${RuntimeGlobals.initializeSharing***REMOVED*** = ${runtimeTemplate.basicFunction(
				"name, initScope",
				[
					"if(!initScope) initScope = [];",
					"// handling circular init calls",
					"var initToken = initTokens[name];",
					"if(!initToken) initToken = initTokens[name] = {***REMOVED***;",
					"if(initScope.indexOf(initToken) >= 0) return;",
					"initScope.push(initToken);",
					"// only runs once",
					"if(initPromises[name]) return initPromises[name];",
					"// creates a new share scope if needed",
					`if(!${RuntimeGlobals.hasOwnProperty***REMOVED***(${RuntimeGlobals.shareScopeMap***REMOVED***, name)) ${RuntimeGlobals.shareScopeMap***REMOVED***[name] = {***REMOVED***;`,
					"// runs all init snippets from all modules reachable",
					`var scope = ${RuntimeGlobals.shareScopeMap***REMOVED***[name];`,
					`var warn = ${
						ignoreBrowserWarnings
							? runtimeTemplate.basicFunction("", "")
							: runtimeTemplate.basicFunction("msg", [
									'if (typeof console !== "undefined" && console.warn) console.warn(msg);'
								])
					***REMOVED***;`,
					`var uniqueName = ${JSON.stringify(uniqueName || undefined)***REMOVED***;`,
					`var register = ${runtimeTemplate.basicFunction(
						"name, version, factory, eager",
						[
							"var versions = scope[name] = scope[name] || {***REMOVED***;",
							"var activeVersion = versions[version];",
							"if(!activeVersion || (!activeVersion.loaded && (!eager != !activeVersion.eager ? eager : uniqueName > activeVersion.from))) versions[version] = { get: factory, from: uniqueName, eager: !!eager ***REMOVED***;"
						]
					)***REMOVED***;`,
					`var initExternal = ${runtimeTemplate.basicFunction("id", [
						`var handleError = ${runtimeTemplate.expressionFunction(
							'warn("Initialization of sharing external failed: " + err)',
							"err"
						)***REMOVED***;`,
						"try {",
						Template.indent([
							`var module = ${RuntimeGlobals.require***REMOVED***(id);`,
							"if(!module) return;",
							`var initFn = ${runtimeTemplate.returningFunction(
								`module && module.init && module.init(${RuntimeGlobals.shareScopeMap***REMOVED***[name], initScope)`,
								"module"
							)***REMOVED***`,
							"if(module.then) return promises.push(module.then(initFn, handleError));",
							"var initResult = initFn(module);",
							"if(initResult && initResult.then) return promises.push(initResult['catch'](handleError));"
						]),
						"***REMOVED*** catch(err) { handleError(err); ***REMOVED***"
					])***REMOVED***`,
					"var promises = [];",
					"switch(name) {",
					...Array.from(initCodePerScope)
						.sort(([a], [b]) => compareStrings(a, b))
						.map(([name, stages]) =>
							Template.indent([
								`case ${JSON.stringify(name)***REMOVED***: {`,
								Template.indent(
									Array.from(stages)
										.sort(([a], [b]) => a - b)
										.map(([, initCode]) =>
											Template.asString(Array.from(initCode))
										)
								),
								"***REMOVED***",
								"break;"
							])
						),
					"***REMOVED***",
					"if(!promises.length) return initPromises[name] = 1;",
					`return initPromises[name] = Promise.all(promises).then(${runtimeTemplate.returningFunction(
						"initPromises[name] = 1"
					)***REMOVED***);`
				]
			)***REMOVED***;`
		]);
	***REMOVED***
***REMOVED***

module.exports = ShareRuntimeModule;
