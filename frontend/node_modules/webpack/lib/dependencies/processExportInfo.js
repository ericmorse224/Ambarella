/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const { UsageState ***REMOVED*** = require("../ExportsInfo");

/** @typedef {import("../ExportsInfo").ExportInfo***REMOVED*** ExportInfo */
/** @typedef {import("../util/runtime").RuntimeSpec***REMOVED*** RuntimeSpec */

/** @typedef {string[][]***REMOVED*** ReferencedExports */

/**
 * @param {RuntimeSpec***REMOVED*** runtime the runtime
 * @param {ReferencedExports***REMOVED*** referencedExports list of referenced exports, will be added to
 * @param {string[]***REMOVED*** prefix export prefix
 * @param {ExportInfo=***REMOVED*** exportInfo the export info
 * @param {boolean***REMOVED*** defaultPointsToSelf when true, using default will reference itself
 * @param {Set<ExportInfo>***REMOVED*** alreadyVisited already visited export info (to handle circular reexports)
 */
const processExportInfo = (
	runtime,
	referencedExports,
	prefix,
	exportInfo,
	defaultPointsToSelf = false,
	alreadyVisited = new Set()
) => {
	if (!exportInfo) {
		referencedExports.push(prefix);
		return;
	***REMOVED***
	const used = exportInfo.getUsed(runtime);
	if (used === UsageState.Unused) return;
	if (alreadyVisited.has(exportInfo)) {
		referencedExports.push(prefix);
		return;
	***REMOVED***
	alreadyVisited.add(exportInfo);
	if (
		used !== UsageState.OnlyPropertiesUsed ||
		!exportInfo.exportsInfo ||
		exportInfo.exportsInfo.otherExportsInfo.getUsed(runtime) !==
			UsageState.Unused
	) {
		alreadyVisited.delete(exportInfo);
		referencedExports.push(prefix);
		return;
	***REMOVED***
	const exportsInfo = exportInfo.exportsInfo;
	for (const exportInfo of exportsInfo.orderedExports) {
		processExportInfo(
			runtime,
			referencedExports,
			defaultPointsToSelf && exportInfo.name === "default"
				? prefix
				: prefix.concat(exportInfo.name),
			exportInfo,
			false,
			alreadyVisited
		);
	***REMOVED***
	alreadyVisited.delete(exportInfo);
***REMOVED***;
module.exports = processExportInfo;
