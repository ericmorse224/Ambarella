const readWasm = require("../lib/read-wasm");

/**
 * Provide the JIT with a nice shape / hidden class.
 */
function Mapping() {
  this.generatedLine = 0;
  this.generatedColumn = 0;
  this.lastGeneratedColumn = null;
  this.source = null;
  this.originalLine = null;
  this.originalColumn = null;
  this.name = null;
***REMOVED***

let cachedWasm = null;

module.exports = function wasm() {
  if (cachedWasm) {
    return cachedWasm;
  ***REMOVED***

  const callbackStack = [];

  cachedWasm = readWasm().then(buffer => {
      return WebAssembly.instantiate(buffer, {
        env: {
          mapping_callback(
            generatedLine,
            generatedColumn,

            hasLastGeneratedColumn,
            lastGeneratedColumn,

            hasOriginal,
            source,
            originalLine,
            originalColumn,

            hasName,
            name
          ) {
            const mapping = new Mapping();
            // JS uses 1-based line numbers, wasm uses 0-based.
            mapping.generatedLine = generatedLine + 1;
            mapping.generatedColumn = generatedColumn;

            if (hasLastGeneratedColumn) {
              // JS uses inclusive last generated column, wasm uses exclusive.
              mapping.lastGeneratedColumn = lastGeneratedColumn - 1;
            ***REMOVED***

            if (hasOriginal) {
              mapping.source = source;
              // JS uses 1-based line numbers, wasm uses 0-based.
              mapping.originalLine = originalLine + 1;
              mapping.originalColumn = originalColumn;

              if (hasName) {
                mapping.name = name;
              ***REMOVED***
            ***REMOVED***

            callbackStack[callbackStack.length - 1](mapping);
          ***REMOVED***,

          start_all_generated_locations_for() { console.time("all_generated_locations_for"); ***REMOVED***,
          end_all_generated_locations_for() { console.timeEnd("all_generated_locations_for"); ***REMOVED***,

          start_compute_column_spans() { console.time("compute_column_spans"); ***REMOVED***,
          end_compute_column_spans() { console.timeEnd("compute_column_spans"); ***REMOVED***,

          start_generated_location_for() { console.time("generated_location_for"); ***REMOVED***,
          end_generated_location_for() { console.timeEnd("generated_location_for"); ***REMOVED***,

          start_original_location_for() { console.time("original_location_for"); ***REMOVED***,
          end_original_location_for() { console.timeEnd("original_location_for"); ***REMOVED***,

          start_parse_mappings() { console.time("parse_mappings"); ***REMOVED***,
          end_parse_mappings() { console.timeEnd("parse_mappings"); ***REMOVED***,

          start_sort_by_generated_location() { console.time("sort_by_generated_location"); ***REMOVED***,
          end_sort_by_generated_location() { console.timeEnd("sort_by_generated_location"); ***REMOVED***,

          start_sort_by_original_location() { console.time("sort_by_original_location"); ***REMOVED***,
          end_sort_by_original_location() { console.timeEnd("sort_by_original_location"); ***REMOVED***,
        ***REMOVED***
      ***REMOVED***);
  ***REMOVED***).then(Wasm => {
    return {
      exports: Wasm.instance.exports,
      withMappingCallback: (mappingCallback, f) => {
        callbackStack.push(mappingCallback);
        try {
          f();
        ***REMOVED*** finally {
          callbackStack.pop();
        ***REMOVED***
      ***REMOVED***
    ***REMOVED***;
  ***REMOVED***).then(null, e => {
    cachedWasm = null;
    throw e;
  ***REMOVED***);

  return cachedWasm;
***REMOVED***;
