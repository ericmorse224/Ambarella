/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const RequestShortener = require("../RequestShortener");

/** @typedef {import("../../declarations/WebpackOptions").StatsOptions***REMOVED*** StatsOptions */
/** @typedef {import("../../declarations/WebpackOptions").StatsValue***REMOVED*** StatsValue */
/** @typedef {import("../Compilation")***REMOVED*** Compilation */
/** @typedef {import("../Compilation").CreateStatsOptionsContext***REMOVED*** CreateStatsOptionsContext */
/** @typedef {import("../Compilation").KnownNormalizedStatsOptions***REMOVED*** KnownNormalizedStatsOptions */
/** @typedef {import("../Compilation").NormalizedStatsOptions***REMOVED*** NormalizedStatsOptions */
/** @typedef {import("../Compiler")***REMOVED*** Compiler */
/** @typedef {import("./DefaultStatsFactoryPlugin").StatsError***REMOVED*** StatsError */

/**
 * @param {Partial<NormalizedStatsOptions>***REMOVED*** options options
 * @param {StatsOptions***REMOVED*** defaults default options
 */
const applyDefaults = (options, defaults) => {
	for (const _k of Object.keys(defaults)) {
		const key = /** @type {keyof StatsOptions***REMOVED*** */ (_k);
		if (typeof options[key] === "undefined") {
			options[/** @type {keyof NormalizedStatsOptions***REMOVED*** */ (key)] =
				defaults[key];
		***REMOVED***
	***REMOVED***
***REMOVED***;

/** @typedef {{ [Key in Exclude<StatsValue, boolean | object | "normal">]: StatsOptions ***REMOVED******REMOVED*** NamedPresets */

/** @type {NamedPresets***REMOVED*** */
const NAMED_PRESETS = {
	verbose: {
		hash: true,
		builtAt: true,
		relatedAssets: true,
		entrypoints: true,
		chunkGroups: true,
		ids: true,
		modules: false,
		chunks: true,
		chunkRelations: true,
		chunkModules: true,
		dependentModules: true,
		chunkOrigins: true,
		depth: true,
		env: true,
		reasons: true,
		usedExports: true,
		providedExports: true,
		optimizationBailout: true,
		errorDetails: true,
		errorStack: true,
		errorCause: true,
		errorErrors: true,
		publicPath: true,
		logging: "verbose",
		orphanModules: true,
		runtimeModules: true,
		exclude: false,
		errorsSpace: Infinity,
		warningsSpace: Infinity,
		modulesSpace: Infinity,
		chunkModulesSpace: Infinity,
		assetsSpace: Infinity,
		reasonsSpace: Infinity,
		children: true
	***REMOVED***,
	detailed: {
		hash: true,
		builtAt: true,
		relatedAssets: true,
		entrypoints: true,
		chunkGroups: true,
		ids: true,
		chunks: true,
		chunkRelations: true,
		chunkModules: false,
		chunkOrigins: true,
		depth: true,
		usedExports: true,
		providedExports: true,
		optimizationBailout: true,
		errorDetails: true,
		errorCause: true,
		errorErrors: true,
		publicPath: true,
		logging: true,
		runtimeModules: true,
		exclude: false,
		errorsSpace: 1000,
		warningsSpace: 1000,
		modulesSpace: 1000,
		assetsSpace: 1000,
		reasonsSpace: 1000
	***REMOVED***,
	minimal: {
		all: false,
		version: true,
		timings: true,
		modules: true,
		errorsSpace: 0,
		warningsSpace: 0,
		modulesSpace: 0,
		assets: true,
		assetsSpace: 0,
		errors: true,
		errorsCount: true,
		warnings: true,
		warningsCount: true,
		logging: "warn"
	***REMOVED***,
	"errors-only": {
		all: false,
		errors: true,
		errorsCount: true,
		errorsSpace: Infinity,
		moduleTrace: true,
		logging: "error"
	***REMOVED***,
	"errors-warnings": {
		all: false,
		errors: true,
		errorsCount: true,
		errorsSpace: Infinity,
		warnings: true,
		warningsCount: true,
		warningsSpace: Infinity,
		logging: "warn"
	***REMOVED***,
	summary: {
		all: false,
		version: true,
		errorsCount: true,
		warningsCount: true
	***REMOVED***,
	none: {
		all: false
	***REMOVED***
***REMOVED***;

/**
 * @param {Partial<NormalizedStatsOptions>***REMOVED*** all stats option
 * @returns {boolean***REMOVED*** true when enabled, otherwise false
 */
const NORMAL_ON = ({ all ***REMOVED***) => all !== false;
/**
 * @param {Partial<NormalizedStatsOptions>***REMOVED*** all stats option
 * @returns {boolean***REMOVED*** true when enabled, otherwise false
 */
const NORMAL_OFF = ({ all ***REMOVED***) => all === true;
/**
 * @param {Partial<NormalizedStatsOptions>***REMOVED*** all stats option
 * @param {CreateStatsOptionsContext***REMOVED*** forToString stats options context
 * @returns {boolean***REMOVED*** true when enabled, otherwise false
 */
const ON_FOR_TO_STRING = ({ all ***REMOVED***, { forToString ***REMOVED***) =>
	forToString ? all !== false : all === true;
/**
 * @param {Partial<NormalizedStatsOptions>***REMOVED*** all stats option
 * @param {CreateStatsOptionsContext***REMOVED*** forToString stats options context
 * @returns {boolean***REMOVED*** true when enabled, otherwise false
 */
const OFF_FOR_TO_STRING = ({ all ***REMOVED***, { forToString ***REMOVED***) =>
	forToString ? all === true : all !== false;
/**
 * @param {Partial<NormalizedStatsOptions>***REMOVED*** all stats option
 * @param {CreateStatsOptionsContext***REMOVED*** forToString stats options context
 * @returns {boolean | "auto"***REMOVED*** true when enabled, otherwise false
 */
const AUTO_FOR_TO_STRING = ({ all ***REMOVED***, { forToString ***REMOVED***) => {
	if (all === false) return false;
	if (all === true) return true;
	if (forToString) return "auto";
	return true;
***REMOVED***;

/** @typedef {keyof NormalizedStatsOptions***REMOVED*** DefaultsKeys */
/** @typedef {{ [Key in DefaultsKeys]: (options: Partial<NormalizedStatsOptions>, context: CreateStatsOptionsContext, compilation: Compilation) => NormalizedStatsOptions[Key] | RequestShortener ***REMOVED******REMOVED*** Defaults */

/** @type {Partial<Defaults>***REMOVED*** */
const DEFAULTS = {
	context: (options, context, compilation) => compilation.compiler.context,
	requestShortener: (options, context, compilation) =>
		compilation.compiler.context === options.context
			? compilation.requestShortener
			: new RequestShortener(
					/** @type {string***REMOVED*** */
					(options.context),
					compilation.compiler.root
				),
	performance: NORMAL_ON,
	hash: OFF_FOR_TO_STRING,
	env: NORMAL_OFF,
	version: NORMAL_ON,
	timings: NORMAL_ON,
	builtAt: OFF_FOR_TO_STRING,
	assets: NORMAL_ON,
	entrypoints: AUTO_FOR_TO_STRING,
	chunkGroups: OFF_FOR_TO_STRING,
	chunkGroupAuxiliary: OFF_FOR_TO_STRING,
	chunkGroupChildren: OFF_FOR_TO_STRING,
	chunkGroupMaxAssets: (o, { forToString ***REMOVED***) => (forToString ? 5 : Infinity),
	chunks: OFF_FOR_TO_STRING,
	chunkRelations: OFF_FOR_TO_STRING,
	chunkModules: ({ all, modules ***REMOVED***) => {
		if (all === false) return false;
		if (all === true) return true;
		if (modules) return false;
		return true;
	***REMOVED***,
	dependentModules: OFF_FOR_TO_STRING,
	chunkOrigins: OFF_FOR_TO_STRING,
	ids: OFF_FOR_TO_STRING,
	modules: ({ all, chunks, chunkModules ***REMOVED***, { forToString ***REMOVED***) => {
		if (all === false) return false;
		if (all === true) return true;
		if (forToString && chunks && chunkModules) return false;
		return true;
	***REMOVED***,
	nestedModules: OFF_FOR_TO_STRING,
	groupModulesByType: ON_FOR_TO_STRING,
	groupModulesByCacheStatus: ON_FOR_TO_STRING,
	groupModulesByLayer: ON_FOR_TO_STRING,
	groupModulesByAttributes: ON_FOR_TO_STRING,
	groupModulesByPath: ON_FOR_TO_STRING,
	groupModulesByExtension: ON_FOR_TO_STRING,
	modulesSpace: (o, { forToString ***REMOVED***) => (forToString ? 15 : Infinity),
	chunkModulesSpace: (o, { forToString ***REMOVED***) => (forToString ? 10 : Infinity),
	nestedModulesSpace: (o, { forToString ***REMOVED***) => (forToString ? 10 : Infinity),
	relatedAssets: OFF_FOR_TO_STRING,
	groupAssetsByEmitStatus: ON_FOR_TO_STRING,
	groupAssetsByInfo: ON_FOR_TO_STRING,
	groupAssetsByPath: ON_FOR_TO_STRING,
	groupAssetsByExtension: ON_FOR_TO_STRING,
	groupAssetsByChunk: ON_FOR_TO_STRING,
	assetsSpace: (o, { forToString ***REMOVED***) => (forToString ? 15 : Infinity),
	orphanModules: OFF_FOR_TO_STRING,
	runtimeModules: ({ all, runtime ***REMOVED***, { forToString ***REMOVED***) =>
		runtime !== undefined
			? runtime
			: forToString
				? all === true
				: all !== false,
	cachedModules: ({ all, cached ***REMOVED***, { forToString ***REMOVED***) =>
		cached !== undefined ? cached : forToString ? all === true : all !== false,
	moduleAssets: OFF_FOR_TO_STRING,
	depth: OFF_FOR_TO_STRING,
	cachedAssets: OFF_FOR_TO_STRING,
	reasons: OFF_FOR_TO_STRING,
	reasonsSpace: (o, { forToString ***REMOVED***) => (forToString ? 15 : Infinity),
	groupReasonsByOrigin: ON_FOR_TO_STRING,
	usedExports: OFF_FOR_TO_STRING,
	providedExports: OFF_FOR_TO_STRING,
	optimizationBailout: OFF_FOR_TO_STRING,
	children: OFF_FOR_TO_STRING,
	source: NORMAL_OFF,
	moduleTrace: NORMAL_ON,
	errors: NORMAL_ON,
	errorsCount: NORMAL_ON,
	errorDetails: AUTO_FOR_TO_STRING,
	errorStack: OFF_FOR_TO_STRING,
	errorCause: AUTO_FOR_TO_STRING,
	errorErrors: AUTO_FOR_TO_STRING,
	warnings: NORMAL_ON,
	warningsCount: NORMAL_ON,
	publicPath: OFF_FOR_TO_STRING,
	logging: ({ all ***REMOVED***, { forToString ***REMOVED***) =>
		forToString && all !== false ? "info" : false,
	loggingDebug: () => [],
	loggingTrace: OFF_FOR_TO_STRING,
	excludeModules: () => [],
	excludeAssets: () => [],
	modulesSort: () => "depth",
	chunkModulesSort: () => "name",
	nestedModulesSort: () => false,
	chunksSort: () => false,
	assetsSort: () => "!size",
	outputPath: OFF_FOR_TO_STRING,
	colors: () => false
***REMOVED***;

/**
 * @template {string***REMOVED*** T
 * @param {string | ({ test: (value: T) => boolean ***REMOVED***) | ((value: T, ...args: EXPECTED_ANY[]) => boolean) | boolean***REMOVED*** item item to normalize
 * @returns {(value: T, ...args: EXPECTED_ANY[]) => boolean***REMOVED*** normalize fn
 */
const normalizeFilter = item => {
	if (typeof item === "string") {
		const regExp = new RegExp(
			`[\\\\/]${item.replace(/[-[\]{***REMOVED***()*+?.\\^$|]/g, "\\$&")***REMOVED***([\\\\/]|$|!|\\?)`
		);
		return ident => regExp.test(/** @type {T***REMOVED*** */ (ident));
	***REMOVED***
	if (item && typeof item === "object" && typeof item.test === "function") {
		return ident => item.test(ident);
	***REMOVED***
	if (typeof item === "boolean") {
		return () => item;
	***REMOVED***

	return /** @type {(value: T, ...args: EXPECTED_ANY[]) => boolean***REMOVED*** */ (item);
***REMOVED***;

/** @typedef {keyof (KnownNormalizedStatsOptions | StatsOptions)***REMOVED*** NormalizerKeys */
/** @typedef {{ [Key in NormalizerKeys]: (value: StatsOptions[Key]) => KnownNormalizedStatsOptions[Key] ***REMOVED******REMOVED*** Normalizers */

/** @type {Partial<Normalizers>***REMOVED*** */
const NORMALIZER = {
	excludeModules: value => {
		if (!Array.isArray(value)) {
			value = value
				? /** @type {KnownNormalizedStatsOptions["excludeModules"]***REMOVED*** */ ([value])
				: [];
		***REMOVED***
		return value.map(normalizeFilter);
	***REMOVED***,
	excludeAssets: value => {
		if (!Array.isArray(value)) {
			value = value ? [value] : [];
		***REMOVED***
		return value.map(normalizeFilter);
	***REMOVED***,
	warningsFilter: value => {
		if (!Array.isArray(value)) {
			value = value ? [value] : [];
		***REMOVED***
		/**
		 * @callback WarningFilterFn
		 * @param {StatsError***REMOVED*** warning warning
		 * @param {string***REMOVED*** warningString warning string
		 * @returns {boolean***REMOVED*** result
		 */
		return value.map(
			/**
			 * @param {StatsOptions["warningsFilter"]***REMOVED*** filter a warning filter
			 * @returns {WarningFilterFn***REMOVED*** result
			 */
			filter => {
				if (typeof filter === "string") {
					return (warning, warningString) => warningString.includes(filter);
				***REMOVED***
				if (filter instanceof RegExp) {
					return (warning, warningString) => filter.test(warningString);
				***REMOVED***
				if (typeof filter === "function") {
					return filter;
				***REMOVED***
				throw new Error(
					`Can only filter warnings with Strings or RegExps. (Given: ${filter***REMOVED***)`
				);
			***REMOVED***
		);
	***REMOVED***,
	logging: value => {
		if (value === true) value = "log";
		return /** @type {KnownNormalizedStatsOptions["logging"]***REMOVED*** */ (value);
	***REMOVED***,
	loggingDebug: value => {
		if (!Array.isArray(value)) {
			value = value
				? /** @type {KnownNormalizedStatsOptions["loggingDebug"]***REMOVED*** */ ([value])
				: [];
		***REMOVED***
		return value.map(normalizeFilter);
	***REMOVED***
***REMOVED***;

const PLUGIN_NAME = "DefaultStatsPresetPlugin";

class DefaultStatsPresetPlugin {
	/**
	 * Apply the plugin
	 * @param {Compiler***REMOVED*** compiler the compiler instance
	 * @returns {void***REMOVED***
	 */
	apply(compiler) {
		compiler.hooks.compilation.tap(PLUGIN_NAME, compilation => {
			for (const key of Object.keys(NAMED_PRESETS)) {
				const defaults = NAMED_PRESETS[/** @type {keyof NamedPresets***REMOVED*** */ (key)];
				compilation.hooks.statsPreset
					.for(key)
					.tap(PLUGIN_NAME, (options, context) => {
						applyDefaults(options, defaults);
					***REMOVED***);
			***REMOVED***
			compilation.hooks.statsNormalize.tap(PLUGIN_NAME, (options, context) => {
				for (const key of Object.keys(DEFAULTS)) {
					if (options[key] === undefined)
						options[key] =
							/** @type {Defaults[DefaultsKeys]***REMOVED*** */
							(DEFAULTS[/** @type {DefaultsKeys***REMOVED*** */ (key)])(
								options,
								context,
								compilation
							);
				***REMOVED***
				for (const key of Object.keys(NORMALIZER)) {
					options[key] =
						/** @type {TODO***REMOVED*** */
						(NORMALIZER[/** @type {NormalizerKeys***REMOVED*** */ (key)])(options[key]);
				***REMOVED***
			***REMOVED***);
		***REMOVED***);
	***REMOVED***
***REMOVED***
module.exports = DefaultStatsPresetPlugin;
