/*
  Copyright 2019 Google LLC

  Use of this source code is governed by an MIT-style
  license that can be found in the LICENSE file or at
  https://opensource.org/licenses/MIT.
*/
import { logger ***REMOVED*** from 'workbox-core/_private/logger.js';
import { WorkboxError ***REMOVED*** from 'workbox-core/_private/WorkboxError.js';
import { Route ***REMOVED*** from './Route.js';
import { RegExpRoute ***REMOVED*** from './RegExpRoute.js';
import { getOrCreateDefaultRouter ***REMOVED*** from './utils/getOrCreateDefaultRouter.js';
import './_version.js';
/**
 * Easily register a RegExp, string, or function with a caching
 * strategy to a singleton Router instance.
 *
 * This method will generate a Route for you if needed and
 * call {@link workbox-routing.Router#registerRoute***REMOVED***.
 *
 * @param {RegExp|string|workbox-routing.Route~matchCallback|workbox-routing.Route***REMOVED*** capture
 * If the capture param is a `Route`, all other arguments will be ignored.
 * @param {workbox-routing~handlerCallback***REMOVED*** [handler] A callback
 * function that returns a Promise resulting in a Response. This parameter
 * is required if `capture` is not a `Route` object.
 * @param {string***REMOVED*** [method='GET'] The HTTP method to match the Route
 * against.
 * @return {workbox-routing.Route***REMOVED*** The generated `Route`.
 *
 * @memberof workbox-routing
 */
function registerRoute(capture, handler, method) {
    let route;
    if (typeof capture === 'string') {
        const captureUrl = new URL(capture, location.href);
        if (process.env.NODE_ENV !== 'production') {
            if (!(capture.startsWith('/') || capture.startsWith('http'))) {
                throw new WorkboxError('invalid-string', {
                    moduleName: 'workbox-routing',
                    funcName: 'registerRoute',
                    paramName: 'capture',
                ***REMOVED***);
            ***REMOVED***
            // We want to check if Express-style wildcards are in the pathname only.
            // TODO: Remove this log message in v4.
            const valueToCheck = capture.startsWith('http')
                ? captureUrl.pathname
                : capture;
            // See https://github.com/pillarjs/path-to-regexp#parameters
            const wildcards = '[*:?+]';
            if (new RegExp(`${wildcards***REMOVED***`).exec(valueToCheck)) {
                logger.debug(`The '$capture' parameter contains an Express-style wildcard ` +
                    `character (${wildcards***REMOVED***). Strings are now always interpreted as ` +
                    `exact matches; use a RegExp for partial or wildcard matches.`);
            ***REMOVED***
        ***REMOVED***
        const matchCallback = ({ url ***REMOVED***) => {
            if (process.env.NODE_ENV !== 'production') {
                if (url.pathname === captureUrl.pathname &&
                    url.origin !== captureUrl.origin) {
                    logger.debug(`${capture***REMOVED*** only partially matches the cross-origin URL ` +
                        `${url.toString()***REMOVED***. This route will only handle cross-origin requests ` +
                        `if they match the entire URL.`);
                ***REMOVED***
            ***REMOVED***
            return url.href === captureUrl.href;
        ***REMOVED***;
        // If `capture` is a string then `handler` and `method` must be present.
        route = new Route(matchCallback, handler, method);
    ***REMOVED***
    else if (capture instanceof RegExp) {
        // If `capture` is a `RegExp` then `handler` and `method` must be present.
        route = new RegExpRoute(capture, handler, method);
    ***REMOVED***
    else if (typeof capture === 'function') {
        // If `capture` is a function then `handler` and `method` must be present.
        route = new Route(capture, handler, method);
    ***REMOVED***
    else if (capture instanceof Route) {
        route = capture;
    ***REMOVED***
    else {
        throw new WorkboxError('unsupported-route-type', {
            moduleName: 'workbox-routing',
            funcName: 'registerRoute',
            paramName: 'capture',
        ***REMOVED***);
    ***REMOVED***
    const defaultRouter = getOrCreateDefaultRouter();
    defaultRouter.registerRoute(route);
    return route;
***REMOVED***
export { registerRoute ***REMOVED***;
