"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
***REMOVED***);
exports.canSkipRegexpu = canSkipRegexpu;
exports.generateRegexpuOptions = generateRegexpuOptions;
exports.transformFlags = transformFlags;
var _features = require("./features.js");
function generateRegexpuOptions(pattern, toTransform) {
  const feat = name => {
    return (0, _features.hasFeature)(toTransform, _features.FEATURES[name]) ? "transform" : false;
  ***REMOVED***;
  const featDuplicateNamedGroups = () => {
    if (!feat("duplicateNamedCaptureGroups")) return false;
    const regex = /\(\?<([^>]+)(>|$)/g;
    const seen = new Set();
    for (let match; (match = regex.exec(pattern)) && match[2]; seen.add(match[1])) {
      if (seen.has(match[1])) return "transform";
    ***REMOVED***
    return false;
  ***REMOVED***;
  return {
    unicodeFlag: feat("unicodeFlag"),
    unicodeSetsFlag: feat("unicodeSetsFlag"),
    dotAllFlag: feat("dotAllFlag"),
    unicodePropertyEscapes: feat("unicodePropertyEscape"),
    namedGroups: feat("namedCaptureGroups") || featDuplicateNamedGroups(),
    onNamedGroup: () => {***REMOVED***,
    modifiers: feat("modifiers")
  ***REMOVED***;
***REMOVED***
function canSkipRegexpu(node, options) {
  const {
    flags,
    pattern
  ***REMOVED*** = node;
  if (flags.includes("v")) {
    if (options.unicodeSetsFlag === "transform") return false;
  ***REMOVED***
  if (flags.includes("u")) {
    if (options.unicodeFlag === "transform") return false;
    if (options.unicodePropertyEscapes === "transform" && /\\p\{/i.test(pattern)) {
      return false;
    ***REMOVED***
  ***REMOVED***
  if (flags.includes("s")) {
    if (options.dotAllFlag === "transform") return false;
  ***REMOVED***
  if (options.namedGroups === "transform" && /\(\?<(?![=!])/.test(pattern)) {
    return false;
  ***REMOVED***
  if (options.modifiers === "transform" && /\(\?[\w-]+:/.test(pattern)) {
    return false;
  ***REMOVED***
  return true;
***REMOVED***
function transformFlags(regexpuOptions, flags) {
  if (regexpuOptions.unicodeSetsFlag === "transform") {
    flags = flags.replace("v", "u");
  ***REMOVED***
  if (regexpuOptions.unicodeFlag === "transform") {
    flags = flags.replace("u", "");
  ***REMOVED***
  if (regexpuOptions.dotAllFlag === "transform") {
    flags = flags.replace("s", "");
  ***REMOVED***
  return flags;
***REMOVED***

//# sourceMappingURL=util.js.map
