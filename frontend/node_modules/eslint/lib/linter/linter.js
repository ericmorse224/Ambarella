/**
 * @fileoverview Main Linter Class
 * @author Gyandeep Singh
 * @author aladdin-add
 */

"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const
    path = require("path"),
    eslintScope = require("eslint-scope"),
    evk = require("eslint-visitor-keys"),
    espree = require("espree"),
    merge = require("lodash.merge"),
    BuiltInEnvironments = require("@eslint/eslintrc/conf/environments"),
    pkg = require("../../package.json"),
    astUtils = require("../shared/ast-utils"),
    ConfigOps = require("@eslint/eslintrc/lib/shared/config-ops"),
    ConfigValidator = require("@eslint/eslintrc/lib/shared/config-validator"),
    Traverser = require("../shared/traverser"),
    { SourceCode ***REMOVED*** = require("../source-code"),
    CodePathAnalyzer = require("./code-path-analysis/code-path-analyzer"),
    applyDisableDirectives = require("./apply-disable-directives"),
    ConfigCommentParser = require("./config-comment-parser"),
    NodeEventGenerator = require("./node-event-generator"),
    createReportTranslator = require("./report-translator"),
    Rules = require("./rules"),
    createEmitter = require("./safe-emitter"),
    SourceCodeFixer = require("./source-code-fixer"),
    timing = require("./timing"),
    ruleReplacements = require("../../conf/replacements.json");

const debug = require("debug")("eslint:linter");
const MAX_AUTOFIX_PASSES = 10;
const DEFAULT_PARSER_NAME = "espree";
const DEFAULT_ECMA_VERSION = 5;
const commentParser = new ConfigCommentParser();
const DEFAULT_ERROR_LOC = { start: { line: 1, column: 0 ***REMOVED***, end: { line: 1, column: 1 ***REMOVED*** ***REMOVED***;
const parserSymbol = Symbol.for("eslint.RuleTester.parser");

//------------------------------------------------------------------------------
// Typedefs
//------------------------------------------------------------------------------

/** @typedef {InstanceType<import("../cli-engine/config-array")["ConfigArray"]>***REMOVED*** ConfigArray */
/** @typedef {InstanceType<import("../cli-engine/config-array")["ExtractedConfig"]>***REMOVED*** ExtractedConfig */
/** @typedef {import("../shared/types").ConfigData***REMOVED*** ConfigData */
/** @typedef {import("../shared/types").Environment***REMOVED*** Environment */
/** @typedef {import("../shared/types").GlobalConf***REMOVED*** GlobalConf */
/** @typedef {import("../shared/types").LintMessage***REMOVED*** LintMessage */
/** @typedef {import("../shared/types").ParserOptions***REMOVED*** ParserOptions */
/** @typedef {import("../shared/types").Processor***REMOVED*** Processor */
/** @typedef {import("../shared/types").Rule***REMOVED*** Rule */

/**
 * @template T
 * @typedef {{ [P in keyof T]-?: T[P] ***REMOVED******REMOVED*** Required
 */

/**
 * @typedef {Object***REMOVED*** DisableDirective
 * @property {("disable"|"enable"|"disable-line"|"disable-next-line")***REMOVED*** type
 * @property {number***REMOVED*** line
 * @property {number***REMOVED*** column
 * @property {(string|null)***REMOVED*** ruleId
 */

/**
 * The private data for `Linter` instance.
 * @typedef {Object***REMOVED*** LinterInternalSlots
 * @property {ConfigArray|null***REMOVED*** lastConfigArray The `ConfigArray` instance that the last `verify()` call used.
 * @property {SourceCode|null***REMOVED*** lastSourceCode The `SourceCode` instance that the last `verify()` call used.
 * @property {Map<string, Parser>***REMOVED*** parserMap The loaded parsers.
 * @property {Rules***REMOVED*** ruleMap The loaded rules.
 */

/**
 * @typedef {Object***REMOVED*** VerifyOptions
 * @property {boolean***REMOVED*** [allowInlineConfig] Allow/disallow inline comments' ability
 *      to change config once it is set. Defaults to true if not supplied.
 *      Useful if you want to validate JS without comments overriding rules.
 * @property {boolean***REMOVED*** [disableFixes] if `true` then the linter doesn't make `fix`
 *      properties into the lint result.
 * @property {string***REMOVED*** [filename] the filename of the source code.
 * @property {boolean | "off" | "warn" | "error"***REMOVED*** [reportUnusedDisableDirectives] Adds reported errors for
 *      unused `eslint-disable` directives.
 */

/**
 * @typedef {Object***REMOVED*** ProcessorOptions
 * @property {(filename:string, text:string) => boolean***REMOVED*** [filterCodeBlock] the
 *      predicate function that selects adopt code blocks.
 * @property {Processor["postprocess"]***REMOVED*** [postprocess] postprocessor for report
 *      messages. If provided, this should accept an array of the message lists
 *      for each code block returned from the preprocessor, apply a mapping to
 *      the messages as appropriate, and return a one-dimensional array of
 *      messages.
 * @property {Processor["preprocess"]***REMOVED*** [preprocess] preprocessor for source text.
 *      If provided, this should accept a string of source text, and return an
 *      array of code blocks to lint.
 */

/**
 * @typedef {Object***REMOVED*** FixOptions
 * @property {boolean | ((message: LintMessage) => boolean)***REMOVED*** [fix] Determines
 *      whether fixes should be applied.
 */

/**
 * @typedef {Object***REMOVED*** InternalOptions
 * @property {string | null***REMOVED*** warnInlineConfig The config name what `noInlineConfig` setting came from. If `noInlineConfig` setting didn't exist, this is null. If this is a config name, then the linter warns directive comments.
 * @property {"off" | "warn" | "error"***REMOVED*** reportUnusedDisableDirectives (boolean values were normalized)
 */

//------------------------------------------------------------------------------
// Helpers
//------------------------------------------------------------------------------

/**
 * Ensures that variables representing built-in properties of the Global Object,
 * and any globals declared by special block comments, are present in the global
 * scope.
 * @param {Scope***REMOVED*** globalScope The global scope.
 * @param {Object***REMOVED*** configGlobals The globals declared in configuration
 * @param {{exportedVariables: Object, enabledGlobals: Object***REMOVED******REMOVED*** commentDirectives Directives from comment configuration
 * @returns {void***REMOVED***
 */
function addDeclaredGlobals(globalScope, configGlobals, { exportedVariables, enabledGlobals ***REMOVED***) {

    // Define configured global variables.
    for (const id of new Set([...Object.keys(configGlobals), ...Object.keys(enabledGlobals)])) {

        /*
         * `ConfigOps.normalizeConfigGlobal` will throw an error if a configured global value is invalid. However, these errors would
         * typically be caught when validating a config anyway (validity for inline global comments is checked separately).
         */
        const configValue = configGlobals[id] === void 0 ? void 0 : ConfigOps.normalizeConfigGlobal(configGlobals[id]);
        const commentValue = enabledGlobals[id] && enabledGlobals[id].value;
        const value = commentValue || configValue;
        const sourceComments = enabledGlobals[id] && enabledGlobals[id].comments;

        if (value === "off") {
            continue;
        ***REMOVED***

        let variable = globalScope.set.get(id);

        if (!variable) {
            variable = new eslintScope.Variable(id, globalScope);

            globalScope.variables.push(variable);
            globalScope.set.set(id, variable);
        ***REMOVED***

        variable.eslintImplicitGlobalSetting = configValue;
        variable.eslintExplicitGlobal = sourceComments !== void 0;
        variable.eslintExplicitGlobalComments = sourceComments;
        variable.writeable = (value === "writable");
    ***REMOVED***

    // mark all exported variables as such
    Object.keys(exportedVariables).forEach(name => {
        const variable = globalScope.set.get(name);

        if (variable) {
            variable.eslintUsed = true;
        ***REMOVED***
    ***REMOVED***);

    /*
     * "through" contains all references which definitions cannot be found.
     * Since we augment the global scope using configuration, we need to update
     * references and remove the ones that were added by configuration.
     */
    globalScope.through = globalScope.through.filter(reference => {
        const name = reference.identifier.name;
        const variable = globalScope.set.get(name);

        if (variable) {

            /*
             * Links the variable and the reference.
             * And this reference is removed from `Scope#through`.
             */
            reference.resolved = variable;
            variable.references.push(reference);

            return false;
        ***REMOVED***

        return true;
    ***REMOVED***);
***REMOVED***

/**
 * creates a missing-rule message.
 * @param {string***REMOVED*** ruleId the ruleId to create
 * @returns {string***REMOVED*** created error message
 * @private
 */
function createMissingRuleMessage(ruleId) {
    return Object.prototype.hasOwnProperty.call(ruleReplacements.rules, ruleId)
        ? `Rule '${ruleId***REMOVED***' was removed and replaced by: ${ruleReplacements.rules[ruleId].join(", ")***REMOVED***`
        : `Definition for rule '${ruleId***REMOVED***' was not found.`;
***REMOVED***

/**
 * creates a linting problem
 * @param {Object***REMOVED*** options to create linting error
 * @param {string***REMOVED*** [options.ruleId] the ruleId to report
 * @param {Object***REMOVED*** [options.loc] the loc to report
 * @param {string***REMOVED*** [options.message] the error message to report
 * @param {string***REMOVED*** [options.severity] the error message to report
 * @returns {LintMessage***REMOVED*** created problem, returns a missing-rule problem if only provided ruleId.
 * @private
 */
function createLintingProblem(options) {
    const {
        ruleId = null,
        loc = DEFAULT_ERROR_LOC,
        message = createMissingRuleMessage(options.ruleId),
        severity = 2
    ***REMOVED*** = options;

    return {
        ruleId,
        message,
        line: loc.start.line,
        column: loc.start.column + 1,
        endLine: loc.end.line,
        endColumn: loc.end.column + 1,
        severity,
        nodeType: null
    ***REMOVED***;
***REMOVED***

/**
 * Creates a collection of disable directives from a comment
 * @param {Object***REMOVED*** options to create disable directives
 * @param {("disable"|"enable"|"disable-line"|"disable-next-line")***REMOVED*** options.type The type of directive comment
 * @param {{line: number, column: number***REMOVED******REMOVED*** options.loc The 0-based location of the comment token
 * @param {string***REMOVED*** options.value The value after the directive in the comment
 * comment specified no specific rules, so it applies to all rules (e.g. `eslint-disable`)
 * @param {function(string): {create: Function***REMOVED******REMOVED*** options.ruleMapper A map from rule IDs to defined rules
 * @returns {Object***REMOVED*** Directives and problems from the comment
 */
function createDisableDirectives(options) {
    const { type, loc, value, ruleMapper ***REMOVED*** = options;
    const ruleIds = Object.keys(commentParser.parseListConfig(value));
    const directiveRules = ruleIds.length ? ruleIds : [null];
    const result = {
        directives: [], // valid disable directives
        directiveProblems: [] // problems in directives
    ***REMOVED***;

    for (const ruleId of directiveRules) {

        // push to directives, if the rule is defined(including null, e.g. /*eslint enable*/)
        if (ruleId === null || ruleMapper(ruleId) !== null) {
            result.directives.push({ type, line: loc.start.line, column: loc.start.column + 1, ruleId ***REMOVED***);
        ***REMOVED*** else {
            result.directiveProblems.push(createLintingProblem({ ruleId, loc ***REMOVED***));
        ***REMOVED***
    ***REMOVED***
    return result;
***REMOVED***

/**
 * Remove the ignored part from a given directive comment and trim it.
 * @param {string***REMOVED*** value The comment text to strip.
 * @returns {string***REMOVED*** The stripped text.
 */
function stripDirectiveComment(value) {
    return value.split(/\s-{2,***REMOVED***\s/u)[0].trim();
***REMOVED***

/**
 * Parses comments in file to extract file-specific config of rules, globals
 * and environments and merges them with global config; also code blocks
 * where reporting is disabled or enabled and merges them with reporting config.
 * @param {string***REMOVED*** filename The file being checked.
 * @param {ASTNode***REMOVED*** ast The top node of the AST.
 * @param {function(string): {create: Function***REMOVED******REMOVED*** ruleMapper A map from rule IDs to defined rules
 * @param {string|null***REMOVED*** warnInlineConfig If a string then it should warn directive comments as disabled. The string value is the config name what the setting came from.
 * @returns {{configuredRules: Object, enabledGlobals: {value:string,comment:Token***REMOVED***[], exportedVariables: Object, problems: Problem[], disableDirectives: DisableDirective[]***REMOVED******REMOVED***
 * A collection of the directive comments that were found, along with any problems that occurred when parsing
 */
function getDirectiveComments(filename, ast, ruleMapper, warnInlineConfig) {
    const configuredRules = {***REMOVED***;
    const enabledGlobals = Object.create(null);
    const exportedVariables = {***REMOVED***;
    const problems = [];
    const disableDirectives = [];
    const validator = new ConfigValidator({
        builtInRules: Rules
    ***REMOVED***);

    ast.comments.filter(token => token.type !== "Shebang").forEach(comment => {
        const trimmedCommentText = stripDirectiveComment(comment.value);
        const match = /^(eslint(?:-env|-enable|-disable(?:(?:-next)?-line)?)?|exported|globals?)(?:\s|$)/u.exec(trimmedCommentText);

        if (!match) {
            return;
        ***REMOVED***
        const directiveText = match[1];
        const lineCommentSupported = /^eslint-disable-(next-)?line$/u.test(directiveText);

        if (comment.type === "Line" && !lineCommentSupported) {
            return;
        ***REMOVED***

        if (warnInlineConfig) {
            const kind = comment.type === "Block" ? `/*${directiveText***REMOVED****/` : `//${directiveText***REMOVED***`;

            problems.push(createLintingProblem({
                ruleId: null,
                message: `'${kind***REMOVED***' has no effect because you have 'noInlineConfig' setting in ${warnInlineConfig***REMOVED***.`,
                loc: comment.loc,
                severity: 1
            ***REMOVED***));
            return;
        ***REMOVED***

        if (lineCommentSupported && comment.loc.start.line !== comment.loc.end.line) {
            const message = `${directiveText***REMOVED*** comment should not span multiple lines.`;

            problems.push(createLintingProblem({
                ruleId: null,
                message,
                loc: comment.loc
            ***REMOVED***));
            return;
        ***REMOVED***

        const directiveValue = trimmedCommentText.slice(match.index + directiveText.length);

        switch (directiveText) {
            case "eslint-disable":
            case "eslint-enable":
            case "eslint-disable-next-line":
            case "eslint-disable-line": {
                const directiveType = directiveText.slice("eslint-".length);
                const options = { type: directiveType, loc: comment.loc, value: directiveValue, ruleMapper ***REMOVED***;
                const { directives, directiveProblems ***REMOVED*** = createDisableDirectives(options);

                disableDirectives.push(...directives);
                problems.push(...directiveProblems);
                break;
            ***REMOVED***

            case "exported":
                Object.assign(exportedVariables, commentParser.parseStringConfig(directiveValue, comment));
                break;

            case "globals":
            case "global":
                for (const [id, { value ***REMOVED***] of Object.entries(commentParser.parseStringConfig(directiveValue, comment))) {
                    let normalizedValue;

                    try {
                        normalizedValue = ConfigOps.normalizeConfigGlobal(value);
                    ***REMOVED*** catch (err) {
                        problems.push(createLintingProblem({
                            ruleId: null,
                            loc: comment.loc,
                            message: err.message
                        ***REMOVED***));
                        continue;
                    ***REMOVED***

                    if (enabledGlobals[id]) {
                        enabledGlobals[id].comments.push(comment);
                        enabledGlobals[id].value = normalizedValue;
                    ***REMOVED*** else {
                        enabledGlobals[id] = {
                            comments: [comment],
                            value: normalizedValue
                        ***REMOVED***;
                    ***REMOVED***
                ***REMOVED***
                break;

            case "eslint": {
                const parseResult = commentParser.parseJsonConfig(directiveValue, comment.loc);

                if (parseResult.success) {
                    Object.keys(parseResult.config).forEach(name => {
                        const rule = ruleMapper(name);
                        const ruleValue = parseResult.config[name];

                        if (rule === null) {
                            problems.push(createLintingProblem({ ruleId: name, loc: comment.loc ***REMOVED***));
                            return;
                        ***REMOVED***

                        try {
                            validator.validateRuleOptions(rule, name, ruleValue);
                        ***REMOVED*** catch (err) {
                            problems.push(createLintingProblem({
                                ruleId: name,
                                message: err.message,
                                loc: comment.loc
                            ***REMOVED***));

                            // do not apply the config, if found invalid options.
                            return;
                        ***REMOVED***

                        configuredRules[name] = ruleValue;
                    ***REMOVED***);
                ***REMOVED*** else {
                    problems.push(parseResult.error);
                ***REMOVED***

                break;
            ***REMOVED***

            // no default
        ***REMOVED***
    ***REMOVED***);

    return {
        configuredRules,
        enabledGlobals,
        exportedVariables,
        problems,
        disableDirectives
    ***REMOVED***;
***REMOVED***

/**
 * Normalize ECMAScript version from the initial config
 * @param {Parser***REMOVED*** parser The parser which uses this options.
 * @param {number***REMOVED*** ecmaVersion ECMAScript version from the initial config
 * @returns {number***REMOVED*** normalized ECMAScript version
 */
function normalizeEcmaVersion(parser, ecmaVersion) {
    if ((parser[parserSymbol] || parser) === espree) {
        if (ecmaVersion === "latest") {
            return espree.latestEcmaVersion;
        ***REMOVED***
    ***REMOVED***

    /*
     * Calculate ECMAScript edition number from official year version starting with
     * ES2015, which corresponds with ES6 (or a difference of 2009).
     */
    return ecmaVersion >= 2015 ? ecmaVersion - 2009 : ecmaVersion;
***REMOVED***

const eslintEnvPattern = /\/\*\s*eslint-env\s(.+?)\*\//gsu;

/**
 * Checks whether or not there is a comment which has "eslint-env *" in a given text.
 * @param {string***REMOVED*** text A source code text to check.
 * @returns {Object|null***REMOVED*** A result of parseListConfig() with "eslint-env *" comment.
 */
function findEslintEnv(text) {
    let match, retv;

    eslintEnvPattern.lastIndex = 0;

    while ((match = eslintEnvPattern.exec(text)) !== null) {
        retv = Object.assign(
            retv || {***REMOVED***,
            commentParser.parseListConfig(stripDirectiveComment(match[1]))
        );
    ***REMOVED***

    return retv;
***REMOVED***

/**
 * Convert "/path/to/<text>" to "<text>".
 * `CLIEngine#executeOnText()` method gives "/path/to/<text>" if the filename
 * was omitted because `configArray.extractConfig()` requires an absolute path.
 * But the linter should pass `<text>` to `RuleContext#getFilename()` in that
 * case.
 * Also, code blocks can have their virtual filename. If the parent filename was
 * `<text>`, the virtual filename is `<text>/0_foo.js` or something like (i.e.,
 * it's not an absolute path).
 * @param {string***REMOVED*** filename The filename to normalize.
 * @returns {string***REMOVED*** The normalized filename.
 */
function normalizeFilename(filename) {
    const parts = filename.split(path.sep);
    const index = parts.lastIndexOf("<text>");

    return index === -1 ? filename : parts.slice(index).join(path.sep);
***REMOVED***

/**
 * Normalizes the possible options for `linter.verify` and `linter.verifyAndFix` to a
 * consistent shape.
 * @param {VerifyOptions***REMOVED*** providedOptions Options
 * @param {ConfigData***REMOVED*** config Config.
 * @returns {Required<VerifyOptions> & InternalOptions***REMOVED*** Normalized options
 */
function normalizeVerifyOptions(providedOptions, config) {
    const disableInlineConfig = config.noInlineConfig === true;
    const ignoreInlineConfig = providedOptions.allowInlineConfig === false;
    const configNameOfNoInlineConfig = config.configNameOfNoInlineConfig
        ? ` (${config.configNameOfNoInlineConfig***REMOVED***)`
        : "";

    let reportUnusedDisableDirectives = providedOptions.reportUnusedDisableDirectives;

    if (typeof reportUnusedDisableDirectives === "boolean") {
        reportUnusedDisableDirectives = reportUnusedDisableDirectives ? "error" : "off";
    ***REMOVED***
    if (typeof reportUnusedDisableDirectives !== "string") {
        reportUnusedDisableDirectives = config.reportUnusedDisableDirectives ? "warn" : "off";
    ***REMOVED***

    return {
        filename: normalizeFilename(providedOptions.filename || "<input>"),
        allowInlineConfig: !ignoreInlineConfig,
        warnInlineConfig: disableInlineConfig && !ignoreInlineConfig
            ? `your config${configNameOfNoInlineConfig***REMOVED***`
            : null,
        reportUnusedDisableDirectives,
        disableFixes: Boolean(providedOptions.disableFixes)
    ***REMOVED***;
***REMOVED***

/**
 * Combines the provided parserOptions with the options from environments
 * @param {Parser***REMOVED*** parser The parser which uses this options.
 * @param {ParserOptions***REMOVED*** providedOptions The provided 'parserOptions' key in a config
 * @param {Environment[]***REMOVED*** enabledEnvironments The environments enabled in configuration and with inline comments
 * @returns {ParserOptions***REMOVED*** Resulting parser options after merge
 */
function resolveParserOptions(parser, providedOptions, enabledEnvironments) {

    const parserOptionsFromEnv = enabledEnvironments
        .filter(env => env.parserOptions)
        .reduce((parserOptions, env) => merge(parserOptions, env.parserOptions), {***REMOVED***);
    const mergedParserOptions = merge(parserOptionsFromEnv, providedOptions || {***REMOVED***);
    const isModule = mergedParserOptions.sourceType === "module";

    if (isModule) {

        /*
         * can't have global return inside of modules
         * TODO: espree validate parserOptions.globalReturn when sourceType is setting to module.(@aladdin-add)
         */
        mergedParserOptions.ecmaFeatures = Object.assign({***REMOVED***, mergedParserOptions.ecmaFeatures, { globalReturn: false ***REMOVED***);
    ***REMOVED***

    mergedParserOptions.ecmaVersion = normalizeEcmaVersion(parser, mergedParserOptions.ecmaVersion);

    return mergedParserOptions;
***REMOVED***

/**
 * Combines the provided globals object with the globals from environments
 * @param {Record<string, GlobalConf>***REMOVED*** providedGlobals The 'globals' key in a config
 * @param {Environment[]***REMOVED*** enabledEnvironments The environments enabled in configuration and with inline comments
 * @returns {Record<string, GlobalConf>***REMOVED*** The resolved globals object
 */
function resolveGlobals(providedGlobals, enabledEnvironments) {
    return Object.assign(
        {***REMOVED***,
        ...enabledEnvironments.filter(env => env.globals).map(env => env.globals),
        providedGlobals
    );
***REMOVED***

/**
 * Strips Unicode BOM from a given text.
 * @param {string***REMOVED*** text A text to strip.
 * @returns {string***REMOVED*** The stripped text.
 */
function stripUnicodeBOM(text) {

    /*
     * Check Unicode BOM.
     * In JavaScript, string data is stored as UTF-16, so BOM is 0xFEFF.
     * http://www.ecma-international.org/ecma-262/6.0/#sec-unicode-format-control-characters
     */
    if (text.charCodeAt(0) === 0xFEFF) {
        return text.slice(1);
    ***REMOVED***
    return text;
***REMOVED***

/**
 * Get the options for a rule (not including severity), if any
 * @param {Array|number***REMOVED*** ruleConfig rule configuration
 * @returns {Array***REMOVED*** of rule options, empty Array if none
 */
function getRuleOptions(ruleConfig) {
    if (Array.isArray(ruleConfig)) {
        return ruleConfig.slice(1);
    ***REMOVED***
    return [];

***REMOVED***

/**
 * Analyze scope of the given AST.
 * @param {ASTNode***REMOVED*** ast The `Program` node to analyze.
 * @param {ParserOptions***REMOVED*** parserOptions The parser options.
 * @param {Record<string, string[]>***REMOVED*** visitorKeys The visitor keys.
 * @returns {ScopeManager***REMOVED*** The analysis result.
 */
function analyzeScope(ast, parserOptions, visitorKeys) {
    const ecmaFeatures = parserOptions.ecmaFeatures || {***REMOVED***;
    const ecmaVersion = parserOptions.ecmaVersion || DEFAULT_ECMA_VERSION;

    return eslintScope.analyze(ast, {
        ignoreEval: true,
        nodejsScope: ecmaFeatures.globalReturn,
        impliedStrict: ecmaFeatures.impliedStrict,
        ecmaVersion,
        sourceType: parserOptions.sourceType || "script",
        childVisitorKeys: visitorKeys || evk.KEYS,
        fallback: Traverser.getKeys
    ***REMOVED***);
***REMOVED***

/**
 * Parses text into an AST. Moved out here because the try-catch prevents
 * optimization of functions, so it's best to keep the try-catch as isolated
 * as possible
 * @param {string***REMOVED*** text The text to parse.
 * @param {Parser***REMOVED*** parser The parser to parse.
 * @param {ParserOptions***REMOVED*** providedParserOptions Options to pass to the parser
 * @param {string***REMOVED*** filePath The path to the file being parsed.
 * @returns {{success: false, error: Problem***REMOVED***|{success: true, sourceCode: SourceCode***REMOVED******REMOVED***
 * An object containing the AST and parser services if parsing was successful, or the error if parsing failed
 * @private
 */
function parse(text, parser, providedParserOptions, filePath) {
    const textToParse = stripUnicodeBOM(text).replace(astUtils.shebangPattern, (match, captured) => `//${captured***REMOVED***`);
    const parserOptions = Object.assign({***REMOVED***, providedParserOptions, {
        loc: true,
        range: true,
        raw: true,
        tokens: true,
        comment: true,
        eslintVisitorKeys: true,
        eslintScopeManager: true,
        filePath
    ***REMOVED***);

    /*
     * Check for parsing errors first. If there's a parsing error, nothing
     * else can happen. However, a parsing error does not throw an error
     * from this method - it's just considered a fatal error message, a
     * problem that ESLint identified just like any other.
     */
    try {
        const parseResult = (typeof parser.parseForESLint === "function")
            ? parser.parseForESLint(textToParse, parserOptions)
            : { ast: parser.parse(textToParse, parserOptions) ***REMOVED***;
        const ast = parseResult.ast;
        const parserServices = parseResult.services || {***REMOVED***;
        const visitorKeys = parseResult.visitorKeys || evk.KEYS;
        const scopeManager = parseResult.scopeManager || analyzeScope(ast, parserOptions, visitorKeys);

        return {
            success: true,

            /*
             * Save all values that `parseForESLint()` returned.
             * If a `SourceCode` object is given as the first parameter instead of source code text,
             * linter skips the parsing process and reuses the source code object.
             * In that case, linter needs all the values that `parseForESLint()` returned.
             */
            sourceCode: new SourceCode({
                text,
                ast,
                parserServices,
                scopeManager,
                visitorKeys
            ***REMOVED***)
        ***REMOVED***;
    ***REMOVED*** catch (ex) {

        // If the message includes a leading line number, strip it:
        const message = `Parsing error: ${ex.message.replace(/^line \d+:/iu, "").trim()***REMOVED***`;

        debug("%s\n%s", message, ex.stack);

        return {
            success: false,
            error: {
                ruleId: null,
                fatal: true,
                severity: 2,
                message,
                line: ex.lineNumber,
                column: ex.column
            ***REMOVED***
        ***REMOVED***;
    ***REMOVED***
***REMOVED***

/**
 * Gets the scope for the current node
 * @param {ScopeManager***REMOVED*** scopeManager The scope manager for this AST
 * @param {ASTNode***REMOVED*** currentNode The node to get the scope of
 * @returns {eslint-scope.Scope***REMOVED*** The scope information for this node
 */
function getScope(scopeManager, currentNode) {

    // On Program node, get the outermost scope to avoid return Node.js special function scope or ES modules scope.
    const inner = currentNode.type !== "Program";

    for (let node = currentNode; node; node = node.parent) {
        const scope = scopeManager.acquire(node, inner);

        if (scope) {
            if (scope.type === "function-expression-name") {
                return scope.childScopes[0];
            ***REMOVED***
            return scope;
        ***REMOVED***
    ***REMOVED***

    return scopeManager.scopes[0];
***REMOVED***

/**
 * Marks a variable as used in the current scope
 * @param {ScopeManager***REMOVED*** scopeManager The scope manager for this AST. The scope may be mutated by this function.
 * @param {ASTNode***REMOVED*** currentNode The node currently being traversed
 * @param {Object***REMOVED*** parserOptions The options used to parse this text
 * @param {string***REMOVED*** name The name of the variable that should be marked as used.
 * @returns {boolean***REMOVED*** True if the variable was found and marked as used, false if not.
 */
function markVariableAsUsed(scopeManager, currentNode, parserOptions, name) {
    const hasGlobalReturn = parserOptions.ecmaFeatures && parserOptions.ecmaFeatures.globalReturn;
    const specialScope = hasGlobalReturn || parserOptions.sourceType === "module";
    const currentScope = getScope(scopeManager, currentNode);

    // Special Node.js scope means we need to start one level deeper
    const initialScope = currentScope.type === "global" && specialScope ? currentScope.childScopes[0] : currentScope;

    for (let scope = initialScope; scope; scope = scope.upper) {
        const variable = scope.variables.find(scopeVar => scopeVar.name === name);

        if (variable) {
            variable.eslintUsed = true;
            return true;
        ***REMOVED***
    ***REMOVED***

    return false;
***REMOVED***

/**
 * Runs a rule, and gets its listeners
 * @param {Rule***REMOVED*** rule A normalized rule with a `create` method
 * @param {Context***REMOVED*** ruleContext The context that should be passed to the rule
 * @returns {Object***REMOVED*** A map of selector listeners provided by the rule
 */
function createRuleListeners(rule, ruleContext) {
    try {
        return rule.create(ruleContext);
    ***REMOVED*** catch (ex) {
        ex.message = `Error while loading rule '${ruleContext.id***REMOVED***': ${ex.message***REMOVED***`;
        throw ex;
    ***REMOVED***
***REMOVED***

/**
 * Gets all the ancestors of a given node
 * @param {ASTNode***REMOVED*** node The node
 * @returns {ASTNode[]***REMOVED*** All the ancestor nodes in the AST, not including the provided node, starting
 * from the root node and going inwards to the parent node.
 */
function getAncestors(node) {
    const ancestorsStartingAtParent = [];

    for (let ancestor = node.parent; ancestor; ancestor = ancestor.parent) {
        ancestorsStartingAtParent.push(ancestor);
    ***REMOVED***

    return ancestorsStartingAtParent.reverse();
***REMOVED***

// methods that exist on SourceCode object
const DEPRECATED_SOURCECODE_PASSTHROUGHS = {
    getSource: "getText",
    getSourceLines: "getLines",
    getAllComments: "getAllComments",
    getNodeByRangeIndex: "getNodeByRangeIndex",
    getComments: "getComments",
    getCommentsBefore: "getCommentsBefore",
    getCommentsAfter: "getCommentsAfter",
    getCommentsInside: "getCommentsInside",
    getJSDocComment: "getJSDocComment",
    getFirstToken: "getFirstToken",
    getFirstTokens: "getFirstTokens",
    getLastToken: "getLastToken",
    getLastTokens: "getLastTokens",
    getTokenAfter: "getTokenAfter",
    getTokenBefore: "getTokenBefore",
    getTokenByRangeStart: "getTokenByRangeStart",
    getTokens: "getTokens",
    getTokensAfter: "getTokensAfter",
    getTokensBefore: "getTokensBefore",
    getTokensBetween: "getTokensBetween"
***REMOVED***;

const BASE_TRAVERSAL_CONTEXT = Object.freeze(
    Object.keys(DEPRECATED_SOURCECODE_PASSTHROUGHS).reduce(
        (contextInfo, methodName) =>
            Object.assign(contextInfo, {
                [methodName](...args) {
                    return this.getSourceCode()[DEPRECATED_SOURCECODE_PASSTHROUGHS[methodName]](...args);
                ***REMOVED***
            ***REMOVED***),
        {***REMOVED***
    )
);

/**
 * Runs the given rules on the given SourceCode object
 * @param {SourceCode***REMOVED*** sourceCode A SourceCode object for the given text
 * @param {Object***REMOVED*** configuredRules The rules configuration
 * @param {function(string): Rule***REMOVED*** ruleMapper A mapper function from rule names to rules
 * @param {Object***REMOVED*** parserOptions The options that were passed to the parser
 * @param {string***REMOVED*** parserName The name of the parser in the config
 * @param {Object***REMOVED*** settings The settings that were enabled in the config
 * @param {string***REMOVED*** filename The reported filename of the code
 * @param {boolean***REMOVED*** disableFixes If true, it doesn't make `fix` properties.
 * @param {string | undefined***REMOVED*** cwd cwd of the cli
 * @param {string***REMOVED*** physicalFilename The full path of the file on disk without any code block information
 * @returns {Problem[]***REMOVED*** An array of reported problems
 */
function runRules(sourceCode, configuredRules, ruleMapper, parserOptions, parserName, settings, filename, disableFixes, cwd, physicalFilename) {
    const emitter = createEmitter();
    const nodeQueue = [];
    let currentNode = sourceCode.ast;

    Traverser.traverse(sourceCode.ast, {
        enter(node, parent) {
            node.parent = parent;
            nodeQueue.push({ isEntering: true, node ***REMOVED***);
        ***REMOVED***,
        leave(node) {
            nodeQueue.push({ isEntering: false, node ***REMOVED***);
        ***REMOVED***,
        visitorKeys: sourceCode.visitorKeys
    ***REMOVED***);

    /*
     * Create a frozen object with the ruleContext properties and methods that are shared by all rules.
     * All rule contexts will inherit from this object. This avoids the performance penalty of copying all the
     * properties once for each rule.
     */
    const sharedTraversalContext = Object.freeze(
        Object.assign(
            Object.create(BASE_TRAVERSAL_CONTEXT),
            {
                getAncestors: () => getAncestors(currentNode),
                getDeclaredVariables: sourceCode.scopeManager.getDeclaredVariables.bind(sourceCode.scopeManager),
                getCwd: () => cwd,
                getFilename: () => filename,
                getPhysicalFilename: () => physicalFilename || filename,
                getScope: () => getScope(sourceCode.scopeManager, currentNode),
                getSourceCode: () => sourceCode,
                markVariableAsUsed: name => markVariableAsUsed(sourceCode.scopeManager, currentNode, parserOptions, name),
                parserOptions,
                parserPath: parserName,
                parserServices: sourceCode.parserServices,
                settings
            ***REMOVED***
        )
    );


    const lintingProblems = [];

    Object.keys(configuredRules).forEach(ruleId => {
        const severity = ConfigOps.getRuleSeverity(configuredRules[ruleId]);

        // not load disabled rules
        if (severity === 0) {
            return;
        ***REMOVED***

        const rule = ruleMapper(ruleId);

        if (rule === null) {
            lintingProblems.push(createLintingProblem({ ruleId ***REMOVED***));
            return;
        ***REMOVED***

        const messageIds = rule.meta && rule.meta.messages;
        let reportTranslator = null;
        const ruleContext = Object.freeze(
            Object.assign(
                Object.create(sharedTraversalContext),
                {
                    id: ruleId,
                    options: getRuleOptions(configuredRules[ruleId]),
                    report(...args) {

                        /*
                         * Create a report translator lazily.
                         * In a vast majority of cases, any given rule reports zero errors on a given
                         * piece of code. Creating a translator lazily avoids the performance cost of
                         * creating a new translator function for each rule that usually doesn't get
                         * called.
                         *
                         * Using lazy report translators improves end-to-end performance by about 3%
                         * with Node 8.4.0.
                         */
                        if (reportTranslator === null) {
                            reportTranslator = createReportTranslator({
                                ruleId,
                                severity,
                                sourceCode,
                                messageIds,
                                disableFixes
                            ***REMOVED***);
                        ***REMOVED***
                        const problem = reportTranslator(...args);

                        if (problem.fix && rule.meta && !rule.meta.fixable) {
                            throw new Error("Fixable rules should export a `meta.fixable` property.");
                        ***REMOVED***
                        lintingProblems.push(problem);
                    ***REMOVED***
                ***REMOVED***
            )
        );

        const ruleListeners = createRuleListeners(rule, ruleContext);

        // add all the selectors from the rule as listeners
        Object.keys(ruleListeners).forEach(selector => {
            emitter.on(
                selector,
                timing.enabled
                    ? timing.time(ruleId, ruleListeners[selector])
                    : ruleListeners[selector]
            );
        ***REMOVED***);
    ***REMOVED***);

    // only run code path analyzer if the top level node is "Program", skip otherwise
    const eventGenerator = nodeQueue[0].node.type === "Program"
        ? new CodePathAnalyzer(new NodeEventGenerator(emitter, { visitorKeys: sourceCode.visitorKeys, fallback: Traverser.getKeys ***REMOVED***))
        : new NodeEventGenerator(emitter, { visitorKeys: sourceCode.visitorKeys, fallback: Traverser.getKeys ***REMOVED***);

    nodeQueue.forEach(traversalInfo => {
        currentNode = traversalInfo.node;

        try {
            if (traversalInfo.isEntering) {
                eventGenerator.enterNode(currentNode);
            ***REMOVED*** else {
                eventGenerator.leaveNode(currentNode);
            ***REMOVED***
        ***REMOVED*** catch (err) {
            err.currentNode = currentNode;
            throw err;
        ***REMOVED***
    ***REMOVED***);

    return lintingProblems;
***REMOVED***

/**
 * Ensure the source code to be a string.
 * @param {string|SourceCode***REMOVED*** textOrSourceCode The text or source code object.
 * @returns {string***REMOVED*** The source code text.
 */
function ensureText(textOrSourceCode) {
    if (typeof textOrSourceCode === "object") {
        const { hasBOM, text ***REMOVED*** = textOrSourceCode;
        const bom = hasBOM ? "\uFEFF" : "";

        return bom + text;
    ***REMOVED***

    return String(textOrSourceCode);
***REMOVED***

/**
 * Get an environment.
 * @param {LinterInternalSlots***REMOVED*** slots The internal slots of Linter.
 * @param {string***REMOVED*** envId The environment ID to get.
 * @returns {Environment|null***REMOVED*** The environment.
 */
function getEnv(slots, envId) {
    return (
        (slots.lastConfigArray && slots.lastConfigArray.pluginEnvironments.get(envId)) ||
        BuiltInEnvironments.get(envId) ||
        null
    );
***REMOVED***

/**
 * Get a rule.
 * @param {LinterInternalSlots***REMOVED*** slots The internal slots of Linter.
 * @param {string***REMOVED*** ruleId The rule ID to get.
 * @returns {Rule|null***REMOVED*** The rule.
 */
function getRule(slots, ruleId) {
    return (
        (slots.lastConfigArray && slots.lastConfigArray.pluginRules.get(ruleId)) ||
        slots.ruleMap.get(ruleId)
    );
***REMOVED***

/**
 * Normalize the value of the cwd
 * @param {string | undefined***REMOVED*** cwd raw value of the cwd, path to a directory that should be considered as the current working directory, can be undefined.
 * @returns {string | undefined***REMOVED*** normalized cwd
 */
function normalizeCwd(cwd) {
    if (cwd) {
        return cwd;
    ***REMOVED***
    if (typeof process === "object") {
        return process.cwd();
    ***REMOVED***

    // It's more explicit to assign the undefined
    // eslint-disable-next-line no-undefined
    return undefined;
***REMOVED***

/**
 * The map to store private data.
 * @type {WeakMap<Linter, LinterInternalSlots>***REMOVED***
 */
const internalSlotsMap = new WeakMap();

//------------------------------------------------------------------------------
// Public Interface
//------------------------------------------------------------------------------

/**
 * Object that is responsible for verifying JavaScript text
 * @name eslint
 */
class Linter {

    /**
     * Initialize the Linter.
     * @param {Object***REMOVED*** [config] the config object
     * @param {string***REMOVED*** [config.cwd]  path to a directory that should be considered as the current working directory, can be undefined.
     */
    constructor({ cwd ***REMOVED*** = {***REMOVED***) {
        internalSlotsMap.set(this, {
            cwd: normalizeCwd(cwd),
            lastConfigArray: null,
            lastSourceCode: null,
            parserMap: new Map([["espree", espree]]),
            ruleMap: new Rules()
        ***REMOVED***);

        this.version = pkg.version;
    ***REMOVED***

    /**
     * Getter for package version.
     * @static
     * @returns {string***REMOVED*** The version from package.json.
     */
    static get version() {
        return pkg.version;
    ***REMOVED***

    /**
     * Same as linter.verify, except without support for processors.
     * @param {string|SourceCode***REMOVED*** textOrSourceCode The text to parse or a SourceCode object.
     * @param {ConfigData***REMOVED*** providedConfig An ESLintConfig instance to configure everything.
     * @param {VerifyOptions***REMOVED*** [providedOptions] The optional filename of the file being checked.
     * @returns {LintMessage[]***REMOVED*** The results as an array of messages or an empty array if no messages.
     */
    _verifyWithoutProcessors(textOrSourceCode, providedConfig, providedOptions) {
        const slots = internalSlotsMap.get(this);
        const config = providedConfig || {***REMOVED***;
        const options = normalizeVerifyOptions(providedOptions, config);
        let text;

        // evaluate arguments
        if (typeof textOrSourceCode === "string") {
            slots.lastSourceCode = null;
            text = textOrSourceCode;
        ***REMOVED*** else {
            slots.lastSourceCode = textOrSourceCode;
            text = textOrSourceCode.text;
        ***REMOVED***

        // Resolve parser.
        let parserName = DEFAULT_PARSER_NAME;
        let parser = espree;

        if (typeof config.parser === "object" && config.parser !== null) {
            parserName = config.parser.filePath;
            parser = config.parser.definition;
        ***REMOVED*** else if (typeof config.parser === "string") {
            if (!slots.parserMap.has(config.parser)) {
                return [{
                    ruleId: null,
                    fatal: true,
                    severity: 2,
                    message: `Configured parser '${config.parser***REMOVED***' was not found.`,
                    line: 0,
                    column: 0
                ***REMOVED***];
            ***REMOVED***
            parserName = config.parser;
            parser = slots.parserMap.get(config.parser);
        ***REMOVED***

        // search and apply "eslint-env *".
        const envInFile = options.allowInlineConfig && !options.warnInlineConfig
            ? findEslintEnv(text)
            : {***REMOVED***;
        const resolvedEnvConfig = Object.assign({ builtin: true ***REMOVED***, config.env, envInFile);
        const enabledEnvs = Object.keys(resolvedEnvConfig)
            .filter(envName => resolvedEnvConfig[envName])
            .map(envName => getEnv(slots, envName))
            .filter(env => env);

        const parserOptions = resolveParserOptions(parser, config.parserOptions || {***REMOVED***, enabledEnvs);
        const configuredGlobals = resolveGlobals(config.globals || {***REMOVED***, enabledEnvs);
        const settings = config.settings || {***REMOVED***;

        if (!slots.lastSourceCode) {
            const parseResult = parse(
                text,
                parser,
                parserOptions,
                options.filename
            );

            if (!parseResult.success) {
                return [parseResult.error];
            ***REMOVED***

            slots.lastSourceCode = parseResult.sourceCode;
        ***REMOVED*** else {

            /*
             * If the given source code object as the first argument does not have scopeManager, analyze the scope.
             * This is for backward compatibility (SourceCode is frozen so it cannot rebind).
             */
            if (!slots.lastSourceCode.scopeManager) {
                slots.lastSourceCode = new SourceCode({
                    text: slots.lastSourceCode.text,
                    ast: slots.lastSourceCode.ast,
                    parserServices: slots.lastSourceCode.parserServices,
                    visitorKeys: slots.lastSourceCode.visitorKeys,
                    scopeManager: analyzeScope(slots.lastSourceCode.ast, parserOptions)
                ***REMOVED***);
            ***REMOVED***
        ***REMOVED***

        const sourceCode = slots.lastSourceCode;
        const commentDirectives = options.allowInlineConfig
            ? getDirectiveComments(options.filename, sourceCode.ast, ruleId => getRule(slots, ruleId), options.warnInlineConfig)
            : { configuredRules: {***REMOVED***, enabledGlobals: {***REMOVED***, exportedVariables: {***REMOVED***, problems: [], disableDirectives: [] ***REMOVED***;

        // augment global scope with declared global variables
        addDeclaredGlobals(
            sourceCode.scopeManager.scopes[0],
            configuredGlobals,
            { exportedVariables: commentDirectives.exportedVariables, enabledGlobals: commentDirectives.enabledGlobals ***REMOVED***
        );

        const configuredRules = Object.assign({***REMOVED***, config.rules, commentDirectives.configuredRules);

        let lintingProblems;

        try {
            lintingProblems = runRules(
                sourceCode,
                configuredRules,
                ruleId => getRule(slots, ruleId),
                parserOptions,
                parserName,
                settings,
                options.filename,
                options.disableFixes,
                slots.cwd,
                providedOptions.physicalFilename
            );
        ***REMOVED*** catch (err) {
            err.message += `\nOccurred while linting ${options.filename***REMOVED***`;
            debug("An error occurred while traversing");
            debug("Filename:", options.filename);
            if (err.currentNode) {
                const { line ***REMOVED*** = err.currentNode.loc.start;

                debug("Line:", line);
                err.message += `:${line***REMOVED***`;
            ***REMOVED***
            debug("Parser Options:", parserOptions);
            debug("Parser Path:", parserName);
            debug("Settings:", settings);
            throw err;
        ***REMOVED***

        return applyDisableDirectives({
            directives: commentDirectives.disableDirectives,
            problems: lintingProblems
                .concat(commentDirectives.problems)
                .sort((problemA, problemB) => problemA.line - problemB.line || problemA.column - problemB.column),
            reportUnusedDisableDirectives: options.reportUnusedDisableDirectives
        ***REMOVED***);
    ***REMOVED***

    /**
     * Verifies the text against the rules specified by the second argument.
     * @param {string|SourceCode***REMOVED*** textOrSourceCode The text to parse or a SourceCode object.
     * @param {ConfigData|ConfigArray***REMOVED*** config An ESLintConfig instance to configure everything.
     * @param {(string|(VerifyOptions&ProcessorOptions))***REMOVED*** [filenameOrOptions] The optional filename of the file being checked.
     *      If this is not set, the filename will default to '<input>' in the rule context. If
     *      an object, then it has "filename", "allowInlineConfig", and some properties.
     * @returns {LintMessage[]***REMOVED*** The results as an array of messages or an empty array if no messages.
     */
    verify(textOrSourceCode, config, filenameOrOptions) {
        debug("Verify");
        const options = typeof filenameOrOptions === "string"
            ? { filename: filenameOrOptions ***REMOVED***
            : filenameOrOptions || {***REMOVED***;

        // CLIEngine passes a `ConfigArray` object.
        if (config && typeof config.extractConfig === "function") {
            return this._verifyWithConfigArray(textOrSourceCode, config, options);
        ***REMOVED***

        /*
         * `Linter` doesn't support `overrides` property in configuration.
         * So we cannot apply multiple processors.
         */
        if (options.preprocess || options.postprocess) {
            return this._verifyWithProcessor(textOrSourceCode, config, options);
        ***REMOVED***
        return this._verifyWithoutProcessors(textOrSourceCode, config, options);
    ***REMOVED***

    /**
     * Verify a given code with `ConfigArray`.
     * @param {string|SourceCode***REMOVED*** textOrSourceCode The source code.
     * @param {ConfigArray***REMOVED*** configArray The config array.
     * @param {VerifyOptions&ProcessorOptions***REMOVED*** options The options.
     * @returns {LintMessage[]***REMOVED*** The found problems.
     */
    _verifyWithConfigArray(textOrSourceCode, configArray, options) {
        debug("With ConfigArray: %s", options.filename);

        // Store the config array in order to get plugin envs and rules later.
        internalSlotsMap.get(this).lastConfigArray = configArray;

        // Extract the final config for this file.
        const config = configArray.extractConfig(options.filename);
        const processor =
            config.processor &&
            configArray.pluginProcessors.get(config.processor);

        // Verify.
        if (processor) {
            debug("Apply the processor: %o", config.processor);
            const { preprocess, postprocess, supportsAutofix ***REMOVED*** = processor;
            const disableFixes = options.disableFixes || !supportsAutofix;

            return this._verifyWithProcessor(
                textOrSourceCode,
                config,
                { ...options, disableFixes, postprocess, preprocess ***REMOVED***,
                configArray
            );
        ***REMOVED***
        return this._verifyWithoutProcessors(textOrSourceCode, config, options);
    ***REMOVED***

    /**
     * Verify with a processor.
     * @param {string|SourceCode***REMOVED*** textOrSourceCode The source code.
     * @param {ConfigData|ExtractedConfig***REMOVED*** config The config array.
     * @param {VerifyOptions&ProcessorOptions***REMOVED*** options The options.
     * @param {ConfigArray***REMOVED*** [configForRecursive] The `ConfigArray` object to apply multiple processors recursively.
     * @returns {LintMessage[]***REMOVED*** The found problems.
     */
    _verifyWithProcessor(textOrSourceCode, config, options, configForRecursive) {
        const filename = options.filename || "<input>";
        const filenameToExpose = normalizeFilename(filename);
        const physicalFilename = options.physicalFilename || filenameToExpose;
        const text = ensureText(textOrSourceCode);
        const preprocess = options.preprocess || (rawText => [rawText]);

        // TODO(stephenwade): Replace this with array.flat() when we drop support for Node v10
        const postprocess = options.postprocess || (array => [].concat(...array));
        const filterCodeBlock =
            options.filterCodeBlock ||
            (blockFilename => blockFilename.endsWith(".js"));
        const originalExtname = path.extname(filename);
        const messageLists = preprocess(text, filenameToExpose).map((block, i) => {
            debug("A code block was found: %o", block.filename || "(unnamed)");

            // Keep the legacy behavior.
            if (typeof block === "string") {
                return this._verifyWithoutProcessors(block, config, options);
            ***REMOVED***

            const blockText = block.text;
            const blockName = path.join(filename, `${i***REMOVED***_${block.filename***REMOVED***`);

            // Skip this block if filtered.
            if (!filterCodeBlock(blockName, blockText)) {
                debug("This code block was skipped.");
                return [];
            ***REMOVED***

            // Resolve configuration again if the file content or extension was changed.
            if (configForRecursive && (text !== blockText || path.extname(blockName) !== originalExtname)) {
                debug("Resolving configuration again because the file content or extension was changed.");
                return this._verifyWithConfigArray(
                    blockText,
                    configForRecursive,
                    { ...options, filename: blockName, physicalFilename ***REMOVED***
                );
            ***REMOVED***

            // Does lint.
            return this._verifyWithoutProcessors(
                blockText,
                config,
                { ...options, filename: blockName, physicalFilename ***REMOVED***
            );
        ***REMOVED***);

        return postprocess(messageLists, filenameToExpose);
    ***REMOVED***

    /**
     * Gets the SourceCode object representing the parsed source.
     * @returns {SourceCode***REMOVED*** The SourceCode object.
     */
    getSourceCode() {
        return internalSlotsMap.get(this).lastSourceCode;
    ***REMOVED***

    /**
     * Defines a new linting rule.
     * @param {string***REMOVED*** ruleId A unique rule identifier
     * @param {Function | Rule***REMOVED*** ruleModule Function from context to object mapping AST node types to event handlers
     * @returns {void***REMOVED***
     */
    defineRule(ruleId, ruleModule) {
        internalSlotsMap.get(this).ruleMap.define(ruleId, ruleModule);
    ***REMOVED***

    /**
     * Defines many new linting rules.
     * @param {Record<string, Function | Rule>***REMOVED*** rulesToDefine map from unique rule identifier to rule
     * @returns {void***REMOVED***
     */
    defineRules(rulesToDefine) {
        Object.getOwnPropertyNames(rulesToDefine).forEach(ruleId => {
            this.defineRule(ruleId, rulesToDefine[ruleId]);
        ***REMOVED***);
    ***REMOVED***

    /**
     * Gets an object with all loaded rules.
     * @returns {Map<string, Rule>***REMOVED*** All loaded rules
     */
    getRules() {
        const { lastConfigArray, ruleMap ***REMOVED*** = internalSlotsMap.get(this);

        return new Map(function *() {
            yield* ruleMap;

            if (lastConfigArray) {
                yield* lastConfigArray.pluginRules;
            ***REMOVED***
        ***REMOVED***());
    ***REMOVED***

    /**
     * Define a new parser module
     * @param {string***REMOVED*** parserId Name of the parser
     * @param {Parser***REMOVED*** parserModule The parser object
     * @returns {void***REMOVED***
     */
    defineParser(parserId, parserModule) {
        internalSlotsMap.get(this).parserMap.set(parserId, parserModule);
    ***REMOVED***

    /**
     * Performs multiple autofix passes over the text until as many fixes as possible
     * have been applied.
     * @param {string***REMOVED*** text The source text to apply fixes to.
     * @param {ConfigData|ConfigArray***REMOVED*** config The ESLint config object to use.
     * @param {VerifyOptions&ProcessorOptions&FixOptions***REMOVED*** options The ESLint options object to use.
     * @returns {{fixed:boolean,messages:LintMessage[],output:string***REMOVED******REMOVED*** The result of the fix operation as returned from the
     *      SourceCodeFixer.
     */
    verifyAndFix(text, config, options) {
        let messages = [],
            fixedResult,
            fixed = false,
            passNumber = 0,
            currentText = text;
        const debugTextDescription = options && options.filename || `${text.slice(0, 10)***REMOVED***...`;
        const shouldFix = options && typeof options.fix !== "undefined" ? options.fix : true;

        /**
         * This loop continues until one of the following is true:
         *
         * 1. No more fixes have been applied.
         * 2. Ten passes have been made.
         *
         * That means anytime a fix is successfully applied, there will be another pass.
         * Essentially, guaranteeing a minimum of two passes.
         */
        do {
            passNumber++;

            debug(`Linting code for ${debugTextDescription***REMOVED*** (pass ${passNumber***REMOVED***)`);
            messages = this.verify(currentText, config, options);

            debug(`Generating fixed text for ${debugTextDescription***REMOVED*** (pass ${passNumber***REMOVED***)`);
            fixedResult = SourceCodeFixer.applyFixes(currentText, messages, shouldFix);

            /*
             * stop if there are any syntax errors.
             * 'fixedResult.output' is a empty string.
             */
            if (messages.length === 1 && messages[0].fatal) {
                break;
            ***REMOVED***

            // keep track if any fixes were ever applied - important for return value
            fixed = fixed || fixedResult.fixed;

            // update to use the fixed output instead of the original text
            currentText = fixedResult.output;

        ***REMOVED*** while (
            fixedResult.fixed &&
            passNumber < MAX_AUTOFIX_PASSES
        );

        /*
         * If the last result had fixes, we need to lint again to be sure we have
         * the most up-to-date information.
         */
        if (fixedResult.fixed) {
            fixedResult.messages = this.verify(currentText, config, options);
        ***REMOVED***

        // ensure the last result properly reflects if fixes were done
        fixedResult.fixed = fixed;
        fixedResult.output = currentText;

        return fixedResult;
    ***REMOVED***
***REMOVED***

module.exports = {
    Linter,

    /**
     * Get the internal slots of a given Linter instance for tests.
     * @param {Linter***REMOVED*** instance The Linter instance to get.
     * @returns {LinterInternalSlots***REMOVED*** The internal slots.
     */
    getLinterInternalSlots(instance) {
        return internalSlotsMap.get(instance);
    ***REMOVED***
***REMOVED***;
