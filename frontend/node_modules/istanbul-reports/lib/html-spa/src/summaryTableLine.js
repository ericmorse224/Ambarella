const React = require('react');

function MetricCells({ metrics ***REMOVED***) {
    const { classForPercent, pct, covered, missed, total ***REMOVED*** = metrics;

    return (
        <>
            <td className={'pct ' + classForPercent***REMOVED***>{Math.round(pct)***REMOVED***% </td>
            <td className={classForPercent***REMOVED***>
                <div className="bar">
                    <div
                        className={`bar__data ${classForPercent***REMOVED*** ${classForPercent***REMOVED***--dark`***REMOVED***
                        style={{ width: pct + '%' ***REMOVED******REMOVED***
                    ></div>
                </div>
            </td>
            <td className={'abs ' + classForPercent***REMOVED***>{covered***REMOVED***</td>
            <td className={'abs ' + classForPercent***REMOVED***>{missed***REMOVED***</td>
            <td className={'abs ' + classForPercent***REMOVED***>{total***REMOVED***</td>
        </>
    );
***REMOVED***

function FileCell({
    file,
    prefix,
    expandedLines,
    setExpandedLines,
    hasChildren,
    setFileFilter
***REMOVED***) {
    if (hasChildren) {
        const expandedIndex = expandedLines.indexOf(prefix + file);
        const isExpanded = expandedIndex >= 0;
        const newExpandedLines = isExpanded
            ? [
                  ...expandedLines.slice(0, expandedIndex),
                  ...expandedLines.slice(expandedIndex + 1)
              ]
            : [...expandedLines, prefix + file];

        return (
            <>
                <button
                    type="button"
                    onClick={() => setExpandedLines(newExpandedLines)***REMOVED***
                    className="expandbutton"
                >
                    {isExpanded ? String.fromCharCode(0x2013) : '+'***REMOVED***
                </button>
                <a
                    href="javascript:void(0)"
                    onClick={() => setFileFilter(prefix + file)***REMOVED***
                >
                    {file***REMOVED***
                </a>
            </>
        );
    ***REMOVED*** else {
        return <a href={`./${prefix***REMOVED***${file***REMOVED***.html`***REMOVED***>{file***REMOVED***</a>;
    ***REMOVED***
***REMOVED***

function getWorstMetricClassForPercent(metricsToShow, metrics) {
    let classForPercent = 'none';
    for (const metricToShow in metricsToShow) {
        if (metricsToShow[metricToShow]) {
            const metricClassForPercent = metrics[metricToShow].classForPercent;

            // ignore none metrics so they don't change whats shown
            if (metricClassForPercent === 'none') {
                continue;
            ***REMOVED***

            // if the metric low or lower than whats currently being used, replace it
            if (
                metricClassForPercent == 'low' ||
                (metricClassForPercent === 'medium' &&
                    classForPercent !== 'low') ||
                (metricClassForPercent === 'high' &&
                    classForPercent !== 'low' &&
                    classForPercent !== 'medium')
            ) {
                classForPercent = metricClassForPercent;
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***
    return classForPercent;
***REMOVED***

module.exports = function SummaryTableLine({
    prefix,
    metrics,
    file,
    children,
    tabSize,
    metricsToShow,
    expandedLines,
    setExpandedLines,
    fileFilter,
    setFileFilter
***REMOVED***) {
    tabSize = tabSize || 0;
    if (children && tabSize > 0) {
        tabSize--;
    ***REMOVED***
    prefix = (fileFilter ? fileFilter + '/' : '') + (prefix || '');

    return (
        <>
            <tr>
                <td
                    className={
                        'file ' +
                        getWorstMetricClassForPercent(metricsToShow, metrics)
                    ***REMOVED***
                >
                    {/* eslint-disable-line prefer-spread */ Array.apply(null, {
                        length: tabSize
                    ***REMOVED***).map((nothing, index) => (
                        <span className="filetab" key={index***REMOVED*** />
                    ))***REMOVED***
                    <FileCell
                        file={file***REMOVED***
                        prefix={prefix***REMOVED***
                        expandedLines={expandedLines***REMOVED***
                        setExpandedLines={setExpandedLines***REMOVED***
                        hasChildren={Boolean(children)***REMOVED***
                        setFileFilter={setFileFilter***REMOVED***
                    />
                </td>
                {metricsToShow.statements && (
                    <MetricCells metrics={metrics.statements***REMOVED*** />
                )***REMOVED***
                {metricsToShow.branches && (
                    <MetricCells metrics={metrics.branches***REMOVED*** />
                )***REMOVED***
                {metricsToShow.functions && (
                    <MetricCells metrics={metrics.functions***REMOVED*** />
                )***REMOVED***
                {metricsToShow.lines && <MetricCells metrics={metrics.lines***REMOVED*** />***REMOVED***
            </tr>
            {children &&
                expandedLines.indexOf(prefix + file) >= 0 &&
                children.map(child => (
                    <SummaryTableLine
                        {...child***REMOVED***
                        tabSize={tabSize + 2***REMOVED***
                        key={child.file***REMOVED***
                        prefix={prefix + file + '/'***REMOVED***
                        metricsToShow={metricsToShow***REMOVED***
                        expandedLines={expandedLines***REMOVED***
                        setExpandedLines={setExpandedLines***REMOVED***
                        setFileFilter={setFileFilter***REMOVED***
                    />
                ))***REMOVED***
        </>
    );
***REMOVED***;
