"use strict";

const {
  resolve
***REMOVED*** = require('path');

const {
  statSync
***REMOVED*** = require('fs');

const normalizePath = require('normalize-path');
/**
 * @template T
 * @param {T***REMOVED*** value
 * @return {
   T extends (null | undefined)
     ? []
     : T extends string
       ? [string]
       : T extends readonly unknown[]
         ? T
         : T extends Iterable<infer T>
           ? T[]
           : [T]
 ***REMOVED***
 */

/* istanbul ignore next */


function arrify(value) {
  // eslint-disable-next-line no-undefined
  if (value === null || value === undefined) {
    // @ts-ignore
    return [];
  ***REMOVED***

  if (Array.isArray(value)) {
    // @ts-ignore
    return value;
  ***REMOVED***

  if (typeof value === 'string') {
    // @ts-ignore
    return [value];
  ***REMOVED*** // @ts-ignore


  if (typeof value[Symbol.iterator] === 'function') {
    // @ts-ignore
    return [...value];
  ***REMOVED*** // @ts-ignore


  return [value];
***REMOVED***
/**
 * @param {string|string[]***REMOVED*** files
 * @param {string***REMOVED*** context
 * @returns {string[]***REMOVED***
 */


function parseFiles(files, context) {
  return arrify(files).map((
  /** @type {string***REMOVED*** */
  file) => normalizePath(resolve(context, file)));
***REMOVED***
/**
 * @param {string|string[]***REMOVED*** patterns
 * @param {string|string[]***REMOVED*** extensions
 * @returns {string[]***REMOVED***
 */


function parseFoldersToGlobs(patterns, extensions = []) {
  const extensionsList = arrify(extensions);
  const [prefix, postfix] = extensionsList.length > 1 ? ['{', '***REMOVED***'] : ['', ''];
  const extensionsGlob = extensionsList.map((
  /** @type {string***REMOVED*** */
  extension) => extension.replace(/^\./u, '')).join(',');
  return arrify(patterns).map((
  /** @type {string***REMOVED*** */
  pattern) => {
    try {
      // The patterns are absolute because they are prepended with the context.
      const stats = statSync(pattern);
      /* istanbul ignore else */

      if (stats.isDirectory()) {
        return pattern.replace(/[/\\]*?$/u, `/**${extensionsGlob ? `/*.${prefix + extensionsGlob + postfix***REMOVED***` : ''***REMOVED***`);
      ***REMOVED***
    ***REMOVED*** catch (_) {// Return the pattern as is on error.
    ***REMOVED***

    return pattern;
  ***REMOVED***);
***REMOVED***
/**
 * @param {string***REMOVED*** _ key, but unused
 * @param {any***REMOVED*** value
 */


const jsonStringifyReplacerSortKeys = (_, value) => {
  /**
   * @param {{ [x: string]: any; ***REMOVED******REMOVED*** sorted
   * @param {string | number***REMOVED*** key
   */
  const insert = (sorted, key) => {
    // eslint-disable-next-line no-param-reassign
    sorted[key] = value[key];
    return sorted;
  ***REMOVED***;

  return value instanceof Object && !(value instanceof Array) ? Object.keys(value).sort().reduce(insert, {***REMOVED***) : value;
***REMOVED***;

module.exports = {
  arrify,
  parseFiles,
  parseFoldersToGlobs,
  jsonStringifyReplacerSortKeys
***REMOVED***;