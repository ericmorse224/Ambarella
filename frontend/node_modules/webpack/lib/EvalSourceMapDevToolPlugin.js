/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const { ConcatSource, RawSource ***REMOVED*** = require("webpack-sources");
const ModuleFilenameHelpers = require("./ModuleFilenameHelpers");
const NormalModule = require("./NormalModule");
const RuntimeGlobals = require("./RuntimeGlobals");
const SourceMapDevToolModuleOptionsPlugin = require("./SourceMapDevToolModuleOptionsPlugin");
const JavascriptModulesPlugin = require("./javascript/JavascriptModulesPlugin");
const ConcatenatedModule = require("./optimize/ConcatenatedModule");
const generateDebugId = require("./util/generateDebugId");
const { makePathsAbsolute ***REMOVED*** = require("./util/identifier");

/** @typedef {import("webpack-sources").Source***REMOVED*** Source */
/** @typedef {import("../declarations/WebpackOptions").DevTool***REMOVED*** DevToolOptions */
/** @typedef {import("../declarations/plugins/SourceMapDevToolPlugin").SourceMapDevToolPluginOptions***REMOVED*** SourceMapDevToolPluginOptions */
/** @typedef {import("./ChunkGraph").ModuleId***REMOVED*** ModuleId */
/** @typedef {import("./Compiler")***REMOVED*** Compiler */
/** @typedef {import("./NormalModule").SourceMap***REMOVED*** SourceMap */

/** @type {WeakMap<Source, Source>***REMOVED*** */
const cache = new WeakMap();

const devtoolWarning = new RawSource(`/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
`);

const PLUGIN_NAME = "EvalSourceMapDevToolPlugin";

class EvalSourceMapDevToolPlugin {
	/**
	 * @param {SourceMapDevToolPluginOptions | string***REMOVED*** inputOptions Options object
	 */
	constructor(inputOptions) {
		/** @type {SourceMapDevToolPluginOptions***REMOVED*** */
		let options;
		if (typeof inputOptions === "string") {
			options = {
				append: inputOptions
			***REMOVED***;
		***REMOVED*** else {
			options = inputOptions;
		***REMOVED***
		this.sourceMapComment =
			options.append && typeof options.append !== "function"
				? options.append
				: "//# sourceURL=[module]\n//# sourceMappingURL=[url]";
		this.moduleFilenameTemplate =
			options.moduleFilenameTemplate ||
			"webpack://[namespace]/[resource-path]?[hash]";
		this.namespace = options.namespace || "";
		this.options = options;
	***REMOVED***

	/**
	 * Apply the plugin
	 * @param {Compiler***REMOVED*** compiler the compiler instance
	 * @returns {void***REMOVED***
	 */
	apply(compiler) {
		const options = this.options;
		compiler.hooks.compilation.tap(PLUGIN_NAME, compilation => {
			const hooks = JavascriptModulesPlugin.getCompilationHooks(compilation);
			new SourceMapDevToolModuleOptionsPlugin(options).apply(compilation);
			const matchModule = ModuleFilenameHelpers.matchObject.bind(
				ModuleFilenameHelpers,
				options
			);
			hooks.renderModuleContent.tap(
				PLUGIN_NAME,
				(source, m, { chunk, runtimeTemplate, chunkGraph ***REMOVED***) => {
					const cachedSource = cache.get(source);
					if (cachedSource !== undefined) {
						return cachedSource;
					***REMOVED***

					/**
					 * @param {Source***REMOVED*** r result
					 * @returns {Source***REMOVED*** result
					 */
					const result = r => {
						cache.set(source, r);
						return r;
					***REMOVED***;

					if (m instanceof NormalModule) {
						const module = /** @type {NormalModule***REMOVED*** */ (m);
						if (!matchModule(module.resource)) {
							return result(source);
						***REMOVED***
					***REMOVED*** else if (m instanceof ConcatenatedModule) {
						const concatModule = /** @type {ConcatenatedModule***REMOVED*** */ (m);
						if (concatModule.rootModule instanceof NormalModule) {
							const module = /** @type {NormalModule***REMOVED*** */ (
								concatModule.rootModule
							);
							if (!matchModule(module.resource)) {
								return result(source);
							***REMOVED***
						***REMOVED*** else {
							return result(source);
						***REMOVED***
					***REMOVED*** else {
						return result(source);
					***REMOVED***

					const namespace = compilation.getPath(this.namespace, {
						chunk
					***REMOVED***);
					/** @type {SourceMap***REMOVED*** */
					let sourceMap;
					let content;
					if (source.sourceAndMap) {
						const sourceAndMap = source.sourceAndMap(options);
						sourceMap = /** @type {SourceMap***REMOVED*** */ (sourceAndMap.map);
						content = sourceAndMap.source;
					***REMOVED*** else {
						sourceMap = /** @type {SourceMap***REMOVED*** */ (source.map(options));
						content = source.source();
					***REMOVED***
					if (!sourceMap) {
						return result(source);
					***REMOVED***

					// Clone (flat) the sourcemap to ensure that the mutations below do not persist.
					sourceMap = { ...sourceMap ***REMOVED***;
					const context = /** @type {string***REMOVED*** */ (compiler.options.context);
					const root = compiler.root;
					const modules = sourceMap.sources.map(source => {
						if (!source.startsWith("webpack://")) return source;
						source = makePathsAbsolute(context, source.slice(10), root);
						const module = compilation.findModule(source);
						return module || source;
					***REMOVED***);
					let moduleFilenames = modules.map(module =>
						ModuleFilenameHelpers.createFilename(
							module,
							{
								moduleFilenameTemplate: this.moduleFilenameTemplate,
								namespace
							***REMOVED***,
							{
								requestShortener: runtimeTemplate.requestShortener,
								chunkGraph,
								hashFunction: compilation.outputOptions.hashFunction
							***REMOVED***
						)
					);
					moduleFilenames = ModuleFilenameHelpers.replaceDuplicates(
						moduleFilenames,
						(filename, i, n) => {
							for (let j = 0; j < n; j++) filename += "*";
							return filename;
						***REMOVED***
					);
					sourceMap.sources = moduleFilenames;
					if (options.noSources) {
						sourceMap.sourcesContent = undefined;
					***REMOVED***
					sourceMap.sourceRoot = options.sourceRoot || "";
					const moduleId =
						/** @type {ModuleId***REMOVED*** */
						(chunkGraph.getModuleId(m));
					sourceMap.file =
						typeof moduleId === "number" ? `${moduleId***REMOVED***.js` : moduleId;

					if (options.debugIds) {
						sourceMap.debugId = generateDebugId(content, sourceMap.file);
					***REMOVED***

					const footer = `${this.sourceMapComment.replace(
						/\[url\]/g,
						`data:application/json;charset=utf-8;base64,${Buffer.from(
							JSON.stringify(sourceMap),
							"utf8"
						).toString("base64")***REMOVED***`
					)***REMOVED***\n//# sourceURL=webpack-internal:///${moduleId***REMOVED***\n`; // workaround for chrome bug

					return result(
						new RawSource(
							`eval(${
								compilation.outputOptions.trustedTypes
									? `${RuntimeGlobals.createScript***REMOVED***(${JSON.stringify(
											content + footer
										)***REMOVED***)`
									: JSON.stringify(content + footer)
							***REMOVED***);`
						)
					);
				***REMOVED***
			);
			hooks.inlineInRuntimeBailout.tap(
				"EvalDevToolModulePlugin",
				() => "the eval-source-map devtool is used."
			);
			hooks.render.tap(
				PLUGIN_NAME,
				source => new ConcatSource(devtoolWarning, source)
			);
			hooks.chunkHash.tap(PLUGIN_NAME, (chunk, hash) => {
				hash.update(PLUGIN_NAME);
				hash.update("2");
			***REMOVED***);
			if (compilation.outputOptions.trustedTypes) {
				compilation.hooks.additionalModuleRuntimeRequirements.tap(
					PLUGIN_NAME,
					(module, set, context) => {
						set.add(RuntimeGlobals.createScript);
					***REMOVED***
				);
			***REMOVED***
		***REMOVED***);
	***REMOVED***
***REMOVED***

module.exports = EvalSourceMapDevToolPlugin;
