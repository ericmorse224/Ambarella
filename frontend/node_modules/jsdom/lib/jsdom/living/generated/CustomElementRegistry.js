"use strict";

const conversions = require("webidl-conversions");
const utils = require("./utils.js");

const CustomElementConstructor = require("./CustomElementConstructor.js");
const ElementDefinitionOptions = require("./ElementDefinitionOptions.js");
const ceReactionsPreSteps_helpers_custom_elements = require("../helpers/custom-elements.js").ceReactionsPreSteps;
const ceReactionsPostSteps_helpers_custom_elements = require("../helpers/custom-elements.js").ceReactionsPostSteps;
const Node = require("./Node.js");
const implSymbol = utils.implSymbol;
const ctorRegistrySymbol = utils.ctorRegistrySymbol;

const interfaceName = "CustomElementRegistry";

exports.is = value => {
  return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;
***REMOVED***;
exports.isImpl = value => {
  return utils.isObject(value) && value instanceof Impl.implementation;
***REMOVED***;
exports.convert = (value, { context = "The provided value" ***REMOVED*** = {***REMOVED***) => {
  if (exports.is(value)) {
    return utils.implForWrapper(value);
  ***REMOVED***
  throw new TypeError(`${context***REMOVED*** is not of type 'CustomElementRegistry'.`);
***REMOVED***;

function makeWrapper(globalObject) {
  if (globalObject[ctorRegistrySymbol] === undefined) {
    throw new Error("Internal error: invalid global object");
  ***REMOVED***

  const ctor = globalObject[ctorRegistrySymbol]["CustomElementRegistry"];
  if (ctor === undefined) {
    throw new Error("Internal error: constructor CustomElementRegistry is not installed on the passed global object");
  ***REMOVED***

  return Object.create(ctor.prototype);
***REMOVED***

exports.create = (globalObject, constructorArgs, privateData) => {
  const wrapper = makeWrapper(globalObject);
  return exports.setup(wrapper, globalObject, constructorArgs, privateData);
***REMOVED***;

exports.createImpl = (globalObject, constructorArgs, privateData) => {
  const wrapper = exports.create(globalObject, constructorArgs, privateData);
  return utils.implForWrapper(wrapper);
***REMOVED***;

exports._internalSetup = (wrapper, globalObject) => {***REMOVED***;

exports.setup = (wrapper, globalObject, constructorArgs = [], privateData = {***REMOVED***) => {
  privateData.wrapper = wrapper;

  exports._internalSetup(wrapper, globalObject);
  Object.defineProperty(wrapper, implSymbol, {
    value: new Impl.implementation(globalObject, constructorArgs, privateData),
    configurable: true
  ***REMOVED***);

  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;
  if (Impl.init) {
    Impl.init(wrapper[implSymbol]);
  ***REMOVED***
  return wrapper;
***REMOVED***;

exports.new = globalObject => {
  const wrapper = makeWrapper(globalObject);

  exports._internalSetup(wrapper, globalObject);
  Object.defineProperty(wrapper, implSymbol, {
    value: Object.create(Impl.implementation.prototype),
    configurable: true
  ***REMOVED***);

  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;
  if (Impl.init) {
    Impl.init(wrapper[implSymbol]);
  ***REMOVED***
  return wrapper[implSymbol];
***REMOVED***;

const exposed = new Set(["Window"]);

exports.install = (globalObject, globalNames) => {
  if (!globalNames.some(globalName => exposed.has(globalName))) {
    return;
  ***REMOVED***
  class CustomElementRegistry {
    constructor() {
      throw new TypeError("Illegal constructor");
    ***REMOVED***

    define(name, constructor) {
      const esValue = this !== null && this !== undefined ? this : globalObject;
      if (!exports.is(esValue)) {
        throw new TypeError("'define' called on an object that is not a valid instance of CustomElementRegistry.");
      ***REMOVED***

      if (arguments.length < 2) {
        throw new TypeError(
          "Failed to execute 'define' on 'CustomElementRegistry': 2 arguments required, but only " +
            arguments.length +
            " present."
        );
      ***REMOVED***
      const args = [];
      {
        let curArg = arguments[0];
        curArg = conversions["DOMString"](curArg, {
          context: "Failed to execute 'define' on 'CustomElementRegistry': parameter 1"
        ***REMOVED***);
        args.push(curArg);
      ***REMOVED***
      {
        let curArg = arguments[1];
        curArg = CustomElementConstructor.convert(curArg, {
          context: "Failed to execute 'define' on 'CustomElementRegistry': parameter 2"
        ***REMOVED***);
        args.push(curArg);
      ***REMOVED***
      {
        let curArg = arguments[2];
        curArg = ElementDefinitionOptions.convert(curArg, {
          context: "Failed to execute 'define' on 'CustomElementRegistry': parameter 3"
        ***REMOVED***);
        args.push(curArg);
      ***REMOVED***
      ceReactionsPreSteps_helpers_custom_elements(globalObject);
      try {
        return esValue[implSymbol].define(...args);
      ***REMOVED*** finally {
        ceReactionsPostSteps_helpers_custom_elements(globalObject);
      ***REMOVED***
    ***REMOVED***

    get(name) {
      const esValue = this !== null && this !== undefined ? this : globalObject;
      if (!exports.is(esValue)) {
        throw new TypeError("'get' called on an object that is not a valid instance of CustomElementRegistry.");
      ***REMOVED***

      if (arguments.length < 1) {
        throw new TypeError(
          "Failed to execute 'get' on 'CustomElementRegistry': 1 argument required, but only " +
            arguments.length +
            " present."
        );
      ***REMOVED***
      const args = [];
      {
        let curArg = arguments[0];
        curArg = conversions["DOMString"](curArg, {
          context: "Failed to execute 'get' on 'CustomElementRegistry': parameter 1"
        ***REMOVED***);
        args.push(curArg);
      ***REMOVED***
      return esValue[implSymbol].get(...args);
    ***REMOVED***

    whenDefined(name) {
      try {
        const esValue = this !== null && this !== undefined ? this : globalObject;
        if (!exports.is(esValue)) {
          throw new TypeError(
            "'whenDefined' called on an object that is not a valid instance of CustomElementRegistry."
          );
        ***REMOVED***

        if (arguments.length < 1) {
          throw new TypeError(
            "Failed to execute 'whenDefined' on 'CustomElementRegistry': 1 argument required, but only " +
              arguments.length +
              " present."
          );
        ***REMOVED***
        const args = [];
        {
          let curArg = arguments[0];
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'whenDefined' on 'CustomElementRegistry': parameter 1"
          ***REMOVED***);
          args.push(curArg);
        ***REMOVED***
        return utils.tryWrapperForImpl(esValue[implSymbol].whenDefined(...args));
      ***REMOVED*** catch (e) {
        return Promise.reject(e);
      ***REMOVED***
    ***REMOVED***

    upgrade(root) {
      const esValue = this !== null && this !== undefined ? this : globalObject;
      if (!exports.is(esValue)) {
        throw new TypeError("'upgrade' called on an object that is not a valid instance of CustomElementRegistry.");
      ***REMOVED***

      if (arguments.length < 1) {
        throw new TypeError(
          "Failed to execute 'upgrade' on 'CustomElementRegistry': 1 argument required, but only " +
            arguments.length +
            " present."
        );
      ***REMOVED***
      const args = [];
      {
        let curArg = arguments[0];
        curArg = Node.convert(curArg, {
          context: "Failed to execute 'upgrade' on 'CustomElementRegistry': parameter 1"
        ***REMOVED***);
        args.push(curArg);
      ***REMOVED***
      ceReactionsPreSteps_helpers_custom_elements(globalObject);
      try {
        return esValue[implSymbol].upgrade(...args);
      ***REMOVED*** finally {
        ceReactionsPostSteps_helpers_custom_elements(globalObject);
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***
  Object.defineProperties(CustomElementRegistry.prototype, {
    define: { enumerable: true ***REMOVED***,
    get: { enumerable: true ***REMOVED***,
    whenDefined: { enumerable: true ***REMOVED***,
    upgrade: { enumerable: true ***REMOVED***,
    [Symbol.toStringTag]: { value: "CustomElementRegistry", configurable: true ***REMOVED***
  ***REMOVED***);
  if (globalObject[ctorRegistrySymbol] === undefined) {
    globalObject[ctorRegistrySymbol] = Object.create(null);
  ***REMOVED***
  globalObject[ctorRegistrySymbol][interfaceName] = CustomElementRegistry;

  Object.defineProperty(globalObject, interfaceName, {
    configurable: true,
    writable: true,
    value: CustomElementRegistry
  ***REMOVED***);
***REMOVED***;

const Impl = require("../custom-elements/CustomElementRegistry-impl.js");
