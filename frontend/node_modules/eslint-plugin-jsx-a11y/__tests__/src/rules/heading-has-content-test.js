/**
 * @fileoverview Enforce heading (h1, h2, etc) elements contain accessible content.
 * @author Ethan Cohen
 */

// -----------------------------------------------------------------------------
// Requirements
// -----------------------------------------------------------------------------

import { RuleTester ***REMOVED*** from 'eslint';
import parserOptionsMapper from '../../__util__/parserOptionsMapper';
import parsers from '../../__util__/helpers/parsers';
import rule from '../../../src/rules/heading-has-content';

// -----------------------------------------------------------------------------
// Tests
// -----------------------------------------------------------------------------

const ruleTester = new RuleTester();

const expectedError = {
  message: 'Headings must have content and the content must be accessible by a screen reader.',
  type: 'JSXOpeningElement',
***REMOVED***;

const components = [{
  components: ['Heading', 'Title'],
***REMOVED***];

const componentsSettings = {
  'jsx-a11y': {
    components: {
      CustomInput: 'input',
      Title: 'h1',
      Heading: 'h2',
    ***REMOVED***,
  ***REMOVED***,
***REMOVED***;

ruleTester.run('heading-has-content', rule, {
  valid: parsers.all([].concat(
    // DEFAULT ELEMENT TESTS
    { code: '<div />;' ***REMOVED***,
    { code: '<h1>Foo</h1>' ***REMOVED***,
    { code: '<h2>Foo</h2>' ***REMOVED***,
    { code: '<h3>Foo</h3>' ***REMOVED***,
    { code: '<h4>Foo</h4>' ***REMOVED***,
    { code: '<h5>Foo</h5>' ***REMOVED***,
    { code: '<h6>Foo</h6>' ***REMOVED***,
    { code: '<h6>123</h6>' ***REMOVED***,
    { code: '<h1><Bar /></h1>' ***REMOVED***,
    { code: '<h1>{foo***REMOVED***</h1>' ***REMOVED***,
    { code: '<h1>{foo.bar***REMOVED***</h1>' ***REMOVED***,
    { code: '<h1 dangerouslySetInnerHTML={{ __html: "foo" ***REMOVED******REMOVED*** />' ***REMOVED***,
    { code: '<h1 children={children***REMOVED*** />' ***REMOVED***,
    // CUSTOM ELEMENT TESTS FOR COMPONENTS OPTION
    { code: '<Heading>Foo</Heading>', options: components ***REMOVED***,
    { code: '<Title>Foo</Title>', options: components ***REMOVED***,
    { code: '<Heading><Bar /></Heading>', options: components ***REMOVED***,
    { code: '<Heading>{foo***REMOVED***</Heading>', options: components ***REMOVED***,
    { code: '<Heading>{foo.bar***REMOVED***</Heading>', options: components ***REMOVED***,
    { code: '<Heading dangerouslySetInnerHTML={{ __html: "foo" ***REMOVED******REMOVED*** />', options: components ***REMOVED***,
    { code: '<Heading children={children***REMOVED*** />', options: components ***REMOVED***,
    { code: '<h1 aria-hidden />' ***REMOVED***,
    // CUSTOM ELEMENT TESTS FOR COMPONENTS SETTINGS
    { code: '<Heading>Foo</Heading>', settings: componentsSettings ***REMOVED***,
    { code: '<h1><CustomInput type="hidden" /></h1>' ***REMOVED***,
  )).map(parserOptionsMapper),
  invalid: parsers.all([].concat(
    // DEFAULT ELEMENT TESTS
    { code: '<h1 />', errors: [expectedError] ***REMOVED***,
    { code: '<h1><Bar aria-hidden /></h1>', errors: [expectedError] ***REMOVED***,
    { code: '<h1>{undefined***REMOVED***</h1>', errors: [expectedError] ***REMOVED***,
    { code: '<h1><input type="hidden" /></h1>', errors: [expectedError] ***REMOVED***,

    // CUSTOM ELEMENT TESTS FOR COMPONENTS OPTION
    { code: '<Heading />', errors: [expectedError], options: components ***REMOVED***,
    { code: '<Heading><Bar aria-hidden /></Heading>', errors: [expectedError], options: components ***REMOVED***,
    { code: '<Heading>{undefined***REMOVED***</Heading>', errors: [expectedError], options: components ***REMOVED***,

    // CUSTOM ELEMENT TESTS FOR COMPONENTS SETTINGS
    { code: '<Heading />', errors: [expectedError], settings: componentsSettings ***REMOVED***,
    { code: '<h1><CustomInput type="hidden" /></h1>', errors: [expectedError], settings: componentsSettings ***REMOVED***,
  )).map(parserOptionsMapper),
***REMOVED***);
