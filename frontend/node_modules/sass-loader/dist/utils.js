"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
***REMOVED***);
exports.getCompileFn = getCompileFn;
exports.getModernWebpackImporter = getModernWebpackImporter;
exports.getSassImplementation = getSassImplementation;
exports.getSassOptions = getSassOptions;
exports.getWebpackImporter = getWebpackImporter;
exports.getWebpackResolver = getWebpackResolver;
exports.isSupportedFibers = isSupportedFibers;
exports.normalizeSourceMap = normalizeSourceMap;

var _url = _interopRequireDefault(require("url"));

var _path = _interopRequireDefault(require("path"));

var _full = require("klona/full");

var _neoAsync = _interopRequireDefault(require("neo-async"));

var _SassWarning = _interopRequireDefault(require("./SassWarning"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj ***REMOVED***; ***REMOVED***

function getDefaultSassImplementation() {
  let sassImplPkg = "sass";

  try {
    require.resolve("sass");
  ***REMOVED*** catch (ignoreError) {
    try {
      require.resolve("node-sass");

      sassImplPkg = "node-sass";
    ***REMOVED*** catch (_ignoreError) {
      try {
        require.resolve("sass-embedded");

        sassImplPkg = "sass-embedded";
      ***REMOVED*** catch (__ignoreError) {
        sassImplPkg = "sass";
      ***REMOVED***
    ***REMOVED***
  ***REMOVED*** // eslint-disable-next-line import/no-dynamic-require, global-require


  return require(sassImplPkg);
***REMOVED***
/**
 * This function is not Webpack-specific and can be used by tools wishing to mimic `sass-loader`'s behaviour, so its signature should not be changed.
 */


function getSassImplementation(loaderContext, implementation) {
  let resolvedImplementation = implementation;

  if (!resolvedImplementation) {
    try {
      resolvedImplementation = getDefaultSassImplementation();
    ***REMOVED*** catch (error) {
      loaderContext.emitError(error);
      return;
    ***REMOVED***
  ***REMOVED***

  if (typeof resolvedImplementation === "string") {
    try {
      // eslint-disable-next-line import/no-dynamic-require, global-require
      resolvedImplementation = require(resolvedImplementation);
    ***REMOVED*** catch (error) {
      loaderContext.emitError(error); // eslint-disable-next-line consistent-return

      return;
    ***REMOVED***
  ***REMOVED***

  const {
    info
  ***REMOVED*** = resolvedImplementation;

  if (!info) {
    loaderContext.emitError(new Error("Unknown Sass implementation."));
    return;
  ***REMOVED***

  const infoParts = info.split("\t");

  if (infoParts.length < 2) {
    loaderContext.emitError(new Error(`Unknown Sass implementation "${info***REMOVED***".`));
    return;
  ***REMOVED***

  const [implementationName] = infoParts;

  if (implementationName === "dart-sass") {
    // eslint-disable-next-line consistent-return
    return resolvedImplementation;
  ***REMOVED*** else if (implementationName === "node-sass") {
    // eslint-disable-next-line consistent-return
    return resolvedImplementation;
  ***REMOVED*** else if (implementationName === "sass-embedded") {
    // eslint-disable-next-line consistent-return
    return resolvedImplementation;
  ***REMOVED***

  loaderContext.emitError(new Error(`Unknown Sass implementation "${implementationName***REMOVED***".`));
***REMOVED***
/**
 * @param {any***REMOVED*** loaderContext
 * @returns {boolean***REMOVED***
 */


function isProductionLikeMode(loaderContext) {
  return loaderContext.mode === "production" || !loaderContext.mode;
***REMOVED***

function proxyCustomImporters(importers, loaderContext) {
  return [].concat(importers).map(importer => function proxyImporter(...args) {
    const self = { ...this,
      webpackLoaderContext: loaderContext
    ***REMOVED***;
    return importer.apply(self, args);
  ***REMOVED***);
***REMOVED***

function isSupportedFibers() {
  const [nodeVersion] = process.versions.node.split(".");
  return Number(nodeVersion) < 16;
***REMOVED***
/**
 * Derives the sass options from the loader context and normalizes its values with sane defaults.
 *
 * @param {object***REMOVED*** loaderContext
 * @param {object***REMOVED*** loaderOptions
 * @param {string***REMOVED*** content
 * @param {object***REMOVED*** implementation
 * @param {boolean***REMOVED*** useSourceMap
 * @returns {Object***REMOVED***
 */


async function getSassOptions(loaderContext, loaderOptions, content, implementation, useSourceMap) {
  const options = (0, _full.klona)(loaderOptions.sassOptions ? typeof loaderOptions.sassOptions === "function" ? loaderOptions.sassOptions(loaderContext) || {***REMOVED*** : loaderOptions.sassOptions : {***REMOVED***);
  const isDartSass = implementation.info.includes("dart-sass");
  const isModernAPI = loaderOptions.api === "modern";
  options.data = loaderOptions.additionalData ? typeof loaderOptions.additionalData === "function" ? await loaderOptions.additionalData(content, loaderContext) : `${loaderOptions.additionalData***REMOVED***\n${content***REMOVED***` : content;

  if (!options.logger) {
    // TODO set me to `true` by default in the next major release
    const needEmitWarning = loaderOptions.warnRuleAsWarning === true;
    const logger = loaderContext.getLogger("sass-loader");

    const formatSpan = span => `${span.url || "-"***REMOVED***:${span.start.line***REMOVED***:${span.start.column***REMOVED***: `;

    options.logger = {
      debug(message, loggerOptions) {
        let builtMessage = "";

        if (loggerOptions.span) {
          builtMessage = formatSpan(loggerOptions.span);
        ***REMOVED***

        builtMessage += message;
        logger.debug(builtMessage);
      ***REMOVED***,

      warn(message, loggerOptions) {
        let builtMessage = "";

        if (loggerOptions.deprecation) {
          builtMessage += "Deprecation ";
        ***REMOVED***

        if (loggerOptions.span && !loggerOptions.stack) {
          builtMessage = formatSpan(loggerOptions.span);
        ***REMOVED***

        builtMessage += message;

        if (loggerOptions.stack) {
          builtMessage += `\n\n${loggerOptions.stack***REMOVED***`;
        ***REMOVED***

        if (needEmitWarning) {
          loaderContext.emitWarning(new _SassWarning.default(builtMessage, loggerOptions));
        ***REMOVED*** else {
          logger.warn(builtMessage);
        ***REMOVED***
      ***REMOVED***

    ***REMOVED***;
  ***REMOVED***

  const {
    resourcePath
  ***REMOVED*** = loaderContext;

  if (isModernAPI) {
    options.url = _url.default.pathToFileURL(resourcePath); // opt.outputStyle

    if (!options.style && isProductionLikeMode(loaderContext)) {
      options.style = "compressed";
    ***REMOVED***

    if (useSourceMap) {
      options.sourceMap = true;
    ***REMOVED*** // If we are compiling sass and indentedSyntax isn't set, automatically set it.


    if (typeof options.syntax === "undefined") {
      const ext = _path.default.extname(resourcePath);

      if (ext && ext.toLowerCase() === ".scss") {
        options.syntax = "scss";
      ***REMOVED*** else if (ext && ext.toLowerCase() === ".sass") {
        options.syntax = "indented";
      ***REMOVED*** else if (ext && ext.toLowerCase() === ".css") {
        options.syntax = "css";
      ***REMOVED***
    ***REMOVED***

    options.importers = options.importers ? proxyCustomImporters(Array.isArray(options.importers) ? options.importers : [options.importers], loaderContext) : [];
  ***REMOVED*** else {
    options.file = resourcePath;

    if (isDartSass && isSupportedFibers()) {
      const shouldTryToResolveFibers = !options.fiber && options.fiber !== false;

      if (shouldTryToResolveFibers) {
        let fibers;

        try {
          fibers = require.resolve("fibers");
        ***REMOVED*** catch (_error) {// Nothing
        ***REMOVED***

        if (fibers) {
          // eslint-disable-next-line global-require, import/no-dynamic-require
          options.fiber = require(fibers);
        ***REMOVED***
      ***REMOVED*** else if (options.fiber === false) {
        // Don't pass the `fiber` option for `sass` (`Dart Sass`)
        delete options.fiber;
      ***REMOVED***
    ***REMOVED*** else {
      // Don't pass the `fiber` option for `node-sass`
      delete options.fiber;
    ***REMOVED*** // opt.outputStyle


    if (!options.outputStyle && isProductionLikeMode(loaderContext)) {
      options.outputStyle = "compressed";
    ***REMOVED***

    if (useSourceMap) {
      // Deliberately overriding the sourceMap option here.
      // node-sass won't produce source maps if the data option is used and options.sourceMap is not a string.
      // In case it is a string, options.sourceMap should be a path where the source map is written.
      // But since we're using the data option, the source map will not actually be written, but
      // all paths in sourceMap.sources will be relative to that path.
      // Pretty complicated... :(
      options.sourceMap = true;
      options.outFile = _path.default.join(loaderContext.rootContext, "style.css.map");
      options.sourceMapContents = true;
      options.omitSourceMapUrl = true;
      options.sourceMapEmbed = false;
    ***REMOVED***

    const ext = _path.default.extname(resourcePath); // If we are compiling sass and indentedSyntax isn't set, automatically set it.


    if (ext && ext.toLowerCase() === ".sass" && typeof options.indentedSyntax === "undefined") {
      options.indentedSyntax = true;
    ***REMOVED*** else {
      options.indentedSyntax = Boolean(options.indentedSyntax);
    ***REMOVED*** // Allow passing custom importers to `sass`/`node-sass`. Accepts `Function` or an array of `Function`s.


    options.importer = options.importer ? proxyCustomImporters(Array.isArray(options.importer) ? options.importer : [options.importer], loaderContext) : [];
    options.includePaths = [].concat(process.cwd()).concat( // We use `includePaths` in context for resolver, so it should be always absolute
    (options.includePaths || []).map(includePath => _path.default.isAbsolute(includePath) ? includePath : _path.default.join(process.cwd(), includePath))).concat(process.env.SASS_PATH ? process.env.SASS_PATH.split(process.platform === "win32" ? ";" : ":") : []);

    if (typeof options.charset === "undefined") {
      options.charset = true;
    ***REMOVED***
  ***REMOVED***

  return options;
***REMOVED***

const MODULE_REQUEST_REGEX = /^[^?]*~/; // Examples:
// - ~package
// - ~package/
// - ~@org
// - ~@org/
// - ~@org/package
// - ~@org/package/

const IS_MODULE_IMPORT = /^~([^/]+|[^/]+\/|@[^/]+[/][^/]+|@[^/]+\/?|@[^/]+[/][^/]+\/)$/;
/**
 * When `sass`/`node-sass` tries to resolve an import, it uses a special algorithm.
 * Since the `sass-loader` uses webpack to resolve the modules, we need to simulate that algorithm.
 * This function returns an array of import paths to try.
 * The last entry in the array is always the original url to enable straight-forward webpack.config aliases.
 *
 * We don't need emulate `dart-sass` "It's not clear which file to import." errors (when "file.ext" and "_file.ext" files are present simultaneously in the same directory).
 * This reduces performance and `dart-sass` always do it on own side.
 *
 * @param {string***REMOVED*** url
 * @param {boolean***REMOVED*** forWebpackResolver
 * @param {boolean***REMOVED*** fromImport
 * @returns {Array<string>***REMOVED***
 */

function getPossibleRequests( // eslint-disable-next-line no-shadow
url, forWebpackResolver = false, fromImport = false) {
  let request = url; // In case there is module request, send this to webpack resolver

  if (forWebpackResolver) {
    if (MODULE_REQUEST_REGEX.test(url)) {
      request = request.replace(MODULE_REQUEST_REGEX, "");
    ***REMOVED***

    if (IS_MODULE_IMPORT.test(url)) {
      request = request[request.length - 1] === "/" ? request : `${request***REMOVED***/`;
      return [...new Set([request, url])];
    ***REMOVED***
  ***REMOVED*** // Keep in mind: ext can also be something like '.datepicker' when the true extension is omitted and the filename contains a dot.
  // @see https://github.com/webpack-contrib/sass-loader/issues/167


  const extension = _path.default.extname(request).toLowerCase(); // Because @import is also defined in CSS, Sass needs a way of compiling plain CSS @imports without trying to import the files at compile time.
  // To accomplish this, and to ensure SCSS is as much of a superset of CSS as possible, Sass will compile any @imports with the following characteristics to plain CSS imports:
  //  - imports where the URL ends with .css.
  //  - imports where the URL begins http:// or https://.
  //  - imports where the URL is written as a url().
  //  - imports that have media queries.
  //
  // The `node-sass` package sends `@import` ending on `.css` to importer, it is bug, so we skip resolve


  if (extension === ".css") {
    return [];
  ***REMOVED***

  const dirname = _path.default.dirname(request);

  const normalizedDirname = dirname === "." ? "" : `${dirname***REMOVED***/`;

  const basename = _path.default.basename(request);

  const basenameWithoutExtension = _path.default.basename(request, extension);

  return [...new Set([].concat(fromImport ? [`${normalizedDirname***REMOVED***_${basenameWithoutExtension***REMOVED***.import${extension***REMOVED***`, `${normalizedDirname***REMOVED***${basenameWithoutExtension***REMOVED***.import${extension***REMOVED***`] : []).concat([`${normalizedDirname***REMOVED***_${basename***REMOVED***`, `${normalizedDirname***REMOVED***${basename***REMOVED***`]).concat(forWebpackResolver ? [url] : []))];
***REMOVED***

function promiseResolve(callbackResolve) {
  return (context, request) => new Promise((resolve, reject) => {
    callbackResolve(context, request, (error, result) => {
      if (error) {
        reject(error);
      ***REMOVED*** else {
        resolve(result);
      ***REMOVED***
    ***REMOVED***);
  ***REMOVED***);
***REMOVED***

async function startResolving(resolutionMap) {
  if (resolutionMap.length === 0) {
    return Promise.reject();
  ***REMOVED***

  const [{
    possibleRequests
  ***REMOVED***] = resolutionMap;

  if (possibleRequests.length === 0) {
    return Promise.reject();
  ***REMOVED***

  const [{
    resolve,
    context
  ***REMOVED***] = resolutionMap;

  try {
    return await resolve(context, possibleRequests[0]);
  ***REMOVED*** catch (_ignoreError) {
    const [, ...tailResult] = possibleRequests;

    if (tailResult.length === 0) {
      const [, ...tailResolutionMap] = resolutionMap;
      return startResolving(tailResolutionMap);
    ***REMOVED*** // eslint-disable-next-line no-param-reassign


    resolutionMap[0].possibleRequests = tailResult;
    return startResolving(resolutionMap);
  ***REMOVED***
***REMOVED***

const IS_SPECIAL_MODULE_IMPORT = /^~[^/]+$/; // `[drive_letter]:\` + `\\[server]\[sharename]\`

const IS_NATIVE_WIN32_PATH = /^[a-z]:[/\\]|^\\\\/i;
/**
 * @public
 * Create the resolve function used in the custom Sass importer.
 *
 * Can be used by external tools to mimic how `sass-loader` works, for example
 * in a Jest transform. Such usages will want to wrap `resolve.create` from
 * [`enhanced-resolve`]{@link https://github.com/webpack/enhanced-resolve***REMOVED*** to
 * pass as the `resolverFactory` argument.
 *
 * @param {Function***REMOVED*** resolverFactory - A factory function for creating a Webpack
 *   resolver.
 * @param {Object***REMOVED*** implementation - The imported Sass implementation, both
 *   `sass` (Dart Sass) and `node-sass` are supported.
 * @param {string[]***REMOVED*** [includePaths] - The list of include paths passed to Sass.
 *
 * @throws If a compatible Sass implementation cannot be found.
 */

function getWebpackResolver(resolverFactory, implementation, includePaths = []) {
  const isDartSass = implementation && implementation.info.includes("dart-sass"); // We only have one difference with the built-in sass resolution logic and out resolution logic:
  // First, we look at the files starting with `_`, then without `_` (i.e. `_name.sass`, `_name.scss`, `_name.css`, `name.sass`, `name.scss`, `name.css`),
  // although `sass` look together by extensions (i.e. `_name.sass`/`name.sass`/`_name.scss`/`name.scss`/`_name.css`/`name.css`).
  // It shouldn't be a problem because `sass` throw errors:
  // - on having `_name.sass` and `name.sass` (extension can be `sass`, `scss` or `css`) in the same directory
  // - on having `_name.sass` and `_name.scss` in the same directory
  //
  // Also `sass` prefer `sass`/`scss` over `css`.

  const sassModuleResolve = promiseResolve(resolverFactory({
    alias: [],
    aliasFields: [],
    conditionNames: [],
    descriptionFiles: [],
    extensions: [".sass", ".scss", ".css"],
    exportsFields: [],
    mainFields: [],
    mainFiles: ["_index", "index"],
    modules: [],
    restrictions: [/\.((sa|sc|c)ss)$/i],
    preferRelative: true
  ***REMOVED***));
  const sassImportResolve = promiseResolve(resolverFactory({
    alias: [],
    aliasFields: [],
    conditionNames: [],
    descriptionFiles: [],
    extensions: [".sass", ".scss", ".css"],
    exportsFields: [],
    mainFields: [],
    mainFiles: ["_index.import", "_index", "index.import", "index"],
    modules: [],
    restrictions: [/\.((sa|sc|c)ss)$/i],
    preferRelative: true
  ***REMOVED***));
  const webpackModuleResolve = promiseResolve(resolverFactory({
    dependencyType: "sass",
    conditionNames: ["sass", "style"],
    mainFields: ["sass", "style", "main", "..."],
    mainFiles: ["_index", "index", "..."],
    extensions: [".sass", ".scss", ".css"],
    restrictions: [/\.((sa|sc|c)ss)$/i],
    preferRelative: true
  ***REMOVED***));
  const webpackImportResolve = promiseResolve(resolverFactory({
    dependencyType: "sass",
    conditionNames: ["sass", "style"],
    mainFields: ["sass", "style", "main", "..."],
    mainFiles: ["_index.import", "_index", "index.import", "index", "..."],
    extensions: [".sass", ".scss", ".css"],
    restrictions: [/\.((sa|sc|c)ss)$/i],
    preferRelative: true
  ***REMOVED***));
  return (context, request, fromImport) => {
    // See https://github.com/webpack/webpack/issues/12340
    // Because `node-sass` calls our importer before `1. Filesystem imports relative to the base file.`
    // custom importer may not return `{ file: '/path/to/name.ext' ***REMOVED***` and therefore our `context` will be relative
    if (!isDartSass && !_path.default.isAbsolute(context)) {
      return Promise.reject();
    ***REMOVED***

    const originalRequest = request;
    const isFileScheme = originalRequest.slice(0, 5).toLowerCase() === "file:";

    if (isFileScheme) {
      try {
        // eslint-disable-next-line no-param-reassign
        request = _url.default.fileURLToPath(originalRequest);
      ***REMOVED*** catch (ignoreError) {
        // eslint-disable-next-line no-param-reassign
        request = request.slice(7);
      ***REMOVED***
    ***REMOVED***

    let resolutionMap = [];
    const needEmulateSassResolver = // `sass` doesn't support module import
    !IS_SPECIAL_MODULE_IMPORT.test(request) && // We need improve absolute paths handling.
    // Absolute paths should be resolved:
    // - Server-relative URLs - `<context>/path/to/file.ext` (where `<context>` is root context)
    // - Absolute path - `/full/path/to/file.ext` or `C:\\full\path\to\file.ext`
    !isFileScheme && !originalRequest.startsWith("/") && !IS_NATIVE_WIN32_PATH.test(originalRequest);

    if (includePaths.length > 0 && needEmulateSassResolver) {
      // The order of import precedence is as follows:
      //
      // 1. Filesystem imports relative to the base file.
      // 2. Custom importer imports.
      // 3. Filesystem imports relative to the working directory.
      // 4. Filesystem imports relative to an `includePaths` path.
      // 5. Filesystem imports relative to a `SASS_PATH` path.
      //
      // `sass` run custom importers before `3`, `4` and `5` points, we need to emulate this behavior to avoid wrong resolution.
      const sassPossibleRequests = getPossibleRequests(request, false, fromImport); // `node-sass` calls our importer before `1. Filesystem imports relative to the base file.`, so we need emulate this too

      if (!isDartSass) {
        resolutionMap = resolutionMap.concat({
          resolve: fromImport ? sassImportResolve : sassModuleResolve,
          context: _path.default.dirname(context),
          possibleRequests: sassPossibleRequests
        ***REMOVED***);
      ***REMOVED***

      resolutionMap = resolutionMap.concat( // eslint-disable-next-line no-shadow
      includePaths.map(context => {
        return {
          resolve: fromImport ? sassImportResolve : sassModuleResolve,
          context,
          possibleRequests: sassPossibleRequests
        ***REMOVED***;
      ***REMOVED***));
    ***REMOVED***

    const webpackPossibleRequests = getPossibleRequests(request, true, fromImport);
    resolutionMap = resolutionMap.concat({
      resolve: fromImport ? webpackImportResolve : webpackModuleResolve,
      context: _path.default.dirname(context),
      possibleRequests: webpackPossibleRequests
    ***REMOVED***);
    return startResolving(resolutionMap);
  ***REMOVED***;
***REMOVED***

const MATCH_CSS = /\.css$/i;

function getModernWebpackImporter() {
  return {
    async canonicalize() {
      return null;
    ***REMOVED***,

    load() {// TODO implement
    ***REMOVED***

  ***REMOVED***;
***REMOVED***

function getWebpackImporter(loaderContext, implementation, includePaths) {
  const resolve = getWebpackResolver(loaderContext.getResolve, implementation, includePaths);
  return function importer(originalUrl, prev, done) {
    const {
      fromImport
    ***REMOVED*** = this;
    resolve(prev, originalUrl, fromImport).then(result => {
      // Add the result as dependency.
      // Although we're also using stats.includedFiles, this might come in handy when an error occurs.
      // In this case, we don't get stats.includedFiles from node-sass/sass.
      loaderContext.addDependency(_path.default.normalize(result)); // By removing the CSS file extension, we trigger node-sass to include the CSS file instead of just linking it.

      done({
        file: result.replace(MATCH_CSS, "")
      ***REMOVED***);
    ***REMOVED***) // Catch all resolving errors, return the original file and pass responsibility back to other custom importers
    .catch(() => {
      done({
        file: originalUrl
      ***REMOVED***);
    ***REMOVED***);
  ***REMOVED***;
***REMOVED***

let nodeSassJobQueue = null;
/**
 * Verifies that the implementation and version of Sass is supported by this loader.
 *
 * @param {Object***REMOVED*** implementation
 * @param {Object***REMOVED*** options
 * @returns {Function***REMOVED***
 */

function getCompileFn(implementation, options) {
  const isNewSass = implementation.info.includes("dart-sass") || implementation.info.includes("sass-embedded");

  if (isNewSass) {
    if (options.api === "modern") {
      return sassOptions => {
        const {
          data,
          ...rest
        ***REMOVED*** = sassOptions;
        return implementation.compileStringAsync(data, rest);
      ***REMOVED***;
    ***REMOVED***

    return sassOptions => new Promise((resolve, reject) => {
      implementation.render(sassOptions, (error, result) => {
        if (error) {
          reject(error);
          return;
        ***REMOVED***

        resolve(result);
      ***REMOVED***);
    ***REMOVED***);
  ***REMOVED***

  if (options.api === "modern") {
    throw new Error("Modern API is not supported for 'node-sass'");
  ***REMOVED*** // There is an issue with node-sass when async custom importers are used
  // See https://github.com/sass/node-sass/issues/857#issuecomment-93594360
  // We need to use a job queue to make sure that one thread is always available to the UV lib


  if (nodeSassJobQueue === null) {
    const threadPoolSize = Number(process.env.UV_THREADPOOL_SIZE || 4);
    nodeSassJobQueue = _neoAsync.default.queue(implementation.render.bind(implementation), threadPoolSize - 1);
  ***REMOVED***

  return sassOptions => new Promise((resolve, reject) => {
    nodeSassJobQueue.push.bind(nodeSassJobQueue)(sassOptions, (error, result) => {
      if (error) {
        reject(error);
        return;
      ***REMOVED***

      resolve(result);
    ***REMOVED***);
  ***REMOVED***);
***REMOVED***

const ABSOLUTE_SCHEME = /^[A-Za-z0-9+\-.]+:/;
/**
 * @param {string***REMOVED*** source
 * @returns {"absolute" | "scheme-relative" | "path-absolute" | "path-absolute"***REMOVED***
 */

function getURLType(source) {
  if (source[0] === "/") {
    if (source[1] === "/") {
      return "scheme-relative";
    ***REMOVED***

    return "path-absolute";
  ***REMOVED***

  if (IS_NATIVE_WIN32_PATH.test(source)) {
    return "path-absolute";
  ***REMOVED***

  return ABSOLUTE_SCHEME.test(source) ? "absolute" : "path-relative";
***REMOVED***

function normalizeSourceMap(map, rootContext) {
  const newMap = map; // result.map.file is an optional property that provides the output filename.
  // Since we don't know the final filename in the webpack build chain yet, it makes no sense to have it.
  // eslint-disable-next-line no-param-reassign

  if (typeof newMap.file !== "undefined") {
    delete newMap.file;
  ***REMOVED*** // eslint-disable-next-line no-param-reassign


  newMap.sourceRoot = ""; // node-sass returns POSIX paths, that's why we need to transform them back to native paths.
  // This fixes an error on windows where the source-map module cannot resolve the source maps.
  // @see https://github.com/webpack-contrib/sass-loader/issues/366#issuecomment-279460722
  // eslint-disable-next-line no-param-reassign

  newMap.sources = newMap.sources.map(source => {
    const sourceType = getURLType(source); // Do no touch `scheme-relative`, `path-absolute` and `absolute` types (except `file:`)

    if (sourceType === "absolute" && /^file:/i.test(source)) {
      return _url.default.fileURLToPath(source);
    ***REMOVED*** else if (sourceType === "path-relative") {
      return _path.default.resolve(rootContext, _path.default.normalize(source));
    ***REMOVED***

    return source;
  ***REMOVED***);
  return newMap;
***REMOVED***