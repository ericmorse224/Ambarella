/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const Cache = require("../Cache");

/** @typedef {import("webpack-sources").Source***REMOVED*** Source */
/** @typedef {import("../Cache").Data***REMOVED*** Data */
/** @typedef {import("../Cache").Etag***REMOVED*** Etag */
/** @typedef {import("../Compiler")***REMOVED*** Compiler */
/** @typedef {import("../Module")***REMOVED*** Module */

class MemoryCachePlugin {
	/**
	 * Apply the plugin
	 * @param {Compiler***REMOVED*** compiler the compiler instance
	 * @returns {void***REMOVED***
	 */
	apply(compiler) {
		/** @type {Map<string, { etag: Etag | null, data: Data ***REMOVED*** | null>***REMOVED*** */
		const cache = new Map();
		compiler.cache.hooks.store.tap(
			{ name: "MemoryCachePlugin", stage: Cache.STAGE_MEMORY ***REMOVED***,
			(identifier, etag, data) => {
				cache.set(identifier, { etag, data ***REMOVED***);
			***REMOVED***
		);
		compiler.cache.hooks.get.tap(
			{ name: "MemoryCachePlugin", stage: Cache.STAGE_MEMORY ***REMOVED***,
			(identifier, etag, gotHandlers) => {
				const cacheEntry = cache.get(identifier);
				if (cacheEntry === null) {
					return null;
				***REMOVED*** else if (cacheEntry !== undefined) {
					return cacheEntry.etag === etag ? cacheEntry.data : null;
				***REMOVED***
				gotHandlers.push((result, callback) => {
					if (result === undefined) {
						cache.set(identifier, null);
					***REMOVED*** else {
						cache.set(identifier, { etag, data: result ***REMOVED***);
					***REMOVED***
					return callback();
				***REMOVED***);
			***REMOVED***
		);
		compiler.cache.hooks.shutdown.tap(
			{ name: "MemoryCachePlugin", stage: Cache.STAGE_MEMORY ***REMOVED***,
			() => {
				cache.clear();
			***REMOVED***
		);
	***REMOVED***
***REMOVED***
module.exports = MemoryCachePlugin;
