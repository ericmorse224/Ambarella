/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const makeSerializable = require("../util/makeSerializable");
const NullDependency = require("./NullDependency");

/** @typedef {import("webpack-sources").ReplaceSource***REMOVED*** ReplaceSource */
/** @typedef {import("../ChunkGraph")***REMOVED*** ChunkGraph */
/** @typedef {import("../Dependency")***REMOVED*** Dependency */
/** @typedef {import("../Dependency").UpdateHashContext***REMOVED*** UpdateHashContext */
/** @typedef {import("../DependencyTemplate").DependencyTemplateContext***REMOVED*** DependencyTemplateContext */
/** @typedef {import("../ModuleGraph")***REMOVED*** ModuleGraph */
/** @typedef {import("../ModuleGraphConnection").ConnectionState***REMOVED*** ConnectionState */
/** @typedef {import("../javascript/JavascriptParser").Range***REMOVED*** Range */
/** @typedef {import("../serialization/ObjectMiddleware").ObjectDeserializerContext***REMOVED*** ObjectDeserializerContext */
/** @typedef {import("../serialization/ObjectMiddleware").ObjectSerializerContext***REMOVED*** ObjectSerializerContext */
/** @typedef {import("../util/Hash")***REMOVED*** Hash */

class ConstDependency extends NullDependency {
	/**
	 * @param {string***REMOVED*** expression the expression
	 * @param {number | Range***REMOVED*** range the source range
	 * @param {(string[] | null)=***REMOVED*** runtimeRequirements runtime requirements
	 */
	constructor(expression, range, runtimeRequirements) {
		super();
		this.expression = expression;
		this.range = range;
		this.runtimeRequirements = runtimeRequirements
			? new Set(runtimeRequirements)
			: null;
		this._hashUpdate = undefined;
	***REMOVED***

	/**
	 * Update the hash
	 * @param {Hash***REMOVED*** hash hash to be updated
	 * @param {UpdateHashContext***REMOVED*** context context
	 * @returns {void***REMOVED***
	 */
	updateHash(hash, context) {
		if (this._hashUpdate === undefined) {
			let hashUpdate = `${this.range***REMOVED***|${this.expression***REMOVED***`;
			if (this.runtimeRequirements) {
				for (const item of this.runtimeRequirements) {
					hashUpdate += "|";
					hashUpdate += item;
				***REMOVED***
			***REMOVED***
			this._hashUpdate = hashUpdate;
		***REMOVED***
		hash.update(this._hashUpdate);
	***REMOVED***

	/**
	 * @param {ModuleGraph***REMOVED*** moduleGraph the module graph
	 * @returns {ConnectionState***REMOVED*** how this dependency connects the module to referencing modules
	 */
	getModuleEvaluationSideEffectsState(moduleGraph) {
		return false;
	***REMOVED***

	/**
	 * @param {ObjectSerializerContext***REMOVED*** context context
	 */
	serialize(context) {
		const { write ***REMOVED*** = context;
		write(this.expression);
		write(this.range);
		write(this.runtimeRequirements);
		super.serialize(context);
	***REMOVED***

	/**
	 * @param {ObjectDeserializerContext***REMOVED*** context context
	 */
	deserialize(context) {
		const { read ***REMOVED*** = context;
		this.expression = read();
		this.range = read();
		this.runtimeRequirements = read();
		super.deserialize(context);
	***REMOVED***
***REMOVED***

makeSerializable(ConstDependency, "webpack/lib/dependencies/ConstDependency");

ConstDependency.Template = class ConstDependencyTemplate extends (
	NullDependency.Template
) {
	/**
	 * @param {Dependency***REMOVED*** dependency the dependency for which the template should be applied
	 * @param {ReplaceSource***REMOVED*** source the current replace source which can be modified
	 * @param {DependencyTemplateContext***REMOVED*** templateContext the context object
	 * @returns {void***REMOVED***
	 */
	apply(dependency, source, templateContext) {
		const dep = /** @type {ConstDependency***REMOVED*** */ (dependency);
		if (dep.runtimeRequirements) {
			for (const req of dep.runtimeRequirements) {
				templateContext.runtimeRequirements.add(req);
			***REMOVED***
		***REMOVED***
		if (typeof dep.range === "number") {
			source.insert(dep.range, dep.expression);
			return;
		***REMOVED***

		source.replace(dep.range[0], dep.range[1] - 1, dep.expression);
	***REMOVED***
***REMOVED***;

module.exports = ConstDependency;
