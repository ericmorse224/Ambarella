'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
***REMOVED***);
exports.default = void 0;

function _ansiEscapes() {
  const data = _interopRequireDefault(require('ansi-escapes'));

  _ansiEscapes = function () {
    return data;
  ***REMOVED***;

  return data;
***REMOVED***

function _chalk() {
  const data = _interopRequireDefault(require('chalk'));

  _chalk = function () {
    return data;
  ***REMOVED***;

  return data;
***REMOVED***

function _jestUtil() {
  const data = require('jest-util');

  _jestUtil = function () {
    return data;
  ***REMOVED***;

  return data;
***REMOVED***

function _jestWatcher() {
  const data = require('jest-watcher');

  _jestWatcher = function () {
    return data;
  ***REMOVED***;

  return data;
***REMOVED***

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {default: obj***REMOVED***;
***REMOVED***

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    ***REMOVED***);
  ***REMOVED*** else {
    obj[key] = value;
  ***REMOVED***
  return obj;
***REMOVED***

const {ARROW, CLEAR***REMOVED*** = _jestUtil().specialChars;

class SnapshotInteractiveMode {
  constructor(pipe) {
    _defineProperty(this, '_pipe', void 0);

    _defineProperty(this, '_isActive', void 0);

    _defineProperty(this, '_updateTestRunnerConfig', void 0);

    _defineProperty(this, '_testAssertions', void 0);

    _defineProperty(this, '_countPaths', void 0);

    _defineProperty(this, '_skippedNum', void 0);

    this._pipe = pipe;
    this._isActive = false;
    this._skippedNum = 0;
  ***REMOVED***

  isActive() {
    return this._isActive;
  ***REMOVED***

  getSkippedNum() {
    return this._skippedNum;
  ***REMOVED***

  _clearTestSummary() {
    this._pipe.write(_ansiEscapes().default.cursorUp(6));

    this._pipe.write(_ansiEscapes().default.eraseDown);
  ***REMOVED***

  _drawUIProgress() {
    this._clearTestSummary();

    const numPass = this._countPaths - this._testAssertions.length;
    const numRemaining = this._countPaths - numPass - this._skippedNum;

    let stats = _chalk().default.bold.dim(
      (0, _jestUtil().pluralize)('snapshot', numRemaining) + ' remaining'
    );

    if (numPass) {
      stats +=
        ', ' +
        _chalk().default.bold.green(
          (0, _jestUtil().pluralize)('snapshot', numPass) + ' updated'
        );
    ***REMOVED***

    if (this._skippedNum) {
      stats +=
        ', ' +
        _chalk().default.bold.yellow(
          (0, _jestUtil().pluralize)('snapshot', this._skippedNum) + ' skipped'
        );
    ***REMOVED***

    const messages = [
      '\n' + _chalk().default.bold('Interactive Snapshot Progress'),
      ARROW + stats,
      '\n' + _chalk().default.bold('Watch Usage'),
      _chalk().default.dim(ARROW + 'Press ') +
        'u' +
        _chalk().default.dim(' to update failing snapshots for this test.'),
      _chalk().default.dim(ARROW + 'Press ') +
        's' +
        _chalk().default.dim(' to skip the current test.'),
      _chalk().default.dim(ARROW + 'Press ') +
        'q' +
        _chalk().default.dim(' to quit Interactive Snapshot Mode.'),
      _chalk().default.dim(ARROW + 'Press ') +
        'Enter' +
        _chalk().default.dim(' to trigger a test run.')
    ];

    this._pipe.write(messages.filter(Boolean).join('\n') + '\n');
  ***REMOVED***

  _drawUIDoneWithSkipped() {
    this._pipe.write(CLEAR);

    const numPass = this._countPaths - this._testAssertions.length;

    let stats = _chalk().default.bold.dim(
      (0, _jestUtil().pluralize)('snapshot', this._countPaths) + ' reviewed'
    );

    if (numPass) {
      stats +=
        ', ' +
        _chalk().default.bold.green(
          (0, _jestUtil().pluralize)('snapshot', numPass) + ' updated'
        );
    ***REMOVED***

    if (this._skippedNum) {
      stats +=
        ', ' +
        _chalk().default.bold.yellow(
          (0, _jestUtil().pluralize)('snapshot', this._skippedNum) + ' skipped'
        );
    ***REMOVED***

    const messages = [
      '\n' + _chalk().default.bold('Interactive Snapshot Result'),
      ARROW + stats,
      '\n' + _chalk().default.bold('Watch Usage'),
      _chalk().default.dim(ARROW + 'Press ') +
        'r' +
        _chalk().default.dim(' to restart Interactive Snapshot Mode.'),
      _chalk().default.dim(ARROW + 'Press ') +
        'q' +
        _chalk().default.dim(' to quit Interactive Snapshot Mode.')
    ];

    this._pipe.write(messages.filter(Boolean).join('\n') + '\n');
  ***REMOVED***

  _drawUIDone() {
    this._pipe.write(CLEAR);

    const numPass = this._countPaths - this._testAssertions.length;

    let stats = _chalk().default.bold.dim(
      (0, _jestUtil().pluralize)('snapshot', this._countPaths) + ' reviewed'
    );

    if (numPass) {
      stats +=
        ', ' +
        _chalk().default.bold.green(
          (0, _jestUtil().pluralize)('snapshot', numPass) + ' updated'
        );
    ***REMOVED***

    const messages = [
      '\n' + _chalk().default.bold('Interactive Snapshot Result'),
      ARROW + stats,
      '\n' + _chalk().default.bold('Watch Usage'),
      _chalk().default.dim(ARROW + 'Press ') +
        'Enter' +
        _chalk().default.dim(' to return to watch mode.')
    ];

    this._pipe.write(messages.filter(Boolean).join('\n') + '\n');
  ***REMOVED***

  _drawUIOverlay() {
    if (this._testAssertions.length === 0) {
      return this._drawUIDone();
    ***REMOVED***

    if (this._testAssertions.length - this._skippedNum === 0) {
      return this._drawUIDoneWithSkipped();
    ***REMOVED***

    return this._drawUIProgress();
  ***REMOVED***

  put(key) {
    switch (key) {
      case 's':
        if (this._skippedNum === this._testAssertions.length) break;
        this._skippedNum += 1; // move skipped test to the end

        this._testAssertions.push(this._testAssertions.shift());

        if (this._testAssertions.length - this._skippedNum > 0) {
          this._run(false);
        ***REMOVED*** else {
          this._drawUIDoneWithSkipped();
        ***REMOVED***

        break;

      case 'u':
        this._run(true);

        break;

      case 'q':
      case _jestWatcher().KEYS.ESCAPE:
        this.abort();
        break;

      case 'r':
        this.restart();
        break;

      case _jestWatcher().KEYS.ENTER:
        if (this._testAssertions.length === 0) {
          this.abort();
        ***REMOVED*** else {
          this._run(false);
        ***REMOVED***

        break;

      default:
        break;
    ***REMOVED***
  ***REMOVED***

  abort() {
    this._isActive = false;
    this._skippedNum = 0;

    this._updateTestRunnerConfig(null, false);
  ***REMOVED***

  restart() {
    this._skippedNum = 0;
    this._countPaths = this._testAssertions.length;

    this._run(false);
  ***REMOVED***

  updateWithResults(results) {
    const hasSnapshotFailure = !!results.snapshot.failure;

    if (hasSnapshotFailure) {
      this._drawUIOverlay();

      return;
    ***REMOVED***

    this._testAssertions.shift();

    if (this._testAssertions.length - this._skippedNum === 0) {
      this._drawUIOverlay();

      return;
    ***REMOVED*** // Go to the next test

    this._run(false);
  ***REMOVED***

  _run(shouldUpdateSnapshot) {
    const testAssertion = this._testAssertions[0];

    this._updateTestRunnerConfig(testAssertion, shouldUpdateSnapshot);
  ***REMOVED***

  run(failedSnapshotTestAssertions, onConfigChange) {
    if (!failedSnapshotTestAssertions.length) {
      return;
    ***REMOVED***

    this._testAssertions = [...failedSnapshotTestAssertions];
    this._countPaths = this._testAssertions.length;
    this._updateTestRunnerConfig = onConfigChange;
    this._isActive = true;

    this._run(false);
  ***REMOVED***
***REMOVED***

exports.default = SnapshotInteractiveMode;
