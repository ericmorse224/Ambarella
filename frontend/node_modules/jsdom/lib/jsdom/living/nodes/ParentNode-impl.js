"use strict";

const idlUtils = require("../generated/utils");
const NodeList = require("../generated/NodeList");
const HTMLCollection = require("../generated/HTMLCollection");
const { addNwsapi ***REMOVED*** = require("../helpers/selectors");
const { domSymbolTree ***REMOVED*** = require("../helpers/internal-constants");
const NODE_TYPE = require("../node-type");
const { convertNodesIntoNode ***REMOVED*** = require("../node");

class ParentNodeImpl {
  get children() {
    if (!this._childrenList) {
      this._childrenList = HTMLCollection.createImpl(this._globalObject, [], {
        element: this,
        query: () => domSymbolTree.childrenToArray(this, {
          filter: node => node.nodeType === NODE_TYPE.ELEMENT_NODE
        ***REMOVED***)
      ***REMOVED***);
    ***REMOVED*** else {
      this._childrenList._update();
    ***REMOVED***
    return this._childrenList;
  ***REMOVED***

  get firstElementChild() {
    for (const child of domSymbolTree.childrenIterator(this)) {
      if (child.nodeType === NODE_TYPE.ELEMENT_NODE) {
        return child;
      ***REMOVED***
    ***REMOVED***

    return null;
  ***REMOVED***

  get lastElementChild() {
    for (const child of domSymbolTree.childrenIterator(this, { reverse: true ***REMOVED***)) {
      if (child.nodeType === NODE_TYPE.ELEMENT_NODE) {
        return child;
      ***REMOVED***
    ***REMOVED***

    return null;
  ***REMOVED***

  get childElementCount() {
    return this.children.length;
  ***REMOVED***

  prepend(...nodes) {
    this._preInsert(convertNodesIntoNode(this._ownerDocument, nodes), this.firstChild);
  ***REMOVED***

  append(...nodes) {
    this._append(convertNodesIntoNode(this._ownerDocument, nodes));
  ***REMOVED***

  replaceChildren(...nodes) {
    const node = convertNodesIntoNode(this._ownerDocument, nodes);
    this._preInsertValidity(node, null);
    this._replaceAll(node);
  ***REMOVED***

  querySelector(selectors) {
    if (shouldAlwaysSelectNothing(this)) {
      return null;
    ***REMOVED***
    const matcher = addNwsapi(this);
    return idlUtils.implForWrapper(matcher.first(selectors, idlUtils.wrapperForImpl(this)));
  ***REMOVED***

  // Warning for internal users: this returns a NodeList containing IDL wrappers instead of impls
  querySelectorAll(selectors) {
    if (shouldAlwaysSelectNothing(this)) {
      return NodeList.create(this._globalObject, [], { nodes: [] ***REMOVED***);
    ***REMOVED***
    const matcher = addNwsapi(this);
    const list = matcher.select(selectors, idlUtils.wrapperForImpl(this));

    return NodeList.create(this._globalObject, [], { nodes: list.map(n => idlUtils.tryImplForWrapper(n)) ***REMOVED***);
  ***REMOVED***
***REMOVED***

function shouldAlwaysSelectNothing(elImpl) {
  // This is true during initialization.
  return elImpl === elImpl._ownerDocument && !elImpl.documentElement;
***REMOVED***

module.exports = {
  implementation: ParentNodeImpl
***REMOVED***;
