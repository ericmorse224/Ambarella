'use strict';
const valueParser = require('postcss-value-parser');

/**
 * @param {(number|string)[]***REMOVED*** list
 * @param {valueParser.Node***REMOVED*** node
 * @param {number***REMOVED*** index
 * @return {(number|string)[]***REMOVED***
 */
function getValues(list, node, index) {
  if (index % 2 === 0) {
    /** @type {number|string***REMOVED*** */
    let value = NaN;

    if (
      node.type === 'function' &&
      (node.value === 'var' || node.value === 'env') &&
      node.nodes.length === 1
    ) {
      value = valueParser.stringify(node.nodes);
    ***REMOVED*** else if (node.type === 'word') {
      value = parseFloat(node.value);
    ***REMOVED***

    return [...list, value];
  ***REMOVED***

  return list;
***REMOVED***

/**
 * @param {valueParser.FunctionNode***REMOVED*** node
 * @param {(number|string)[]***REMOVED*** values
 * @return {void***REMOVED***
 */
function matrix3d(node, values) {
  if (values.length !== 16) {
    return;
  ***REMOVED***

  // matrix3d(a, b, 0, 0, c, d, 0, 0, 0, 0, 1, 0, tx, ty, 0, 1) => matrix(a, b, c, d, tx, ty)
  if (
    values[15] &&
    values[2] === 0 &&
    values[3] === 0 &&
    values[6] === 0 &&
    values[7] === 0 &&
    values[8] === 0 &&
    values[9] === 0 &&
    values[10] === 1 &&
    values[11] === 0 &&
    values[14] === 0 &&
    values[15] === 1
  ) {
    const { nodes ***REMOVED*** = node;

    node.value = 'matrix';
    node.nodes = [
      nodes[0], // a
      nodes[1], // ,
      nodes[2], // b
      nodes[3], // ,
      nodes[8], // c
      nodes[9], // ,
      nodes[10], // d
      nodes[11], // ,
      nodes[24], // tx
      nodes[25], // ,
      nodes[26], // ty
    ];
  ***REMOVED***
***REMOVED***

const rotate3dMappings = new Map([
  [[1, 0, 0].toString(), 'rotateX'], // rotate3d(1, 0, 0, a) => rotateX(a)
  [[0, 1, 0].toString(), 'rotateY'], // rotate3d(0, 1, 0, a) => rotateY(a)
  [[0, 0, 1].toString(), 'rotate'], // rotate3d(0, 0, 1, a) => rotate(a)
]);

/**
 * @param {valueParser.FunctionNode***REMOVED*** node
 * @param {(number|string)[]***REMOVED*** values
 * @return {void***REMOVED***
 */
function rotate3d(node, values) {
  if (values.length !== 4) {
    return;
  ***REMOVED***

  const { nodes ***REMOVED*** = node;
  const match = rotate3dMappings.get(values.slice(0, 3).toString());

  if (match) {
    node.value = match;
    node.nodes = [nodes[6]];
  ***REMOVED***
***REMOVED***

/**
 * @param {valueParser.FunctionNode***REMOVED*** node
 * @param {(number|string)[]***REMOVED*** values
 * @return {void***REMOVED***
 */
function rotateZ(node, values) {
  if (values.length !== 1) {
    return;
  ***REMOVED***

  // rotateZ(rz) => rotate(rz)
  node.value = 'rotate';
***REMOVED***

/**
 * @param {valueParser.FunctionNode***REMOVED*** node
 * @param {(number|string)[]***REMOVED*** values
 * @return {void***REMOVED***
 */
function scale(node, values) {
  if (values.length !== 2) {
    return;
  ***REMOVED***

  const { nodes ***REMOVED*** = node;
  const [first, second] = values;

  // scale(sx, sy) => scale(sx)
  if (first === second) {
    node.nodes = [nodes[0]];

    return;
  ***REMOVED***

  // scale(sx, 1) => scaleX(sx)
  if (second === 1) {
    node.value = 'scaleX';
    node.nodes = [nodes[0]];

    return;
  ***REMOVED***

  // scale(1, sy) => scaleY(sy)
  if (first === 1) {
    node.value = 'scaleY';
    node.nodes = [nodes[2]];

    return;
  ***REMOVED***
***REMOVED***

/**
 * @param {valueParser.FunctionNode***REMOVED*** node
 * @param {(number|string)[]***REMOVED*** values
 * @return {void***REMOVED***
 */
function scale3d(node, values) {
  if (values.length !== 3) {
    return;
  ***REMOVED***

  const { nodes ***REMOVED*** = node;
  const [first, second, third] = values;

  // scale3d(sx, 1, 1) => scaleX(sx)
  if (second === 1 && third === 1) {
    node.value = 'scaleX';
    node.nodes = [nodes[0]];

    return;
  ***REMOVED***

  // scale3d(1, sy, 1) => scaleY(sy)
  if (first === 1 && third === 1) {
    node.value = 'scaleY';
    node.nodes = [nodes[2]];

    return;
  ***REMOVED***

  // scale3d(1, 1, sz) => scaleZ(sz)
  if (first === 1 && second === 1) {
    node.value = 'scaleZ';
    node.nodes = [nodes[4]];

    return;
  ***REMOVED***
***REMOVED***

/**
 * @param {valueParser.FunctionNode***REMOVED*** node
 * @param {(number|string)[]***REMOVED*** values
 * @return {void***REMOVED***
 */
function translate(node, values) {
  if (values.length !== 2) {
    return;
  ***REMOVED***

  const { nodes ***REMOVED*** = node;

  // translate(tx, 0) => translate(tx)
  if (values[1] === 0) {
    node.nodes = [nodes[0]];

    return;
  ***REMOVED***

  // translate(0, ty) => translateY(ty)
  if (values[0] === 0) {
    node.value = 'translateY';
    node.nodes = [nodes[2]];

    return;
  ***REMOVED***
***REMOVED***

/**
 * @param {valueParser.FunctionNode***REMOVED*** node
 * @param {(number|string)[]***REMOVED*** values
 * @return {void***REMOVED***
 */
function translate3d(node, values) {
  if (values.length !== 3) {
    return;
  ***REMOVED***

  const { nodes ***REMOVED*** = node;

  // translate3d(0, 0, tz) => translateZ(tz)
  if (values[0] === 0 && values[1] === 0) {
    node.value = 'translateZ';
    node.nodes = [nodes[4]];
  ***REMOVED***
***REMOVED***

const reducers = new Map([
  ['matrix3d', matrix3d],
  ['rotate3d', rotate3d],
  ['rotateZ', rotateZ],
  ['scale', scale],
  ['scale3d', scale3d],
  ['translate', translate],
  ['translate3d', translate3d],
]);
/**
 * @param {string***REMOVED*** name
 * @return {string***REMOVED***
 */
function normalizeReducerName(name) {
  const lowerCasedName = name.toLowerCase();

  if (lowerCasedName === 'rotatez') {
    return 'rotateZ';
  ***REMOVED***

  return lowerCasedName;
***REMOVED***

/**
 * @param {valueParser.Node***REMOVED*** node
 * @return {false***REMOVED***
 */
function reduce(node) {
  if (node.type === 'function') {
    const normalizedReducerName = normalizeReducerName(node.value);
    const reducer = reducers.get(normalizedReducerName);
    if (reducer !== undefined) {
      reducer(node, node.nodes.reduce(getValues, []));
    ***REMOVED***
  ***REMOVED***
  return false;
***REMOVED***

/**
 * @type {import('postcss').PluginCreator<void>***REMOVED***
 * @return {import('postcss').Plugin***REMOVED***
 */
function pluginCreator() {
  return {
    postcssPlugin: 'postcss-reduce-transforms',
    prepare() {
      const cache = new Map();
      return {
        OnceExit(css) {
          css.walkDecls(/transform$/i, (decl) => {
            const value = decl.value;

            if (!value) {
              return;
            ***REMOVED***

            if (cache.has(value)) {
              decl.value = cache.get(value);

              return;
            ***REMOVED***

            const result = valueParser(value).walk(reduce).toString();

            decl.value = result;
            cache.set(value, result);
          ***REMOVED***);
        ***REMOVED***,
      ***REMOVED***;
    ***REMOVED***,
  ***REMOVED***;
***REMOVED***

pluginCreator.postcss = true;
module.exports = pluginCreator;
