/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Sergey Melyukov @smelukov
*/

"use strict";

const asyncLib = require("neo-async");
const { SyncBailHook ***REMOVED*** = require("tapable");
const Compilation = require("./Compilation");
const createSchemaValidation = require("./util/create-schema-validation");
const { join ***REMOVED*** = require("./util/fs");
const processAsyncTree = require("./util/processAsyncTree");

/** @typedef {import("../declarations/WebpackOptions").CleanOptions***REMOVED*** CleanOptions */
/** @typedef {import("./Compiler")***REMOVED*** Compiler */
/** @typedef {import("./logging/Logger").Logger***REMOVED*** Logger */
/** @typedef {import("./util/fs").IStats***REMOVED*** IStats */
/** @typedef {import("./util/fs").OutputFileSystem***REMOVED*** OutputFileSystem */
/** @typedef {import("./util/fs").StatsCallback***REMOVED*** StatsCallback */

/** @typedef {Map<string, number>***REMOVED*** Assets */

/**
 * @typedef {object***REMOVED*** CleanPluginCompilationHooks
 * @property {SyncBailHook<[string], boolean | void>***REMOVED*** keep when returning true the file/directory will be kept during cleaning, returning false will clean it and ignore the following plugins and config
 */

/**
 * @callback KeepFn
 * @param {string***REMOVED*** path path
 * @returns {boolean | void***REMOVED*** true, if the path should be kept
 */

const validate = createSchemaValidation(
	undefined,
	() => {
		const { definitions ***REMOVED*** = require("../schemas/WebpackOptions.json");
		return {
			definitions,
			oneOf: [{ $ref: "#/definitions/CleanOptions" ***REMOVED***]
		***REMOVED***;
	***REMOVED***,
	{
		name: "Clean Plugin",
		baseDataPath: "options"
	***REMOVED***
);
const _10sec = 10 * 1000;

/**
 * merge assets map 2 into map 1
 * @param {Assets***REMOVED*** as1 assets
 * @param {Assets***REMOVED*** as2 assets
 * @returns {void***REMOVED***
 */
const mergeAssets = (as1, as2) => {
	for (const [key, value1] of as2) {
		const value2 = as1.get(key);
		if (!value2 || value1 > value2) as1.set(key, value1);
	***REMOVED***
***REMOVED***;

/** @typedef {Set<string>***REMOVED*** Diff */

/**
 * @param {OutputFileSystem***REMOVED*** fs filesystem
 * @param {string***REMOVED*** outputPath output path
 * @param {Map<string, number>***REMOVED*** currentAssets filename of the current assets (must not start with .. or ., must only use / as path separator)
 * @param {(err?: Error | null, set?: Diff) => void***REMOVED*** callback returns the filenames of the assets that shouldn't be there
 * @returns {void***REMOVED***
 */
const getDiffToFs = (fs, outputPath, currentAssets, callback) => {
	const directories = new Set();
	// get directories of assets
	for (const [asset] of currentAssets) {
		directories.add(asset.replace(/(^|\/)[^/]*$/, ""));
	***REMOVED***
	// and all parent directories
	for (const directory of directories) {
		directories.add(directory.replace(/(^|\/)[^/]*$/, ""));
	***REMOVED***
	const diff = new Set();
	asyncLib.forEachLimit(
		directories,
		10,
		(directory, callback) => {
			/** @type {NonNullable<OutputFileSystem["readdir"]>***REMOVED*** */
			(fs.readdir)(join(fs, outputPath, directory), (err, entries) => {
				if (err) {
					if (err.code === "ENOENT") return callback();
					if (err.code === "ENOTDIR") {
						diff.add(directory);
						return callback();
					***REMOVED***
					return callback(err);
				***REMOVED***
				for (const entry of /** @type {string[]***REMOVED*** */ (entries)) {
					const file = entry;
					const filename = directory ? `${directory***REMOVED***/${file***REMOVED***` : file;
					if (!directories.has(filename) && !currentAssets.has(filename)) {
						diff.add(filename);
					***REMOVED***
				***REMOVED***
				callback();
			***REMOVED***);
		***REMOVED***,
		err => {
			if (err) return callback(err);

			callback(null, diff);
		***REMOVED***
	);
***REMOVED***;

/**
 * @param {Assets***REMOVED*** currentAssets assets list
 * @param {Assets***REMOVED*** oldAssets old assets list
 * @returns {Diff***REMOVED*** diff
 */
const getDiffToOldAssets = (currentAssets, oldAssets) => {
	const diff = new Set();
	const now = Date.now();
	for (const [asset, ts] of oldAssets) {
		if (ts >= now) continue;
		if (!currentAssets.has(asset)) diff.add(asset);
	***REMOVED***
	return diff;
***REMOVED***;

/**
 * @param {OutputFileSystem***REMOVED*** fs filesystem
 * @param {string***REMOVED*** filename path to file
 * @param {StatsCallback***REMOVED*** callback callback for provided filename
 * @returns {void***REMOVED***
 */
const doStat = (fs, filename, callback) => {
	if ("lstat" in fs) {
		/** @type {NonNullable<OutputFileSystem["lstat"]>***REMOVED*** */
		(fs.lstat)(filename, callback);
	***REMOVED*** else {
		fs.stat(filename, callback);
	***REMOVED***
***REMOVED***;

/**
 * @param {OutputFileSystem***REMOVED*** fs filesystem
 * @param {string***REMOVED*** outputPath output path
 * @param {boolean***REMOVED*** dry only log instead of fs modification
 * @param {Logger***REMOVED*** logger logger
 * @param {Diff***REMOVED*** diff filenames of the assets that shouldn't be there
 * @param {(path: string) => boolean | void***REMOVED*** isKept check if the entry is ignored
 * @param {(err?: Error, assets?: Assets) => void***REMOVED*** callback callback
 * @returns {void***REMOVED***
 */
const applyDiff = (fs, outputPath, dry, logger, diff, isKept, callback) => {
	/**
	 * @param {string***REMOVED*** msg message
	 */
	const log = msg => {
		if (dry) {
			logger.info(msg);
		***REMOVED*** else {
			logger.log(msg);
		***REMOVED***
	***REMOVED***;
	/** @typedef {{ type: "check" | "unlink" | "rmdir", filename: string, parent: { remaining: number, job: Job ***REMOVED*** | undefined ***REMOVED******REMOVED*** Job */
	/** @type {Job[]***REMOVED*** */
	const jobs = Array.from(diff.keys(), filename => ({
		type: "check",
		filename,
		parent: undefined
	***REMOVED***));
	/** @type {Assets***REMOVED*** */
	const keptAssets = new Map();
	processAsyncTree(
		jobs,
		10,
		({ type, filename, parent ***REMOVED***, push, callback) => {
			/**
			 * @param {Error & { code?: string ***REMOVED******REMOVED*** err error
			 * @returns {void***REMOVED***
			 */
			const handleError = err => {
				if (err.code === "ENOENT") {
					log(`${filename***REMOVED*** was removed during cleaning by something else`);
					handleParent();
					return callback();
				***REMOVED***
				return callback(err);
			***REMOVED***;
			const handleParent = () => {
				if (parent && --parent.remaining === 0) push(parent.job);
			***REMOVED***;
			const path = join(fs, outputPath, filename);
			switch (type) {
				case "check":
					if (isKept(filename)) {
						keptAssets.set(filename, 0);
						// do not decrement parent entry as we don't want to delete the parent
						log(`${filename***REMOVED*** will be kept`);
						return process.nextTick(callback);
					***REMOVED***
					doStat(fs, path, (err, stats) => {
						if (err) return handleError(err);
						if (!(/** @type {IStats***REMOVED*** */ (stats).isDirectory())) {
							push({
								type: "unlink",
								filename,
								parent
							***REMOVED***);
							return callback();
						***REMOVED***

						/** @type {NonNullable<OutputFileSystem["readdir"]>***REMOVED*** */
						(fs.readdir)(path, (err, _entries) => {
							if (err) return handleError(err);
							/** @type {Job***REMOVED*** */
							const deleteJob = {
								type: "rmdir",
								filename,
								parent
							***REMOVED***;
							const entries = /** @type {string[]***REMOVED*** */ (_entries);
							if (entries.length === 0) {
								push(deleteJob);
							***REMOVED*** else {
								const parentToken = {
									remaining: entries.length,
									job: deleteJob
								***REMOVED***;
								for (const entry of entries) {
									const file = /** @type {string***REMOVED*** */ (entry);
									if (file.startsWith(".")) {
										log(
											`${filename***REMOVED*** will be kept (dot-files will never be removed)`
										);
										continue;
									***REMOVED***
									push({
										type: "check",
										filename: `${filename***REMOVED***/${file***REMOVED***`,
										parent: parentToken
									***REMOVED***);
								***REMOVED***
							***REMOVED***
							return callback();
						***REMOVED***);
					***REMOVED***);
					break;
				case "rmdir":
					log(`${filename***REMOVED*** will be removed`);
					if (dry) {
						handleParent();
						return process.nextTick(callback);
					***REMOVED***
					if (!fs.rmdir) {
						logger.warn(
							`${filename***REMOVED*** can't be removed because output file system doesn't support removing directories (rmdir)`
						);
						return process.nextTick(callback);
					***REMOVED***
					fs.rmdir(path, err => {
						if (err) return handleError(err);
						handleParent();
						callback();
					***REMOVED***);
					break;
				case "unlink":
					log(`${filename***REMOVED*** will be removed`);
					if (dry) {
						handleParent();
						return process.nextTick(callback);
					***REMOVED***
					if (!fs.unlink) {
						logger.warn(
							`${filename***REMOVED*** can't be removed because output file system doesn't support removing files (rmdir)`
						);
						return process.nextTick(callback);
					***REMOVED***
					fs.unlink(path, err => {
						if (err) return handleError(err);
						handleParent();
						callback();
					***REMOVED***);
					break;
			***REMOVED***
		***REMOVED***,
		err => {
			if (err) return callback(err);
			callback(undefined, keptAssets);
		***REMOVED***
	);
***REMOVED***;

/** @type {WeakMap<Compilation, CleanPluginCompilationHooks>***REMOVED*** */
const compilationHooksMap = new WeakMap();

const PLUGIN_NAME = "CleanPlugin";

class CleanPlugin {
	/**
	 * @param {Compilation***REMOVED*** compilation the compilation
	 * @returns {CleanPluginCompilationHooks***REMOVED*** the attached hooks
	 */
	static getCompilationHooks(compilation) {
		if (!(compilation instanceof Compilation)) {
			throw new TypeError(
				"The 'compilation' argument must be an instance of Compilation"
			);
		***REMOVED***
		let hooks = compilationHooksMap.get(compilation);
		if (hooks === undefined) {
			hooks = {
				keep: new SyncBailHook(["ignore"])
			***REMOVED***;
			compilationHooksMap.set(compilation, hooks);
		***REMOVED***
		return hooks;
	***REMOVED***

	/** @param {CleanOptions***REMOVED*** options options */
	constructor(options = {***REMOVED***) {
		validate(options);
		this.options = { dry: false, ...options ***REMOVED***;
	***REMOVED***

	/**
	 * Apply the plugin
	 * @param {Compiler***REMOVED*** compiler the compiler instance
	 * @returns {void***REMOVED***
	 */
	apply(compiler) {
		const { dry, keep ***REMOVED*** = this.options;

		/** @type {KeepFn***REMOVED*** */
		const keepFn =
			typeof keep === "function"
				? keep
				: typeof keep === "string"
					? path => path.startsWith(keep)
					: typeof keep === "object" && keep.test
						? path => keep.test(path)
						: () => false;

		// We assume that no external modification happens while the compiler is active
		// So we can store the old assets and only diff to them to avoid fs access on
		// incremental builds
		/** @type {undefined|Assets***REMOVED*** */
		let oldAssets;

		compiler.hooks.emit.tapAsync(
			{
				name: PLUGIN_NAME,
				stage: 100
			***REMOVED***,
			(compilation, callback) => {
				const hooks = CleanPlugin.getCompilationHooks(compilation);
				const logger = compilation.getLogger(`webpack.${PLUGIN_NAME***REMOVED***`);
				const fs = /** @type {OutputFileSystem***REMOVED*** */ (compiler.outputFileSystem);

				if (!fs.readdir) {
					return callback(
						new Error(
							`${PLUGIN_NAME***REMOVED***: Output filesystem doesn't support listing directories (readdir)`
						)
					);
				***REMOVED***

				/** @type {Assets***REMOVED*** */
				const currentAssets = new Map();
				const now = Date.now();
				for (const asset of Object.keys(compilation.assets)) {
					if (/^[A-Za-z]:\\|^\/|^\\\\/.test(asset)) continue;
					let normalizedAsset;
					let newNormalizedAsset = asset.replace(/\\/g, "/");
					do {
						normalizedAsset = newNormalizedAsset;
						newNormalizedAsset = normalizedAsset.replace(
							/(^|\/)(?!\.\.)[^/]+\/\.\.\//g,
							"$1"
						);
					***REMOVED*** while (newNormalizedAsset !== normalizedAsset);
					if (normalizedAsset.startsWith("../")) continue;
					const assetInfo = compilation.assetsInfo.get(asset);
					if (assetInfo && assetInfo.hotModuleReplacement) {
						currentAssets.set(normalizedAsset, now + _10sec);
					***REMOVED*** else {
						currentAssets.set(normalizedAsset, 0);
					***REMOVED***
				***REMOVED***

				const outputPath = compilation.getPath(compiler.outputPath, {***REMOVED***);

				/**
				 * @param {string***REMOVED*** path path
				 * @returns {boolean | void***REMOVED*** true, if needs to be kept
				 */
				const isKept = path => {
					const result = hooks.keep.call(path);
					if (result !== undefined) return result;
					return keepFn(path);
				***REMOVED***;

				/**
				 * @param {(Error | null)=***REMOVED*** err err
				 * @param {Diff=***REMOVED*** diff diff
				 */
				const diffCallback = (err, diff) => {
					if (err) {
						oldAssets = undefined;
						callback(err);
						return;
					***REMOVED***
					applyDiff(
						fs,
						outputPath,
						dry,
						logger,
						/** @type {Diff***REMOVED*** */ (diff),
						isKept,
						(err, keptAssets) => {
							if (err) {
								oldAssets = undefined;
							***REMOVED*** else {
								if (oldAssets) mergeAssets(currentAssets, oldAssets);
								oldAssets = currentAssets;
								if (keptAssets) mergeAssets(oldAssets, keptAssets);
							***REMOVED***
							callback(err);
						***REMOVED***
					);
				***REMOVED***;

				if (oldAssets) {
					diffCallback(null, getDiffToOldAssets(currentAssets, oldAssets));
				***REMOVED*** else {
					getDiffToFs(fs, outputPath, currentAssets, diffCallback);
				***REMOVED***
			***REMOVED***
		);
	***REMOVED***
***REMOVED***

module.exports = CleanPlugin;
