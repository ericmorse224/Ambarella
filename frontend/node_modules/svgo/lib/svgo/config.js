'use strict';

var FS = require('fs');
var PATH = require('path');
var yaml = require('js-yaml');

/**
 * Read and/or extend/replace default config file,
 * prepare and optimize plugins array.
 *
 * @param {Object***REMOVED*** [config] input config
 * @return {Object***REMOVED*** output config
 */
module.exports = function(config) {

    var defaults;
    config = typeof config == 'object' && config || {***REMOVED***;

    if (config.plugins && !Array.isArray(config.plugins)) {
        return { error: 'Error: Invalid plugins list. Provided \'plugins\' in config should be an array.' ***REMOVED***;
    ***REMOVED***

    if (config.full) {
        defaults = config;

        if (Array.isArray(defaults.plugins)) {
            defaults.plugins = preparePluginsArray(config, defaults.plugins);
        ***REMOVED***
    ***REMOVED*** else {
        defaults = Object.assign({***REMOVED***, yaml.safeLoad(FS.readFileSync(__dirname + '/../../.svgo.yml', 'utf8')));
        defaults.plugins = preparePluginsArray(config, defaults.plugins || []);
        defaults = extendConfig(defaults, config);
    ***REMOVED***

    if ('floatPrecision' in config && Array.isArray(defaults.plugins)) {
        defaults.plugins.forEach(function(plugin) {
            if (plugin.params && ('floatPrecision' in plugin.params)) {
                // Don't touch default plugin params
                plugin.params = Object.assign({***REMOVED***, plugin.params, { floatPrecision: config.floatPrecision ***REMOVED***);
            ***REMOVED***
        ***REMOVED***);
    ***REMOVED***

    if ('datauri' in config) {
        defaults.datauri = config.datauri;
    ***REMOVED***

    if (Array.isArray(defaults.plugins)) {
        defaults.plugins = optimizePluginsArray(defaults.plugins);
    ***REMOVED***

    return defaults;

***REMOVED***;

/**
 * Require() all plugins in array.
 *
 * @param {Object***REMOVED*** config
 * @param {Array***REMOVED*** plugins input plugins array
 * @return {Array***REMOVED*** input plugins array of arrays
 */
function preparePluginsArray(config, plugins) {

    var plugin,
        key;

    return plugins.map(function(item) {

        // {***REMOVED***
        if (typeof item === 'object') {

            key = Object.keys(item)[0];

            // custom
            if (typeof item[key] === 'object' && item[key].fn && typeof item[key].fn === 'function') {
                plugin = setupCustomPlugin(key, item[key]);

            ***REMOVED*** else {

                plugin = setPluginActiveState(
                    loadPlugin(config, key, item[key].path),
                    item,
                    key
                );
                plugin.name = key;
            ***REMOVED***

        // name
        ***REMOVED*** else {

            plugin = loadPlugin(config, item);
            plugin.name = item;
            if (typeof plugin.params === 'object') {
                plugin.params = Object.assign({***REMOVED***, plugin.params);
            ***REMOVED***

        ***REMOVED***

        return plugin;

    ***REMOVED***);

***REMOVED***

/**
 * Extend plugins with the custom config object.
 *
 * @param {Array***REMOVED*** plugins input plugins
 * @param {Object***REMOVED*** config config
 * @return {Array***REMOVED*** output plugins
 */
function extendConfig(defaults, config) {

    var key;

    // plugins
    if (config.plugins) {

        config.plugins.forEach(function(item) {

            // {***REMOVED***
            if (typeof item === 'object') {

                key = Object.keys(item)[0];

                if (item[key] == null) {
                    console.error(`Error: '${key***REMOVED***' plugin is misconfigured! Have you padded its content in YML properly?\n`);
                ***REMOVED***

                // custom
                if (typeof item[key] === 'object' && item[key].fn && typeof item[key].fn === 'function') {
                    defaults.plugins.push(setupCustomPlugin(key, item[key]));

                // plugin defined via path
                ***REMOVED*** else if (typeof item[key] === 'object' && item[key].path) {
                    defaults.plugins.push(setPluginActiveState(loadPlugin(config, undefined, item[key].path), item, key));

                ***REMOVED*** else {
                    defaults.plugins.forEach(function(plugin) {

                        if (plugin.name === key) {
                            plugin = setPluginActiveState(plugin, item, key);
                        ***REMOVED***
                    ***REMOVED***);
                ***REMOVED***

            ***REMOVED***

        ***REMOVED***);

    ***REMOVED***

    defaults.multipass = config.multipass;

    // svg2js
    if (config.svg2js) {
        defaults.svg2js = config.svg2js;
    ***REMOVED***

    // js2svg
    if (config.js2svg) {
        defaults.js2svg = config.js2svg;
    ***REMOVED***

    return defaults;

***REMOVED***

/**
 * Setup and enable a custom plugin
 *
 * @param {String***REMOVED*** plugin name
 * @param {Object***REMOVED*** custom plugin
 * @return {Array***REMOVED*** enabled plugin
 */
function setupCustomPlugin(name, plugin) {
    plugin.active = true;
    plugin.params = Object.assign({***REMOVED***, plugin.params || {***REMOVED***);
    plugin.name = name;

    return plugin;
***REMOVED***

/**
 * Try to group sequential elements of plugins array.
 *
 * @param {Object***REMOVED*** plugins input plugins
 * @return {Array***REMOVED*** output plugins
 */
function optimizePluginsArray(plugins) {

    var prev;

    return plugins.reduce(function(plugins, item) {
        if (prev && item.type == prev[0].type) {
            prev.push(item);
        ***REMOVED*** else {
            plugins.push(prev = [item]);
        ***REMOVED***
        return plugins;
    ***REMOVED***, []);

***REMOVED***

/**
 * Sets plugin to active or inactive state.
 *
 * @param {Object***REMOVED*** plugin
 * @param {Object***REMOVED*** item
 * @param {Object***REMOVED*** key
 * @return {Object***REMOVED*** plugin
 */
function setPluginActiveState(plugin, item, key) {
    // name: {***REMOVED***
    if (typeof item[key] === 'object') {
        plugin.params = Object.assign({***REMOVED***, plugin.params || {***REMOVED***, item[key]);
        plugin.active = true;

    // name: false
    ***REMOVED*** else if (item[key] === false) {
        plugin.active = false;

    // name: true
    ***REMOVED*** else if (item[key] === true) {
        plugin.active = true;
    ***REMOVED***

    return plugin;
***REMOVED***

/**
 * Loads default plugin using name or custom plugin defined via path in config.
 *
 * @param {Object***REMOVED*** config
 * @param {Object***REMOVED*** name
 * @param {Object***REMOVED*** path
 * @return {Object***REMOVED*** plugin
 */
function loadPlugin(config, name, path) {
    var plugin;

    if (!path) {
        plugin = require('../../plugins/' + name);
    ***REMOVED*** else {
        plugin = require(PATH.resolve(config.__DIR, path));
    ***REMOVED***

    return Object.assign({***REMOVED***, plugin);
***REMOVED***
