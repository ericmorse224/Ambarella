import type {KeywordErrorDefinition, KeywordErrorCxt, ErrorObject***REMOVED*** from "../../types"
import {_, Code***REMOVED*** from "../../compile/codegen"

export type _JTDTypeError<K extends string, T extends string, S> = ErrorObject<
  K,
  {type: T; nullable: boolean***REMOVED***,
  S
>

export function typeError(t: string): KeywordErrorDefinition {
  return {
    message: (cxt) => typeErrorMessage(cxt, t),
    params: (cxt) => typeErrorParams(cxt, t),
  ***REMOVED***
***REMOVED***

export function typeErrorMessage({parentSchema***REMOVED***: KeywordErrorCxt, t: string): string {
  return parentSchema?.nullable ? `must be ${t***REMOVED*** or null` : `must be ${t***REMOVED***`
***REMOVED***

export function typeErrorParams({parentSchema***REMOVED***: KeywordErrorCxt, t: string): Code {
  return _`{type: ${t***REMOVED***, nullable: ${!!parentSchema?.nullable***REMOVED******REMOVED***`
***REMOVED***
