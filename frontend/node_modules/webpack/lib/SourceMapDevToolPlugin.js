/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const asyncLib = require("neo-async");
const { ConcatSource, RawSource ***REMOVED*** = require("webpack-sources");
const Compilation = require("./Compilation");
const ModuleFilenameHelpers = require("./ModuleFilenameHelpers");
const ProgressPlugin = require("./ProgressPlugin");
const SourceMapDevToolModuleOptionsPlugin = require("./SourceMapDevToolModuleOptionsPlugin");
const createSchemaValidation = require("./util/create-schema-validation");
const createHash = require("./util/createHash");
const { relative, dirname ***REMOVED*** = require("./util/fs");
const generateDebugId = require("./util/generateDebugId");
const { makePathsAbsolute ***REMOVED*** = require("./util/identifier");

/** @typedef {import("webpack-sources").MapOptions***REMOVED*** MapOptions */
/** @typedef {import("webpack-sources").Source***REMOVED*** Source */
/** @typedef {import("../declarations/WebpackOptions").HashFunction***REMOVED*** HashFunction */
/** @typedef {import("../declarations/plugins/SourceMapDevToolPlugin").SourceMapDevToolPluginOptions***REMOVED*** SourceMapDevToolPluginOptions */
/** @typedef {import("./Cache").Etag***REMOVED*** Etag */
/** @typedef {import("./CacheFacade").ItemCacheFacade***REMOVED*** ItemCacheFacade */
/** @typedef {import("./Chunk")***REMOVED*** Chunk */
/** @typedef {import("./Compilation").Asset***REMOVED*** Asset */
/** @typedef {import("./Compilation").AssetInfo***REMOVED*** AssetInfo */
/** @typedef {import("./Compiler")***REMOVED*** Compiler */
/** @typedef {import("./Module")***REMOVED*** Module */
/** @typedef {import("./NormalModule").SourceMap***REMOVED*** SourceMap */
/** @typedef {import("./TemplatedPathPlugin").TemplatePath***REMOVED*** TemplatePath */
/** @typedef {import("./util/fs").OutputFileSystem***REMOVED*** OutputFileSystem */

const validate = createSchemaValidation(
	require("../schemas/plugins/SourceMapDevToolPlugin.check.js"),
	() => require("../schemas/plugins/SourceMapDevToolPlugin.json"),
	{
		name: "SourceMap DevTool Plugin",
		baseDataPath: "options"
	***REMOVED***
);
/**
 * @typedef {object***REMOVED*** SourceMapTask
 * @property {Source***REMOVED*** asset
 * @property {AssetInfo***REMOVED*** assetInfo
 * @property {(string | Module)[]***REMOVED*** modules
 * @property {string***REMOVED*** source
 * @property {string***REMOVED*** file
 * @property {SourceMap***REMOVED*** sourceMap
 * @property {ItemCacheFacade***REMOVED*** cacheItem cache item
 */

const METACHARACTERS_REGEXP = /[-[\]\\/{***REMOVED***()*+?.^$|]/g;
const CONTENT_HASH_DETECT_REGEXP = /\[contenthash(:\w+)?\]/;
const CSS_AND_JS_MODULE_EXTENSIONS_REGEXP = /\.((c|m)?js|css)($|\?)/i;
const CSS_EXTENSION_DETECT_REGEXP = /\.css($|\?)/i;
const MAP_URL_COMMENT_REGEXP = /\[map\]/g;
const URL_COMMENT_REGEXP = /\[url\]/g;
const URL_FORMATTING_REGEXP = /^\n\/\/(.*)$/;

/**
 * Reset's .lastIndex of stateful Regular Expressions
 * For when `test` or `exec` is called on them
 * @param {RegExp***REMOVED*** regexp Stateful Regular Expression to be reset
 * @returns {void***REMOVED***
 */
const resetRegexpState = regexp => {
	regexp.lastIndex = -1;
***REMOVED***;

/**
 * Escapes regular expression metacharacters
 * @param {string***REMOVED*** str String to quote
 * @returns {string***REMOVED*** Escaped string
 */
const quoteMeta = str => str.replace(METACHARACTERS_REGEXP, "\\$&");

/**
 * Creating {@link SourceMapTask***REMOVED*** for given file
 * @param {string***REMOVED*** file current compiled file
 * @param {Source***REMOVED*** asset the asset
 * @param {AssetInfo***REMOVED*** assetInfo the asset info
 * @param {MapOptions***REMOVED*** options source map options
 * @param {Compilation***REMOVED*** compilation compilation instance
 * @param {ItemCacheFacade***REMOVED*** cacheItem cache item
 * @returns {SourceMapTask | undefined***REMOVED*** created task instance or `undefined`
 */
const getTaskForFile = (
	file,
	asset,
	assetInfo,
	options,
	compilation,
	cacheItem
) => {
	let source;
	/** @type {SourceMap***REMOVED*** */
	let sourceMap;
	/**
	 * Check if asset can build source map
	 */
	if (asset.sourceAndMap) {
		const sourceAndMap = asset.sourceAndMap(options);
		sourceMap = /** @type {SourceMap***REMOVED*** */ (sourceAndMap.map);
		source = sourceAndMap.source;
	***REMOVED*** else {
		sourceMap = /** @type {SourceMap***REMOVED*** */ (asset.map(options));
		source = asset.source();
	***REMOVED***
	if (!sourceMap || typeof source !== "string") return;
	const context = /** @type {string***REMOVED*** */ (compilation.options.context);
	const root = compilation.compiler.root;
	const cachedAbsolutify = makePathsAbsolute.bindContextCache(context, root);
	const modules = sourceMap.sources.map(source => {
		if (!source.startsWith("webpack://")) return source;
		source = cachedAbsolutify(source.slice(10));
		const module = compilation.findModule(source);
		return module || source;
	***REMOVED***);

	return {
		file,
		asset,
		source,
		assetInfo,
		sourceMap,
		modules,
		cacheItem
	***REMOVED***;
***REMOVED***;

const PLUGIN_NAME = "SourceMapDevToolPlugin";

class SourceMapDevToolPlugin {
	/**
	 * @param {SourceMapDevToolPluginOptions=***REMOVED*** options options object
	 * @throws {Error***REMOVED*** throws error, if got more than 1 arguments
	 */
	constructor(options = {***REMOVED***) {
		validate(options);

		this.sourceMapFilename = /** @type {string | false***REMOVED*** */ (options.filename);
		/** @type {false | TemplatePath***REMOVED******REMOVED*** */
		this.sourceMappingURLComment =
			options.append === false
				? false
				: // eslint-disable-next-line no-useless-concat
					options.append || "\n//# source" + "MappingURL=[url]";
		this.moduleFilenameTemplate =
			options.moduleFilenameTemplate || "webpack://[namespace]/[resourcePath]";
		this.fallbackModuleFilenameTemplate =
			options.fallbackModuleFilenameTemplate ||
			"webpack://[namespace]/[resourcePath]?[hash]";
		this.namespace = options.namespace || "";
		this.options = options;
	***REMOVED***

	/**
	 * Apply the plugin
	 * @param {Compiler***REMOVED*** compiler compiler instance
	 * @returns {void***REMOVED***
	 */
	apply(compiler) {
		const outputFs = /** @type {OutputFileSystem***REMOVED*** */ (
			compiler.outputFileSystem
		);
		const sourceMapFilename = this.sourceMapFilename;
		const sourceMappingURLComment = this.sourceMappingURLComment;
		const moduleFilenameTemplate = this.moduleFilenameTemplate;
		const namespace = this.namespace;
		const fallbackModuleFilenameTemplate = this.fallbackModuleFilenameTemplate;
		const requestShortener = compiler.requestShortener;
		const options = this.options;
		options.test = options.test || CSS_AND_JS_MODULE_EXTENSIONS_REGEXP;

		const matchObject = ModuleFilenameHelpers.matchObject.bind(
			undefined,
			options
		);

		compiler.hooks.compilation.tap(PLUGIN_NAME, compilation => {
			new SourceMapDevToolModuleOptionsPlugin(options).apply(compilation);

			compilation.hooks.processAssets.tapAsync(
				{
					name: PLUGIN_NAME,
					stage: Compilation.PROCESS_ASSETS_STAGE_DEV_TOOLING,
					additionalAssets: true
				***REMOVED***,
				(assets, callback) => {
					const chunkGraph = compilation.chunkGraph;
					const cache = compilation.getCache(PLUGIN_NAME);
					/** @type {Map<string | Module, string>***REMOVED*** */
					const moduleToSourceNameMapping = new Map();
					const reportProgress =
						ProgressPlugin.getReporter(compilation.compiler) || (() => {***REMOVED***);

					/** @type {Map<string, Chunk>***REMOVED*** */
					const fileToChunk = new Map();
					for (const chunk of compilation.chunks) {
						for (const file of chunk.files) {
							fileToChunk.set(file, chunk);
						***REMOVED***
						for (const file of chunk.auxiliaryFiles) {
							fileToChunk.set(file, chunk);
						***REMOVED***
					***REMOVED***

					/** @type {string[]***REMOVED*** */
					const files = [];
					for (const file of Object.keys(assets)) {
						if (matchObject(file)) {
							files.push(file);
						***REMOVED***
					***REMOVED***

					reportProgress(0);
					/** @type {SourceMapTask[]***REMOVED*** */
					const tasks = [];
					let fileIndex = 0;

					asyncLib.each(
						files,
						(file, callback) => {
							const asset =
								/** @type {Readonly<Asset>***REMOVED*** */
								(compilation.getAsset(file));
							if (asset.info.related && asset.info.related.sourceMap) {
								fileIndex++;
								return callback();
							***REMOVED***

							const chunk = fileToChunk.get(file);
							const sourceMapNamespace = compilation.getPath(this.namespace, {
								chunk
							***REMOVED***);

							const cacheItem = cache.getItemCache(
								file,
								cache.mergeEtags(
									cache.getLazyHashedEtag(asset.source),
									sourceMapNamespace
								)
							);

							cacheItem.get((err, cacheEntry) => {
								if (err) {
									return callback(err);
								***REMOVED***
								/**
								 * If presented in cache, reassigns assets. Cache assets already have source maps.
								 */
								if (cacheEntry) {
									const { assets, assetsInfo ***REMOVED*** = cacheEntry;
									for (const cachedFile of Object.keys(assets)) {
										if (cachedFile === file) {
											compilation.updateAsset(
												cachedFile,
												assets[cachedFile],
												assetsInfo[cachedFile]
											);
										***REMOVED*** else {
											compilation.emitAsset(
												cachedFile,
												assets[cachedFile],
												assetsInfo[cachedFile]
											);
										***REMOVED***
										/**
										 * Add file to chunk, if not presented there
										 */
										if (cachedFile !== file && chunk !== undefined)
											chunk.auxiliaryFiles.add(cachedFile);
									***REMOVED***

									reportProgress(
										(0.5 * ++fileIndex) / files.length,
										file,
										"restored cached SourceMap"
									);

									return callback();
								***REMOVED***

								reportProgress(
									(0.5 * fileIndex) / files.length,
									file,
									"generate SourceMap"
								);

								/** @type {SourceMapTask | undefined***REMOVED*** */
								const task = getTaskForFile(
									file,
									asset.source,
									asset.info,
									{
										module: options.module,
										columns: options.columns
									***REMOVED***,
									compilation,
									cacheItem
								);

								if (task) {
									const modules = task.modules;

									for (let idx = 0; idx < modules.length; idx++) {
										const module = modules[idx];

										if (
											typeof module === "string" &&
											/^(data|https?):/.test(module)
										) {
											moduleToSourceNameMapping.set(module, module);
											continue;
										***REMOVED***

										if (!moduleToSourceNameMapping.get(module)) {
											moduleToSourceNameMapping.set(
												module,
												ModuleFilenameHelpers.createFilename(
													module,
													{
														moduleFilenameTemplate,
														namespace: sourceMapNamespace
													***REMOVED***,
													{
														requestShortener,
														chunkGraph,
														hashFunction: compilation.outputOptions.hashFunction
													***REMOVED***
												)
											);
										***REMOVED***
									***REMOVED***

									tasks.push(task);
								***REMOVED***

								reportProgress(
									(0.5 * ++fileIndex) / files.length,
									file,
									"generated SourceMap"
								);

								callback();
							***REMOVED***);
						***REMOVED***,
						err => {
							if (err) {
								return callback(err);
							***REMOVED***

							reportProgress(0.5, "resolve sources");
							/** @type {Set<string>***REMOVED*** */
							const usedNamesSet = new Set(moduleToSourceNameMapping.values());
							/** @type {Set<string>***REMOVED*** */
							const conflictDetectionSet = new Set();

							/**
							 * all modules in defined order (longest identifier first)
							 * @type {Array<string | Module>***REMOVED***
							 */
							const allModules = Array.from(
								moduleToSourceNameMapping.keys()
							).sort((a, b) => {
								const ai = typeof a === "string" ? a : a.identifier();
								const bi = typeof b === "string" ? b : b.identifier();
								return ai.length - bi.length;
							***REMOVED***);

							// find modules with conflicting source names
							for (let idx = 0; idx < allModules.length; idx++) {
								const module = allModules[idx];
								let sourceName =
									/** @type {string***REMOVED*** */
									(moduleToSourceNameMapping.get(module));
								let hasName = conflictDetectionSet.has(sourceName);
								if (!hasName) {
									conflictDetectionSet.add(sourceName);
									continue;
								***REMOVED***

								// try the fallback name first
								sourceName = ModuleFilenameHelpers.createFilename(
									module,
									{
										moduleFilenameTemplate: fallbackModuleFilenameTemplate,
										namespace
									***REMOVED***,
									{
										requestShortener,
										chunkGraph,
										hashFunction: compilation.outputOptions.hashFunction
									***REMOVED***
								);
								hasName = usedNamesSet.has(sourceName);
								if (!hasName) {
									moduleToSourceNameMapping.set(module, sourceName);
									usedNamesSet.add(sourceName);
									continue;
								***REMOVED***

								// otherwise just append stars until we have a valid name
								while (hasName) {
									sourceName += "*";
									hasName = usedNamesSet.has(sourceName);
								***REMOVED***
								moduleToSourceNameMapping.set(module, sourceName);
								usedNamesSet.add(sourceName);
							***REMOVED***

							let taskIndex = 0;

							asyncLib.each(
								tasks,
								(task, callback) => {
									const assets = Object.create(null);
									const assetsInfo = Object.create(null);
									const file = task.file;
									const chunk = fileToChunk.get(file);
									const sourceMap = task.sourceMap;
									const source = task.source;
									const modules = task.modules;

									reportProgress(
										0.5 + (0.5 * taskIndex) / tasks.length,
										file,
										"attach SourceMap"
									);

									const moduleFilenames = modules.map(m =>
										moduleToSourceNameMapping.get(m)
									);
									sourceMap.sources = /** @type {string[]***REMOVED*** */ (moduleFilenames);
									if (options.noSources) {
										sourceMap.sourcesContent = undefined;
									***REMOVED***
									sourceMap.sourceRoot = options.sourceRoot || "";
									sourceMap.file = file;
									const usesContentHash =
										sourceMapFilename &&
										CONTENT_HASH_DETECT_REGEXP.test(sourceMapFilename);

									resetRegexpState(CONTENT_HASH_DETECT_REGEXP);

									// If SourceMap and asset uses contenthash, avoid a circular dependency by hiding hash in `file`
									if (usesContentHash && task.assetInfo.contenthash) {
										const contenthash = task.assetInfo.contenthash;
										const pattern = Array.isArray(contenthash)
											? contenthash.map(quoteMeta).join("|")
											: quoteMeta(contenthash);
										sourceMap.file = sourceMap.file.replace(
											new RegExp(pattern, "g"),
											m => "x".repeat(m.length)
										);
									***REMOVED***

									/** @type {false | TemplatePath***REMOVED*** */
									let currentSourceMappingURLComment = sourceMappingURLComment;
									const cssExtensionDetected =
										CSS_EXTENSION_DETECT_REGEXP.test(file);
									resetRegexpState(CSS_EXTENSION_DETECT_REGEXP);
									if (
										currentSourceMappingURLComment !== false &&
										typeof currentSourceMappingURLComment !== "function" &&
										cssExtensionDetected
									) {
										currentSourceMappingURLComment =
											currentSourceMappingURLComment.replace(
												URL_FORMATTING_REGEXP,
												"\n/*$1*/"
											);
									***REMOVED***

									if (options.debugIds) {
										const debugId = generateDebugId(source, sourceMap.file);
										sourceMap.debugId = debugId;
										currentSourceMappingURLComment = `\n//# debugId=${debugId***REMOVED***${currentSourceMappingURLComment***REMOVED***`;
									***REMOVED***

									const sourceMapString = JSON.stringify(sourceMap);
									if (sourceMapFilename) {
										const filename = file;
										const sourceMapContentHash =
											/** @type {string***REMOVED*** */
											(
												usesContentHash &&
													createHash(
														/** @type {HashFunction***REMOVED*** */
														(compilation.outputOptions.hashFunction)
													)
														.update(sourceMapString)
														.digest("hex")
											);
										const pathParams = {
											chunk,
											filename: options.fileContext
												? relative(
														outputFs,
														`/${options.fileContext***REMOVED***`,
														`/${filename***REMOVED***`
													)
												: filename,
											contentHash: sourceMapContentHash
										***REMOVED***;
										const { path: sourceMapFile, info: sourceMapInfo ***REMOVED*** =
											compilation.getPathWithInfo(
												sourceMapFilename,
												pathParams
											);
										const sourceMapUrl = options.publicPath
											? options.publicPath + sourceMapFile
											: relative(
													outputFs,
													dirname(outputFs, `/${file***REMOVED***`),
													`/${sourceMapFile***REMOVED***`
												);
										/** @type {Source***REMOVED*** */
										let asset = new RawSource(source);
										if (currentSourceMappingURLComment !== false) {
											// Add source map url to compilation asset, if currentSourceMappingURLComment is set
											asset = new ConcatSource(
												asset,
												compilation.getPath(currentSourceMappingURLComment, {
													url: sourceMapUrl,
													...pathParams
												***REMOVED***)
											);
										***REMOVED***
										const assetInfo = {
											related: { sourceMap: sourceMapFile ***REMOVED***
										***REMOVED***;
										assets[file] = asset;
										assetsInfo[file] = assetInfo;
										compilation.updateAsset(file, asset, assetInfo);
										// Add source map file to compilation assets and chunk files
										const sourceMapAsset = new RawSource(sourceMapString);
										const sourceMapAssetInfo = {
											...sourceMapInfo,
											development: true
										***REMOVED***;
										assets[sourceMapFile] = sourceMapAsset;
										assetsInfo[sourceMapFile] = sourceMapAssetInfo;
										compilation.emitAsset(
											sourceMapFile,
											sourceMapAsset,
											sourceMapAssetInfo
										);
										if (chunk !== undefined)
											chunk.auxiliaryFiles.add(sourceMapFile);
									***REMOVED*** else {
										if (currentSourceMappingURLComment === false) {
											throw new Error(
												`${PLUGIN_NAME***REMOVED***: append can't be false when no filename is provided`
											);
										***REMOVED***
										if (typeof currentSourceMappingURLComment === "function") {
											throw new Error(
												`${PLUGIN_NAME***REMOVED***: append can't be a function when no filename is provided`
											);
										***REMOVED***
										/**
										 * Add source map as data url to asset
										 */
										const asset = new ConcatSource(
											new RawSource(source),
											currentSourceMappingURLComment
												.replace(MAP_URL_COMMENT_REGEXP, () => sourceMapString)
												.replace(
													URL_COMMENT_REGEXP,
													() =>
														`data:application/json;charset=utf-8;base64,${Buffer.from(
															sourceMapString,
															"utf-8"
														).toString("base64")***REMOVED***`
												)
										);
										assets[file] = asset;
										assetsInfo[file] = undefined;
										compilation.updateAsset(file, asset);
									***REMOVED***

									task.cacheItem.store({ assets, assetsInfo ***REMOVED***, err => {
										reportProgress(
											0.5 + (0.5 * ++taskIndex) / tasks.length,
											task.file,
											"attached SourceMap"
										);

										if (err) {
											return callback(err);
										***REMOVED***
										callback();
									***REMOVED***);
								***REMOVED***,
								err => {
									reportProgress(1);
									callback(err);
								***REMOVED***
							);
						***REMOVED***
					);
				***REMOVED***
			);
		***REMOVED***);
	***REMOVED***
***REMOVED***

module.exports = SourceMapDevToolPlugin;
