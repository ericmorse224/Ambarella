"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; ***REMOVED***; ***REMOVED*** else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; ***REMOVED***; ***REMOVED*** return _typeof(obj); ***REMOVED***

Object.defineProperty(exports, "__esModule", {
  value: true
***REMOVED***);
exports.shrinkPaddedLEB128 = shrinkPaddedLEB128;

var _wasmParser = require("@webassemblyjs/wasm-parser");

var _leb = require("./leb128.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); ***REMOVED*** ***REMOVED***

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); ***REMOVED*** subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true ***REMOVED*** ***REMOVED***); if (superClass) _setPrototypeOf(subClass, superClass); ***REMOVED***

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); ***REMOVED*** else { result = Super.apply(this, arguments); ***REMOVED*** return _possibleConstructorReturn(this, result); ***REMOVED***; ***REMOVED***

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; ***REMOVED*** else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); ***REMOVED*** return _assertThisInitialized(self); ***REMOVED***

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); ***REMOVED*** return self; ***REMOVED***

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); ***REMOVED*** if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); ***REMOVED*** function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); ***REMOVED*** Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true ***REMOVED*** ***REMOVED***); return _setPrototypeOf(Wrapper, Class); ***REMOVED***; return _wrapNativeSuper(Class); ***REMOVED***

function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; ***REMOVED*** else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; ***REMOVED***; ***REMOVED*** return _construct.apply(null, arguments); ***REMOVED***

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {***REMOVED***)); return true; ***REMOVED*** catch (e) { return false; ***REMOVED*** ***REMOVED***

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; ***REMOVED***

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; ***REMOVED***; return _setPrototypeOf(o, p); ***REMOVED***

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); ***REMOVED***; return _getPrototypeOf(o); ***REMOVED***

var OptimizerError = /*#__PURE__*/function (_Error) {
  _inherits(OptimizerError, _Error);

  var _super = _createSuper(OptimizerError);

  function OptimizerError(name, initalError) {
    var _this;

    _classCallCheck(this, OptimizerError);

    _this = _super.call(this, "Error while optimizing: " + name + ": " + initalError.message);
    _this.stack = initalError.stack;
    return _this;
  ***REMOVED***

  return OptimizerError;
***REMOVED***( /*#__PURE__*/_wrapNativeSuper(Error));

var decoderOpts = {
  ignoreCodeSection: true,
  ignoreDataSection: true
***REMOVED***;

function shrinkPaddedLEB128(uint8Buffer) {
  try {
    var ast = (0, _wasmParser.decode)(uint8Buffer.buffer, decoderOpts);
    return (0, _leb.shrinkPaddedLEB128)(ast, uint8Buffer);
  ***REMOVED*** catch (e) {
    throw new OptimizerError("shrinkPaddedLEB128", e);
  ***REMOVED***
***REMOVED***