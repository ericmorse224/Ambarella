'use strict';

const os = require('os');
const fs = require('fs');
const { pathToFileURL ***REMOVED*** = require('url');
const path = require('path');
const {
  extendDefaultPlugins,
  optimize: optimizeAgnostic,
  createContentItem,
***REMOVED*** = require('./svgo.js');

exports.extendDefaultPlugins = extendDefaultPlugins;
exports.createContentItem = createContentItem;

const importConfig = async (configFile) => {
  let config;
  // at the moment dynamic import may randomly fail with segfault
  // to workaround this for some users .cjs extension is loaded
  // exclusively with require
  if (configFile.endsWith('.cjs')) {
    config = require(configFile);
  ***REMOVED*** else {
    try {
      // dynamic import expects file url instead of path and may fail
      // when windows path is provided
      const { default: imported ***REMOVED*** = await import(pathToFileURL(configFile));
      config = imported;
    ***REMOVED*** catch (importError) {
      // TODO remove require in v3
      try {
        config = require(configFile);
      ***REMOVED*** catch (requireError) {
        // throw original error if es module is detected
        if (requireError.code === 'ERR_REQUIRE_ESM') {
          throw importError;
        ***REMOVED*** else {
          throw requireError;
        ***REMOVED***
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***
  if (config == null || typeof config !== 'object' || Array.isArray(config)) {
    throw Error(`Invalid config file "${configFile***REMOVED***"`);
  ***REMOVED***
  return config;
***REMOVED***;

const isFile = async (file) => {
  try {
    const stats = await fs.promises.stat(file);
    return stats.isFile();
  ***REMOVED*** catch {
    return false;
  ***REMOVED***
***REMOVED***;

const loadConfig = async (configFile, cwd = process.cwd()) => {
  if (configFile != null) {
    if (path.isAbsolute(configFile)) {
      return await importConfig(configFile);
    ***REMOVED*** else {
      return await importConfig(path.join(cwd, configFile));
    ***REMOVED***
  ***REMOVED***
  let dir = cwd;
  // eslint-disable-next-line no-constant-condition
  while (true) {
    const js = path.join(dir, 'svgo.config.js');
    if (await isFile(js)) {
      return await importConfig(js);
    ***REMOVED***
    const mjs = path.join(dir, 'svgo.config.mjs');
    if (await isFile(mjs)) {
      return await importConfig(mjs);
    ***REMOVED***
    const cjs = path.join(dir, 'svgo.config.cjs');
    if (await isFile(cjs)) {
      return await importConfig(cjs);
    ***REMOVED***
    const parent = path.dirname(dir);
    if (dir === parent) {
      return null;
    ***REMOVED***
    dir = parent;
  ***REMOVED***
***REMOVED***;
exports.loadConfig = loadConfig;

const optimize = (input, config) => {
  if (config == null) {
    config = {***REMOVED***;
  ***REMOVED***
  if (typeof config !== 'object') {
    throw Error('Config should be an object');
  ***REMOVED***
  return optimizeAgnostic(input, {
    ...config,
    js2svg: {
      // platform specific default for end of line
      eol: os.EOL === '\r\n' ? 'crlf' : 'lf',
      ...config.js2svg,
    ***REMOVED***,
  ***REMOVED***);
***REMOVED***;
exports.optimize = optimize;
