'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
***REMOVED***);
exports.default = updateGlobalConfig;

function _jestRegexUtil() {
  const data = require('jest-regex-util');

  _jestRegexUtil = function () {
    return data;
  ***REMOVED***;

  return data;
***REMOVED***

/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
function updateGlobalConfig(globalConfig, options = {***REMOVED***) {
  const newConfig = {...globalConfig***REMOVED***;

  if (options.mode === 'watch') {
    newConfig.watch = true;
    newConfig.watchAll = false;
  ***REMOVED*** else if (options.mode === 'watchAll') {
    newConfig.watch = false;
    newConfig.watchAll = true;
  ***REMOVED***

  if (options.testNamePattern !== undefined) {
    newConfig.testNamePattern = options.testNamePattern || '';
  ***REMOVED***

  if (options.testPathPattern !== undefined) {
    newConfig.testPathPattern =
      (0, _jestRegexUtil().replacePathSepForRegex)(options.testPathPattern) ||
      '';
  ***REMOVED***

  newConfig.onlyChanged =
    !newConfig.watchAll &&
    !newConfig.testNamePattern &&
    !newConfig.testPathPattern;

  if (typeof options.bail === 'boolean') {
    newConfig.bail = options.bail ? 1 : 0;
  ***REMOVED*** else if (options.bail !== undefined) {
    newConfig.bail = options.bail;
  ***REMOVED***

  if (options.changedSince !== undefined) {
    newConfig.changedSince = options.changedSince;
  ***REMOVED***

  if (options.collectCoverage !== undefined) {
    newConfig.collectCoverage = options.collectCoverage || false;
  ***REMOVED***

  if (options.collectCoverageFrom !== undefined) {
    newConfig.collectCoverageFrom = options.collectCoverageFrom;
  ***REMOVED***

  if (options.collectCoverageOnlyFrom !== undefined) {
    newConfig.collectCoverageOnlyFrom = options.collectCoverageOnlyFrom;
  ***REMOVED***

  if (options.coverageDirectory !== undefined) {
    newConfig.coverageDirectory = options.coverageDirectory;
  ***REMOVED***

  if (options.coverageReporters !== undefined) {
    newConfig.coverageReporters = options.coverageReporters;
  ***REMOVED***

  if (options.findRelatedTests !== undefined) {
    newConfig.findRelatedTests = options.findRelatedTests;
  ***REMOVED***

  if (options.nonFlagArgs !== undefined) {
    newConfig.nonFlagArgs = options.nonFlagArgs;
  ***REMOVED***

  if (options.noSCM) {
    newConfig.noSCM = true;
  ***REMOVED***

  if (options.notify !== undefined) {
    newConfig.notify = options.notify || false;
  ***REMOVED***

  if (options.notifyMode !== undefined) {
    newConfig.notifyMode = options.notifyMode;
  ***REMOVED***

  if (options.onlyFailures !== undefined) {
    newConfig.onlyFailures = options.onlyFailures || false;
  ***REMOVED***

  if (options.passWithNoTests !== undefined) {
    newConfig.passWithNoTests = true;
  ***REMOVED***

  if (options.reporters !== undefined) {
    newConfig.reporters = options.reporters;
  ***REMOVED***

  if (options.updateSnapshot !== undefined) {
    newConfig.updateSnapshot = options.updateSnapshot;
  ***REMOVED***

  if (options.verbose !== undefined) {
    newConfig.verbose = options.verbose || false;
  ***REMOVED***

  return Object.freeze(newConfig);
***REMOVED***
