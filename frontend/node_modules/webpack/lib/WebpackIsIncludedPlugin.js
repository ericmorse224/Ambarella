/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Ivan Kopeykin @vankop
*/

"use strict";

const IgnoreErrorModuleFactory = require("./IgnoreErrorModuleFactory");
const {
	JAVASCRIPT_MODULE_TYPE_AUTO,
	JAVASCRIPT_MODULE_TYPE_DYNAMIC,
	JAVASCRIPT_MODULE_TYPE_ESM
***REMOVED*** = require("./ModuleTypeConstants");
const WebpackIsIncludedDependency = require("./dependencies/WebpackIsIncludedDependency");
const {
	toConstantDependency
***REMOVED*** = require("./javascript/JavascriptParserHelpers");

/** @typedef {import("enhanced-resolve").Resolver***REMOVED*** Resolver */
/** @typedef {import("./Compiler")***REMOVED*** Compiler */
/** @typedef {import("./Dependency").DependencyLocation***REMOVED*** DependencyLocation */
/** @typedef {import("./Module")***REMOVED*** Module */
/** @typedef {import("./javascript/JavascriptParser")***REMOVED*** JavascriptParser */
/** @typedef {import("./javascript/JavascriptParser").Range***REMOVED*** Range */

const PLUGIN_NAME = "WebpackIsIncludedPlugin";

class WebpackIsIncludedPlugin {
	/**
	 * @param {Compiler***REMOVED*** compiler the compiler instance
	 * @returns {void***REMOVED***
	 */
	apply(compiler) {
		compiler.hooks.compilation.tap(
			PLUGIN_NAME,
			(compilation, { normalModuleFactory ***REMOVED***) => {
				compilation.dependencyFactories.set(
					WebpackIsIncludedDependency,
					new IgnoreErrorModuleFactory(normalModuleFactory)
				);
				compilation.dependencyTemplates.set(
					WebpackIsIncludedDependency,
					new WebpackIsIncludedDependency.Template()
				);

				/**
				 * @param {JavascriptParser***REMOVED*** parser the parser
				 * @returns {void***REMOVED***
				 */
				const handler = parser => {
					parser.hooks.call
						.for("__webpack_is_included__")
						.tap(PLUGIN_NAME, expr => {
							if (
								expr.type !== "CallExpression" ||
								expr.arguments.length !== 1 ||
								expr.arguments[0].type === "SpreadElement"
							)
								return;

							const request = parser.evaluateExpression(expr.arguments[0]);

							if (!request.isString()) return;

							const dep = new WebpackIsIncludedDependency(
								/** @type {string***REMOVED*** */ (request.string),
								/** @type {Range***REMOVED*** */ (expr.range)
							);
							dep.loc = /** @type {DependencyLocation***REMOVED*** */ (expr.loc);
							parser.state.module.addDependency(dep);
							return true;
						***REMOVED***);
					parser.hooks.typeof
						.for("__webpack_is_included__")
						.tap(
							PLUGIN_NAME,
							toConstantDependency(parser, JSON.stringify("function"))
						);
				***REMOVED***;
				normalModuleFactory.hooks.parser
					.for(JAVASCRIPT_MODULE_TYPE_AUTO)
					.tap(PLUGIN_NAME, handler);
				normalModuleFactory.hooks.parser
					.for(JAVASCRIPT_MODULE_TYPE_DYNAMIC)
					.tap(PLUGIN_NAME, handler);
				normalModuleFactory.hooks.parser
					.for(JAVASCRIPT_MODULE_TYPE_ESM)
					.tap(PLUGIN_NAME, handler);
			***REMOVED***
		);
	***REMOVED***
***REMOVED***

module.exports = WebpackIsIncludedPlugin;
