/*
  Copyright 2020 Google LLC

  Use of this source code is governed by an MIT-style
  license that can be found in the LICENSE file or at
  https://opensource.org/licenses/MIT.
*/
import { logger ***REMOVED*** from 'workbox-core/_private/logger.js';
import { getFriendlyURL ***REMOVED*** from 'workbox-core/_private/getFriendlyURL.js';
import { Route ***REMOVED*** from 'workbox-routing/Route.js';
import { generateURLVariations ***REMOVED*** from './utils/generateURLVariations.js';
import './_version.js';
/**
 * A subclass of {@link workbox-routing.Route***REMOVED*** that takes a
 * {@link workbox-precaching.PrecacheController***REMOVED***
 * instance and uses it to match incoming requests and handle fetching
 * responses from the precache.
 *
 * @memberof workbox-precaching
 * @extends workbox-routing.Route
 */
class PrecacheRoute extends Route {
    /**
     * @param {PrecacheController***REMOVED*** precacheController A `PrecacheController`
     * instance used to both match requests and respond to fetch events.
     * @param {Object***REMOVED*** [options] Options to control how requests are matched
     * against the list of precached URLs.
     * @param {string***REMOVED*** [options.directoryIndex=index.html] The `directoryIndex` will
     * check cache entries for a URLs ending with '/' to see if there is a hit when
     * appending the `directoryIndex` value.
     * @param {Array<RegExp>***REMOVED*** [options.ignoreURLParametersMatching=[/^utm_/, /^fbclid$/]] An
     * array of regex's to remove search params when looking for a cache match.
     * @param {boolean***REMOVED*** [options.cleanURLs=true] The `cleanURLs` option will
     * check the cache for the URL with a `.html` added to the end of the end.
     * @param {workbox-precaching~urlManipulation***REMOVED*** [options.urlManipulation]
     * This is a function that should take a URL and return an array of
     * alternative URLs that should be checked for precache matches.
     */
    constructor(precacheController, options) {
        const match = ({ request, ***REMOVED***) => {
            const urlsToCacheKeys = precacheController.getURLsToCacheKeys();
            for (const possibleURL of generateURLVariations(request.url, options)) {
                const cacheKey = urlsToCacheKeys.get(possibleURL);
                if (cacheKey) {
                    const integrity = precacheController.getIntegrityForCacheKey(cacheKey);
                    return { cacheKey, integrity ***REMOVED***;
                ***REMOVED***
            ***REMOVED***
            if (process.env.NODE_ENV !== 'production') {
                logger.debug(`Precaching did not find a match for ` + getFriendlyURL(request.url));
            ***REMOVED***
            return;
        ***REMOVED***;
        super(match, precacheController.strategy);
    ***REMOVED***
***REMOVED***
export { PrecacheRoute ***REMOVED***;
