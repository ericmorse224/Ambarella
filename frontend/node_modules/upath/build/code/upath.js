/**
* upath http://github.com/anodynos/upath/
*
* A proxy to `path`, replacing `\` with `/` for all results & new methods to normalize & join keeping leading `./` and add, change, default, trim file extensions.
* Version 1.2.0 - Compiled on 2019-09-02 23:33:57
* Repository git://github.com/anodynos/upath
* Copyright(c) 2019 Angelos Pikoulas <agelos.pikoulas@gmail.com>
* License MIT
*/

// Generated by uRequire v0.7.0-beta.33 target: 'lib' template: 'nodejs'


var VERSION = '1.2.0'; // injected by urequire-rc-inject-version

var extraFn, extraFunctions, isFunction, isString, isValidExt, name, path, propName, propValue, toUnix, upath, slice = [].slice, indexOf = [].indexOf || function (item) {
    for (var i = 0, l = this.length; i < l; i++) {
      if (i in this && this[i] === item)
        return i;
    ***REMOVED***
    return -1;
  ***REMOVED***, hasProp = {***REMOVED***.hasOwnProperty;
path = require("path");
isFunction = function (val) {
  return val instanceof Function;
***REMOVED***;
isString = function (val) {
  return typeof val === "string" || !!val && typeof val === "object" && Object.prototype.toString.call(val) === "[object String]";
***REMOVED***;
upath = exports;
upath.VERSION = typeof VERSION !== "undefined" && VERSION !== null ? VERSION : "NO-VERSION";
toUnix = function (p) {
  var double;
  p = p.replace(/\\/g, "/");
  double = /\/\//;
  while (p.match(double)) {
    p = p.replace(double, "/");
  ***REMOVED***
  return p;
***REMOVED***;
for (propName in path) {
  propValue = path[propName];
  if (isFunction(propValue)) {
    upath[propName] = function (propName) {
      return function () {
        var args, result;
        args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        args = args.map(function (p) {
          if (isString(p)) {
            return toUnix(p);
          ***REMOVED*** else {
            return p;
          ***REMOVED***
        ***REMOVED***);
        result = path[propName].apply(path, args);
        if (isString(result)) {
          return toUnix(result);
        ***REMOVED*** else {
          return result;
        ***REMOVED***
      ***REMOVED***;
    ***REMOVED***(propName);
  ***REMOVED*** else {
    upath[propName] = propValue;
  ***REMOVED***
***REMOVED***
upath.sep = "/";
extraFunctions = {
  toUnix: toUnix,
  normalizeSafe: function (p) {
    p = toUnix(p);
    if (p.startsWith("./")) {
      if (p.startsWith("./..") || p === "./") {
        return upath.normalize(p);
      ***REMOVED*** else {
        return "./" + upath.normalize(p);
      ***REMOVED***
    ***REMOVED*** else {
      return upath.normalize(p);
    ***REMOVED***
  ***REMOVED***,
  normalizeTrim: function (p) {
    p = upath.normalizeSafe(p);
    if (p.endsWith("/")) {
      return p.slice(0, +(p.length - 2) + 1 || 9000000000);
    ***REMOVED*** else {
      return p;
    ***REMOVED***
  ***REMOVED***,
  joinSafe: function () {
    var p, result;
    p = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    result = upath.join.apply(null, p);
    if (p[0].startsWith("./") && !result.startsWith("./")) {
      result = "./" + result;
    ***REMOVED***
    return result;
  ***REMOVED***,
  addExt: function (file, ext) {
    if (!ext) {
      return file;
    ***REMOVED*** else {
      if (ext[0] !== ".") {
        ext = "." + ext;
      ***REMOVED***
      return file + (file.endsWith(ext) ? "" : ext);
    ***REMOVED***
  ***REMOVED***,
  trimExt: function (filename, ignoreExts, maxSize) {
    var oldExt;
    if (maxSize == null) {
      maxSize = 7;
    ***REMOVED***
    oldExt = upath.extname(filename);
    if (isValidExt(oldExt, ignoreExts, maxSize)) {
      return filename.slice(0, +(filename.length - oldExt.length - 1) + 1 || 9000000000);
    ***REMOVED*** else {
      return filename;
    ***REMOVED***
  ***REMOVED***,
  removeExt: function (filename, ext) {
    if (!ext) {
      return filename;
    ***REMOVED*** else {
      ext = ext[0] === "." ? ext : "." + ext;
      if (upath.extname(filename) === ext) {
        return upath.trimExt(filename);
      ***REMOVED*** else {
        return filename;
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***,
  changeExt: function (filename, ext, ignoreExts, maxSize) {
    if (maxSize == null) {
      maxSize = 7;
    ***REMOVED***
    return upath.trimExt(filename, ignoreExts, maxSize) + (!ext ? "" : ext[0] === "." ? ext : "." + ext);
  ***REMOVED***,
  defaultExt: function (filename, ext, ignoreExts, maxSize) {
    var oldExt;
    if (maxSize == null) {
      maxSize = 7;
    ***REMOVED***
    oldExt = upath.extname(filename);
    if (isValidExt(oldExt, ignoreExts, maxSize)) {
      return filename;
    ***REMOVED*** else {
      return upath.addExt(filename, ext);
    ***REMOVED***
  ***REMOVED***
***REMOVED***;
isValidExt = function (ext, ignoreExts, maxSize) {
  if (ignoreExts == null) {
    ignoreExts = [];
  ***REMOVED***
  return ext && ext.length <= maxSize && indexOf.call(ignoreExts.map(function (e) {
    return (e && e[0] !== "." ? "." : "") + e;
  ***REMOVED***), ext) < 0;
***REMOVED***;
for (name in extraFunctions) {
  if (!hasProp.call(extraFunctions, name))
    continue;
  extraFn = extraFunctions[name];
  if (upath[name] !== void 0) {
    throw new Error("path." + name + " already exists.");
  ***REMOVED*** else {
    upath[name] = extraFn;
  ***REMOVED***
***REMOVED***

;