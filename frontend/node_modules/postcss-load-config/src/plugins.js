'use strict'

const req = require('./req.js')

/**
 * Plugin Loader
 *
 * @private
 * @method load
 *
 * @param  {String***REMOVED*** plugin PostCSS Plugin Name
 * @param  {Object***REMOVED*** options PostCSS Plugin Options
 *
 * @return {Function***REMOVED*** PostCSS Plugin
 */
const load = (plugin, options, file) => {
  try {
    if (
      options === null ||
      options === undefined ||
      Object.keys(options).length === 0
    ) {
      return req(plugin, file)
    ***REMOVED*** else {
      return req(plugin, file)(options)
    ***REMOVED***
  ***REMOVED*** catch (err) {
    throw new Error(`Loading PostCSS Plugin failed: ${err.message***REMOVED***\n\n(@${file***REMOVED***)`)
  ***REMOVED***
***REMOVED***

/**
 * Load Plugins
 *
 * @private
 * @method plugins
 *
 * @param {Object***REMOVED*** config PostCSS Config Plugins
 *
 * @return {Array***REMOVED*** plugins PostCSS Plugins
 */
const plugins = (config, file) => {
  let plugins = []

  if (Array.isArray(config.plugins)) {
    plugins = config.plugins.filter(Boolean)
  ***REMOVED*** else {
    plugins = Object.keys(config.plugins)
      .filter((plugin) => {
        return config.plugins[plugin] !== false ? plugin : ''
      ***REMOVED***)
      .map((plugin) => {
        return load(plugin, config.plugins[plugin], file)
      ***REMOVED***)
  ***REMOVED***

  if (plugins.length && plugins.length > 0) {
    plugins.forEach((plugin, i) => {
      if (plugin.default) {
        plugin = plugin.default
      ***REMOVED***

      if (plugin.postcss === true) {
        plugin = plugin()
      ***REMOVED*** else if (plugin.postcss) {
        plugin = plugin.postcss
      ***REMOVED***

      if (
        // eslint-disable-next-line
        !(
          (typeof plugin === 'object' && Array.isArray(plugin.plugins)) ||
          (typeof plugin === 'object' && plugin.postcssPlugin) ||
          (typeof plugin === 'function')
        )
      ) {
        throw new TypeError(`Invalid PostCSS Plugin found at: plugins[${i***REMOVED***]\n\n(@${file***REMOVED***)`)
      ***REMOVED***
    ***REMOVED***)
  ***REMOVED***

  return plugins
***REMOVED***

module.exports = plugins
