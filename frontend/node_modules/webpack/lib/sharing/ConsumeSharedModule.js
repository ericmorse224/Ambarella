/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const { RawSource ***REMOVED*** = require("webpack-sources");
const AsyncDependenciesBlock = require("../AsyncDependenciesBlock");
const Module = require("../Module");
const { CONSUME_SHARED_TYPES ***REMOVED*** = require("../ModuleSourceTypesConstants");
const {
	WEBPACK_MODULE_TYPE_CONSUME_SHARED_MODULE
***REMOVED*** = require("../ModuleTypeConstants");
const RuntimeGlobals = require("../RuntimeGlobals");
const makeSerializable = require("../util/makeSerializable");
const { rangeToString, stringifyHoley ***REMOVED*** = require("../util/semver");
const ConsumeSharedFallbackDependency = require("./ConsumeSharedFallbackDependency");

/** @typedef {import("../../declarations/WebpackOptions").WebpackOptionsNormalized***REMOVED*** WebpackOptions */
/** @typedef {import("../ChunkGraph")***REMOVED*** ChunkGraph */
/** @typedef {import("../ChunkGroup")***REMOVED*** ChunkGroup */
/** @typedef {import("../Compilation")***REMOVED*** Compilation */
/** @typedef {import("../Dependency").UpdateHashContext***REMOVED*** UpdateHashContext */
/** @typedef {import("../Module").BuildCallback***REMOVED*** BuildCallback */
/** @typedef {import("../Module").CodeGenerationContext***REMOVED*** CodeGenerationContext */
/** @typedef {import("../Module").CodeGenerationResult***REMOVED*** CodeGenerationResult */
/** @typedef {import("../Module").LibIdentOptions***REMOVED*** LibIdentOptions */
/** @typedef {import("../Module").NeedBuildCallback***REMOVED*** NeedBuildCallback */
/** @typedef {import("../Module").NeedBuildContext***REMOVED*** NeedBuildContext */
/** @typedef {import("../Module").SourceTypes***REMOVED*** SourceTypes */
/** @typedef {import("../RequestShortener")***REMOVED*** RequestShortener */
/** @typedef {import("../ResolverFactory").ResolverWithOptions***REMOVED*** ResolverWithOptions */
/** @typedef {import("../WebpackError")***REMOVED*** WebpackError */
/** @typedef {import("../serialization/ObjectMiddleware").ObjectDeserializerContext***REMOVED*** ObjectDeserializerContext */
/** @typedef {import("../serialization/ObjectMiddleware").ObjectSerializerContext***REMOVED*** ObjectSerializerContext */
/** @typedef {import("../util/Hash")***REMOVED*** Hash */
/** @typedef {import("../util/fs").InputFileSystem***REMOVED*** InputFileSystem */
/** @typedef {import("../util/semver").SemVerRange***REMOVED*** SemVerRange */

/**
 * @typedef {object***REMOVED*** ConsumeOptions
 * @property {string=***REMOVED*** import fallback request
 * @property {string=***REMOVED*** importResolved resolved fallback request
 * @property {string***REMOVED*** shareKey global share key
 * @property {string***REMOVED*** shareScope share scope
 * @property {SemVerRange | false | undefined***REMOVED*** requiredVersion version requirement
 * @property {string=***REMOVED*** packageName package name to determine required version automatically
 * @property {boolean***REMOVED*** strictVersion don't use shared version even if version isn't valid
 * @property {boolean***REMOVED*** singleton use single global version
 * @property {boolean***REMOVED*** eager include the fallback module in a sync way
 */

class ConsumeSharedModule extends Module {
	/**
	 * @param {string***REMOVED*** context context
	 * @param {ConsumeOptions***REMOVED*** options consume options
	 */
	constructor(context, options) {
		super(WEBPACK_MODULE_TYPE_CONSUME_SHARED_MODULE, context);
		this.options = options;
	***REMOVED***

	/**
	 * @returns {string***REMOVED*** a unique identifier of the module
	 */
	identifier() {
		const {
			shareKey,
			shareScope,
			importResolved,
			requiredVersion,
			strictVersion,
			singleton,
			eager
		***REMOVED*** = this.options;
		return `${WEBPACK_MODULE_TYPE_CONSUME_SHARED_MODULE***REMOVED***|${shareScope***REMOVED***|${shareKey***REMOVED***|${
			requiredVersion && rangeToString(requiredVersion)
		***REMOVED***|${strictVersion***REMOVED***|${importResolved***REMOVED***|${singleton***REMOVED***|${eager***REMOVED***`;
	***REMOVED***

	/**
	 * @param {RequestShortener***REMOVED*** requestShortener the request shortener
	 * @returns {string***REMOVED*** a user readable identifier of the module
	 */
	readableIdentifier(requestShortener) {
		const {
			shareKey,
			shareScope,
			importResolved,
			requiredVersion,
			strictVersion,
			singleton,
			eager
		***REMOVED*** = this.options;
		return `consume shared module (${shareScope***REMOVED***) ${shareKey***REMOVED***@${
			requiredVersion ? rangeToString(requiredVersion) : "*"
		***REMOVED***${strictVersion ? " (strict)" : ""***REMOVED***${singleton ? " (singleton)" : ""***REMOVED***${
			importResolved
				? ` (fallback: ${requestShortener.shorten(importResolved)***REMOVED***)`
				: ""
		***REMOVED***${eager ? " (eager)" : ""***REMOVED***`;
	***REMOVED***

	/**
	 * @param {LibIdentOptions***REMOVED*** options options
	 * @returns {string | null***REMOVED*** an identifier for library inclusion
	 */
	libIdent(options) {
		const { shareKey, shareScope, import: request ***REMOVED*** = this.options;
		return `${
			this.layer ? `(${this.layer***REMOVED***)/` : ""
		***REMOVED***webpack/sharing/consume/${shareScope***REMOVED***/${shareKey***REMOVED***${
			request ? `/${request***REMOVED***` : ""
		***REMOVED***`;
	***REMOVED***

	/**
	 * @param {NeedBuildContext***REMOVED*** context context info
	 * @param {NeedBuildCallback***REMOVED*** callback callback function, returns true, if the module needs a rebuild
	 * @returns {void***REMOVED***
	 */
	needBuild(context, callback) {
		callback(null, !this.buildInfo);
	***REMOVED***

	/**
	 * @param {WebpackOptions***REMOVED*** options webpack options
	 * @param {Compilation***REMOVED*** compilation the compilation
	 * @param {ResolverWithOptions***REMOVED*** resolver the resolver
	 * @param {InputFileSystem***REMOVED*** fs the file system
	 * @param {BuildCallback***REMOVED*** callback callback function
	 * @returns {void***REMOVED***
	 */
	build(options, compilation, resolver, fs, callback) {
		this.buildMeta = {***REMOVED***;
		this.buildInfo = {***REMOVED***;
		if (this.options.import) {
			const dep = new ConsumeSharedFallbackDependency(this.options.import);
			if (this.options.eager) {
				this.addDependency(dep);
			***REMOVED*** else {
				const block = new AsyncDependenciesBlock({***REMOVED***);
				block.addDependency(dep);
				this.addBlock(block);
			***REMOVED***
		***REMOVED***
		callback();
	***REMOVED***

	/**
	 * @returns {SourceTypes***REMOVED*** types available (do not mutate)
	 */
	getSourceTypes() {
		return CONSUME_SHARED_TYPES;
	***REMOVED***

	/**
	 * @param {string=***REMOVED*** type the source type for which the size should be estimated
	 * @returns {number***REMOVED*** the estimated size of the module (must be non-zero)
	 */
	size(type) {
		return 42;
	***REMOVED***

	/**
	 * @param {Hash***REMOVED*** hash the hash used to track dependencies
	 * @param {UpdateHashContext***REMOVED*** context context
	 * @returns {void***REMOVED***
	 */
	updateHash(hash, context) {
		hash.update(JSON.stringify(this.options));
		super.updateHash(hash, context);
	***REMOVED***

	/**
	 * @param {CodeGenerationContext***REMOVED*** context context for code generation
	 * @returns {CodeGenerationResult***REMOVED*** result
	 */
	codeGeneration({ chunkGraph, moduleGraph, runtimeTemplate ***REMOVED***) {
		const runtimeRequirements = new Set([RuntimeGlobals.shareScopeMap]);
		const {
			shareScope,
			shareKey,
			strictVersion,
			requiredVersion,
			import: request,
			singleton,
			eager
		***REMOVED*** = this.options;
		let fallbackCode;
		if (request) {
			if (eager) {
				const dep = this.dependencies[0];
				fallbackCode = runtimeTemplate.syncModuleFactory({
					dependency: dep,
					chunkGraph,
					runtimeRequirements,
					request: this.options.import
				***REMOVED***);
			***REMOVED*** else {
				const block = this.blocks[0];
				fallbackCode = runtimeTemplate.asyncModuleFactory({
					block,
					chunkGraph,
					runtimeRequirements,
					request: this.options.import
				***REMOVED***);
			***REMOVED***
		***REMOVED***

		const args = [
			JSON.stringify(shareScope),
			JSON.stringify(shareKey),
			JSON.stringify(eager)
		];
		if (requiredVersion) {
			args.push(stringifyHoley(requiredVersion));
		***REMOVED***
		if (fallbackCode) {
			args.push(fallbackCode);
		***REMOVED***

		let fn;

		if (requiredVersion) {
			if (strictVersion) {
				fn = singleton ? "loadStrictSingletonVersion" : "loadStrictVersion";
			***REMOVED*** else {
				fn = singleton ? "loadSingletonVersion" : "loadVersion";
			***REMOVED***
		***REMOVED*** else {
			fn = singleton ? "loadSingleton" : "load";
		***REMOVED***

		const code = runtimeTemplate.returningFunction(`${fn***REMOVED***(${args.join(", ")***REMOVED***)`);
		const sources = new Map();
		sources.set("consume-shared", new RawSource(code));
		return {
			runtimeRequirements,
			sources
		***REMOVED***;
	***REMOVED***

	/**
	 * @param {ObjectSerializerContext***REMOVED*** context context
	 */
	serialize(context) {
		const { write ***REMOVED*** = context;
		write(this.options);
		super.serialize(context);
	***REMOVED***

	/**
	 * @param {ObjectDeserializerContext***REMOVED*** context context
	 */
	deserialize(context) {
		const { read ***REMOVED*** = context;
		this.options = read();
		super.deserialize(context);
	***REMOVED***
***REMOVED***

makeSerializable(
	ConsumeSharedModule,
	"webpack/lib/sharing/ConsumeSharedModule"
);

module.exports = ConsumeSharedModule;
