#!/usr/bin/env node
/* Based on webpack/bin/webpack.js */
/* eslint-disable no-console */

"use strict";

/**
 * @param {string***REMOVED*** command process to run
 * @param {string[]***REMOVED*** args command line arguments
 * @returns {Promise<void>***REMOVED*** promise
 */
const runCommand = (command, args) => {
  const cp = require("child_process");
  return new Promise((resolve, reject) => {
    const executedCommand = cp.spawn(command, args, {
      stdio: "inherit",
      shell: true,
    ***REMOVED***);

    executedCommand.on("error", (error) => {
      reject(error);
    ***REMOVED***);

    executedCommand.on("exit", (code) => {
      if (code === 0) {
        resolve();
      ***REMOVED*** else {
        reject();
      ***REMOVED***
    ***REMOVED***);
  ***REMOVED***);
***REMOVED***;

/**
 * @param {string***REMOVED*** packageName name of the package
 * @returns {boolean***REMOVED*** is the package installed?
 */
const isInstalled = (packageName) => {
  if (process.versions.pnp) {
    return true;
  ***REMOVED***

  const path = require("path");
  const fs = require("graceful-fs");

  let dir = __dirname;

  do {
    try {
      if (
        fs.statSync(path.join(dir, "node_modules", packageName)).isDirectory()
      ) {
        return true;
      ***REMOVED***
    ***REMOVED*** catch (_error) {
      // Nothing
    ***REMOVED***
    // eslint-disable-next-line no-cond-assign
  ***REMOVED*** while (dir !== (dir = path.dirname(dir)));

  // https://github.com/nodejs/node/blob/v18.9.1/lib/internal/modules/cjs/loader.js#L1274
  // @ts-ignore
  for (const internalPath of require("module").globalPaths) {
    try {
      if (fs.statSync(path.join(internalPath, packageName)).isDirectory()) {
        return true;
      ***REMOVED***
    ***REMOVED*** catch (_error) {
      // Nothing
    ***REMOVED***
  ***REMOVED***

  return false;
***REMOVED***;

/**
 * @param {CliOption***REMOVED*** cli options
 * @returns {void***REMOVED***
 */
const runCli = (cli) => {
  if (cli.preprocess) {
    cli.preprocess();
  ***REMOVED***
  const path = require("path");
  const pkgPath = require.resolve(`${cli.package***REMOVED***/package.json`);
  // eslint-disable-next-line import/no-dynamic-require
  const pkg = require(pkgPath);

  if (pkg.type === "module" || /\.mjs/i.test(pkg.bin[cli.binName])) {
    import(path.resolve(path.dirname(pkgPath), pkg.bin[cli.binName])).catch(
      (error) => {
        console.error(error);
        process.exitCode = 1;
      ***REMOVED***
    );
  ***REMOVED*** else {
    // eslint-disable-next-line import/no-dynamic-require
    require(path.resolve(path.dirname(pkgPath), pkg.bin[cli.binName]));
  ***REMOVED***
***REMOVED***;

/**
 * @typedef {Object***REMOVED*** CliOption
 * @property {string***REMOVED*** name display name
 * @property {string***REMOVED*** package npm package name
 * @property {string***REMOVED*** binName name of the executable file
 * @property {boolean***REMOVED*** installed currently installed?
 * @property {string***REMOVED*** url homepage
 * @property {function***REMOVED*** preprocess preprocessor
 */

/** @type {CliOption***REMOVED*** */
const cli = {
  name: "webpack-cli",
  package: "webpack-cli",
  binName: "webpack-cli",
  installed: isInstalled("webpack-cli"),
  url: "https://github.com/webpack/webpack-cli",
  preprocess() {
    process.argv.splice(2, 0, "serve");
  ***REMOVED***,
***REMOVED***;

if (!cli.installed) {
  const path = require("path");
  const fs = require("graceful-fs");
  const readLine = require("readline");

  const notify = `CLI for webpack must be installed.\n  ${cli.name***REMOVED*** (${cli.url***REMOVED***)\n`;

  console.error(notify);

  /**
   * @type {string***REMOVED***
   */
  let packageManager;

  if (fs.existsSync(path.resolve(process.cwd(), "yarn.lock"))) {
    packageManager = "yarn";
  ***REMOVED*** else if (fs.existsSync(path.resolve(process.cwd(), "pnpm-lock.yaml"))) {
    packageManager = "pnpm";
  ***REMOVED*** else {
    packageManager = "npm";
  ***REMOVED***

  const installOptions = [packageManager === "yarn" ? "add" : "install", "-D"];

  console.error(
    `We will use "${packageManager***REMOVED***" to install the CLI via "${packageManager***REMOVED*** ${installOptions.join(
      " "
    )***REMOVED*** ${cli.package***REMOVED***".`
  );

  const question = `Do you want to install 'webpack-cli' (yes/no): `;

  const questionInterface = readLine.createInterface({
    input: process.stdin,
    output: process.stderr,
  ***REMOVED***);

  // In certain scenarios (e.g. when STDIN is not in terminal mode), the callback function will not be
  // executed. Setting the exit code here to ensure the script exits correctly in those cases. The callback
  // function is responsible for clearing the exit code if the user wishes to install webpack-cli.
  process.exitCode = 1;
  questionInterface.question(question, (answer) => {
    questionInterface.close();

    const normalizedAnswer = answer.toLowerCase().startsWith("y");

    if (!normalizedAnswer) {
      console.error(
        "You need to install 'webpack-cli' to use webpack via CLI.\n" +
          "You can also install the CLI manually."
      );

      return;
    ***REMOVED***
    process.exitCode = 0;

    console.log(
      `Installing '${
        cli.package
      ***REMOVED***' (running '${packageManager***REMOVED*** ${installOptions.join(" ")***REMOVED*** ${
        cli.package
      ***REMOVED***')...`
    );

    runCommand(packageManager, installOptions.concat(cli.package))
      .then(() => {
        runCli(cli);
      ***REMOVED***)
      .catch((error) => {
        console.error(error);
        process.exitCode = 1;
      ***REMOVED***);
  ***REMOVED***);
***REMOVED*** else {
  runCli(cli);
***REMOVED***
