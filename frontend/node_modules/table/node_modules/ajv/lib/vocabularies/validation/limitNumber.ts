import type {CodeKeywordDefinition, ErrorObject, KeywordErrorDefinition***REMOVED*** from "../../types"
import type {KeywordCxt***REMOVED*** from "../../compile/validate"
import {_, str, operators, Code***REMOVED*** from "../../compile/codegen"

const ops = operators

type Kwd = "maximum" | "minimum" | "exclusiveMaximum" | "exclusiveMinimum"

type Comparison = "<=" | ">=" | "<" | ">"

const KWDs: {[K in Kwd]: {okStr: Comparison; ok: Code; fail: Code***REMOVED******REMOVED*** = {
  maximum: {okStr: "<=", ok: ops.LTE, fail: ops.GT***REMOVED***,
  minimum: {okStr: ">=", ok: ops.GTE, fail: ops.LT***REMOVED***,
  exclusiveMaximum: {okStr: "<", ok: ops.LT, fail: ops.GTE***REMOVED***,
  exclusiveMinimum: {okStr: ">", ok: ops.GT, fail: ops.LTE***REMOVED***,
***REMOVED***

export type LimitNumberError = ErrorObject<
  Kwd,
  {limit: number; comparison: Comparison***REMOVED***,
  number | {$data: string***REMOVED***
>

const error: KeywordErrorDefinition = {
  message: ({keyword, schemaCode***REMOVED***) => str`must be ${KWDs[keyword as Kwd].okStr***REMOVED*** ${schemaCode***REMOVED***`,
  params: ({keyword, schemaCode***REMOVED***) =>
    _`{comparison: ${KWDs[keyword as Kwd].okStr***REMOVED***, limit: ${schemaCode***REMOVED******REMOVED***`,
***REMOVED***

const def: CodeKeywordDefinition = {
  keyword: Object.keys(KWDs),
  type: "number",
  schemaType: "number",
  $data: true,
  error,
  code(cxt: KeywordCxt) {
    const {keyword, data, schemaCode***REMOVED*** = cxt
    cxt.fail$data(_`${data***REMOVED*** ${KWDs[keyword as Kwd].fail***REMOVED*** ${schemaCode***REMOVED*** || isNaN(${data***REMOVED***)`)
  ***REMOVED***,
***REMOVED***

export default def
