/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const { ConcatSource, RawSource ***REMOVED*** = require("webpack-sources");
const ExternalModule = require("./ExternalModule");
const ModuleFilenameHelpers = require("./ModuleFilenameHelpers");
const RuntimeGlobals = require("./RuntimeGlobals");
const JavascriptModulesPlugin = require("./javascript/JavascriptModulesPlugin");

/** @typedef {import("webpack-sources").Source***REMOVED*** Source */
/** @typedef {import("../declarations/WebpackOptions").OutputNormalized***REMOVED*** OutputOptions */
/** @typedef {import("./Compiler")***REMOVED*** Compiler */

/** @type {WeakMap<Source, Source>***REMOVED*** */
const cache = new WeakMap();

const devtoolWarning = new RawSource(`/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
`);

/**
 * @typedef {object***REMOVED*** EvalDevToolModulePluginOptions
 * @property {OutputOptions["devtoolNamespace"]=***REMOVED*** namespace namespace
 * @property {string=***REMOVED*** sourceUrlComment source url comment
 * @property {OutputOptions["devtoolModuleFilenameTemplate"]=***REMOVED*** moduleFilenameTemplate module filename template
 */

const PLUGIN_NAME = "EvalDevToolModulePlugin";

class EvalDevToolModulePlugin {
	/**
	 * @param {EvalDevToolModulePluginOptions=***REMOVED*** options options
	 */
	constructor(options = {***REMOVED***) {
		this.namespace = options.namespace || "";
		this.sourceUrlComment = options.sourceUrlComment || "\n//# sourceURL=[url]";
		this.moduleFilenameTemplate =
			options.moduleFilenameTemplate ||
			"webpack://[namespace]/[resourcePath]?[loaders]";
	***REMOVED***

	/**
	 * Apply the plugin
	 * @param {Compiler***REMOVED*** compiler the compiler instance
	 * @returns {void***REMOVED***
	 */
	apply(compiler) {
		compiler.hooks.compilation.tap(PLUGIN_NAME, compilation => {
			const hooks = JavascriptModulesPlugin.getCompilationHooks(compilation);
			hooks.renderModuleContent.tap(
				PLUGIN_NAME,
				(source, module, { chunk, runtimeTemplate, chunkGraph ***REMOVED***) => {
					const cacheEntry = cache.get(source);
					if (cacheEntry !== undefined) return cacheEntry;
					if (module instanceof ExternalModule) {
						cache.set(source, source);
						return source;
					***REMOVED***
					const content = source.source();
					const namespace = compilation.getPath(this.namespace, {
						chunk
					***REMOVED***);
					const str = ModuleFilenameHelpers.createFilename(
						module,
						{
							moduleFilenameTemplate: this.moduleFilenameTemplate,
							namespace
						***REMOVED***,
						{
							requestShortener: runtimeTemplate.requestShortener,
							chunkGraph,
							hashFunction: compilation.outputOptions.hashFunction
						***REMOVED***
					);
					const footer = `\n${this.sourceUrlComment.replace(
						/\[url\]/g,
						encodeURI(str)
							.replace(/%2F/g, "/")
							.replace(/%20/g, "_")
							.replace(/%5E/g, "^")
							.replace(/%5C/g, "\\")
							.replace(/^\//, "")
					)***REMOVED***`;
					const result = new RawSource(
						`eval(${
							compilation.outputOptions.trustedTypes
								? `${RuntimeGlobals.createScript***REMOVED***(${JSON.stringify(
										content + footer
									)***REMOVED***)`
								: JSON.stringify(content + footer)
						***REMOVED***);`
					);
					cache.set(source, result);
					return result;
				***REMOVED***
			);
			hooks.inlineInRuntimeBailout.tap(
				PLUGIN_NAME,
				() => "the eval devtool is used."
			);
			hooks.render.tap(
				PLUGIN_NAME,
				source => new ConcatSource(devtoolWarning, source)
			);
			hooks.chunkHash.tap(PLUGIN_NAME, (chunk, hash) => {
				hash.update(PLUGIN_NAME);
				hash.update("2");
			***REMOVED***);
			if (compilation.outputOptions.trustedTypes) {
				compilation.hooks.additionalModuleRuntimeRequirements.tap(
					PLUGIN_NAME,
					(module, set, context) => {
						set.add(RuntimeGlobals.createScript);
					***REMOVED***
				);
			***REMOVED***
		***REMOVED***);
	***REMOVED***
***REMOVED***

module.exports = EvalDevToolModulePlugin;
