/**
 * @fileoverview Rule to flag use of comma operator
 * @author Brandon Mills
 */

"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const astUtils = require("./utils/ast-utils");

//------------------------------------------------------------------------------
// Helpers
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

/** @type {import('../types').Rule.RuleModule***REMOVED*** */
module.exports = {
	meta: {
		type: "suggestion",

		docs: {
			description: "Disallow comma operators",
			recommended: false,
			url: "https://eslint.org/docs/latest/rules/no-sequences",
		***REMOVED***,

		schema: [
			{
				type: "object",
				properties: {
					allowInParentheses: {
						type: "boolean",
					***REMOVED***,
				***REMOVED***,
				additionalProperties: false,
			***REMOVED***,
		],

		defaultOptions: [
			{
				allowInParentheses: true,
			***REMOVED***,
		],

		messages: {
			unexpectedCommaExpression: "Unexpected use of comma operator.",
		***REMOVED***,
	***REMOVED***,

	create(context) {
		const [{ allowInParentheses ***REMOVED***] = context.options;
		const sourceCode = context.sourceCode;

		/**
		 * Parts of the grammar that are required to have parens.
		 */
		const parenthesized = {
			DoWhileStatement: "test",
			IfStatement: "test",
			SwitchStatement: "discriminant",
			WhileStatement: "test",
			WithStatement: "object",
			ArrowFunctionExpression: "body",

			/*
			 * Omitting CallExpression - commas are parsed as argument separators
			 * Omitting NewExpression - commas are parsed as argument separators
			 * Omitting ForInStatement - parts aren't individually parenthesised
			 * Omitting ForStatement - parts aren't individually parenthesised
			 */
		***REMOVED***;

		/**
		 * Determines whether a node is required by the grammar to be wrapped in
		 * parens, e.g. the test of an if statement.
		 * @param {ASTNode***REMOVED*** node The AST node
		 * @returns {boolean***REMOVED*** True if parens around node belong to parent node.
		 */
		function requiresExtraParens(node) {
			return (
				node.parent &&
				parenthesized[node.parent.type] &&
				node === node.parent[parenthesized[node.parent.type]]
			);
		***REMOVED***

		/**
		 * Check if a node is wrapped in parens.
		 * @param {ASTNode***REMOVED*** node The AST node
		 * @returns {boolean***REMOVED*** True if the node has a paren on each side.
		 */
		function isParenthesised(node) {
			return astUtils.isParenthesised(sourceCode, node);
		***REMOVED***

		/**
		 * Check if a node is wrapped in two levels of parens.
		 * @param {ASTNode***REMOVED*** node The AST node
		 * @returns {boolean***REMOVED*** True if two parens surround the node on each side.
		 */
		function isParenthesisedTwice(node) {
			const previousToken = sourceCode.getTokenBefore(node, 1),
				nextToken = sourceCode.getTokenAfter(node, 1);

			return (
				isParenthesised(node) &&
				previousToken &&
				nextToken &&
				astUtils.isOpeningParenToken(previousToken) &&
				previousToken.range[1] <= node.range[0] &&
				astUtils.isClosingParenToken(nextToken) &&
				nextToken.range[0] >= node.range[1]
			);
		***REMOVED***

		return {
			SequenceExpression(node) {
				// Always allow sequences in for statement update
				if (
					node.parent.type === "ForStatement" &&
					(node === node.parent.init || node === node.parent.update)
				) {
					return;
				***REMOVED***

				// Wrapping a sequence in extra parens indicates intent
				if (allowInParentheses) {
					if (requiresExtraParens(node)) {
						if (isParenthesisedTwice(node)) {
							return;
						***REMOVED***
					***REMOVED*** else {
						if (isParenthesised(node)) {
							return;
						***REMOVED***
					***REMOVED***
				***REMOVED***

				const firstCommaToken = sourceCode.getTokenAfter(
					node.expressions[0],
					astUtils.isCommaToken,
				);

				context.report({
					node,
					loc: firstCommaToken.loc,
					messageId: "unexpectedCommaExpression",
				***REMOVED***);
			***REMOVED***,
		***REMOVED***;
	***REMOVED***,
***REMOVED***;
