'use strict';

/**
 * @typedef {import('../lib/types').XastElement***REMOVED*** XastElement
 */

const { detachNodeFromParent ***REMOVED*** = require('../lib/xast.js');
const { elemsGroups ***REMOVED*** = require('./_collections.js');

exports.type = 'visitor';
exports.name = 'removeUselessDefs';
exports.active = true;
exports.description = 'removes elements in <defs> without id';

/**
 * Removes content of defs and properties that aren't rendered directly without ids.
 *
 * @author Lev Solntsev
 *
 * @type {import('../lib/types').Plugin<void>***REMOVED***
 */
exports.fn = () => {
  return {
    element: {
      enter: (node, parentNode) => {
        if (node.name === 'defs') {
          /**
           * @type {Array<XastElement>***REMOVED***
           */
          const usefulNodes = [];
          collectUsefulNodes(node, usefulNodes);
          if (usefulNodes.length === 0) {
            detachNodeFromParent(node, parentNode);
          ***REMOVED***
          // TODO remove in SVGO 3
          for (const usefulNode of usefulNodes) {
            // @ts-ignore parentNode is legacy
            usefulNode.parentNode = node;
          ***REMOVED***
          node.children = usefulNodes;
        ***REMOVED*** else if (
          elemsGroups.nonRendering.includes(node.name) &&
          node.attributes.id == null
        ) {
          detachNodeFromParent(node, parentNode);
        ***REMOVED***
      ***REMOVED***,
    ***REMOVED***,
  ***REMOVED***;
***REMOVED***;

/**
 * @type {(node: XastElement, usefulNodes: Array<XastElement>) => void***REMOVED***
 */
const collectUsefulNodes = (node, usefulNodes) => {
  for (const child of node.children) {
    if (child.type === 'element') {
      if (child.attributes.id != null || child.name === 'style') {
        usefulNodes.push(child);
      ***REMOVED*** else {
        collectUsefulNodes(child, usefulNodes);
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***
***REMOVED***;
