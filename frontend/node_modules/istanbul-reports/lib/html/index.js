'use strict';
/*
 Copyright 2012-2015, Yahoo Inc.
 Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */
const fs = require('fs');
const path = require('path');
const html = require('html-escaper');
const { ReportBase ***REMOVED*** = require('istanbul-lib-report');
const annotator = require('./annotator');

function htmlHead(details) {
    return `
<head>
    <title>Code coverage report for ${html.escape(details.entity)***REMOVED***</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="${html.escape(details.prettify.css)***REMOVED***" />
    <link rel="stylesheet" href="${html.escape(details.base.css)***REMOVED***" />
    <link rel="shortcut icon" type="image/x-icon" href="${html.escape(
        details.favicon
    )***REMOVED***" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(${html.escape(details.sorter.image)***REMOVED***);
        ***REMOVED***
    </style>
</head>
    `;
***REMOVED***

function headerTemplate(details) {
    function metricsTemplate({ pct, covered, total ***REMOVED***, kind) {
        return `
            <div class='fl pad1y space-right2'>
                <span class="strong">${pct***REMOVED***% </span>
                <span class="quiet">${kind***REMOVED***</span>
                <span class='fraction'>${covered***REMOVED***/${total***REMOVED***</span>
            </div>
        `;
    ***REMOVED***

    function skipTemplate(metrics) {
        const statements = metrics.statements.skipped;
        const branches = metrics.branches.skipped;
        const functions = metrics.functions.skipped;

        const countLabel = (c, label, plural) =>
            c === 0 ? [] : `${c***REMOVED*** ${label***REMOVED***${c === 1 ? '' : plural***REMOVED***`;
        const skips = [].concat(
            countLabel(statements, 'statement', 's'),
            countLabel(functions, 'function', 's'),
            countLabel(branches, 'branch', 'es')
        );

        if (skips.length === 0) {
            return '';
        ***REMOVED***

        return `
            <div class='fl pad1y'>
                <span class="strong">${skips.join(', ')***REMOVED***</span>
                <span class="quiet">Ignored</span>  &nbsp;&nbsp;&nbsp;&nbsp;
            </div>
        `;
    ***REMOVED***

    return `
<!doctype html>
<html lang="en">
${htmlHead(details)***REMOVED***
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1>${details.pathHtml***REMOVED***</h1>
        <div class='clearfix'>
            ${metricsTemplate(details.metrics.statements, 'Statements')***REMOVED***
            ${metricsTemplate(details.metrics.branches, 'Branches')***REMOVED***
            ${metricsTemplate(details.metrics.functions, 'Functions')***REMOVED***
            ${metricsTemplate(details.metrics.lines, 'Lines')***REMOVED***
            ${skipTemplate(details.metrics)***REMOVED***
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line ${details.reportClass***REMOVED***'></div>
    `;
***REMOVED***

function footerTemplate(details) {
    return `
                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at ${html.escape(details.datetime)***REMOVED***
            </div>
        <script src="${html.escape(details.prettify.js)***REMOVED***"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            ***REMOVED***;
        </script>
        <script src="${html.escape(details.sorter.js)***REMOVED***"></script>
        <script src="${html.escape(details.blockNavigation.js)***REMOVED***"></script>
    </body>
</html>
    `;
***REMOVED***

function detailTemplate(data) {
    const lineNumbers = new Array(data.maxLines).fill().map((_, i) => i + 1);
    const lineLink = num =>
        `<a name='L${num***REMOVED***'></a><a href='#L${num***REMOVED***'>${num***REMOVED***</a>`;
    const lineCount = line =>
        `<span class="cline-any cline-${line.covered***REMOVED***">${line.hits***REMOVED***</span>`;

    /* This is rendered in a `<pre>`, need control of all whitespace. */
    return [
        '<tr>',
        `<td class="line-count quiet">${lineNumbers
            .map(lineLink)
            .join('\n')***REMOVED***</td>`,
        `<td class="line-coverage quiet">${data.lineCoverage
            .map(lineCount)
            .join('\n')***REMOVED***</td>`,
        `<td class="text"><pre class="prettyprint lang-js">${data.annotatedCode.join(
            '\n'
        )***REMOVED***</pre></td>`,
        '</tr>'
    ].join('');
***REMOVED***
const summaryTableHeader = [
    '<div class="pad1">',
    '<table class="coverage-summary">',
    '<thead>',
    '<tr>',
    '   <th data-col="file" data-fmt="html" data-html="true" class="file">File</th>',
    '   <th data-col="pic" data-type="number" data-fmt="html" data-html="true" class="pic"></th>',
    '   <th data-col="statements" data-type="number" data-fmt="pct" class="pct">Statements</th>',
    '   <th data-col="statements_raw" data-type="number" data-fmt="html" class="abs"></th>',
    '   <th data-col="branches" data-type="number" data-fmt="pct" class="pct">Branches</th>',
    '   <th data-col="branches_raw" data-type="number" data-fmt="html" class="abs"></th>',
    '   <th data-col="functions" data-type="number" data-fmt="pct" class="pct">Functions</th>',
    '   <th data-col="functions_raw" data-type="number" data-fmt="html" class="abs"></th>',
    '   <th data-col="lines" data-type="number" data-fmt="pct" class="pct">Lines</th>',
    '   <th data-col="lines_raw" data-type="number" data-fmt="html" class="abs"></th>',
    '</tr>',
    '</thead>',
    '<tbody>'
].join('\n');

function summaryLineTemplate(details) {
    const { reportClasses, metrics, file, output ***REMOVED*** = details;
    const percentGraph = pct => {
        if (!isFinite(pct)) {
            return '';
        ***REMOVED***

        const cls = ['cover-fill'];
        if (pct === 100) {
            cls.push('cover-full');
        ***REMOVED***

        pct = Math.floor(pct);
        return [
            `<div class="${cls.join(' ')***REMOVED***" style="width: ${pct***REMOVED***%"></div>`,
            `<div class="cover-empty" style="width: ${100 - pct***REMOVED***%"></div>`
        ].join('');
    ***REMOVED***;
    const summaryType = (type, showGraph = false) => {
        const info = metrics[type];
        const reportClass = reportClasses[type];
        const result = [
            `<td data-value="${info.pct***REMOVED***" class="pct ${reportClass***REMOVED***">${info.pct***REMOVED***%</td>`,
            `<td data-value="${info.total***REMOVED***" class="abs ${reportClass***REMOVED***">${info.covered***REMOVED***/${info.total***REMOVED***</td>`
        ];
        if (showGraph) {
            result.unshift(
                `<td data-value="${info.pct***REMOVED***" class="pic ${reportClass***REMOVED***">`,
                `<div class="chart">${percentGraph(info.pct)***REMOVED***</div>`,
                `</td>`
            );
        ***REMOVED***

        return result;
    ***REMOVED***;

    return []
        .concat(
            '<tr>',
            `<td class="file ${
                reportClasses.statements
            ***REMOVED***" data-value="${html.escape(file)***REMOVED***"><a href="${html.escape(
                output
            )***REMOVED***">${html.escape(file)***REMOVED***</a></td>`,
            summaryType('statements', true),
            summaryType('branches'),
            summaryType('functions'),
            summaryType('lines'),
            '</tr>\n'
        )
        .join('\n\t');
***REMOVED***

const summaryTableFooter = ['</tbody>', '</table>', '</div>'].join('\n');
const emptyClasses = {
    statements: 'empty',
    lines: 'empty',
    functions: 'empty',
    branches: 'empty'
***REMOVED***;

const standardLinkMapper = {
    getPath(node) {
        if (typeof node === 'string') {
            return node;
        ***REMOVED***
        let filePath = node.getQualifiedName();
        if (node.isSummary()) {
            if (filePath !== '') {
                filePath += '/index.html';
            ***REMOVED*** else {
                filePath = 'index.html';
            ***REMOVED***
        ***REMOVED*** else {
            filePath += '.html';
        ***REMOVED***
        return filePath;
    ***REMOVED***,

    relativePath(source, target) {
        const targetPath = this.getPath(target);
        const sourcePath = path.dirname(this.getPath(source));
        return path.posix.relative(sourcePath, targetPath);
    ***REMOVED***,

    assetPath(node, name) {
        return this.relativePath(this.getPath(node), name);
    ***REMOVED***
***REMOVED***;

function fixPct(metrics) {
    Object.keys(emptyClasses).forEach(key => {
        metrics[key].pct = 0;
    ***REMOVED***);
    return metrics;
***REMOVED***

class HtmlReport extends ReportBase {
    constructor(opts) {
        super();

        this.verbose = opts.verbose;
        this.linkMapper = opts.linkMapper || standardLinkMapper;
        this.subdir = opts.subdir || '';
        this.date = new Date().toISOString();
        this.skipEmpty = opts.skipEmpty;
    ***REMOVED***

    getBreadcrumbHtml(node) {
        let parent = node.getParent();
        const nodePath = [];

        while (parent) {
            nodePath.push(parent);
            parent = parent.getParent();
        ***REMOVED***

        const linkPath = nodePath.map(ancestor => {
            const target = this.linkMapper.relativePath(node, ancestor);
            const name = ancestor.getRelativeName() || 'All files';
            return '<a href="' + target + '">' + name + '</a>';
        ***REMOVED***);

        linkPath.reverse();
        return linkPath.length > 0
            ? linkPath.join(' / ') + ' ' + node.getRelativeName()
            : 'All files';
    ***REMOVED***

    fillTemplate(node, templateData, context) {
        const linkMapper = this.linkMapper;
        const summary = node.getCoverageSummary();
        templateData.entity = node.getQualifiedName() || 'All files';
        templateData.metrics = summary;
        templateData.reportClass = context.classForPercent(
            'statements',
            summary.statements.pct
        );
        templateData.pathHtml = this.getBreadcrumbHtml(node);
        templateData.base = {
            css: linkMapper.assetPath(node, 'base.css')
        ***REMOVED***;
        templateData.sorter = {
            js: linkMapper.assetPath(node, 'sorter.js'),
            image: linkMapper.assetPath(node, 'sort-arrow-sprite.png')
        ***REMOVED***;
        templateData.blockNavigation = {
            js: linkMapper.assetPath(node, 'block-navigation.js')
        ***REMOVED***;
        templateData.prettify = {
            js: linkMapper.assetPath(node, 'prettify.js'),
            css: linkMapper.assetPath(node, 'prettify.css')
        ***REMOVED***;
        templateData.favicon = linkMapper.assetPath(node, 'favicon.png');
    ***REMOVED***

    getTemplateData() {
        return { datetime: this.date ***REMOVED***;
    ***REMOVED***

    getWriter(context) {
        if (!this.subdir) {
            return context.writer;
        ***REMOVED***
        return context.writer.writerForDir(this.subdir);
    ***REMOVED***

    onStart(root, context) {
        const assetHeaders = {
            '.js': '/* eslint-disable */\n'
        ***REMOVED***;

        ['.', 'vendor'].forEach(subdir => {
            const writer = this.getWriter(context);
            const srcDir = path.resolve(__dirname, 'assets', subdir);
            fs.readdirSync(srcDir).forEach(f => {
                const resolvedSource = path.resolve(srcDir, f);
                const resolvedDestination = '.';
                const stat = fs.statSync(resolvedSource);
                let dest;

                if (stat.isFile()) {
                    dest = resolvedDestination + '/' + f;
                    if (this.verbose) {
                        console.log('Write asset: ' + dest);
                    ***REMOVED***
                    writer.copyFile(
                        resolvedSource,
                        dest,
                        assetHeaders[path.extname(f)]
                    );
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***

    onSummary(node, context) {
        const linkMapper = this.linkMapper;
        const templateData = this.getTemplateData();
        const children = node.getChildren();
        const skipEmpty = this.skipEmpty;

        this.fillTemplate(node, templateData, context);
        const cw = this.getWriter(context).writeFile(linkMapper.getPath(node));
        cw.write(headerTemplate(templateData));
        cw.write(summaryTableHeader);
        children.forEach(child => {
            const metrics = child.getCoverageSummary();
            const isEmpty = metrics.isEmpty();
            if (skipEmpty && isEmpty) {
                return;
            ***REMOVED***
            const reportClasses = isEmpty
                ? emptyClasses
                : {
                      statements: context.classForPercent(
                          'statements',
                          metrics.statements.pct
                      ),
                      lines: context.classForPercent(
                          'lines',
                          metrics.lines.pct
                      ),
                      functions: context.classForPercent(
                          'functions',
                          metrics.functions.pct
                      ),
                      branches: context.classForPercent(
                          'branches',
                          metrics.branches.pct
                      )
                  ***REMOVED***;
            const data = {
                metrics: isEmpty ? fixPct(metrics) : metrics,
                reportClasses,
                file: child.getRelativeName(),
                output: linkMapper.relativePath(node, child)
            ***REMOVED***;
            cw.write(summaryLineTemplate(data) + '\n');
        ***REMOVED***);
        cw.write(summaryTableFooter);
        cw.write(footerTemplate(templateData));
        cw.close();
    ***REMOVED***

    onDetail(node, context) {
        const linkMapper = this.linkMapper;
        const templateData = this.getTemplateData();

        this.fillTemplate(node, templateData, context);
        const cw = this.getWriter(context).writeFile(linkMapper.getPath(node));
        cw.write(headerTemplate(templateData));
        cw.write('<pre><table class="coverage">\n');
        cw.write(detailTemplate(annotator(node.getFileCoverage(), context)));
        cw.write('</table></pre>\n');
        cw.write(footerTemplate(templateData));
        cw.close();
    ***REMOVED***
***REMOVED***

module.exports = HtmlReport;
