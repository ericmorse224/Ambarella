/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const CachedInputFileSystem = require("enhanced-resolve").CachedInputFileSystem;
const fs = require("graceful-fs");
const createConsoleLogger = require("../logging/createConsoleLogger");
const NodeWatchFileSystem = require("./NodeWatchFileSystem");
const nodeConsole = require("./nodeConsole");

/** @typedef {import("../../declarations/WebpackOptions").InfrastructureLogging***REMOVED*** InfrastructureLogging */
/** @typedef {import("../Compiler")***REMOVED*** Compiler */
/** @typedef {import("../util/fs").InputFileSystem***REMOVED*** InputFileSystem */

/**
 * @typedef {object***REMOVED*** NodeEnvironmentPluginOptions
 * @property {InfrastructureLogging***REMOVED*** infrastructureLogging infrastructure logging options
 */

const PLUGIN_NAME = "NodeEnvironmentPlugin";

class NodeEnvironmentPlugin {
	/**
	 * @param {NodeEnvironmentPluginOptions***REMOVED*** options options
	 */
	constructor(options) {
		this.options = options;
	***REMOVED***

	/**
	 * Apply the plugin
	 * @param {Compiler***REMOVED*** compiler the compiler instance
	 * @returns {void***REMOVED***
	 */
	apply(compiler) {
		const { infrastructureLogging ***REMOVED*** = this.options;
		compiler.infrastructureLogger = createConsoleLogger({
			level: infrastructureLogging.level || "info",
			debug: infrastructureLogging.debug || false,
			console:
				infrastructureLogging.console ||
				nodeConsole({
					colors: infrastructureLogging.colors,
					appendOnly: infrastructureLogging.appendOnly,
					stream:
						/** @type {NodeJS.WritableStream***REMOVED*** */
						(infrastructureLogging.stream)
				***REMOVED***)
		***REMOVED***);
		compiler.inputFileSystem = new CachedInputFileSystem(fs, 60000);
		const inputFileSystem =
			/** @type {InputFileSystem***REMOVED*** */
			(compiler.inputFileSystem);
		compiler.outputFileSystem = fs;
		compiler.intermediateFileSystem = fs;
		compiler.watchFileSystem = new NodeWatchFileSystem(inputFileSystem);
		compiler.hooks.beforeRun.tap(PLUGIN_NAME, compiler => {
			if (
				compiler.inputFileSystem === inputFileSystem &&
				inputFileSystem.purge
			) {
				compiler.fsStartTime = Date.now();
				inputFileSystem.purge();
			***REMOVED***
		***REMOVED***);
	***REMOVED***
***REMOVED***

module.exports = NodeEnvironmentPlugin;
