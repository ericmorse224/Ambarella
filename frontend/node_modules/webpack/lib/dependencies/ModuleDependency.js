/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const Dependency = require("../Dependency");
const DependencyTemplate = require("../DependencyTemplate");
const RawModule = require("../RawModule");

/** @typedef {import("../Dependency").TRANSITIVE***REMOVED*** TRANSITIVE */
/** @typedef {import("../Module")***REMOVED*** Module */
/** @typedef {import("../javascript/JavascriptParser").ImportAttributes***REMOVED*** ImportAttributes */
/** @typedef {import("../serialization/ObjectMiddleware").ObjectDeserializerContext***REMOVED*** ObjectDeserializerContext */
/** @typedef {import("../serialization/ObjectMiddleware").ObjectSerializerContext***REMOVED*** ObjectSerializerContext */

class ModuleDependency extends Dependency {
	/**
	 * @param {string***REMOVED*** request request path which needs resolving
	 */
	constructor(request) {
		super();
		this.request = request;
		this.userRequest = request;
		this.range = undefined;
		// TODO move it to subclasses and rename
		// assertions must be serialized by subclasses that use it
		/** @type {ImportAttributes | undefined***REMOVED*** */
		this.assertions = undefined;
		this._context = undefined;
	***REMOVED***

	/**
	 * @returns {string | undefined***REMOVED*** a request context
	 */
	getContext() {
		return this._context;
	***REMOVED***

	/**
	 * @returns {string | null***REMOVED*** an identifier to merge equal requests
	 */
	getResourceIdentifier() {
		let str = `context${this._context || ""***REMOVED***|module${this.request***REMOVED***`;
		if (this.assertions !== undefined) {
			str += JSON.stringify(this.assertions);
		***REMOVED***
		return str;
	***REMOVED***

	/**
	 * @returns {boolean | TRANSITIVE***REMOVED*** true, when changes to the referenced module could affect the referencing module; TRANSITIVE, when changes to the referenced module could affect referencing modules of the referencing module
	 */
	couldAffectReferencingModule() {
		return true;
	***REMOVED***

	/**
	 * @param {string***REMOVED*** context context directory
	 * @returns {Module | null***REMOVED*** a module
	 */
	createIgnoredModule(context) {
		return new RawModule(
			"/* (ignored) */",
			`ignored|${context***REMOVED***|${this.request***REMOVED***`,
			`${this.request***REMOVED*** (ignored)`
		);
	***REMOVED***

	/**
	 * @param {ObjectSerializerContext***REMOVED*** context context
	 */
	serialize(context) {
		const { write ***REMOVED*** = context;
		write(this.request);
		write(this.userRequest);
		write(this._context);
		write(this.range);
		super.serialize(context);
	***REMOVED***

	/**
	 * @param {ObjectDeserializerContext***REMOVED*** context context
	 */
	deserialize(context) {
		const { read ***REMOVED*** = context;
		this.request = read();
		this.userRequest = read();
		this._context = read();
		this.range = read();
		super.deserialize(context);
	***REMOVED***
***REMOVED***

ModuleDependency.Template = DependencyTemplate;

module.exports = ModuleDependency;
