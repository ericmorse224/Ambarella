"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
***REMOVED***);
exports.default = void 0;

var _utils = require("./utils");

var _default = (0, _utils.createRule)({
  name: __filename,
  meta: {
    docs: {
      category: 'Best Practices',
      description: 'Disallow specific matchers & modifiers',
      recommended: false
    ***REMOVED***,
    type: 'suggestion',
    schema: [{
      type: 'object',
      additionalProperties: {
        type: ['string', 'null']
      ***REMOVED***
    ***REMOVED***],
    messages: {
      restrictedChain: 'Use of `{{ chain ***REMOVED******REMOVED***` is disallowed',
      restrictedChainWithMessage: '{{ message ***REMOVED******REMOVED***'
    ***REMOVED***
  ***REMOVED***,
  defaultOptions: [{***REMOVED***],

  create(context, [restrictedChains]) {
    return {
      CallExpression(node) {
        if (!(0, _utils.isExpectCall)(node)) {
          return;
        ***REMOVED***

        const {
          matcher,
          modifier
        ***REMOVED*** = (0, _utils.parseExpectCall)(node);

        if (matcher) {
          const chain = matcher.name;

          if (chain in restrictedChains) {
            const message = restrictedChains[chain];
            context.report({
              messageId: message ? 'restrictedChainWithMessage' : 'restrictedChain',
              data: {
                message,
                chain
              ***REMOVED***,
              node: matcher.node.property
            ***REMOVED***);
            return;
          ***REMOVED***
        ***REMOVED***

        if (modifier) {
          const chain = modifier.name;

          if (chain in restrictedChains) {
            const message = restrictedChains[chain];
            context.report({
              messageId: message ? 'restrictedChainWithMessage' : 'restrictedChain',
              data: {
                message,
                chain
              ***REMOVED***,
              node: modifier.node.property
            ***REMOVED***);
            return;
          ***REMOVED***
        ***REMOVED***

        if (matcher && modifier) {
          const chain = `${modifier.name***REMOVED***.${matcher.name***REMOVED***`;

          if (chain in restrictedChains) {
            const message = restrictedChains[chain];
            context.report({
              messageId: message ? 'restrictedChainWithMessage' : 'restrictedChain',
              data: {
                message,
                chain
              ***REMOVED***,
              loc: {
                start: modifier.node.property.loc.start,
                end: matcher.node.property.loc.end
              ***REMOVED***
            ***REMOVED***);
            return;
          ***REMOVED***
        ***REMOVED***
      ***REMOVED***

    ***REMOVED***;
  ***REMOVED***

***REMOVED***);

exports.default = _default;