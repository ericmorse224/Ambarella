"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
***REMOVED***);
exports.default = void 0;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; ***REMOVED***); ***REMOVED*** keys.push.apply(keys, symbols); ***REMOVED*** return keys; ***REMOVED***

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {***REMOVED***; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); ***REMOVED***); ***REMOVED*** else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); ***REMOVED*** else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); ***REMOVED***); ***REMOVED*** ***REMOVED*** return target; ***REMOVED***

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true ***REMOVED***); ***REMOVED*** else { obj[key] = value; ***REMOVED*** return obj; ***REMOVED***

const create = context => {
  const sourceCode = context.getSourceCode();
  const {
    checkIntersections = true,
    checkUnions = true
  ***REMOVED*** = context.options[1] || {***REMOVED***;

  const checkForDuplicates = node => {
    const uniqueMembers = [];
    const duplicates = [];
    const source = node.types.map(type => {
      return {
        node: type,
        text: sourceCode.getText(type)
      ***REMOVED***;
    ***REMOVED***);
    const hasComments = node.types.some(type => {
      const count = sourceCode.getCommentsBefore(type).length + sourceCode.getCommentsAfter(type).length;
      return count > 0;
    ***REMOVED***);

    const fix = fixer => {
      const result = uniqueMembers.map(t => {
        return t.text;
      ***REMOVED***).join(node.type === 'UnionTypeAnnotation' ? ' | ' : ' & ');
      return fixer.replaceText(node, result);
    ***REMOVED***;

    for (const member of source) {
      const match = uniqueMembers.find(uniqueMember => {
        return uniqueMember.text === member.text;
      ***REMOVED***);

      if (match) {
        duplicates.push(member);
      ***REMOVED*** else {
        uniqueMembers.push(member);
      ***REMOVED***
    ***REMOVED***

    for (const duplicate of duplicates) {
      context.report(_objectSpread({
        data: {
          name: duplicate.text,
          type: node.type === 'UnionTypeAnnotation' ? 'union' : 'intersection'
        ***REMOVED***,
        messageId: 'duplicate',
        node
      ***REMOVED***, hasComments ? {
        suggest: [{
          fix,
          messageId: 'suggestFix'
        ***REMOVED***]
      ***REMOVED*** : {
        fix
      ***REMOVED***));
    ***REMOVED***
  ***REMOVED***;

  return {
    IntersectionTypeAnnotation(node) {
      if (checkIntersections === true) {
        checkForDuplicates(node);
      ***REMOVED***
    ***REMOVED***,

    UnionTypeAnnotation(node) {
      if (checkUnions === true) {
        checkForDuplicates(node);
      ***REMOVED***
    ***REMOVED***

  ***REMOVED***;
***REMOVED***;

var _default = {
  create,
  meta: {
    fixable: 'code',
    messages: {
      duplicate: 'Duplicate {{type***REMOVED******REMOVED*** member found "{{name***REMOVED******REMOVED***".',
      suggestFix: 'Remove duplicate members of type (removes all comments).'
    ***REMOVED***,
    schema: [{
      properties: {
        checkIntersections: {
          type: 'boolean'
        ***REMOVED***,
        checkUnions: {
          type: 'boolean'
        ***REMOVED***
      ***REMOVED***,
      type: 'object'
    ***REMOVED***]
  ***REMOVED***
***REMOVED***;
exports.default = _default;
module.exports = exports.default;