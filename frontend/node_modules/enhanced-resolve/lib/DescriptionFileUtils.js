/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const forEachBail = require("./forEachBail");

/** @typedef {import("./Resolver")***REMOVED*** Resolver */
/** @typedef {import("./Resolver").JsonObject***REMOVED*** JsonObject */
/** @typedef {import("./Resolver").JsonValue***REMOVED*** JsonValue */
/** @typedef {import("./Resolver").ResolveContext***REMOVED*** ResolveContext */
/** @typedef {import("./Resolver").ResolveRequest***REMOVED*** ResolveRequest */

/**
 * @typedef {Object***REMOVED*** DescriptionFileInfo
 * @property {JsonObject=***REMOVED*** content
 * @property {string***REMOVED*** path
 * @property {string***REMOVED*** directory
 */

/**
 * @callback ErrorFirstCallback
 * @param {Error|null=***REMOVED*** error
 * @param {DescriptionFileInfo=***REMOVED*** result
 */

/**
 * @typedef {Object***REMOVED*** Result
 * @property {string***REMOVED*** path path to description file
 * @property {string***REMOVED*** directory directory of description file
 * @property {JsonObject***REMOVED*** content content of description file
 */

/**
 * @param {Resolver***REMOVED*** resolver resolver
 * @param {string***REMOVED*** directory directory
 * @param {string[]***REMOVED*** filenames filenames
 * @param {DescriptionFileInfo|undefined***REMOVED*** oldInfo oldInfo
 * @param {ResolveContext***REMOVED*** resolveContext resolveContext
 * @param {ErrorFirstCallback***REMOVED*** callback callback
 */
function loadDescriptionFile(
	resolver,
	directory,
	filenames,
	oldInfo,
	resolveContext,
	callback
) {
	(function findDescriptionFile() {
		if (oldInfo && oldInfo.directory === directory) {
			// We already have info for this directory and can reuse it
			return callback(null, oldInfo);
		***REMOVED***
		forEachBail(
			filenames,
			/**
			 * @param {string***REMOVED*** filename filename
			 * @param {(err?: null|Error, result?: null|Result) => void***REMOVED*** callback callback
			 * @returns {void***REMOVED***
			 */
			(filename, callback) => {
				const descriptionFilePath = resolver.join(directory, filename);
				if (resolver.fileSystem.readJson) {
					resolver.fileSystem.readJson(descriptionFilePath, (err, content) => {
						if (err) {
							if (
								typeof (/** @type {NodeJS.ErrnoException***REMOVED*** */ (err).code) !==
								"undefined"
							) {
								if (resolveContext.missingDependencies) {
									resolveContext.missingDependencies.add(descriptionFilePath);
								***REMOVED***
								return callback();
							***REMOVED***
							if (resolveContext.fileDependencies) {
								resolveContext.fileDependencies.add(descriptionFilePath);
							***REMOVED***
							return onJson(err);
						***REMOVED***
						if (resolveContext.fileDependencies) {
							resolveContext.fileDependencies.add(descriptionFilePath);
						***REMOVED***
						onJson(null, content);
					***REMOVED***);
				***REMOVED*** else {
					resolver.fileSystem.readFile(descriptionFilePath, (err, content) => {
						if (err) {
							if (resolveContext.missingDependencies) {
								resolveContext.missingDependencies.add(descriptionFilePath);
							***REMOVED***
							return callback();
						***REMOVED***
						if (resolveContext.fileDependencies) {
							resolveContext.fileDependencies.add(descriptionFilePath);
						***REMOVED***

						/** @type {JsonObject | undefined***REMOVED*** */
						let json;

						if (content) {
							try {
								json = JSON.parse(content.toString());
							***REMOVED*** catch (/** @type {unknown***REMOVED*** */ e) {
								return onJson(/** @type {Error***REMOVED*** */ (e));
							***REMOVED***
						***REMOVED*** else {
							return onJson(new Error("No content in file"));
						***REMOVED***

						onJson(null, json);
					***REMOVED***);
				***REMOVED***

				/**
				 * @param {null|Error***REMOVED*** [err] error
				 * @param {JsonObject***REMOVED*** [content] content
				 * @returns {void***REMOVED***
				 */
				function onJson(err, content) {
					if (err) {
						if (resolveContext.log)
							resolveContext.log(
								descriptionFilePath + " (directory description file): " + err
							);
						else
							err.message =
								descriptionFilePath + " (directory description file): " + err;
						return callback(err);
					***REMOVED***
					callback(null, {
						content: /** @type {JsonObject***REMOVED*** */ (content),
						directory,
						path: descriptionFilePath
					***REMOVED***);
				***REMOVED***
			***REMOVED***,
			/**
			 * @param {null|Error***REMOVED*** [err] error
			 * @param {null|Result***REMOVED*** [result] result
			 * @returns {void***REMOVED***
			 */
			(err, result) => {
				if (err) return callback(err);
				if (result) {
					return callback(null, result);
				***REMOVED*** else {
					const dir = cdUp(directory);
					if (!dir) {
						return callback();
					***REMOVED*** else {
						directory = dir;
						return findDescriptionFile();
					***REMOVED***
				***REMOVED***
			***REMOVED***
		);
	***REMOVED***)();
***REMOVED***

/**
 * @param {JsonObject***REMOVED*** content content
 * @param {string|string[]***REMOVED*** field field
 * @returns {JsonValue | undefined***REMOVED*** field data
 */
function getField(content, field) {
	if (!content) return undefined;
	if (Array.isArray(field)) {
		/** @type {JsonValue***REMOVED*** */
		let current = content;
		for (let j = 0; j < field.length; j++) {
			if (current === null || typeof current !== "object") {
				current = null;
				break;
			***REMOVED***
			current = /** @type {JsonObject***REMOVED*** */ (current)[field[j]];
		***REMOVED***
		return current;
	***REMOVED*** else {
		return content[field];
	***REMOVED***
***REMOVED***

/**
 * @param {string***REMOVED*** directory directory
 * @returns {string|null***REMOVED*** parent directory or null
 */
function cdUp(directory) {
	if (directory === "/") return null;
	const i = directory.lastIndexOf("/"),
		j = directory.lastIndexOf("\\");
	const p = i < 0 ? j : j < 0 ? i : i < j ? j : i;
	if (p < 0) return null;
	return directory.slice(0, p || 1);
***REMOVED***

exports.loadDescriptionFile = loadDescriptionFile;
exports.getField = getField;
exports.cdUp = cdUp;
