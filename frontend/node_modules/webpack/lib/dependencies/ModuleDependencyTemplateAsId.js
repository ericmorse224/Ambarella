/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const ModuleDependency = require("./ModuleDependency");

/** @typedef {import("webpack-sources").ReplaceSource***REMOVED*** ReplaceSource */
/** @typedef {import("../Dependency")***REMOVED*** Dependency */
/** @typedef {import("../DependencyTemplate").DependencyTemplateContext***REMOVED*** DependencyTemplateContext */
/** @typedef {import("../Module")***REMOVED*** Module */

class ModuleDependencyTemplateAsId extends ModuleDependency.Template {
	/**
	 * @param {Dependency***REMOVED*** dependency the dependency for which the template should be applied
	 * @param {ReplaceSource***REMOVED*** source the current replace source which can be modified
	 * @param {DependencyTemplateContext***REMOVED*** templateContext the context object
	 * @returns {void***REMOVED***
	 */
	apply(dependency, source, { runtimeTemplate, moduleGraph, chunkGraph ***REMOVED***) {
		const dep = /** @type {ModuleDependency***REMOVED*** */ (dependency);
		if (!dep.range) return;
		const content = runtimeTemplate.moduleId({
			module: /** @type {Module***REMOVED*** */ (moduleGraph.getModule(dep)),
			chunkGraph,
			request: dep.request,
			weak: dep.weak
		***REMOVED***);
		source.replace(dep.range[0], dep.range[1] - 1, content);
	***REMOVED***
***REMOVED***

module.exports = ModuleDependencyTemplateAsId;
