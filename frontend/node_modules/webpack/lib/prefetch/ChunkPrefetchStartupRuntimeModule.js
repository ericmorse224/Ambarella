/*
	MIT License http://www.opensource.org/licenses/mit-license.php
*/

"use strict";

const RuntimeGlobals = require("../RuntimeGlobals");
const RuntimeModule = require("../RuntimeModule");
const Template = require("../Template");

/** @typedef {import("../Chunk")***REMOVED*** Chunk */
/** @typedef {import("../Compilation")***REMOVED*** Compilation */
/** @typedef {import("../RuntimeTemplate")***REMOVED*** RuntimeTemplate */

class ChunkPrefetchStartupRuntimeModule extends RuntimeModule {
	/**
	 * @param {{ onChunks: Chunk[], chunks: Set<Chunk> ***REMOVED***[]***REMOVED*** startupChunks chunk ids to trigger when chunks are loaded
	 */
	constructor(startupChunks) {
		super("startup prefetch", RuntimeModule.STAGE_TRIGGER);
		this.startupChunks = startupChunks;
	***REMOVED***

	/**
	 * @returns {string | null***REMOVED*** runtime code
	 */
	generate() {
		const { startupChunks ***REMOVED*** = this;
		const compilation = /** @type {Compilation***REMOVED*** */ (this.compilation);
		const chunk = /** @type {Chunk***REMOVED*** */ (this.chunk);
		const { runtimeTemplate ***REMOVED*** = compilation;
		return Template.asString(
			startupChunks.map(
				({ onChunks, chunks ***REMOVED***) =>
					`${RuntimeGlobals.onChunksLoaded***REMOVED***(0, ${JSON.stringify(
						// This need to include itself to delay execution after this chunk has been fully loaded
						onChunks.filter(c => c === chunk).map(c => c.id)
					)***REMOVED***, ${runtimeTemplate.basicFunction(
						"",
						chunks.size < 3
							? Array.from(
									chunks,
									c =>
										`${RuntimeGlobals.prefetchChunk***REMOVED***(${JSON.stringify(c.id)***REMOVED***);`
								)
							: `${JSON.stringify(Array.from(chunks, c => c.id))***REMOVED***.map(${
									RuntimeGlobals.prefetchChunk
								***REMOVED***);`
					)***REMOVED***, 5);`
			)
		);
	***REMOVED***
***REMOVED***

module.exports = ChunkPrefetchStartupRuntimeModule;
