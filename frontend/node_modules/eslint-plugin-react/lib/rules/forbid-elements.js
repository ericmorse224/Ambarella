/**
 * @fileoverview Forbid certain elements
 * @author Kenneth Chung
 */

'use strict';

const has = require('hasown');
const docsUrl = require('../util/docsUrl');
const getText = require('../util/eslint').getText;
const isCreateElement = require('../util/isCreateElement');
const report = require('../util/report');

// ------------------------------------------------------------------------------
// Rule Definition
// ------------------------------------------------------------------------------

const messages = {
  forbiddenElement: '<{{element***REMOVED******REMOVED***> is forbidden',
  forbiddenElement_message: '<{{element***REMOVED******REMOVED***> is forbidden, {{message***REMOVED******REMOVED***',
***REMOVED***;

/** @type {import('eslint').Rule.RuleModule***REMOVED*** */
module.exports = {
  meta: {
    docs: {
      description: 'Disallow certain elements',
      category: 'Best Practices',
      recommended: false,
      url: docsUrl('forbid-elements'),
    ***REMOVED***,

    messages,

    schema: [{
      type: 'object',
      properties: {
        forbid: {
          type: 'array',
          items: {
            anyOf: [
              { type: 'string' ***REMOVED***,
              {
                type: 'object',
                properties: {
                  element: { type: 'string' ***REMOVED***,
                  message: { type: 'string' ***REMOVED***,
                ***REMOVED***,
                required: ['element'],
                additionalProperties: false,
              ***REMOVED***,
            ],
          ***REMOVED***,
        ***REMOVED***,
      ***REMOVED***,
      additionalProperties: false,
    ***REMOVED***],
  ***REMOVED***,

  create(context) {
    const configuration = context.options[0] || {***REMOVED***;
    const forbidConfiguration = configuration.forbid || [];

    /** @type {Record<string, { element: string, message?: string ***REMOVED***>***REMOVED*** */
    const indexedForbidConfigs = {***REMOVED***;

    forbidConfiguration.forEach((item) => {
      if (typeof item === 'string') {
        indexedForbidConfigs[item] = { element: item ***REMOVED***;
      ***REMOVED*** else {
        indexedForbidConfigs[item.element] = item;
      ***REMOVED***
    ***REMOVED***);

    function reportIfForbidden(element, node) {
      if (has(indexedForbidConfigs, element)) {
        const message = indexedForbidConfigs[element].message;

        report(
          context,
          message ? messages.forbiddenElement_message : messages.forbiddenElement,
          message ? 'forbiddenElement_message' : 'forbiddenElement',
          {
            node,
            data: {
              element,
              message,
            ***REMOVED***,
          ***REMOVED***
        );
      ***REMOVED***
    ***REMOVED***

    return {
      JSXOpeningElement(node) {
        reportIfForbidden(getText(context, node.name), node.name);
      ***REMOVED***,

      CallExpression(node) {
        if (!isCreateElement(context, node)) {
          return;
        ***REMOVED***

        const argument = node.arguments[0];
        if (!argument) {
          return;
        ***REMOVED***

        if (argument.type === 'Identifier' && /^[A-Z_]/.test(argument.name)) {
          reportIfForbidden(argument.name, argument);
        ***REMOVED*** else if (argument.type === 'Literal' && /^[a-z][^.]*$/.test(String(argument.value))) {
          reportIfForbidden(argument.value, argument);
        ***REMOVED*** else if (argument.type === 'MemberExpression') {
          reportIfForbidden(getText(context, argument), argument);
        ***REMOVED***
      ***REMOVED***,
    ***REMOVED***;
  ***REMOVED***,
***REMOVED***;
