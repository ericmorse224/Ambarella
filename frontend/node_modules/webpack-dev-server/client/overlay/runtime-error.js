/**
 *
 * @param {Error***REMOVED*** error
 */
function parseErrorToStacks(error) {
  if (!error || !(error instanceof Error)) {
    throw new Error("parseErrorToStacks expects Error object");
  ***REMOVED***
  if (typeof error.stack === "string") {
    return error.stack.split("\n").filter(function (stack) {
      return stack !== "Error: ".concat(error.message);
    ***REMOVED***);
  ***REMOVED***
***REMOVED***

/**
 * @callback ErrorCallback
 * @param {ErrorEvent***REMOVED*** error
 * @returns {void***REMOVED***
 */

/**
 * @param {ErrorCallback***REMOVED*** callback
 */
function listenToRuntimeError(callback) {
  window.addEventListener("error", callback);
  return function cleanup() {
    window.removeEventListener("error", callback);
  ***REMOVED***;
***REMOVED***

/**
 * @callback UnhandledRejectionCallback
 * @param {PromiseRejectionEvent***REMOVED*** rejectionEvent
 * @returns {void***REMOVED***
 */

/**
 * @param {UnhandledRejectionCallback***REMOVED*** callback
 */
function listenToUnhandledRejection(callback) {
  window.addEventListener("unhandledrejection", callback);
  return function cleanup() {
    window.removeEventListener("unhandledrejection", callback);
  ***REMOVED***;
***REMOVED***
export { listenToRuntimeError, listenToUnhandledRejection, parseErrorToStacks ***REMOVED***;