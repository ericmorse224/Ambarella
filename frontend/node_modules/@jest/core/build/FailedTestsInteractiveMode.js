'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
***REMOVED***);
exports.default = void 0;

function _ansiEscapes() {
  const data = _interopRequireDefault(require('ansi-escapes'));

  _ansiEscapes = function () {
    return data;
  ***REMOVED***;

  return data;
***REMOVED***

function _chalk() {
  const data = _interopRequireDefault(require('chalk'));

  _chalk = function () {
    return data;
  ***REMOVED***;

  return data;
***REMOVED***

function _jestUtil() {
  const data = require('jest-util');

  _jestUtil = function () {
    return data;
  ***REMOVED***;

  return data;
***REMOVED***

function _jestWatcher() {
  const data = require('jest-watcher');

  _jestWatcher = function () {
    return data;
  ***REMOVED***;

  return data;
***REMOVED***

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {default: obj***REMOVED***;
***REMOVED***

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    ***REMOVED***);
  ***REMOVED*** else {
    obj[key] = value;
  ***REMOVED***
  return obj;
***REMOVED***

const {ARROW, CLEAR***REMOVED*** = _jestUtil().specialChars;

function describeKey(key, description) {
  return `${_chalk().default.dim(
    ARROW + 'Press'
  )***REMOVED*** ${key***REMOVED*** ${_chalk().default.dim(description)***REMOVED***`;
***REMOVED***

const TestProgressLabel = _chalk().default.bold('Interactive Test Progress');

class FailedTestsInteractiveMode {
  constructor(_pipe) {
    _defineProperty(this, '_isActive', false);

    _defineProperty(this, '_countPaths', 0);

    _defineProperty(this, '_skippedNum', 0);

    _defineProperty(this, '_testAssertions', []);

    _defineProperty(this, '_updateTestRunnerConfig', void 0);

    this._pipe = _pipe;
  ***REMOVED***

  isActive() {
    return this._isActive;
  ***REMOVED***

  put(key) {
    switch (key) {
      case 's':
        if (this._skippedNum === this._testAssertions.length) {
          break;
        ***REMOVED***

        this._skippedNum += 1; // move skipped test to the end

        this._testAssertions.push(this._testAssertions.shift());

        if (this._testAssertions.length - this._skippedNum > 0) {
          this._run();
        ***REMOVED*** else {
          this._drawUIDoneWithSkipped();
        ***REMOVED***

        break;

      case 'q':
      case _jestWatcher().KEYS.ESCAPE:
        this.abort();
        break;

      case 'r':
        this.restart();
        break;

      case _jestWatcher().KEYS.ENTER:
        if (this._testAssertions.length === 0) {
          this.abort();
        ***REMOVED*** else {
          this._run();
        ***REMOVED***

        break;

      default:
    ***REMOVED***
  ***REMOVED***

  run(failedTestAssertions, updateConfig) {
    if (failedTestAssertions.length === 0) return;
    this._testAssertions = [...failedTestAssertions];
    this._countPaths = this._testAssertions.length;
    this._updateTestRunnerConfig = updateConfig;
    this._isActive = true;

    this._run();
  ***REMOVED***

  updateWithResults(results) {
    if (!results.snapshot.failure && results.numFailedTests > 0) {
      return this._drawUIOverlay();
    ***REMOVED***

    this._testAssertions.shift();

    if (this._testAssertions.length === 0) {
      return this._drawUIOverlay();
    ***REMOVED*** // Go to the next test

    return this._run();
  ***REMOVED***

  _clearTestSummary() {
    this._pipe.write(_ansiEscapes().default.cursorUp(6));

    this._pipe.write(_ansiEscapes().default.eraseDown);
  ***REMOVED***

  _drawUIDone() {
    this._pipe.write(CLEAR);

    const messages = [
      _chalk().default.bold('Watch Usage'),
      describeKey('Enter', 'to return to watch mode.')
    ];

    this._pipe.write(messages.join('\n') + '\n');
  ***REMOVED***

  _drawUIDoneWithSkipped() {
    this._pipe.write(CLEAR);

    let stats = `${(0, _jestUtil().pluralize)(
      'test',
      this._countPaths
    )***REMOVED*** reviewed`;

    if (this._skippedNum > 0) {
      const skippedText = _chalk().default.bold.yellow(
        (0, _jestUtil().pluralize)('test', this._skippedNum) + ' skipped'
      );

      stats = `${stats***REMOVED***, ${skippedText***REMOVED***`;
    ***REMOVED***

    const message = [
      TestProgressLabel,
      `${ARROW***REMOVED***${stats***REMOVED***`,
      '\n',
      _chalk().default.bold('Watch Usage'),
      describeKey('r', 'to restart Interactive Mode.'),
      describeKey('q', 'to quit Interactive Mode.'),
      describeKey('Enter', 'to return to watch mode.')
    ];

    this._pipe.write(`\n${message.join('\n')***REMOVED***`);
  ***REMOVED***

  _drawUIProgress() {
    this._clearTestSummary();

    const numPass = this._countPaths - this._testAssertions.length;
    const numRemaining = this._countPaths - numPass - this._skippedNum;
    let stats = `${(0, _jestUtil().pluralize)('test', numRemaining)***REMOVED*** remaining`;

    if (this._skippedNum > 0) {
      const skippedText = _chalk().default.bold.yellow(
        (0, _jestUtil().pluralize)('test', this._skippedNum) + ' skipped'
      );

      stats = `${stats***REMOVED***, ${skippedText***REMOVED***`;
    ***REMOVED***

    const message = [
      TestProgressLabel,
      `${ARROW***REMOVED***${stats***REMOVED***`,
      '\n',
      _chalk().default.bold('Watch Usage'),
      describeKey('s', 'to skip the current test.'),
      describeKey('q', 'to quit Interactive Mode.'),
      describeKey('Enter', 'to return to watch mode.')
    ];

    this._pipe.write(`\n${message.join('\n')***REMOVED***`);
  ***REMOVED***

  _drawUIOverlay() {
    if (this._testAssertions.length === 0) return this._drawUIDone();
    return this._drawUIProgress();
  ***REMOVED***

  _run() {
    if (this._updateTestRunnerConfig) {
      this._updateTestRunnerConfig(this._testAssertions[0]);
    ***REMOVED***
  ***REMOVED***

  abort() {
    this._isActive = false;
    this._skippedNum = 0;

    if (this._updateTestRunnerConfig) {
      this._updateTestRunnerConfig();
    ***REMOVED***
  ***REMOVED***

  restart() {
    this._skippedNum = 0;
    this._countPaths = this._testAssertions.length;

    this._run();
  ***REMOVED***
***REMOVED***

exports.default = FailedTestsInteractiveMode;
