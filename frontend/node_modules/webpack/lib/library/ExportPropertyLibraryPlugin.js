/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const { ConcatSource ***REMOVED*** = require("webpack-sources");
const { UsageState ***REMOVED*** = require("../ExportsInfo");
const RuntimeGlobals = require("../RuntimeGlobals");
const propertyAccess = require("../util/propertyAccess");
const { getEntryRuntime ***REMOVED*** = require("../util/runtime");
const AbstractLibraryPlugin = require("./AbstractLibraryPlugin");

/** @typedef {import("webpack-sources").Source***REMOVED*** Source */
/** @typedef {import("../../declarations/WebpackOptions").LibraryOptions***REMOVED*** LibraryOptions */
/** @typedef {import("../../declarations/WebpackOptions").LibraryType***REMOVED*** LibraryType */
/** @typedef {import("../Chunk")***REMOVED*** Chunk */
/** @typedef {import("../Compiler")***REMOVED*** Compiler */
/** @typedef {import("../Module")***REMOVED*** Module */
/** @typedef {import("../javascript/JavascriptModulesPlugin").StartupRenderContext***REMOVED*** StartupRenderContext */
/** @template T @typedef {import("./AbstractLibraryPlugin").LibraryContext<T>***REMOVED*** LibraryContext<T> */

/**
 * @typedef {object***REMOVED*** ExportPropertyLibraryPluginParsed
 * @property {string | string[]***REMOVED*** export
 */

/**
 * @typedef {object***REMOVED*** ExportPropertyLibraryPluginOptions
 * @property {LibraryType***REMOVED*** type
 * @property {boolean***REMOVED*** nsObjectUsed the namespace object is used
 * @property {boolean***REMOVED*** runtimeExportsUsed runtime exports are used
 * @property {boolean***REMOVED*** renderStartupUsed render startup is used
 */
/**
 * @typedef {ExportPropertyLibraryPluginParsed***REMOVED*** T
 * @extends {AbstractLibraryPlugin<ExportPropertyLibraryPluginParsed>***REMOVED***
 */
class ExportPropertyLibraryPlugin extends AbstractLibraryPlugin {
	/**
	 * @param {ExportPropertyLibraryPluginOptions***REMOVED*** options options
	 */
	constructor({ type, nsObjectUsed, runtimeExportsUsed, renderStartupUsed ***REMOVED***) {
		super({
			pluginName: "ExportPropertyLibraryPlugin",
			type
		***REMOVED***);
		this.nsObjectUsed = nsObjectUsed;
		this.runtimeExportsUsed = runtimeExportsUsed;
		this.renderStartupUsed = renderStartupUsed;
	***REMOVED***

	/**
	 * @param {LibraryOptions***REMOVED*** library normalized library option
	 * @returns {T | false***REMOVED*** preprocess as needed by overriding
	 */
	parseOptions(library) {
		return {
			export: /** @type {string | string[]***REMOVED*** */ (library.export)
		***REMOVED***;
	***REMOVED***

	/**
	 * @param {Module***REMOVED*** module the exporting entry module
	 * @param {string***REMOVED*** entryName the name of the entrypoint
	 * @param {LibraryContext<T>***REMOVED*** libraryContext context
	 * @returns {void***REMOVED***
	 */
	finishEntryModule(
		module,
		entryName,
		{ options, compilation, compilation: { moduleGraph ***REMOVED*** ***REMOVED***
	) {
		const runtime = getEntryRuntime(compilation, entryName);
		if (options.export) {
			const exportsInfo = moduleGraph.getExportInfo(
				module,
				Array.isArray(options.export) ? options.export[0] : options.export
			);
			exportsInfo.setUsed(UsageState.Used, runtime);
			exportsInfo.canMangleUse = false;
		***REMOVED*** else {
			const exportsInfo = moduleGraph.getExportsInfo(module);
			if (this.nsObjectUsed) {
				exportsInfo.setUsedInUnknownWay(runtime);
			***REMOVED*** else {
				exportsInfo.setAllKnownExportsUsed(runtime);
			***REMOVED***
		***REMOVED***
		moduleGraph.addExtraReason(module, "used as library export");
	***REMOVED***

	/**
	 * @param {Chunk***REMOVED*** chunk the chunk
	 * @param {Set<string>***REMOVED*** set runtime requirements
	 * @param {LibraryContext<T>***REMOVED*** libraryContext context
	 * @returns {void***REMOVED***
	 */
	runtimeRequirements(chunk, set, libraryContext) {
		if (this.runtimeExportsUsed) {
			set.add(RuntimeGlobals.exports);
		***REMOVED***
	***REMOVED***

	/**
	 * @param {Source***REMOVED*** source source
	 * @param {Module***REMOVED*** module module
	 * @param {StartupRenderContext***REMOVED*** renderContext render context
	 * @param {LibraryContext<T>***REMOVED*** libraryContext context
	 * @returns {Source***REMOVED*** source with library export
	 */
	renderStartup(source, module, renderContext, { options ***REMOVED***) {
		if (!this.renderStartupUsed) return source;
		if (!options.export) return source;
		const postfix = `${RuntimeGlobals.exports***REMOVED*** = ${
			RuntimeGlobals.exports
		***REMOVED***${propertyAccess(
			Array.isArray(options.export) ? options.export : [options.export]
		)***REMOVED***;\n`;
		return new ConcatSource(source, postfix);
	***REMOVED***
***REMOVED***

module.exports = ExportPropertyLibraryPlugin;
