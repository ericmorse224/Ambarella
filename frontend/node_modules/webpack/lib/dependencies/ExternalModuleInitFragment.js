/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Ivan Kopeykin @vankop
*/

"use strict";

const InitFragment = require("../InitFragment");
const makeSerializable = require("../util/makeSerializable");

/** @typedef {import("webpack-sources").Source***REMOVED*** Source */
/** @typedef {import("../Generator").GenerateContext***REMOVED*** GenerateContext */
/** @typedef {import("../serialization/ObjectMiddleware").ObjectDeserializerContext***REMOVED*** ObjectDeserializerContext */
/** @typedef {import("../serialization/ObjectMiddleware").ObjectSerializerContext***REMOVED*** ObjectSerializerContext */
/** @typedef {Map<string, Set<string>>***REMOVED*** ImportSpecifiers */

/**
 * @extends {InitFragment<GenerateContext>***REMOVED***
 */
class ExternalModuleInitFragment extends InitFragment {
	/**
	 * @param {string***REMOVED*** importedModule imported module
	 * @param {Array<{ name: string, value?: string ***REMOVED***> | ImportSpecifiers***REMOVED*** specifiers import specifiers
	 * @param {string=***REMOVED*** defaultImport default import
	 */
	constructor(importedModule, specifiers, defaultImport) {
		super(
			undefined,
			InitFragment.STAGE_CONSTANTS,
			0,
			`external module imports|${importedModule***REMOVED***|${defaultImport || "null"***REMOVED***`
		);
		this.importedModule = importedModule;
		if (Array.isArray(specifiers)) {
			/** @type {ImportSpecifiers***REMOVED*** */
			this.specifiers = new Map();
			for (const { name, value ***REMOVED*** of specifiers) {
				let specifiers = this.specifiers.get(name);
				if (!specifiers) {
					specifiers = new Set();
					this.specifiers.set(name, specifiers);
				***REMOVED***
				specifiers.add(value || name);
			***REMOVED***
		***REMOVED*** else {
			this.specifiers = specifiers;
		***REMOVED***
		this.defaultImport = defaultImport;
	***REMOVED***

	/**
	 * @param {ExternalModuleInitFragment***REMOVED*** other other
	 * @returns {ExternalModuleInitFragment***REMOVED*** ExternalModuleInitFragment
	 */
	merge(other) {
		const newSpecifiersMap = new Map(this.specifiers);
		for (const [name, specifiers] of other.specifiers) {
			if (newSpecifiersMap.has(name)) {
				const currentSpecifiers =
					/** @type {Set<string>***REMOVED*** */
					(newSpecifiersMap.get(name));
				for (const spec of specifiers) currentSpecifiers.add(spec);
			***REMOVED*** else {
				newSpecifiersMap.set(name, specifiers);
			***REMOVED***
		***REMOVED***
		return new ExternalModuleInitFragment(
			this.importedModule,
			newSpecifiersMap,
			this.defaultImport
		);
	***REMOVED***

	/**
	 * @param {GenerateContext***REMOVED*** context context
	 * @returns {string | Source | undefined***REMOVED*** the source code that will be included as initialization code
	 */
	getContent({ runtimeRequirements ***REMOVED***) {
		const namedImports = [];

		for (const [name, specifiers] of this.specifiers) {
			for (const spec of specifiers) {
				if (spec === name) {
					namedImports.push(name);
				***REMOVED*** else {
					namedImports.push(`${name***REMOVED*** as ${spec***REMOVED***`);
				***REMOVED***
			***REMOVED***
		***REMOVED***

		let importsString =
			namedImports.length > 0 ? `{${namedImports.join(",")***REMOVED******REMOVED***` : "";

		if (this.defaultImport) {
			importsString = `${this.defaultImport***REMOVED***${
				importsString ? `, ${importsString***REMOVED***` : ""
			***REMOVED***`;
		***REMOVED***

		return `import ${importsString***REMOVED*** from ${JSON.stringify(
			this.importedModule
		)***REMOVED***;`;
	***REMOVED***

	/**
	 * @param {ObjectSerializerContext***REMOVED*** context context
	 */
	serialize(context) {
		super.serialize(context);
		const { write ***REMOVED*** = context;
		write(this.importedModule);
		write(this.specifiers);
		write(this.defaultImport);
	***REMOVED***

	/**
	 * @param {ObjectDeserializerContext***REMOVED*** context context
	 */
	deserialize(context) {
		super.deserialize(context);
		const { read ***REMOVED*** = context;
		this.importedModule = read();
		this.specifiers = read();
		this.defaultImport = read();
	***REMOVED***
***REMOVED***

makeSerializable(
	ExternalModuleInitFragment,
	"webpack/lib/dependencies/ExternalModuleInitFragment"
);

module.exports = ExternalModuleInitFragment;
