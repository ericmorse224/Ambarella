"use strict";

/** @typedef {import("../index.js").IncomingMessage***REMOVED*** IncomingMessage */

/** @typedef {import("../index.js").ServerResponse***REMOVED*** ServerResponse */

/**
 * @typedef {Object***REMOVED*** ExpectedRequest
 * @property {(name: string) => string | undefined***REMOVED*** get
 */

/**
 * @typedef {Object***REMOVED*** ExpectedResponse
 * @property {(name: string) => string | string[] | undefined***REMOVED*** get
 * @property {(name: string, value: number | string | string[]) => void***REMOVED*** set
 * @property {(status: number) => void***REMOVED*** status
 * @property {(data: any) => void***REMOVED*** send
 */

/**
 * @template {ServerResponse***REMOVED*** Response
 * @param {Response***REMOVED*** res
 * @returns {string[]***REMOVED***
 */
function getHeaderNames(res) {
  if (typeof res.getHeaderNames !== "function") {
    // @ts-ignore
    // eslint-disable-next-line no-underscore-dangle
    return Object.keys(res._headers || {***REMOVED***);
  ***REMOVED***

  return res.getHeaderNames();
***REMOVED***
/**
 * @template {IncomingMessage***REMOVED*** Request
 * @param {Request***REMOVED*** req
 * @param {string***REMOVED*** name
 * @returns {string | undefined***REMOVED***
 */


function getHeaderFromRequest(req, name) {
  // Express API
  if (typeof
  /** @type {Request & ExpectedRequest***REMOVED*** */
  req.get === "function") {
    return (
      /** @type {Request & ExpectedRequest***REMOVED*** */
      req.get(name)
    );
  ***REMOVED*** // Node.js API
  // @ts-ignore


  return req.headers[name];
***REMOVED***
/**
 * @template {ServerResponse***REMOVED*** Response
 * @param {Response***REMOVED*** res
 * @param {string***REMOVED*** name
 * @returns {number | string | string[] | undefined***REMOVED***
 */


function getHeaderFromResponse(res, name) {
  // Express API
  if (typeof
  /** @type {Response & ExpectedResponse***REMOVED*** */
  res.get === "function") {
    return (
      /** @type {Response & ExpectedResponse***REMOVED*** */
      res.get(name)
    );
  ***REMOVED*** // Node.js API


  return res.getHeader(name);
***REMOVED***
/**
 * @template {ServerResponse***REMOVED*** Response
 * @param {Response***REMOVED*** res
 * @param {string***REMOVED*** name
 * @param {number | string | string[]***REMOVED*** value
 * @returns {void***REMOVED***
 */


function setHeaderForResponse(res, name, value) {
  // Express API
  if (typeof
  /** @type {Response & ExpectedResponse***REMOVED*** */
  res.set === "function") {
    /** @type {Response & ExpectedResponse***REMOVED*** */
    res.set(name, typeof value === "number" ? String(value) : value);
    return;
  ***REMOVED*** // Node.js API


  res.setHeader(name, value);
***REMOVED***
/**
 * @template {ServerResponse***REMOVED*** Response
 * @param {Response***REMOVED*** res
 * @param {number***REMOVED*** code
 */


function setStatusCode(res, code) {
  if (typeof
  /** @type {Response & ExpectedResponse***REMOVED*** */
  res.status === "function") {
    /** @type {Response & ExpectedResponse***REMOVED*** */
    res.status(code);
    return;
  ***REMOVED*** // eslint-disable-next-line no-param-reassign


  res.statusCode = code;
***REMOVED***
/**
 * @template {IncomingMessage***REMOVED*** Request
 * @template {ServerResponse***REMOVED*** Response
 * @param {Request***REMOVED*** req
 * @param {Response***REMOVED*** res
 * @param {string | Buffer | import("fs").ReadStream***REMOVED*** bufferOtStream
 * @param {number***REMOVED*** byteLength
 */


function send(req, res, bufferOtStream, byteLength) {
  if (typeof
  /** @type {import("fs").ReadStream***REMOVED*** */
  bufferOtStream.pipe === "function") {
    setHeaderForResponse(res, "Content-Length", byteLength);

    if (req.method === "HEAD") {
      res.end();
      return;
    ***REMOVED***
    /** @type {import("fs").ReadStream***REMOVED*** */


    bufferOtStream.pipe(res);
    return;
  ***REMOVED***

  if (typeof
  /** @type {Response & ExpectedResponse***REMOVED*** */
  res.send === "function") {
    /** @type {Response & ExpectedResponse***REMOVED*** */
    res.send(bufferOtStream);
    return;
  ***REMOVED*** // Only Node.js API used


  res.setHeader("Content-Length", byteLength);

  if (req.method === "HEAD") {
    res.end();
  ***REMOVED*** else {
    res.end(bufferOtStream);
  ***REMOVED***
***REMOVED***
/**
 * @template {ServerResponse***REMOVED*** Response
 * @param {Response***REMOVED*** res
 */


function clearHeadersForResponse(res) {
  const headers = getHeaderNames(res);

  for (let i = 0; i < headers.length; i++) {
    res.removeHeader(headers[i]);
  ***REMOVED***
***REMOVED***

const matchHtmlRegExp = /["'&<>]/;
/**
 * @param {string***REMOVED*** string raw HTML
 * @returns {string***REMOVED*** escaped HTML
 */

function escapeHtml(string) {
  const str = `${string***REMOVED***`;
  const match = matchHtmlRegExp.exec(str);

  if (!match) {
    return str;
  ***REMOVED***

  let escape;
  let html = "";
  let index = 0;
  let lastIndex = 0;

  for (({
    index
  ***REMOVED*** = match); index < str.length; index++) {
    switch (str.charCodeAt(index)) {
      // "
      case 34:
        escape = "&quot;";
        break;
      // &

      case 38:
        escape = "&amp;";
        break;
      // '

      case 39:
        escape = "&#39;";
        break;
      // <

      case 60:
        escape = "&lt;";
        break;
      // >

      case 62:
        escape = "&gt;";
        break;

      default:
        // eslint-disable-next-line no-continue
        continue;
    ***REMOVED***

    if (lastIndex !== index) {
      html += str.substring(lastIndex, index);
    ***REMOVED***

    lastIndex = index + 1;
    html += escape;
  ***REMOVED***

  return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
***REMOVED***
/** @type {Record<number, string>***REMOVED*** */


const statuses = {
  400: "Bad Request",
  403: "Forbidden",
  404: "Not Found",
  416: "Range Not Satisfiable",
  500: "Internal Server Error"
***REMOVED***;
/**
 * @template {IncomingMessage***REMOVED*** Request
 * @template {ServerResponse***REMOVED*** Response
 * @param {Request***REMOVED*** req response
 * @param {Response***REMOVED*** res response
 * @param {number***REMOVED*** status status
 * @returns {void***REMOVED***
 */

function sendError(req, res, status) {
  const content = statuses[status] || String(status);
  const document = `<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8">
<title>Error</title>
</head>
<body>
<pre>${escapeHtml(content)***REMOVED***</pre>
</body>
</html>`; // Clear existing headers

  clearHeadersForResponse(res); // Send basic response

  setStatusCode(res, status);
  setHeaderForResponse(res, "Content-Type", "text/html; charset=utf-8");
  setHeaderForResponse(res, "Content-Security-Policy", "default-src 'none'");
  setHeaderForResponse(res, "X-Content-Type-Options", "nosniff");
  const byteLength = Buffer.byteLength(document);
  setHeaderForResponse(res, "Content-Length", byteLength);
  res.end(document);
***REMOVED***

module.exports = {
  getHeaderNames,
  getHeaderFromRequest,
  getHeaderFromResponse,
  setHeaderForResponse,
  setStatusCode,
  send,
  sendError
***REMOVED***;