"use strict";

const conversions = require("webidl-conversions");
const utils = require("./utils.js");

const EventInit = require("./EventInit.js");

exports._convertInherit = (obj, ret, { context = "The provided value" ***REMOVED*** = {***REMOVED***) => {
  EventInit._convertInherit(obj, ret, { context ***REMOVED***);

  {
    const key = "colno";
    let value = obj === undefined || obj === null ? undefined : obj[key];
    if (value !== undefined) {
      value = conversions["unsigned long"](value, { context: context + " has member 'colno' that" ***REMOVED***);

      ret[key] = value;
    ***REMOVED*** else {
      ret[key] = 0;
    ***REMOVED***
  ***REMOVED***

  {
    const key = "error";
    let value = obj === undefined || obj === null ? undefined : obj[key];
    if (value !== undefined) {
      value = conversions["any"](value, { context: context + " has member 'error' that" ***REMOVED***);

      ret[key] = value;
    ***REMOVED*** else {
      ret[key] = null;
    ***REMOVED***
  ***REMOVED***

  {
    const key = "filename";
    let value = obj === undefined || obj === null ? undefined : obj[key];
    if (value !== undefined) {
      value = conversions["USVString"](value, { context: context + " has member 'filename' that" ***REMOVED***);

      ret[key] = value;
    ***REMOVED*** else {
      ret[key] = "";
    ***REMOVED***
  ***REMOVED***

  {
    const key = "lineno";
    let value = obj === undefined || obj === null ? undefined : obj[key];
    if (value !== undefined) {
      value = conversions["unsigned long"](value, { context: context + " has member 'lineno' that" ***REMOVED***);

      ret[key] = value;
    ***REMOVED*** else {
      ret[key] = 0;
    ***REMOVED***
  ***REMOVED***

  {
    const key = "message";
    let value = obj === undefined || obj === null ? undefined : obj[key];
    if (value !== undefined) {
      value = conversions["DOMString"](value, { context: context + " has member 'message' that" ***REMOVED***);

      ret[key] = value;
    ***REMOVED*** else {
      ret[key] = "";
    ***REMOVED***
  ***REMOVED***
***REMOVED***;

exports.convert = function convert(obj, { context = "The provided value" ***REMOVED*** = {***REMOVED***) {
  if (obj !== undefined && typeof obj !== "object" && typeof obj !== "function") {
    throw new TypeError(`${context***REMOVED*** is not an object.`);
  ***REMOVED***

  const ret = Object.create(null);
  exports._convertInherit(obj, ret, { context ***REMOVED***);
  return ret;
***REMOVED***;
