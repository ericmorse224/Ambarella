var test = require('tape');
var evaluate = require('../');
var parse = require('esprima').parse;

test('resolved', function (t) {
    t.plan(1);
    
    var src = '[1,2,3+4*10+(n||6),foo(3+5),obj[""+"x"].y]';
    var ast = parse(src).body[0].expression;
    var res = evaluate(ast, {
        n: false,
        foo: function (x) { return x * 100 ***REMOVED***,
        obj: { x: { y: 555 ***REMOVED*** ***REMOVED***
    ***REMOVED***);
    t.deepEqual(res, [ 1, 2, 49, 800, 555 ]);
***REMOVED***);

test('unresolved', function (t) {
    t.plan(1);
    
    var src = '[1,2,3+4*10*z+n,foo(3+5),obj[""+"x"].y]';
    var ast = parse(src).body[0].expression;
    var res = evaluate(ast, {
        n: 6,
        foo: function (x) { return x * 100 ***REMOVED***,
        obj: { x: { y: 555 ***REMOVED*** ***REMOVED***
    ***REMOVED***);
    t.equal(res, undefined);
***REMOVED***);

test('boolean', function (t) {
    t.plan(1);
    
    var src = '[ 1===2+3-16/4, [2]==2, [2]!==2, [2]!==[2] ]';
    var ast = parse(src).body[0].expression;
    t.deepEqual(evaluate(ast), [ true, true, true, true ]);
***REMOVED***);

test('array methods', function(t) {
    t.plan(1);

    var src = '[1, 2, 3].map(function(n) { return n * 2 ***REMOVED***)';
    var ast = parse(src).body[0].expression;
    t.deepEqual(evaluate(ast), [2, 4, 6]);
***REMOVED***);

test('array methods with vars', function(t) {
    t.plan(1);

    var src = '[1, 2, 3].map(function(n) { return n * x ***REMOVED***)';
    var ast = parse(src).body[0].expression;
    t.deepEqual(evaluate(ast, {x: 2***REMOVED***), [2, 4, 6]);
***REMOVED***);

test('evaluate this', function(t) {
    t.plan(1);

    var src = 'this.x + this.y.z';
    var ast = parse(src).body[0].expression;
    var res = evaluate(ast, {
        'this': { x: 1, y: { z: 100 ***REMOVED*** ***REMOVED***
    ***REMOVED***);
    t.equal(res, 101);
***REMOVED***);

test('FunctionExpression unresolved', function(t) {
    t.plan(1);

    var src = '(function(){console.log("Not Good")***REMOVED***)';
    var ast = parse(src).body[0].expression;
    var res = evaluate(ast, {***REMOVED***);
    t.equal(res, undefined);
***REMOVED***);

test('MemberExpressions from Functions unresolved', function(t) {
    t.plan(1);

    var src = '(function () {***REMOVED***).constructor';
    var ast = parse(src).body[0].expression;
    var res = evaluate(ast, {***REMOVED***);
    t.equal(res, undefined);
***REMOVED***);