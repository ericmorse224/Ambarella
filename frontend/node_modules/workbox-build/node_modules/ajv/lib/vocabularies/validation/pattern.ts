import type {CodeKeywordDefinition, ErrorObject, KeywordErrorDefinition***REMOVED*** from "../../types"
import type {KeywordCxt***REMOVED*** from "../../compile/validate"
import {usePattern***REMOVED*** from "../code"
import {_, str***REMOVED*** from "../../compile/codegen"

export type PatternError = ErrorObject<"pattern", {pattern: string***REMOVED***, string | {$data: string***REMOVED***>

const error: KeywordErrorDefinition = {
  message: ({schemaCode***REMOVED***) => str`must match pattern "${schemaCode***REMOVED***"`,
  params: ({schemaCode***REMOVED***) => _`{pattern: ${schemaCode***REMOVED******REMOVED***`,
***REMOVED***

const def: CodeKeywordDefinition = {
  keyword: "pattern",
  type: "string",
  schemaType: "string",
  $data: true,
  error,
  code(cxt: KeywordCxt) {
    const {data, $data, schema, schemaCode, it***REMOVED*** = cxt
    // TODO regexp should be wrapped in try/catchs
    const u = it.opts.unicodeRegExp ? "u" : ""
    const regExp = $data ? _`(new RegExp(${schemaCode***REMOVED***, ${u***REMOVED***))` : usePattern(cxt, schema)
    cxt.fail$data(_`!${regExp***REMOVED***.test(${data***REMOVED***)`)
  ***REMOVED***,
***REMOVED***

export default def
