"use strict";

const conversions = require("webidl-conversions");
const utils = require("./utils.js");

const KeyboardEventInit = require("./KeyboardEventInit.js");
const implSymbol = utils.implSymbol;
const ctorRegistrySymbol = utils.ctorRegistrySymbol;
const UIEvent = require("./UIEvent.js");

const interfaceName = "KeyboardEvent";

exports.is = value => {
  return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;
***REMOVED***;
exports.isImpl = value => {
  return utils.isObject(value) && value instanceof Impl.implementation;
***REMOVED***;
exports.convert = (value, { context = "The provided value" ***REMOVED*** = {***REMOVED***) => {
  if (exports.is(value)) {
    return utils.implForWrapper(value);
  ***REMOVED***
  throw new TypeError(`${context***REMOVED*** is not of type 'KeyboardEvent'.`);
***REMOVED***;

function makeWrapper(globalObject) {
  if (globalObject[ctorRegistrySymbol] === undefined) {
    throw new Error("Internal error: invalid global object");
  ***REMOVED***

  const ctor = globalObject[ctorRegistrySymbol]["KeyboardEvent"];
  if (ctor === undefined) {
    throw new Error("Internal error: constructor KeyboardEvent is not installed on the passed global object");
  ***REMOVED***

  return Object.create(ctor.prototype);
***REMOVED***

exports.create = (globalObject, constructorArgs, privateData) => {
  const wrapper = makeWrapper(globalObject);
  return exports.setup(wrapper, globalObject, constructorArgs, privateData);
***REMOVED***;

exports.createImpl = (globalObject, constructorArgs, privateData) => {
  const wrapper = exports.create(globalObject, constructorArgs, privateData);
  return utils.implForWrapper(wrapper);
***REMOVED***;

exports._internalSetup = (wrapper, globalObject) => {
  UIEvent._internalSetup(wrapper, globalObject);
***REMOVED***;

exports.setup = (wrapper, globalObject, constructorArgs = [], privateData = {***REMOVED***) => {
  privateData.wrapper = wrapper;

  exports._internalSetup(wrapper, globalObject);
  Object.defineProperty(wrapper, implSymbol, {
    value: new Impl.implementation(globalObject, constructorArgs, privateData),
    configurable: true
  ***REMOVED***);

  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;
  if (Impl.init) {
    Impl.init(wrapper[implSymbol]);
  ***REMOVED***
  return wrapper;
***REMOVED***;

exports.new = globalObject => {
  const wrapper = makeWrapper(globalObject);

  exports._internalSetup(wrapper, globalObject);
  Object.defineProperty(wrapper, implSymbol, {
    value: Object.create(Impl.implementation.prototype),
    configurable: true
  ***REMOVED***);

  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;
  if (Impl.init) {
    Impl.init(wrapper[implSymbol]);
  ***REMOVED***
  return wrapper[implSymbol];
***REMOVED***;

const exposed = new Set(["Window"]);

exports.install = (globalObject, globalNames) => {
  if (!globalNames.some(globalName => exposed.has(globalName))) {
    return;
  ***REMOVED***

  if (globalObject.UIEvent === undefined) {
    throw new Error("Internal error: attempting to evaluate KeyboardEvent before UIEvent");
  ***REMOVED***
  class KeyboardEvent extends globalObject.UIEvent {
    constructor(type) {
      if (arguments.length < 1) {
        throw new TypeError(
          "Failed to construct 'KeyboardEvent': 1 argument required, but only " + arguments.length + " present."
        );
      ***REMOVED***
      const args = [];
      {
        let curArg = arguments[0];
        curArg = conversions["DOMString"](curArg, { context: "Failed to construct 'KeyboardEvent': parameter 1" ***REMOVED***);
        args.push(curArg);
      ***REMOVED***
      {
        let curArg = arguments[1];
        curArg = KeyboardEventInit.convert(curArg, { context: "Failed to construct 'KeyboardEvent': parameter 2" ***REMOVED***);
        args.push(curArg);
      ***REMOVED***
      return exports.setup(Object.create(new.target.prototype), globalObject, args);
    ***REMOVED***

    getModifierState(keyArg) {
      const esValue = this !== null && this !== undefined ? this : globalObject;
      if (!exports.is(esValue)) {
        throw new TypeError("'getModifierState' called on an object that is not a valid instance of KeyboardEvent.");
      ***REMOVED***

      if (arguments.length < 1) {
        throw new TypeError(
          "Failed to execute 'getModifierState' on 'KeyboardEvent': 1 argument required, but only " +
            arguments.length +
            " present."
        );
      ***REMOVED***
      const args = [];
      {
        let curArg = arguments[0];
        curArg = conversions["DOMString"](curArg, {
          context: "Failed to execute 'getModifierState' on 'KeyboardEvent': parameter 1"
        ***REMOVED***);
        args.push(curArg);
      ***REMOVED***
      return esValue[implSymbol].getModifierState(...args);
    ***REMOVED***

    initKeyboardEvent(typeArg) {
      const esValue = this !== null && this !== undefined ? this : globalObject;
      if (!exports.is(esValue)) {
        throw new TypeError("'initKeyboardEvent' called on an object that is not a valid instance of KeyboardEvent.");
      ***REMOVED***

      if (arguments.length < 1) {
        throw new TypeError(
          "Failed to execute 'initKeyboardEvent' on 'KeyboardEvent': 1 argument required, but only " +
            arguments.length +
            " present."
        );
      ***REMOVED***
      const args = [];
      {
        let curArg = arguments[0];
        curArg = conversions["DOMString"](curArg, {
          context: "Failed to execute 'initKeyboardEvent' on 'KeyboardEvent': parameter 1"
        ***REMOVED***);
        args.push(curArg);
      ***REMOVED***
      {
        let curArg = arguments[1];
        if (curArg !== undefined) {
          curArg = conversions["boolean"](curArg, {
            context: "Failed to execute 'initKeyboardEvent' on 'KeyboardEvent': parameter 2"
          ***REMOVED***);
        ***REMOVED*** else {
          curArg = false;
        ***REMOVED***
        args.push(curArg);
      ***REMOVED***
      {
        let curArg = arguments[2];
        if (curArg !== undefined) {
          curArg = conversions["boolean"](curArg, {
            context: "Failed to execute 'initKeyboardEvent' on 'KeyboardEvent': parameter 3"
          ***REMOVED***);
        ***REMOVED*** else {
          curArg = false;
        ***REMOVED***
        args.push(curArg);
      ***REMOVED***
      {
        let curArg = arguments[3];
        if (curArg !== undefined) {
          if (curArg === null || curArg === undefined) {
            curArg = null;
          ***REMOVED*** else {
            curArg = utils.tryImplForWrapper(curArg);
          ***REMOVED***
        ***REMOVED*** else {
          curArg = null;
        ***REMOVED***
        args.push(curArg);
      ***REMOVED***
      {
        let curArg = arguments[4];
        if (curArg !== undefined) {
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'initKeyboardEvent' on 'KeyboardEvent': parameter 5"
          ***REMOVED***);
        ***REMOVED*** else {
          curArg = "";
        ***REMOVED***
        args.push(curArg);
      ***REMOVED***
      {
        let curArg = arguments[5];
        if (curArg !== undefined) {
          curArg = conversions["unsigned long"](curArg, {
            context: "Failed to execute 'initKeyboardEvent' on 'KeyboardEvent': parameter 6"
          ***REMOVED***);
        ***REMOVED*** else {
          curArg = 0;
        ***REMOVED***
        args.push(curArg);
      ***REMOVED***
      {
        let curArg = arguments[6];
        if (curArg !== undefined) {
          curArg = conversions["boolean"](curArg, {
            context: "Failed to execute 'initKeyboardEvent' on 'KeyboardEvent': parameter 7"
          ***REMOVED***);
        ***REMOVED*** else {
          curArg = false;
        ***REMOVED***
        args.push(curArg);
      ***REMOVED***
      {
        let curArg = arguments[7];
        if (curArg !== undefined) {
          curArg = conversions["boolean"](curArg, {
            context: "Failed to execute 'initKeyboardEvent' on 'KeyboardEvent': parameter 8"
          ***REMOVED***);
        ***REMOVED*** else {
          curArg = false;
        ***REMOVED***
        args.push(curArg);
      ***REMOVED***
      {
        let curArg = arguments[8];
        if (curArg !== undefined) {
          curArg = conversions["boolean"](curArg, {
            context: "Failed to execute 'initKeyboardEvent' on 'KeyboardEvent': parameter 9"
          ***REMOVED***);
        ***REMOVED*** else {
          curArg = false;
        ***REMOVED***
        args.push(curArg);
      ***REMOVED***
      {
        let curArg = arguments[9];
        if (curArg !== undefined) {
          curArg = conversions["boolean"](curArg, {
            context: "Failed to execute 'initKeyboardEvent' on 'KeyboardEvent': parameter 10"
          ***REMOVED***);
        ***REMOVED*** else {
          curArg = false;
        ***REMOVED***
        args.push(curArg);
      ***REMOVED***
      return esValue[implSymbol].initKeyboardEvent(...args);
    ***REMOVED***

    get key() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new TypeError("'get key' called on an object that is not a valid instance of KeyboardEvent.");
      ***REMOVED***

      return esValue[implSymbol]["key"];
    ***REMOVED***

    get code() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new TypeError("'get code' called on an object that is not a valid instance of KeyboardEvent.");
      ***REMOVED***

      return esValue[implSymbol]["code"];
    ***REMOVED***

    get location() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new TypeError("'get location' called on an object that is not a valid instance of KeyboardEvent.");
      ***REMOVED***

      return esValue[implSymbol]["location"];
    ***REMOVED***

    get ctrlKey() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new TypeError("'get ctrlKey' called on an object that is not a valid instance of KeyboardEvent.");
      ***REMOVED***

      return esValue[implSymbol]["ctrlKey"];
    ***REMOVED***

    get shiftKey() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new TypeError("'get shiftKey' called on an object that is not a valid instance of KeyboardEvent.");
      ***REMOVED***

      return esValue[implSymbol]["shiftKey"];
    ***REMOVED***

    get altKey() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new TypeError("'get altKey' called on an object that is not a valid instance of KeyboardEvent.");
      ***REMOVED***

      return esValue[implSymbol]["altKey"];
    ***REMOVED***

    get metaKey() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new TypeError("'get metaKey' called on an object that is not a valid instance of KeyboardEvent.");
      ***REMOVED***

      return esValue[implSymbol]["metaKey"];
    ***REMOVED***

    get repeat() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new TypeError("'get repeat' called on an object that is not a valid instance of KeyboardEvent.");
      ***REMOVED***

      return esValue[implSymbol]["repeat"];
    ***REMOVED***

    get isComposing() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new TypeError("'get isComposing' called on an object that is not a valid instance of KeyboardEvent.");
      ***REMOVED***

      return esValue[implSymbol]["isComposing"];
    ***REMOVED***

    get charCode() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new TypeError("'get charCode' called on an object that is not a valid instance of KeyboardEvent.");
      ***REMOVED***

      return esValue[implSymbol]["charCode"];
    ***REMOVED***

    get keyCode() {
      const esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new TypeError("'get keyCode' called on an object that is not a valid instance of KeyboardEvent.");
      ***REMOVED***

      return esValue[implSymbol]["keyCode"];
    ***REMOVED***
  ***REMOVED***
  Object.defineProperties(KeyboardEvent.prototype, {
    getModifierState: { enumerable: true ***REMOVED***,
    initKeyboardEvent: { enumerable: true ***REMOVED***,
    key: { enumerable: true ***REMOVED***,
    code: { enumerable: true ***REMOVED***,
    location: { enumerable: true ***REMOVED***,
    ctrlKey: { enumerable: true ***REMOVED***,
    shiftKey: { enumerable: true ***REMOVED***,
    altKey: { enumerable: true ***REMOVED***,
    metaKey: { enumerable: true ***REMOVED***,
    repeat: { enumerable: true ***REMOVED***,
    isComposing: { enumerable: true ***REMOVED***,
    charCode: { enumerable: true ***REMOVED***,
    keyCode: { enumerable: true ***REMOVED***,
    [Symbol.toStringTag]: { value: "KeyboardEvent", configurable: true ***REMOVED***,
    DOM_KEY_LOCATION_STANDARD: { value: 0x00, enumerable: true ***REMOVED***,
    DOM_KEY_LOCATION_LEFT: { value: 0x01, enumerable: true ***REMOVED***,
    DOM_KEY_LOCATION_RIGHT: { value: 0x02, enumerable: true ***REMOVED***,
    DOM_KEY_LOCATION_NUMPAD: { value: 0x03, enumerable: true ***REMOVED***
  ***REMOVED***);
  Object.defineProperties(KeyboardEvent, {
    DOM_KEY_LOCATION_STANDARD: { value: 0x00, enumerable: true ***REMOVED***,
    DOM_KEY_LOCATION_LEFT: { value: 0x01, enumerable: true ***REMOVED***,
    DOM_KEY_LOCATION_RIGHT: { value: 0x02, enumerable: true ***REMOVED***,
    DOM_KEY_LOCATION_NUMPAD: { value: 0x03, enumerable: true ***REMOVED***
  ***REMOVED***);
  if (globalObject[ctorRegistrySymbol] === undefined) {
    globalObject[ctorRegistrySymbol] = Object.create(null);
  ***REMOVED***
  globalObject[ctorRegistrySymbol][interfaceName] = KeyboardEvent;

  Object.defineProperty(globalObject, interfaceName, {
    configurable: true,
    writable: true,
    value: KeyboardEvent
  ***REMOVED***);
***REMOVED***;

const Impl = require("../events/KeyboardEvent-impl.js");
