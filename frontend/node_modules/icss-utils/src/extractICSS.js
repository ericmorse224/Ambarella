const importPattern = /^:import\(("[^"]*"|'[^']*'|[^"']+)\)$/;
const balancedQuotes = /^("[^"]*"|'[^']*'|[^"']+)$/;

const getDeclsObject = (rule) => {
  const object = {***REMOVED***;

  rule.walkDecls((decl) => {
    const before = decl.raws.before ? decl.raws.before.trim() : "";

    object[before + decl.prop] = decl.value;
  ***REMOVED***);

  return object;
***REMOVED***;
/**
 *
 * @param {string***REMOVED*** css
 * @param {boolean***REMOVED*** removeRules
 * @param {'auto' | 'rule' | 'at-rule'***REMOVED*** mode
 */
const extractICSS = (css, removeRules = true, mode = "auto") => {
  const icssImports = {***REMOVED***;
  const icssExports = {***REMOVED***;

  function addImports(node, path) {
    const unquoted = path.replace(/'|"/g, "");
    icssImports[unquoted] = Object.assign(
      icssImports[unquoted] || {***REMOVED***,
      getDeclsObject(node)
    );

    if (removeRules) {
      node.remove();
    ***REMOVED***
  ***REMOVED***

  function addExports(node) {
    Object.assign(icssExports, getDeclsObject(node));
    if (removeRules) {
      node.remove();
    ***REMOVED***
  ***REMOVED***

  css.each((node) => {
    if (node.type === "rule" && mode !== "at-rule") {
      if (node.selector.slice(0, 7) === ":import") {
        const matches = importPattern.exec(node.selector);

        if (matches) {
          addImports(node, matches[1]);
        ***REMOVED***
      ***REMOVED***

      if (node.selector === ":export") {
        addExports(node);
      ***REMOVED***
    ***REMOVED***

    if (node.type === "atrule" && mode !== "rule") {
      if (node.name === "icss-import") {
        const matches = balancedQuotes.exec(node.params);

        if (matches) {
          addImports(node, matches[1]);
        ***REMOVED***
      ***REMOVED***
      if (node.name === "icss-export") {
        addExports(node);
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***);

  return { icssImports, icssExports ***REMOVED***;
***REMOVED***;

module.exports = extractICSS;
