"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
***REMOVED***);
exports.default = void 0;

var _utilities = require("../../utilities");

const hasLineBreak = (direction, colon, context) => {
  const sourceCode = context.getSourceCode();

  if (direction === 'before') {
    return colon.loc.start.line !== sourceCode.getTokenBefore(colon).loc.end.line;
  ***REMOVED***

  return sourceCode.getTokenAfter(colon).loc.start.line !== colon.loc.end.line;
***REMOVED***;

const getSpaces = (direction, colon, context) => {
  const sourceCode = context.getSourceCode();

  if (direction === 'before') {
    return colon.range[0] - sourceCode.getTokenBefore(colon).range[1];
  ***REMOVED***

  return sourceCode.getTokenAfter(colon).range[0] - colon.range[1];
***REMOVED***;

var _default = (direction, context, {
  always,
  allowLineBreak
***REMOVED***) => {
  return ({
    colon,
    node,
    name = '',
    type = 'type annotation'
  ***REMOVED***) => {
    let lineBreak;
    let spaces; // Support optional names
    // type X = { [string]: a ***REMOVED***
    // type X = string => string

    if (!colon || colon.value !== ':') {
      return;
    ***REMOVED***

    const data = {
      direction,
      name,
      type
    ***REMOVED***;

    if (hasLineBreak(direction, colon, context)) {
      if (allowLineBreak) {
        spaces = 1;
      ***REMOVED*** else {
        lineBreak = true;
        spaces = getSpaces(direction, colon, context);
      ***REMOVED***
    ***REMOVED*** else {
      spaces = getSpaces(direction, colon, context);
    ***REMOVED***

    if (always && lineBreak) {
      context.report({
        data,
        fix: _utilities.spacingFixers.replaceWithSpace(direction, colon, spaces),
        message: 'There must not be a line break {{direction***REMOVED******REMOVED*** {{name***REMOVED******REMOVED***{{type***REMOVED******REMOVED*** colon.',
        node
      ***REMOVED***);
    ***REMOVED*** else if (always && spaces > 1) {
      context.report({
        data,
        fix: _utilities.spacingFixers.stripSpaces(direction, colon, spaces - 1),
        message: 'There must be 1 space {{direction***REMOVED******REMOVED*** {{name***REMOVED******REMOVED***{{type***REMOVED******REMOVED*** colon.',
        node
      ***REMOVED***);
    ***REMOVED*** else if (always && spaces === 0) {
      context.report({
        data,
        fix: _utilities.spacingFixers.addSpace(direction, colon),
        message: 'There must be a space {{direction***REMOVED******REMOVED*** {{name***REMOVED******REMOVED***{{type***REMOVED******REMOVED*** colon.',
        node
      ***REMOVED***);
    ***REMOVED*** else if (!always && spaces > 0) {
      context.report({
        data,
        fix: _utilities.spacingFixers.stripSpaces(direction, colon, spaces),
        message: 'There must be no space {{direction***REMOVED******REMOVED*** {{name***REMOVED******REMOVED***{{type***REMOVED******REMOVED*** colon.',
        node
      ***REMOVED***);
    ***REMOVED***
  ***REMOVED***;
***REMOVED***;

exports.default = _default;
module.exports = exports.default;