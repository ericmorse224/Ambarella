/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Sean Larkin @thelarkinn
*/

"use strict";

const WebpackError = require("./WebpackError");

/** @typedef {import("./Module")***REMOVED*** Module */

/**
 * @template T
 * @callback Callback
 * @param {Error | null***REMOVED*** err
 * @param {T=***REMOVED*** stats
 * @returns {void***REMOVED***
 */

class HookWebpackError extends WebpackError {
	/**
	 * Creates an instance of HookWebpackError.
	 * @param {Error***REMOVED*** error inner error
	 * @param {string***REMOVED*** hook name of hook
	 */
	constructor(error, hook) {
		super(error.message);

		this.name = "HookWebpackError";
		this.hook = hook;
		this.error = error;
		this.hideStack = true;
		this.details = `caused by plugins in ${hook***REMOVED***\n${error.stack***REMOVED***`;

		this.stack += `\n-- inner error --\n${error.stack***REMOVED***`;
	***REMOVED***
***REMOVED***

module.exports = HookWebpackError;

/**
 * @param {Error***REMOVED*** error an error
 * @param {string***REMOVED*** hook name of the hook
 * @returns {WebpackError***REMOVED*** a webpack error
 */
const makeWebpackError = (error, hook) => {
	if (error instanceof WebpackError) return error;
	return new HookWebpackError(error, hook);
***REMOVED***;
module.exports.makeWebpackError = makeWebpackError;

/**
 * @template T
 * @param {(err: WebpackError | null, result?: T) => void***REMOVED*** callback webpack error callback
 * @param {string***REMOVED*** hook name of hook
 * @returns {Callback<T>***REMOVED*** generic callback
 */
const makeWebpackErrorCallback = (callback, hook) => (err, result) => {
	if (err) {
		if (err instanceof WebpackError) {
			callback(err);
			return;
		***REMOVED***
		callback(new HookWebpackError(err, hook));
		return;
	***REMOVED***
	callback(null, result);
***REMOVED***;

module.exports.makeWebpackErrorCallback = makeWebpackErrorCallback;

/**
 * @template T
 * @param {() => T***REMOVED*** fn function which will be wrapping in try catch
 * @param {string***REMOVED*** hook name of hook
 * @returns {T***REMOVED*** the result
 */
const tryRunOrWebpackError = (fn, hook) => {
	let r;
	try {
		r = fn();
	***REMOVED*** catch (err) {
		if (err instanceof WebpackError) {
			throw err;
		***REMOVED***
		throw new HookWebpackError(/** @type {Error***REMOVED*** */ (err), hook);
	***REMOVED***
	return r;
***REMOVED***;

module.exports.tryRunOrWebpackError = tryRunOrWebpackError;
