/**
 * @fileoverview Enforce event handler naming conventions in JSX
 * @author Jake Marsh
 */

'use strict';

const minimatch = require('minimatch');
const docsUrl = require('../util/docsUrl');
const getText = require('../util/eslint').getText;
const report = require('../util/report');

// ------------------------------------------------------------------------------
// Rule Definition
// ------------------------------------------------------------------------------

const messages = {
  badHandlerName: 'Handler function for {{propKey***REMOVED******REMOVED*** prop key must be a camelCase name beginning with \'{{handlerPrefix***REMOVED******REMOVED***\' only',
  badPropKey: 'Prop key for {{propValue***REMOVED******REMOVED*** must begin with \'{{handlerPropPrefix***REMOVED******REMOVED***\'',
***REMOVED***;

function isPrefixDisabled(prefix) {
  return prefix === false;
***REMOVED***

function isInlineHandler(node) {
  return node.value.expression.type === 'ArrowFunctionExpression';
***REMOVED***

/** @type {import('eslint').Rule.RuleModule***REMOVED*** */
module.exports = {
  meta: {
    docs: {
      description: 'Enforce event handler naming conventions in JSX',
      category: 'Stylistic Issues',
      recommended: false,
      url: docsUrl('jsx-handler-names'),
    ***REMOVED***,

    messages,

    schema: [{
      anyOf: [
        {
          type: 'object',
          properties: {
            eventHandlerPrefix: { type: 'string' ***REMOVED***,
            eventHandlerPropPrefix: { type: 'string' ***REMOVED***,
            checkLocalVariables: { type: 'boolean' ***REMOVED***,
            checkInlineFunction: { type: 'boolean' ***REMOVED***,
            ignoreComponentNames: {
              type: 'array',
              uniqueItems: true,
              items: { type: 'string' ***REMOVED***,
            ***REMOVED***,
          ***REMOVED***,
          additionalProperties: false,
        ***REMOVED***, {
          type: 'object',
          properties: {
            eventHandlerPrefix: { type: 'string' ***REMOVED***,
            eventHandlerPropPrefix: {
              type: 'boolean',
              enum: [false],
            ***REMOVED***,
            checkLocalVariables: { type: 'boolean' ***REMOVED***,
            checkInlineFunction: { type: 'boolean' ***REMOVED***,
            ignoreComponentNames: {
              type: 'array',
              uniqueItems: true,
              items: { type: 'string' ***REMOVED***,
            ***REMOVED***,
          ***REMOVED***,
          additionalProperties: false,
        ***REMOVED***, {
          type: 'object',
          properties: {
            eventHandlerPrefix: {
              type: 'boolean',
              enum: [false],
            ***REMOVED***,
            eventHandlerPropPrefix: { type: 'string' ***REMOVED***,
            checkLocalVariables: { type: 'boolean' ***REMOVED***,
            checkInlineFunction: { type: 'boolean' ***REMOVED***,
            ignoreComponentNames: {
              type: 'array',
              uniqueItems: true,
              items: { type: 'string' ***REMOVED***,
            ***REMOVED***,
          ***REMOVED***,
          additionalProperties: false,
        ***REMOVED***, {
          type: 'object',
          properties: {
            checkLocalVariables: { type: 'boolean' ***REMOVED***,
          ***REMOVED***,
          additionalProperties: false,
        ***REMOVED***, {
          type: 'object',
          properties: {
            checkInlineFunction: { type: 'boolean' ***REMOVED***,
          ***REMOVED***,
          additionalProperties: false,
        ***REMOVED***,
        {
          type: 'object',
          properties: {
            ignoreComponentNames: {
              type: 'array',
              uniqueItems: true,
              items: { type: 'string' ***REMOVED***,
            ***REMOVED***,
          ***REMOVED***,
        ***REMOVED***,
      ],
    ***REMOVED***],
  ***REMOVED***,

  create(context) {
    const configuration = context.options[0] || {***REMOVED***;

    const eventHandlerPrefix = isPrefixDisabled(configuration.eventHandlerPrefix)
      ? null
      : configuration.eventHandlerPrefix || 'handle';
    const eventHandlerPropPrefix = isPrefixDisabled(configuration.eventHandlerPropPrefix)
      ? null
      : configuration.eventHandlerPropPrefix || 'on';

    const EVENT_HANDLER_REGEX = !eventHandlerPrefix
      ? null
      : new RegExp(`^((props\\.${eventHandlerPropPrefix || ''***REMOVED***)|((.*\\.)?${eventHandlerPrefix***REMOVED***))[0-9]*[A-Z].*$`);
    const PROP_EVENT_HANDLER_REGEX = !eventHandlerPropPrefix
      ? null
      : new RegExp(`^(${eventHandlerPropPrefix***REMOVED***[A-Z].*|ref)$`);

    const checkLocal = !!configuration.checkLocalVariables;

    const checkInlineFunction = !!configuration.checkInlineFunction;

    const ignoreComponentNames = configuration.ignoreComponentNames || [];

    return {
      JSXAttribute(node) {
        const componentName = node.parent.name.name;

        const isComponentNameIgnored = ignoreComponentNames.some((ignoredComponentNamePattern) => minimatch(
          componentName,
          ignoredComponentNamePattern
        ));

        if (
          !node.value
          || !node.value.expression
          || (!checkInlineFunction && isInlineHandler(node))
          || (
            !checkLocal
            && (isInlineHandler(node)
              ? !node.value.expression.body.callee || !node.value.expression.body.callee.object
              : !node.value.expression.object
            )
          )
          || isComponentNameIgnored
        ) {
          return;
        ***REMOVED***

        const propKey = typeof node.name === 'object' ? node.name.name : node.name;
        const expression = node.value.expression;
        const propValue = getText(
          context,
          checkInlineFunction && isInlineHandler(node) ? expression.body.callee : expression
        ).replace(/\s*/g, '').replace(/^this\.|.*::/, '');

        if (propKey === 'ref') {
          return;
        ***REMOVED***

        const propIsEventHandler = PROP_EVENT_HANDLER_REGEX && PROP_EVENT_HANDLER_REGEX.test(propKey);
        const propFnIsNamedCorrectly = EVENT_HANDLER_REGEX && EVENT_HANDLER_REGEX.test(propValue);

        if (
          propIsEventHandler
          && propFnIsNamedCorrectly !== null
          && !propFnIsNamedCorrectly
        ) {
          report(context, messages.badHandlerName, 'badHandlerName', {
            node,
            data: {
              propKey,
              handlerPrefix: eventHandlerPrefix,
            ***REMOVED***,
          ***REMOVED***);
        ***REMOVED*** else if (
          propFnIsNamedCorrectly
          && propIsEventHandler !== null
          && !propIsEventHandler
        ) {
          report(context, messages.badPropKey, 'badPropKey', {
            node,
            data: {
              propValue,
              handlerPropPrefix: eventHandlerPropPrefix,
            ***REMOVED***,
          ***REMOVED***);
        ***REMOVED***
      ***REMOVED***,
    ***REMOVED***;
  ***REMOVED***,
***REMOVED***;
