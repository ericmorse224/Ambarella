"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
***REMOVED***);
exports.default = void 0;

var _ajv = _interopRequireDefault(require("ajv"));

var _ajvKeywords = _interopRequireDefault(require("ajv-keywords"));

var _absolutePath = _interopRequireDefault(require("./keywords/absolutePath"));

var _ValidationError = _interopRequireDefault(require("./ValidationError"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj ***REMOVED***; ***REMOVED***

/** @typedef {import("json-schema").JSONSchema4***REMOVED*** JSONSchema4 */

/** @typedef {import("json-schema").JSONSchema6***REMOVED*** JSONSchema6 */

/** @typedef {import("json-schema").JSONSchema7***REMOVED*** JSONSchema7 */

/** @typedef {import("ajv").ErrorObject***REMOVED*** ErrorObject */

/**
 * @typedef {Object***REMOVED*** Extend
 * @property {number=***REMOVED*** formatMinimum
 * @property {number=***REMOVED*** formatMaximum
 * @property {boolean=***REMOVED*** formatExclusiveMinimum
 * @property {boolean=***REMOVED*** formatExclusiveMaximum
 */

/** @typedef {(JSONSchema4 | JSONSchema6 | JSONSchema7) & Extend***REMOVED*** Schema */

/** @typedef {ErrorObject & { children?: Array<ErrorObject>***REMOVED******REMOVED*** SchemaUtilErrorObject */

/**
 * @callback PostFormatter
 * @param {string***REMOVED*** formattedError
 * @param {SchemaUtilErrorObject***REMOVED*** error
 * @returns {string***REMOVED***
 */

/**
 * @typedef {Object***REMOVED*** ValidationErrorConfiguration
 * @property {string=***REMOVED*** name
 * @property {string=***REMOVED*** baseDataPath
 * @property {PostFormatter=***REMOVED*** postFormatter
 */
const ajv = new _ajv.default({
  allErrors: true,
  verbose: true,
  $data: true
***REMOVED***);
(0, _ajvKeywords.default)(ajv, ['instanceof', 'formatMinimum', 'formatMaximum', 'patternRequired']); // Custom keywords

(0, _absolutePath.default)(ajv);
/**
 * @param {Schema***REMOVED*** schema
 * @param {Array<object> | object***REMOVED*** options
 * @param {ValidationErrorConfiguration=***REMOVED*** configuration
 * @returns {void***REMOVED***
 */

function validate(schema, options, configuration) {
  let errors = [];

  if (Array.isArray(options)) {
    errors = Array.from(options, nestedOptions => validateObject(schema, nestedOptions));
    errors.forEach((list, idx) => {
      const applyPrefix =
      /**
       * @param {SchemaUtilErrorObject***REMOVED*** error
       */
      error => {
        // eslint-disable-next-line no-param-reassign
        error.dataPath = `[${idx***REMOVED***]${error.dataPath***REMOVED***`;

        if (error.children) {
          error.children.forEach(applyPrefix);
        ***REMOVED***
      ***REMOVED***;

      list.forEach(applyPrefix);
    ***REMOVED***);
    errors = errors.reduce((arr, items) => {
      arr.push(...items);
      return arr;
    ***REMOVED***, []);
  ***REMOVED*** else {
    errors = validateObject(schema, options);
  ***REMOVED***

  if (errors.length > 0) {
    throw new _ValidationError.default(errors, schema, configuration);
  ***REMOVED***
***REMOVED***
/**
 * @param {Schema***REMOVED*** schema
 * @param {Array<object> | object***REMOVED*** options
 * @returns {Array<SchemaUtilErrorObject>***REMOVED***
 */


function validateObject(schema, options) {
  const compiledSchema = ajv.compile(schema);
  const valid = compiledSchema(options);
  if (valid) return [];
  return compiledSchema.errors ? filterErrors(compiledSchema.errors) : [];
***REMOVED***
/**
 * @param {Array<ErrorObject>***REMOVED*** errors
 * @returns {Array<SchemaUtilErrorObject>***REMOVED***
 */


function filterErrors(errors) {
  /** @type {Array<SchemaUtilErrorObject>***REMOVED*** */
  let newErrors = [];

  for (const error of
  /** @type {Array<SchemaUtilErrorObject>***REMOVED*** */
  errors) {
    const {
      dataPath
    ***REMOVED*** = error;
    /** @type {Array<SchemaUtilErrorObject>***REMOVED*** */

    let children = [];
    newErrors = newErrors.filter(oldError => {
      if (oldError.dataPath.includes(dataPath)) {
        if (oldError.children) {
          children = children.concat(oldError.children.slice(0));
        ***REMOVED*** // eslint-disable-next-line no-undefined, no-param-reassign


        oldError.children = undefined;
        children.push(oldError);
        return false;
      ***REMOVED***

      return true;
    ***REMOVED***);

    if (children.length) {
      error.children = children;
    ***REMOVED***

    newErrors.push(error);
  ***REMOVED***

  return newErrors;
***REMOVED*** // TODO change after resolve https://github.com/microsoft/TypeScript/issues/34994


validate.ValidationError = _ValidationError.default;
validate.ValidateError = _ValidationError.default;
var _default = validate;
exports.default = _default;