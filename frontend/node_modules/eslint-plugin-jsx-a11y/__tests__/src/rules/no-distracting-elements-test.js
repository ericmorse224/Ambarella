/**
 * @fileoverview Enforce distracting elements are not used.
 * @author Ethan Cohen
 */

// -----------------------------------------------------------------------------
// Requirements
// -----------------------------------------------------------------------------

import { RuleTester ***REMOVED*** from 'eslint';
import parserOptionsMapper from '../../__util__/parserOptionsMapper';
import parsers from '../../__util__/helpers/parsers';
import rule from '../../../src/rules/no-distracting-elements';

// -----------------------------------------------------------------------------
// Tests
// -----------------------------------------------------------------------------

const ruleTester = new RuleTester();

const expectedError = (element) => ({
  message: `Do not use <${element***REMOVED***> elements as they can create visual accessibility issues and are deprecated.`,
  type: 'JSXOpeningElement',
***REMOVED***);

const componentsSettings = {
  'jsx-a11y': {
    components: {
      Blink: 'blink',
    ***REMOVED***,
  ***REMOVED***,
***REMOVED***;

ruleTester.run('no-marquee', rule, {
  valid: parsers.all([].concat(
    { code: '<div />;' ***REMOVED***,
    { code: '<Marquee />' ***REMOVED***,
    { code: '<div marquee />' ***REMOVED***,
    { code: '<Blink />' ***REMOVED***,
    { code: '<div blink />' ***REMOVED***,
  )).map(parserOptionsMapper),
  invalid: parsers.all([].concat(
    { code: '<marquee />', errors: [expectedError('marquee')] ***REMOVED***,
    { code: '<marquee {...props***REMOVED*** />', errors: [expectedError('marquee')] ***REMOVED***,
    { code: '<marquee lang={undefined***REMOVED*** />', errors: [expectedError('marquee')] ***REMOVED***,
    { code: '<blink />', errors: [expectedError('blink')] ***REMOVED***,
    { code: '<blink {...props***REMOVED*** />', errors: [expectedError('blink')] ***REMOVED***,
    { code: '<blink foo={undefined***REMOVED*** />', errors: [expectedError('blink')] ***REMOVED***,
    { code: '<Blink />', settings: componentsSettings, errors: [expectedError('blink')] ***REMOVED***,
  )).map(parserOptionsMapper),
***REMOVED***);
