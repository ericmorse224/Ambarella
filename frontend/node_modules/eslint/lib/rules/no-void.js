/**
 * @fileoverview Rule to disallow use of void operator.
 * @author Mike Sidorov
 */
"use strict";

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

/** @type {import('../types').Rule.RuleModule***REMOVED*** */
module.exports = {
	meta: {
		type: "suggestion",

		defaultOptions: [
			{
				allowAsStatement: false,
			***REMOVED***,
		],

		docs: {
			description: "Disallow `void` operators",
			recommended: false,
			frozen: true,
			url: "https://eslint.org/docs/latest/rules/no-void",
		***REMOVED***,

		messages: {
			noVoid: "Expected 'undefined' and instead saw 'void'.",
		***REMOVED***,

		schema: [
			{
				type: "object",
				properties: {
					allowAsStatement: {
						type: "boolean",
					***REMOVED***,
				***REMOVED***,
				additionalProperties: false,
			***REMOVED***,
		],
	***REMOVED***,

	create(context) {
		const [{ allowAsStatement ***REMOVED***] = context.options;

		//--------------------------------------------------------------------------
		// Public
		//--------------------------------------------------------------------------

		return {
			'UnaryExpression[operator="void"]'(node) {
				if (
					allowAsStatement &&
					node.parent &&
					node.parent.type === "ExpressionStatement"
				) {
					return;
				***REMOVED***
				context.report({
					node,
					messageId: "noVoid",
				***REMOVED***);
			***REMOVED***,
		***REMOVED***;
	***REMOVED***,
***REMOVED***;
