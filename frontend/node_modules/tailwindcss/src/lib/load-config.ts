import jitiFactory from 'jiti'
import { transform ***REMOVED*** from 'sucrase'

import { Config ***REMOVED*** from '../../types/config'

let jiti: ReturnType<typeof jitiFactory> | null = null

// @internal
// This WILL be removed in some future release
// If you rely on this your stuff WILL break
export function useCustomJiti(_jiti: () => ReturnType<typeof jitiFactory>) {
  jiti = _jiti()
***REMOVED***

function lazyJiti() {
  return (
    jiti ??
    (jiti = jitiFactory(__filename, {
      interopDefault: true,
      transform: (opts) => {
        // Sucrase can't transform import.meta so we have to use Babel
        if (opts.source.includes('import.meta')) {
          return require('jiti/dist/babel.js')(opts)
        ***REMOVED***

        return transform(opts.source, {
          transforms: ['typescript', 'imports'],
        ***REMOVED***)
      ***REMOVED***,
    ***REMOVED***))
  )
***REMOVED***

export function loadConfig(path: string): Config {
  let config = (function () {
    if (!path) return {***REMOVED***

    // Always use jiti for now. There is a a bug that occurs in Node v22.12+
    // where imported files return invalid results
    return lazyJiti()(path)

    // Always use jiti for ESM or TS files
    if (
      path &&
      (path.endsWith('.mjs') ||
        path.endsWith('.ts') ||
        path.endsWith('.cts') ||
        path.endsWith('.mts'))
    ) {
      return lazyJiti()(path)
    ***REMOVED***

    try {
      return path ? require(path) : {***REMOVED***
    ***REMOVED*** catch {
      return lazyJiti()(path)
    ***REMOVED***
  ***REMOVED***)()

  return config.default ?? config
***REMOVED***
