{"version":3,"file":"workbox-routing.prod.js","sources":["../_version.js","../utils/constants.js","../utils/normalizeHandler.js","../Route.js","../RegExpRoute.js","../Router.js","../utils/getOrCreateDefaultRouter.js","../NavigationRoute.js","../registerRoute.js","../setCatchHandler.js","../setDefaultHandler.js"],"sourcesContent":["\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:routing:6.5.4'] && _();\n***REMOVED***\ncatch (e) { ***REMOVED***\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * The default HTTP method, 'GET', used when there's no specific method\n * configured for a route.\n *\n * @type {string***REMOVED***\n *\n * @private\n */\nexport const defaultMethod = 'GET';\n/**\n * The list of valid HTTP methods associated with requests that could be routed.\n *\n * @type {Array<string>***REMOVED***\n *\n * @private\n */\nexport const validMethods = [\n    'DELETE',\n    'GET',\n    'HEAD',\n    'PATCH',\n    'POST',\n    'PUT',\n];\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert ***REMOVED*** from 'workbox-core/_private/assert.js';\nimport '../_version.js';\n/**\n * @param {function()|Object***REMOVED*** handler Either a function, or an object with a\n * 'handle' method.\n * @return {Object***REMOVED*** An object with a handle method.\n *\n * @private\n */\nexport const normalizeHandler = (handler) => {\n    if (handler && typeof handler === 'object') {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.hasMethod(handler, 'handle', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'handler',\n            ***REMOVED***);\n        ***REMOVED***\n        return handler;\n    ***REMOVED***\n    else {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(handler, 'function', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'handler',\n            ***REMOVED***);\n        ***REMOVED***\n        return { handle: handler ***REMOVED***;\n    ***REMOVED***\n***REMOVED***;\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert ***REMOVED*** from 'workbox-core/_private/assert.js';\nimport { defaultMethod, validMethods ***REMOVED*** from './utils/constants.js';\nimport { normalizeHandler ***REMOVED*** from './utils/normalizeHandler.js';\nimport './_version.js';\n/**\n * A `Route` consists of a pair of callback functions, \"match\" and \"handler\".\n * The \"match\" callback determine if a route should be used to \"handle\" a\n * request by returning a non-falsy value if it can. The \"handler\" callback\n * is called when there is a match and should return a Promise that resolves\n * to a `Response`.\n *\n * @memberof workbox-routing\n */\nclass Route {\n    /**\n     * Constructor for Route class.\n     *\n     * @param {workbox-routing~matchCallback***REMOVED*** match\n     * A callback function that determines whether the route matches a given\n     * `fetch` event by returning a non-falsy value.\n     * @param {workbox-routing~handlerCallback***REMOVED*** handler A callback\n     * function that returns a Promise resolving to a Response.\n     * @param {string***REMOVED*** [method='GET'] The HTTP method to match the Route\n     * against.\n     */\n    constructor(match, handler, method = defaultMethod) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(match, 'function', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'match',\n            ***REMOVED***);\n            if (method) {\n                assert.isOneOf(method, validMethods, { paramName: 'method' ***REMOVED***);\n            ***REMOVED***\n        ***REMOVED***\n        // These values are referenced directly by Router so cannot be\n        // altered by minificaton.\n        this.handler = normalizeHandler(handler);\n        this.match = match;\n        this.method = method;\n    ***REMOVED***\n    /**\n     *\n     * @param {workbox-routing-handlerCallback***REMOVED*** handler A callback\n     * function that returns a Promise resolving to a Response\n     */\n    setCatchHandler(handler) {\n        this.catchHandler = normalizeHandler(handler);\n    ***REMOVED***\n***REMOVED***\nexport { Route ***REMOVED***;\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert ***REMOVED*** from 'workbox-core/_private/assert.js';\nimport { logger ***REMOVED*** from 'workbox-core/_private/logger.js';\nimport { Route ***REMOVED*** from './Route.js';\nimport './_version.js';\n/**\n * RegExpRoute makes it easy to create a regular expression based\n * {@link workbox-routing.Route***REMOVED***.\n *\n * For same-origin requests the RegExp only needs to match part of the URL. For\n * requests against third-party servers, you must define a RegExp that matches\n * the start of the URL.\n *\n * @memberof workbox-routing\n * @extends workbox-routing.Route\n */\nclass RegExpRoute extends Route {\n    /**\n     * If the regular expression contains\n     * [capture groups]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#grouping-back-references***REMOVED***,\n     * the captured values will be passed to the\n     * {@link workbox-routing~handlerCallback***REMOVED*** `params`\n     * argument.\n     *\n     * @param {RegExp***REMOVED*** regExp The regular expression to match against URLs.\n     * @param {workbox-routing~handlerCallback***REMOVED*** handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {string***REMOVED*** [method='GET'] The HTTP method to match the Route\n     * against.\n     */\n    constructor(regExp, handler, method) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(regExp, RegExp, {\n                moduleName: 'workbox-routing',\n                className: 'RegExpRoute',\n                funcName: 'constructor',\n                paramName: 'pattern',\n            ***REMOVED***);\n        ***REMOVED***\n        const match = ({ url ***REMOVED***) => {\n            const result = regExp.exec(url.href);\n            // Return immediately if there's no match.\n            if (!result) {\n                return;\n            ***REMOVED***\n            // Require that the match start at the first character in the URL string\n            // if it's a cross-origin request.\n            // See https://github.com/GoogleChrome/workbox/issues/281 for the context\n            // behind this behavior.\n            if (url.origin !== location.origin && result.index !== 0) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.debug(`The regular expression '${regExp.toString()***REMOVED***' only partially matched ` +\n                        `against the cross-origin URL '${url.toString()***REMOVED***'. RegExpRoute's will only ` +\n                        `handle cross-origin requests if they match the entire URL.`);\n                ***REMOVED***\n                return;\n            ***REMOVED***\n            // If the route matches, but there aren't any capture groups defined, then\n            // this will return [], which is truthy and therefore sufficient to\n            // indicate a match.\n            // If there are capture groups, then it will return their values.\n            return result.slice(1);\n        ***REMOVED***;\n        super(match, handler, method);\n    ***REMOVED***\n***REMOVED***\nexport { RegExpRoute ***REMOVED***;\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert ***REMOVED*** from 'workbox-core/_private/assert.js';\nimport { getFriendlyURL ***REMOVED*** from 'workbox-core/_private/getFriendlyURL.js';\nimport { defaultMethod ***REMOVED*** from './utils/constants.js';\nimport { logger ***REMOVED*** from 'workbox-core/_private/logger.js';\nimport { normalizeHandler ***REMOVED*** from './utils/normalizeHandler.js';\nimport { WorkboxError ***REMOVED*** from 'workbox-core/_private/WorkboxError.js';\nimport './_version.js';\n/**\n * The Router can be used to process a `FetchEvent` using one or more\n * {@link workbox-routing.Route***REMOVED***, responding with a `Response` if\n * a matching route exists.\n *\n * If no route matches a given a request, the Router will use a \"default\"\n * handler if one is defined.\n *\n * Should the matching Route throw an error, the Router will use a \"catch\"\n * handler if one is defined to gracefully deal with issues and respond with a\n * Request.\n *\n * If a request matches multiple routes, the **earliest** registered route will\n * be used to respond to the request.\n *\n * @memberof workbox-routing\n */\nclass Router {\n    /**\n     * Initializes a new Router.\n     */\n    constructor() {\n        this._routes = new Map();\n        this._defaultHandlerMap = new Map();\n    ***REMOVED***\n    /**\n     * @return {Map<string, Array<workbox-routing.Route>>***REMOVED*** routes A `Map` of HTTP\n     * method name ('GET', etc.) to an array of all the corresponding `Route`\n     * instances that are registered.\n     */\n    get routes() {\n        return this._routes;\n    ***REMOVED***\n    /**\n     * Adds a fetch event listener to respond to events when a route matches\n     * the event's request.\n     */\n    addFetchListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('fetch', ((event) => {\n            const { request ***REMOVED*** = event;\n            const responsePromise = this.handleRequest({ request, event ***REMOVED***);\n            if (responsePromise) {\n                event.respondWith(responsePromise);\n            ***REMOVED***\n        ***REMOVED***));\n    ***REMOVED***\n    /**\n     * Adds a message event listener for URLs to cache from the window.\n     * This is useful to cache resources loaded on the page prior to when the\n     * service worker started controlling it.\n     *\n     * The format of the message data sent from the window should be as follows.\n     * Where the `urlsToCache` array may consist of URL strings or an array of\n     * URL string + `requestInit` object (the same as you'd pass to `fetch()`).\n     *\n     * ```\n     * {\n     *   type: 'CACHE_URLS',\n     *   payload: {\n     *     urlsToCache: [\n     *       './script1.js',\n     *       './script2.js',\n     *       ['./script3.js', {mode: 'no-cors'***REMOVED***],\n     *     ],\n     *   ***REMOVED***,\n     * ***REMOVED***\n     * ```\n     */\n    addCacheListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('message', ((event) => {\n            // event.data is type 'any'\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            if (event.data && event.data.type === 'CACHE_URLS') {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                const { payload ***REMOVED*** = event.data;\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.debug(`Caching URLs from the window`, payload.urlsToCache);\n                ***REMOVED***\n                const requestPromises = Promise.all(payload.urlsToCache.map((entry) => {\n                    if (typeof entry === 'string') {\n                        entry = [entry];\n                    ***REMOVED***\n                    const request = new Request(...entry);\n                    return this.handleRequest({ request, event ***REMOVED***);\n                    // TODO(philipwalton): TypeScript errors without this typecast for\n                    // some reason (probably a bug). The real type here should work but\n                    // doesn't: `Array<Promise<Response> | undefined>`.\n                ***REMOVED***)); // TypeScript\n                event.waitUntil(requestPromises);\n                // If a MessageChannel was used, reply to the message on success.\n                if (event.ports && event.ports[0]) {\n                    void requestPromises.then(() => event.ports[0].postMessage(true));\n                ***REMOVED***\n            ***REMOVED***\n        ***REMOVED***));\n    ***REMOVED***\n    /**\n     * Apply the routing rules to a FetchEvent object to get a Response from an\n     * appropriate Route's handler.\n     *\n     * @param {Object***REMOVED*** options\n     * @param {Request***REMOVED*** options.request The request to handle.\n     * @param {ExtendableEvent***REMOVED*** options.event The event that triggered the\n     *     request.\n     * @return {Promise<Response>|undefined***REMOVED*** A promise is returned if a\n     *     registered route can handle the request. If there is no matching\n     *     route and there's no `defaultHandler`, `undefined` is returned.\n     */\n    handleRequest({ request, event, ***REMOVED***) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'handleRequest',\n                paramName: 'options.request',\n            ***REMOVED***);\n        ***REMOVED***\n        const url = new URL(request.url, location.href);\n        if (!url.protocol.startsWith('http')) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Workbox Router only supports URLs that start with 'http'.`);\n            ***REMOVED***\n            return;\n        ***REMOVED***\n        const sameOrigin = url.origin === location.origin;\n        const { params, route ***REMOVED*** = this.findMatchingRoute({\n            event,\n            request,\n            sameOrigin,\n            url,\n        ***REMOVED***);\n        let handler = route && route.handler;\n        const debugMessages = [];\n        if (process.env.NODE_ENV !== 'production') {\n            if (handler) {\n                debugMessages.push([`Found a route to handle this request:`, route]);\n                if (params) {\n                    debugMessages.push([\n                        `Passing the following params to the route's handler:`,\n                        params,\n                    ]);\n                ***REMOVED***\n            ***REMOVED***\n        ***REMOVED***\n        // If we don't have a handler because there was no matching route, then\n        // fall back to defaultHandler if that's defined.\n        const method = request.method;\n        if (!handler && this._defaultHandlerMap.has(method)) {\n            if (process.env.NODE_ENV !== 'production') {\n                debugMessages.push(`Failed to find a matching route. Falling ` +\n                    `back to the default handler for ${method***REMOVED***.`);\n            ***REMOVED***\n            handler = this._defaultHandlerMap.get(method);\n        ***REMOVED***\n        if (!handler) {\n            if (process.env.NODE_ENV !== 'production') {\n                // No handler so Workbox will do nothing. If logs is set of debug\n                // i.e. verbose, we should print out this information.\n                logger.debug(`No route found for: ${getFriendlyURL(url)***REMOVED***`);\n            ***REMOVED***\n            return;\n        ***REMOVED***\n        if (process.env.NODE_ENV !== 'production') {\n            // We have a handler, meaning Workbox is going to handle the route.\n            // print the routing details to the console.\n            logger.groupCollapsed(`Router is responding to: ${getFriendlyURL(url)***REMOVED***`);\n            debugMessages.forEach((msg) => {\n                if (Array.isArray(msg)) {\n                    logger.log(...msg);\n                ***REMOVED***\n                else {\n                    logger.log(msg);\n                ***REMOVED***\n            ***REMOVED***);\n            logger.groupEnd();\n        ***REMOVED***\n        // Wrap in try and catch in case the handle method throws a synchronous\n        // error. It should still callback to the catch handler.\n        let responsePromise;\n        try {\n            responsePromise = handler.handle({ url, request, event, params ***REMOVED***);\n        ***REMOVED***\n        catch (err) {\n            responsePromise = Promise.reject(err);\n        ***REMOVED***\n        // Get route's catch handler, if it exists\n        const catchHandler = route && route.catchHandler;\n        if (responsePromise instanceof Promise &&\n            (this._catchHandler || catchHandler)) {\n            responsePromise = responsePromise.catch(async (err) => {\n                // If there's a route catch handler, process that first\n                if (catchHandler) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        // Still include URL here as it will be async from the console group\n                        // and may not make sense without the URL\n                        logger.groupCollapsed(`Error thrown when responding to: ` +\n                            ` ${getFriendlyURL(url)***REMOVED***. Falling back to route's Catch Handler.`);\n                        logger.error(`Error thrown by:`, route);\n                        logger.error(err);\n                        logger.groupEnd();\n                    ***REMOVED***\n                    try {\n                        return await catchHandler.handle({ url, request, event, params ***REMOVED***);\n                    ***REMOVED***\n                    catch (catchErr) {\n                        if (catchErr instanceof Error) {\n                            err = catchErr;\n                        ***REMOVED***\n                    ***REMOVED***\n                ***REMOVED***\n                if (this._catchHandler) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        // Still include URL here as it will be async from the console group\n                        // and may not make sense without the URL\n                        logger.groupCollapsed(`Error thrown when responding to: ` +\n                            ` ${getFriendlyURL(url)***REMOVED***. Falling back to global Catch Handler.`);\n                        logger.error(`Error thrown by:`, route);\n                        logger.error(err);\n                        logger.groupEnd();\n                    ***REMOVED***\n                    return this._catchHandler.handle({ url, request, event ***REMOVED***);\n                ***REMOVED***\n                throw err;\n            ***REMOVED***);\n        ***REMOVED***\n        return responsePromise;\n    ***REMOVED***\n    /**\n     * Checks a request and URL (and optionally an event) against the list of\n     * registered routes, and if there's a match, returns the corresponding\n     * route along with any params generated by the match.\n     *\n     * @param {Object***REMOVED*** options\n     * @param {URL***REMOVED*** options.url\n     * @param {boolean***REMOVED*** options.sameOrigin The result of comparing `url.origin`\n     *     against the current origin.\n     * @param {Request***REMOVED*** options.request The request to match.\n     * @param {Event***REMOVED*** options.event The corresponding event.\n     * @return {Object***REMOVED*** An object with `route` and `params` properties.\n     *     They are populated if a matching route was found or `undefined`\n     *     otherwise.\n     */\n    findMatchingRoute({ url, sameOrigin, request, event, ***REMOVED***) {\n        const routes = this._routes.get(request.method) || [];\n        for (const route of routes) {\n            let params;\n            // route.match returns type any, not possible to change right now.\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            const matchResult = route.match({ url, sameOrigin, request, event ***REMOVED***);\n            if (matchResult) {\n                if (process.env.NODE_ENV !== 'production') {\n                    // Warn developers that using an async matchCallback is almost always\n                    // not the right thing to do.\n                    if (matchResult instanceof Promise) {\n                        logger.warn(`While routing ${getFriendlyURL(url)***REMOVED***, an async ` +\n                            `matchCallback function was used. Please convert the ` +\n                            `following route to use a synchronous matchCallback function:`, route);\n                    ***REMOVED***\n                ***REMOVED***\n                // See https://github.com/GoogleChrome/workbox/issues/2079\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                params = matchResult;\n                if (Array.isArray(params) && params.length === 0) {\n                    // Instead of passing an empty array in as params, use undefined.\n                    params = undefined;\n                ***REMOVED***\n                else if (matchResult.constructor === Object && // eslint-disable-line\n                    Object.keys(matchResult).length === 0) {\n                    // Instead of passing an empty object in as params, use undefined.\n                    params = undefined;\n                ***REMOVED***\n                else if (typeof matchResult === 'boolean') {\n                    // For the boolean value true (rather than just something truth-y),\n                    // don't set params.\n                    // See https://github.com/GoogleChrome/workbox/pull/2134#issuecomment-513924353\n                    params = undefined;\n                ***REMOVED***\n                // Return early if have a match.\n                return { route, params ***REMOVED***;\n            ***REMOVED***\n        ***REMOVED***\n        // If no match was found above, return and empty object.\n        return {***REMOVED***;\n    ***REMOVED***\n    /**\n     * Define a default `handler` that's called when no routes explicitly\n     * match the incoming request.\n     *\n     * Each HTTP method ('GET', 'POST', etc.) gets its own default handler.\n     *\n     * Without a default handler, unmatched requests will go against the\n     * network as if there were no service worker present.\n     *\n     * @param {workbox-routing~handlerCallback***REMOVED*** handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {string***REMOVED*** [method='GET'] The HTTP method to associate with this\n     * default handler. Each method has its own default.\n     */\n    setDefaultHandler(handler, method = defaultMethod) {\n        this._defaultHandlerMap.set(method, normalizeHandler(handler));\n    ***REMOVED***\n    /**\n     * If a Route throws an error while handling a request, this `handler`\n     * will be called and given a chance to provide a response.\n     *\n     * @param {workbox-routing~handlerCallback***REMOVED*** handler A callback\n     * function that returns a Promise resulting in a Response.\n     */\n    setCatchHandler(handler) {\n        this._catchHandler = normalizeHandler(handler);\n    ***REMOVED***\n    /**\n     * Registers a route with the router.\n     *\n     * @param {workbox-routing.Route***REMOVED*** route The route to register.\n     */\n    registerRoute(route) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(route, 'object', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            ***REMOVED***);\n            assert.hasMethod(route, 'match', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            ***REMOVED***);\n            assert.isType(route.handler, 'object', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            ***REMOVED***);\n            assert.hasMethod(route.handler, 'handle', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route.handler',\n            ***REMOVED***);\n            assert.isType(route.method, 'string', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route.method',\n            ***REMOVED***);\n        ***REMOVED***\n        if (!this._routes.has(route.method)) {\n            this._routes.set(route.method, []);\n        ***REMOVED***\n        // Give precedence to all of the earlier routes by adding this additional\n        // route to the end of the array.\n        this._routes.get(route.method).push(route);\n    ***REMOVED***\n    /**\n     * Unregisters a route with the router.\n     *\n     * @param {workbox-routing.Route***REMOVED*** route The route to unregister.\n     */\n    unregisterRoute(route) {\n        if (!this._routes.has(route.method)) {\n            throw new WorkboxError('unregister-route-but-not-found-with-method', {\n                method: route.method,\n            ***REMOVED***);\n        ***REMOVED***\n        const routeIndex = this._routes.get(route.method).indexOf(route);\n        if (routeIndex > -1) {\n            this._routes.get(route.method).splice(routeIndex, 1);\n        ***REMOVED***\n        else {\n            throw new WorkboxError('unregister-route-route-not-registered');\n        ***REMOVED***\n    ***REMOVED***\n***REMOVED***\nexport { Router ***REMOVED***;\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { Router ***REMOVED*** from '../Router.js';\nimport '../_version.js';\nlet defaultRouter;\n/**\n * Creates a new, singleton Router instance if one does not exist. If one\n * does already exist, that instance is returned.\n *\n * @private\n * @return {Router***REMOVED***\n */\nexport const getOrCreateDefaultRouter = () => {\n    if (!defaultRouter) {\n        defaultRouter = new Router();\n        // The helpers that use the default Router assume these listeners exist.\n        defaultRouter.addFetchListener();\n        defaultRouter.addCacheListener();\n    ***REMOVED***\n    return defaultRouter;\n***REMOVED***;\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert ***REMOVED*** from 'workbox-core/_private/assert.js';\nimport { logger ***REMOVED*** from 'workbox-core/_private/logger.js';\nimport { Route ***REMOVED*** from './Route.js';\nimport './_version.js';\n/**\n * NavigationRoute makes it easy to create a\n * {@link workbox-routing.Route***REMOVED*** that matches for browser\n * [navigation requests]{@link https://developers.google.com/web/fundamentals/primers/service-workers/high-performance-loading#first_what_are_navigation_requests***REMOVED***.\n *\n * It will only match incoming Requests whose\n * {@link https://fetch.spec.whatwg.org/#concept-request-mode|mode***REMOVED***\n * is set to `navigate`.\n *\n * You can optionally only apply this route to a subset of navigation requests\n * by using one or both of the `denylist` and `allowlist` parameters.\n *\n * @memberof workbox-routing\n * @extends workbox-routing.Route\n */\nclass NavigationRoute extends Route {\n    /**\n     * If both `denylist` and `allowlist` are provided, the `denylist` will\n     * take precedence and the request will not match this route.\n     *\n     * The regular expressions in `allowlist` and `denylist`\n     * are matched against the concatenated\n     * [`pathname`]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/pathname***REMOVED***\n     * and [`search`]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/search***REMOVED***\n     * portions of the requested URL.\n     *\n     * *Note*: These RegExps may be evaluated against every destination URL during\n     * a navigation. Avoid using\n     * [complex RegExps](https://github.com/GoogleChrome/workbox/issues/3077),\n     * or else your users may see delays when navigating your site.\n     *\n     * @param {workbox-routing~handlerCallback***REMOVED*** handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {Object***REMOVED*** options\n     * @param {Array<RegExp>***REMOVED*** [options.denylist] If any of these patterns match,\n     * the route will not handle the request (even if a allowlist RegExp matches).\n     * @param {Array<RegExp>***REMOVED*** [options.allowlist=[/./]] If any of these patterns\n     * match the URL's pathname and search parameter, the route will handle the\n     * request (assuming the denylist doesn't match).\n     */\n    constructor(handler, { allowlist = [/./], denylist = [] ***REMOVED*** = {***REMOVED***) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isArrayOfClass(allowlist, RegExp, {\n                moduleName: 'workbox-routing',\n                className: 'NavigationRoute',\n                funcName: 'constructor',\n                paramName: 'options.allowlist',\n            ***REMOVED***);\n            assert.isArrayOfClass(denylist, RegExp, {\n                moduleName: 'workbox-routing',\n                className: 'NavigationRoute',\n                funcName: 'constructor',\n                paramName: 'options.denylist',\n            ***REMOVED***);\n        ***REMOVED***\n        super((options) => this._match(options), handler);\n        this._allowlist = allowlist;\n        this._denylist = denylist;\n    ***REMOVED***\n    /**\n     * Routes match handler.\n     *\n     * @param {Object***REMOVED*** options\n     * @param {URL***REMOVED*** options.url\n     * @param {Request***REMOVED*** options.request\n     * @return {boolean***REMOVED***\n     *\n     * @private\n     */\n    _match({ url, request ***REMOVED***) {\n        if (request && request.mode !== 'navigate') {\n            return false;\n        ***REMOVED***\n        const pathnameAndSearch = url.pathname + url.search;\n        for (const regExp of this._denylist) {\n            if (regExp.test(pathnameAndSearch)) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.log(`The navigation route ${pathnameAndSearch***REMOVED*** is not ` +\n                        `being used, since the URL matches this denylist pattern: ` +\n                        `${regExp.toString()***REMOVED***`);\n                ***REMOVED***\n                return false;\n            ***REMOVED***\n        ***REMOVED***\n        if (this._allowlist.some((regExp) => regExp.test(pathnameAndSearch))) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`The navigation route ${pathnameAndSearch***REMOVED*** ` + `is being used.`);\n            ***REMOVED***\n            return true;\n        ***REMOVED***\n        if (process.env.NODE_ENV !== 'production') {\n            logger.log(`The navigation route ${pathnameAndSearch***REMOVED*** is not ` +\n                `being used, since the URL being navigated to doesn't ` +\n                `match the allowlist.`);\n        ***REMOVED***\n        return false;\n    ***REMOVED***\n***REMOVED***\nexport { NavigationRoute ***REMOVED***;\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger ***REMOVED*** from 'workbox-core/_private/logger.js';\nimport { WorkboxError ***REMOVED*** from 'workbox-core/_private/WorkboxError.js';\nimport { Route ***REMOVED*** from './Route.js';\nimport { RegExpRoute ***REMOVED*** from './RegExpRoute.js';\nimport { getOrCreateDefaultRouter ***REMOVED*** from './utils/getOrCreateDefaultRouter.js';\nimport './_version.js';\n/**\n * Easily register a RegExp, string, or function with a caching\n * strategy to a singleton Router instance.\n *\n * This method will generate a Route for you if needed and\n * call {@link workbox-routing.Router#registerRoute***REMOVED***.\n *\n * @param {RegExp|string|workbox-routing.Route~matchCallback|workbox-routing.Route***REMOVED*** capture\n * If the capture param is a `Route`, all other arguments will be ignored.\n * @param {workbox-routing~handlerCallback***REMOVED*** [handler] A callback\n * function that returns a Promise resulting in a Response. This parameter\n * is required if `capture` is not a `Route` object.\n * @param {string***REMOVED*** [method='GET'] The HTTP method to match the Route\n * against.\n * @return {workbox-routing.Route***REMOVED*** The generated `Route`.\n *\n * @memberof workbox-routing\n */\nfunction registerRoute(capture, handler, method) {\n    let route;\n    if (typeof capture === 'string') {\n        const captureUrl = new URL(capture, location.href);\n        if (process.env.NODE_ENV !== 'production') {\n            if (!(capture.startsWith('/') || capture.startsWith('http'))) {\n                throw new WorkboxError('invalid-string', {\n                    moduleName: 'workbox-routing',\n                    funcName: 'registerRoute',\n                    paramName: 'capture',\n                ***REMOVED***);\n            ***REMOVED***\n            // We want to check if Express-style wildcards are in the pathname only.\n            // TODO: Remove this log message in v4.\n            const valueToCheck = capture.startsWith('http')\n                ? captureUrl.pathname\n                : capture;\n            // See https://github.com/pillarjs/path-to-regexp#parameters\n            const wildcards = '[*:?+]';\n            if (new RegExp(`${wildcards***REMOVED***`).exec(valueToCheck)) {\n                logger.debug(`The '$capture' parameter contains an Express-style wildcard ` +\n                    `character (${wildcards***REMOVED***). Strings are now always interpreted as ` +\n                    `exact matches; use a RegExp for partial or wildcard matches.`);\n            ***REMOVED***\n        ***REMOVED***\n        const matchCallback = ({ url ***REMOVED***) => {\n            if (process.env.NODE_ENV !== 'production') {\n                if (url.pathname === captureUrl.pathname &&\n                    url.origin !== captureUrl.origin) {\n                    logger.debug(`${capture***REMOVED*** only partially matches the cross-origin URL ` +\n                        `${url.toString()***REMOVED***. This route will only handle cross-origin requests ` +\n                        `if they match the entire URL.`);\n                ***REMOVED***\n            ***REMOVED***\n            return url.href === captureUrl.href;\n        ***REMOVED***;\n        // If `capture` is a string then `handler` and `method` must be present.\n        route = new Route(matchCallback, handler, method);\n    ***REMOVED***\n    else if (capture instanceof RegExp) {\n        // If `capture` is a `RegExp` then `handler` and `method` must be present.\n        route = new RegExpRoute(capture, handler, method);\n    ***REMOVED***\n    else if (typeof capture === 'function') {\n        // If `capture` is a function then `handler` and `method` must be present.\n        route = new Route(capture, handler, method);\n    ***REMOVED***\n    else if (capture instanceof Route) {\n        route = capture;\n    ***REMOVED***\n    else {\n        throw new WorkboxError('unsupported-route-type', {\n            moduleName: 'workbox-routing',\n            funcName: 'registerRoute',\n            paramName: 'capture',\n        ***REMOVED***);\n    ***REMOVED***\n    const defaultRouter = getOrCreateDefaultRouter();\n    defaultRouter.registerRoute(route);\n    return route;\n***REMOVED***\nexport { registerRoute ***REMOVED***;\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreateDefaultRouter ***REMOVED*** from './utils/getOrCreateDefaultRouter.js';\nimport './_version.js';\n/**\n * If a Route throws an error while handling a request, this `handler`\n * will be called and given a chance to provide a response.\n *\n * @param {workbox-routing~handlerCallback***REMOVED*** handler A callback\n * function that returns a Promise resulting in a Response.\n *\n * @memberof workbox-routing\n */\nfunction setCatchHandler(handler) {\n    const defaultRouter = getOrCreateDefaultRouter();\n    defaultRouter.setCatchHandler(handler);\n***REMOVED***\nexport { setCatchHandler ***REMOVED***;\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreateDefaultRouter ***REMOVED*** from './utils/getOrCreateDefaultRouter.js';\nimport './_version.js';\n/**\n * Define a default `handler` that's called when no routes explicitly\n * match the incoming request.\n *\n * Without a default handler, unmatched requests will go against the\n * network as if there were no service worker present.\n *\n * @param {workbox-routing~handlerCallback***REMOVED*** handler A callback\n * function that returns a Promise resulting in a Response.\n *\n * @memberof workbox-routing\n */\nfunction setDefaultHandler(handler) {\n    const defaultRouter = getOrCreateDefaultRouter();\n    defaultRouter.setDefaultHandler(handler);\n***REMOVED***\nexport { setDefaultHandler ***REMOVED***;\n"],"names":["self","_","e","normalizeHandler","handler","handle","Route","constructor","match","method","setCatchHandler","catchHandler","RegExpRoute","regExp","url","result","exec","href","origin","location","index","slice","Router","_routes","Map","_defaultHandlerMap","routes","this","addFetchListener","addEventListener","event","request","responsePromise","handleRequest","respondWith","addCacheListener","data","type","payload","requestPromises","Promise","all","urlsToCache","map","entry","Request","waitUntil","ports","then","postMessage","URL","protocol","startsWith","sameOrigin","params","route","findMatchingRoute","has","get","err","reject","_catchHandler","catch","async","catchErr","Error","matchResult","Array","isArray","length","Object","keys","undefined","setDefaultHandler","set","registerRoute","push","unregisterRoute","WorkboxError","routeIndex","indexOf","splice","defaultRouter","getOrCreateDefaultRouter","allowlist","denylist","options","_match","_allowlist","_denylist","mode","pathnameAndSearch","pathname","search","test","some","capture","captureUrl","RegExp","moduleName","funcName","paramName"],"mappings":"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"***REMOVED***