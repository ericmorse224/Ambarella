"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); ***REMOVED***); ***REMOVED***
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); ***REMOVED*** catch (e) { reject(e); ***REMOVED*** ***REMOVED***
        function rejected(value) { try { step(generator["throw"](value)); ***REMOVED*** catch (e) { reject(e); ***REMOVED*** ***REMOVED***
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); ***REMOVED***
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    ***REMOVED***);
***REMOVED***;
Object.defineProperty(exports, "__esModule", { value: true ***REMOVED***);
function createRpcMessageChannel(servicePort, clientPort, linkPorts, unlinkPorts) {
    // if there is not link and unlink function provided, we assume that channel is automatically linked
    let arePortsLinked = !linkPorts && !unlinkPorts;
    return {
        servicePort,
        clientPort,
        isOpen: () => servicePort.isOpen() && clientPort.isOpen() && arePortsLinked,
        open: () => __awaiter(this, void 0, void 0, function* () {
            if (!servicePort.isOpen()) {
                yield servicePort.open();
            ***REMOVED***
            if (!clientPort.isOpen()) {
                yield clientPort.open();
            ***REMOVED***
            if (!arePortsLinked) {
                if (linkPorts) {
                    yield linkPorts();
                ***REMOVED***
                arePortsLinked = true;
            ***REMOVED***
        ***REMOVED***),
        close: () => __awaiter(this, void 0, void 0, function* () {
            if (arePortsLinked) {
                if (unlinkPorts) {
                    yield unlinkPorts();
                ***REMOVED***
                arePortsLinked = false;
            ***REMOVED***
            if (servicePort.isOpen()) {
                yield servicePort.close();
            ***REMOVED***
            if (clientPort.isOpen()) {
                yield clientPort.close();
            ***REMOVED***
        ***REMOVED***),
    ***REMOVED***;
***REMOVED***
exports.createRpcMessageChannel = createRpcMessageChannel;
