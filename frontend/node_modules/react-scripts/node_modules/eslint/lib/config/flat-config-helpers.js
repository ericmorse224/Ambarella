/**
 * @fileoverview Shared functions to work with configs.
 * @author Nicholas C. Zakas
 */

"use strict";

//-----------------------------------------------------------------------------
// Functions
//-----------------------------------------------------------------------------

/**
 * Parses a ruleId into its plugin and rule parts.
 * @param {string***REMOVED*** ruleId The rule ID to parse.
 * @returns {{pluginName:string,ruleName:string***REMOVED******REMOVED*** The plugin and rule
 *      parts of the ruleId;
 */
function parseRuleId(ruleId) {
    let pluginName, ruleName;

    // distinguish between core rules and plugin rules
    if (ruleId.includes("/")) {

        // mimic scoped npm packages
        if (ruleId.startsWith("@")) {
            pluginName = ruleId.slice(0, ruleId.lastIndexOf("/"));
        ***REMOVED*** else {
            pluginName = ruleId.slice(0, ruleId.indexOf("/"));
        ***REMOVED***

        ruleName = ruleId.slice(pluginName.length + 1);
    ***REMOVED*** else {
        pluginName = "@";
        ruleName = ruleId;
    ***REMOVED***

    return {
        pluginName,
        ruleName
    ***REMOVED***;
***REMOVED***

/**
 * Retrieves a rule instance from a given config based on the ruleId.
 * @param {string***REMOVED*** ruleId The rule ID to look for.
 * @param {FlatConfig***REMOVED*** config The config to search.
 * @returns {import("../shared/types").Rule|undefined***REMOVED*** The rule if found
 *      or undefined if not.
 */
function getRuleFromConfig(ruleId, config) {

    const { pluginName, ruleName ***REMOVED*** = parseRuleId(ruleId);

    const plugin = config.plugins && config.plugins[pluginName];
    let rule = plugin && plugin.rules && plugin.rules[ruleName];


    // normalize function rules into objects
    if (rule && typeof rule === "function") {
        rule = {
            create: rule
        ***REMOVED***;
    ***REMOVED***

    return rule;
***REMOVED***

/**
 * Gets a complete options schema for a rule.
 * @param {{create: Function, schema: (Array|null)***REMOVED******REMOVED*** rule A new-style rule object
 * @returns {Object***REMOVED*** JSON Schema for the rule's options.
 */
function getRuleOptionsSchema(rule) {

    if (!rule) {
        return null;
    ***REMOVED***

    const schema = rule.schema || rule.meta && rule.meta.schema;

    if (Array.isArray(schema)) {
        if (schema.length) {
            return {
                type: "array",
                items: schema,
                minItems: 0,
                maxItems: schema.length
            ***REMOVED***;
        ***REMOVED***
        return {
            type: "array",
            minItems: 0,
            maxItems: 0
        ***REMOVED***;

    ***REMOVED***

    // Given a full schema, leave it alone
    return schema || null;
***REMOVED***


//-----------------------------------------------------------------------------
// Exports
//-----------------------------------------------------------------------------

module.exports = {
    parseRuleId,
    getRuleFromConfig,
    getRuleOptionsSchema
***REMOVED***;
