"use strict";

const os = require("os");

const {
  SourceMapConsumer
***REMOVED*** = require("source-map");

const {
  validate
***REMOVED*** = require("schema-utils");

const serialize = require("serialize-javascript");

const {
  Worker
***REMOVED*** = require("jest-worker");

const {
  throttleAll,
  cssnanoMinify,
  cssoMinify,
  cleanCssMinify,
  esbuildMinify,
  parcelCssMinify
***REMOVED*** = require("./utils");

const schema = require("./options.json");

const {
  minify
***REMOVED*** = require("./minify");
/** @typedef {import("schema-utils/declarations/validate").Schema***REMOVED*** Schema */

/** @typedef {import("webpack").Compiler***REMOVED*** Compiler */

/** @typedef {import("webpack").Compilation***REMOVED*** Compilation */

/** @typedef {import("webpack").WebpackError***REMOVED*** WebpackError */

/** @typedef {import("jest-worker").Worker***REMOVED*** JestWorker */

/** @typedef {import("source-map").RawSourceMap***REMOVED*** RawSourceMap */

/** @typedef {import("webpack").Asset***REMOVED*** Asset */

/** @typedef {import("postcss").ProcessOptions***REMOVED*** ProcessOptions */

/** @typedef {import("postcss").Syntax***REMOVED*** Syntax */

/** @typedef {import("postcss").Parser***REMOVED*** Parser */

/** @typedef {import("postcss").Stringifier***REMOVED*** Stringifier */

/**
 * @typedef {Object***REMOVED*** CssNanoOptions
 * @property {string***REMOVED*** [configFile]
 * @property {[string, object] | string | undefined***REMOVED*** [preset]
 */

/** @typedef {Error & { plugin?: string, text?: string, source?: string ***REMOVED*** | string***REMOVED*** Warning */

/**
 * @typedef {Object***REMOVED*** WarningObject
 * @property {string***REMOVED*** message
 * @property {string***REMOVED*** [plugin]
 * @property {string***REMOVED*** [text]
 * @property {number***REMOVED*** [line]
 * @property {number***REMOVED*** [column]
 */

/**
 * @typedef {Object***REMOVED*** ErrorObject
 * @property {string***REMOVED*** message
 * @property {number***REMOVED*** [line]
 * @property {number***REMOVED*** [column]
 * @property {string***REMOVED*** [stack]
 */

/**
 * @typedef {Object***REMOVED*** MinimizedResult
 * @property {string***REMOVED*** code
 * @property {RawSourceMap***REMOVED*** [map]
 * @property {Array<Error | ErrorObject| string>***REMOVED*** [errors]
 * @property {Array<Warning | WarningObject | string>***REMOVED*** [warnings]
 */

/**
 * @typedef {{ [file: string]: string ***REMOVED******REMOVED*** Input
 */

/**
 * @typedef {{ [key: string]: any ***REMOVED******REMOVED*** CustomOptions
 */

/**
 * @template T
 * @typedef {T extends infer U ? U : CustomOptions***REMOVED*** InferDefaultType
 */

/**
 * @template T
 * @callback BasicMinimizerImplementation
 * @param {Input***REMOVED*** input
 * @param {RawSourceMap | undefined***REMOVED*** sourceMap
 * @param {InferDefaultType<T>***REMOVED*** minifyOptions
 * @returns {Promise<MinimizedResult>***REMOVED***
 */

/**
 * @template T
 * @typedef {T extends any[] ? { [P in keyof T]: BasicMinimizerImplementation<T[P]>; ***REMOVED*** : BasicMinimizerImplementation<T>***REMOVED*** MinimizerImplementation
 */

/**
 * @template T
 * @typedef {T extends any[] ? { [P in keyof T]?: InferDefaultType<T[P]> ***REMOVED*** : InferDefaultType<T>***REMOVED*** MinimizerOptions
 */

/**
 * @template T
 * @typedef {Object***REMOVED*** InternalOptions
 * @property {string***REMOVED*** name
 * @property {string***REMOVED*** input
 * @property {RawSourceMap | undefined***REMOVED*** inputSourceMap
 * @property {{ implementation: MinimizerImplementation<T>, options: MinimizerOptions<T> ***REMOVED******REMOVED*** minimizer
 */

/**
 * @typedef InternalResult
 * @property {Array<{ code: string, map: RawSourceMap | undefined ***REMOVED***>***REMOVED*** outputs
 * @property {Array<Warning | WarningObject | string>***REMOVED*** warnings
 * @property {Array<Error | ErrorObject | string>***REMOVED*** errors
 */

/** @typedef {undefined | boolean | number***REMOVED*** Parallel */

/** @typedef {RegExp | string***REMOVED*** Rule */

/** @typedef {Rule[] | Rule***REMOVED*** Rules */

/** @typedef {(warning: Warning | WarningObject | string, file: string, source?: string) => boolean***REMOVED*** WarningsFilter */

/**
 * @typedef {Object***REMOVED*** BasePluginOptions
 * @property {Rules***REMOVED*** [test]
 * @property {Rules***REMOVED*** [include]
 * @property {Rules***REMOVED*** [exclude]
 * @property {WarningsFilter***REMOVED*** [warningsFilter]
 * @property {Parallel***REMOVED*** [parallel]
 */

/**
 * @template T
 * @typedef {JestWorker & { transform: (options: string) => InternalResult, minify: (options: InternalOptions<T>) => InternalResult ***REMOVED******REMOVED*** MinimizerWorker
 */

/**
 * @typedef{ProcessOptions | { from?: string,  to?: string, parser?: string | Syntax | Parser, stringifier?: string | Syntax | Stringifier, syntax?: string | Syntax ***REMOVED*** ***REMOVED*** ProcessOptionsExtender
 */

/**
 * @typedef {CssNanoOptions & { processorOptions?: ProcessOptionsExtender ***REMOVED******REMOVED*** CssNanoOptionsExtended
 */

/**
 * @template T
 * @typedef {T extends CssNanoOptionsExtended ? { minify?: MinimizerImplementation<T> | undefined, minimizerOptions?: MinimizerOptions<T> | undefined ***REMOVED*** : { minify: MinimizerImplementation<T>, minimizerOptions?: MinimizerOptions<T> | undefined ***REMOVED******REMOVED*** DefinedDefaultMinimizerAndOptions
 */

/**
 * @template T
 * @typedef {BasePluginOptions & { minimizer: { implementation: MinimizerImplementation<T>, options: MinimizerOptions<T> ***REMOVED*** ***REMOVED******REMOVED*** InternalPluginOptions
 */


const warningRegex = /\s.+:+([0-9]+):+([0-9]+)/;
/**
 * @template [T=CssNanoOptionsExtended]
 */

class CssMinimizerPlugin {
  /**
   * @param {BasePluginOptions & DefinedDefaultMinimizerAndOptions<T>***REMOVED*** [options]
   */
  constructor(options) {
    validate(
    /** @type {Schema***REMOVED*** */
    schema, options || {***REMOVED***, {
      name: "Css Minimizer Plugin",
      baseDataPath: "options"
    ***REMOVED***);
    const {
      minify =
      /** @type {BasicMinimizerImplementation<T>***REMOVED*** */
      cssnanoMinify,
      minimizerOptions =
      /** @type {MinimizerOptions<T>***REMOVED*** */
      {***REMOVED***,
      test = /\.css(\?.*)?$/i,
      warningsFilter = () => true,
      parallel = true,
      include,
      exclude
    ***REMOVED*** = options || {***REMOVED***;
    /**
     * @private
     * @type {InternalPluginOptions<T>***REMOVED***
     */

    this.options = {
      test,
      warningsFilter,
      parallel,
      include,
      exclude,
      minimizer: {
        implementation:
        /** @type {MinimizerImplementation<T>***REMOVED*** */
        minify,
        options: minimizerOptions
      ***REMOVED***
    ***REMOVED***;
  ***REMOVED***
  /**
   * @private
   * @param {any***REMOVED*** input
   * @returns {boolean***REMOVED***
   */


  static isSourceMap(input) {
    // All required options for `new SourceMapConsumer(...options)`
    // https://github.com/mozilla/source-map#new-sourcemapconsumerrawsourcemap
    return Boolean(input && input.version && input.sources && Array.isArray(input.sources) && typeof input.mappings === "string");
  ***REMOVED***
  /**
   * @private
   * @param {Warning | WarningObject | string***REMOVED*** warning
   * @param {string***REMOVED*** file
   * @param {WarningsFilter***REMOVED*** [warningsFilter]
   * @param {SourceMapConsumer***REMOVED*** [sourceMap]
   * @param {Compilation["requestShortener"]***REMOVED*** [requestShortener]
   * @returns {Error & { hideStack?: boolean, file?: string ***REMOVED*** | undefined***REMOVED***
   */


  static buildWarning(warning, file, warningsFilter, sourceMap, requestShortener) {
    let warningMessage = typeof warning === "string" ? warning : `${warning.plugin ? `[${warning.plugin***REMOVED***] ` : ""***REMOVED***${warning.text || warning.message***REMOVED***`;
    let locationMessage = "";
    let source;

    if (sourceMap) {
      let line;
      let column;

      if (typeof warning === "string") {
        const match = warningRegex.exec(warning);

        if (match) {
          line = +match[1];
          column = +match[2];
        ***REMOVED***
      ***REMOVED*** else {
        ({
          line,
          column
        ***REMOVED*** =
        /** @type {WarningObject***REMOVED*** */
        warning);
      ***REMOVED***

      if (line && column) {
        const original = sourceMap.originalPositionFor({
          line,
          column
        ***REMOVED***);

        if (original && original.source && original.source !== file && requestShortener) {
          ({
            source
          ***REMOVED*** = original);
          warningMessage = `${warningMessage.replace(warningRegex, "")***REMOVED***`;
          locationMessage = `${requestShortener.shorten(original.source)***REMOVED***:${original.line***REMOVED***:${original.column***REMOVED***`;
        ***REMOVED***
      ***REMOVED***
    ***REMOVED***

    if (warningsFilter && !warningsFilter(warning, file, source)) {
      return;
    ***REMOVED***
    /**
     * @type {Error & { hideStack?: boolean, file?: string ***REMOVED******REMOVED***
     */


    const builtWarning = new Error(`${file***REMOVED*** from Css Minimizer plugin\n${warningMessage***REMOVED***${locationMessage ? ` ${locationMessage***REMOVED***` : ""***REMOVED***`);
    builtWarning.name = "Warning";
    builtWarning.hideStack = true;
    builtWarning.file = file; // eslint-disable-next-line consistent-return

    return builtWarning;
  ***REMOVED***
  /**
   * @private
   * @param {Error | ErrorObject | string***REMOVED*** error
   * @param {string***REMOVED*** file
   * @param {SourceMapConsumer***REMOVED*** [sourceMap]
   * @param {Compilation["requestShortener"]***REMOVED*** [requestShortener]
   * @returns {Error***REMOVED***
   */


  static buildError(error, file, sourceMap, requestShortener) {
    /**
     * @type {Error & { file?: string ***REMOVED******REMOVED***
     */
    let builtError;

    if (typeof error === "string") {
      builtError = new Error(`${file***REMOVED*** from Css Minimizer plugin\n${error***REMOVED***`);
      builtError.file = file;
      return builtError;
    ***REMOVED***

    if (
    /** @type {ErrorObject***REMOVED*** */
    error.line &&
    /** @type {ErrorObject***REMOVED*** */
    error.column) {
      const {
        line,
        column
      ***REMOVED*** =
      /** @type {ErrorObject & { line: number, column: number ***REMOVED******REMOVED*** */
      error;
      const original = sourceMap && sourceMap.originalPositionFor({
        line,
        column
      ***REMOVED***);

      if (original && original.source && requestShortener) {
        builtError = new Error(`${file***REMOVED*** from Css Minimizer plugin\n${error.message***REMOVED*** [${requestShortener.shorten(original.source)***REMOVED***:${original.line***REMOVED***,${original.column***REMOVED***][${file***REMOVED***:${line***REMOVED***,${column***REMOVED***]${error.stack ? `\n${error.stack.split("\n").slice(1).join("\n")***REMOVED***` : ""***REMOVED***`);
        builtError.file = file;
        return builtError;
      ***REMOVED***

      builtError = new Error(`${file***REMOVED*** from Css Minimizer plugin\n${error.message***REMOVED*** [${file***REMOVED***:${line***REMOVED***,${column***REMOVED***]${error.stack ? `\n${error.stack.split("\n").slice(1).join("\n")***REMOVED***` : ""***REMOVED***`);
      builtError.file = file;
      return builtError;
    ***REMOVED***

    if (error.stack) {
      builtError = new Error(`${file***REMOVED*** from Css Minimizer plugin\n${error.stack***REMOVED***`);
      builtError.file = file;
      return builtError;
    ***REMOVED***

    builtError = new Error(`${file***REMOVED*** from Css Minimizer plugin\n${error.message***REMOVED***`);
    builtError.file = file;
    return builtError;
  ***REMOVED***
  /**
   * @private
   * @param {Parallel***REMOVED*** parallel
   * @returns {number***REMOVED***
   */


  static getAvailableNumberOfCores(parallel) {
    // In some cases cpus() returns undefined
    // https://github.com/nodejs/node/issues/19022
    const cpus = os.cpus() || {
      length: 1
    ***REMOVED***;
    return parallel === true ? cpus.length - 1 : Math.min(Number(parallel) || 0, cpus.length - 1);
  ***REMOVED***
  /**
   * @private
   * @param {Compiler***REMOVED*** compiler
   * @param {Compilation***REMOVED*** compilation
   * @param {Record<string, import("webpack").sources.Source>***REMOVED*** assets
   * @param {{availableNumberOfCores: number***REMOVED******REMOVED*** optimizeOptions
   * @returns {Promise<void>***REMOVED***
   */


  async optimize(compiler, compilation, assets, optimizeOptions) {
    const cache = compilation.getCache("CssMinimizerWebpackPlugin");
    let numberOfAssetsForMinify = 0;
    const assetsForMinify = await Promise.all(Object.keys(typeof assets === "undefined" ? compilation.assets : assets).filter(name => {
      const {
        info
      ***REMOVED*** =
      /** @type {Asset***REMOVED*** */
      compilation.getAsset(name);

      if ( // Skip double minimize assets from child compilation
      info.minimized) {
        return false;
      ***REMOVED***

      if (!compiler.webpack.ModuleFilenameHelpers.matchObject.bind( // eslint-disable-next-line no-undefined
      undefined, this.options)(name)) {
        return false;
      ***REMOVED***

      return true;
    ***REMOVED***).map(async name => {
      const {
        info,
        source
      ***REMOVED*** =
      /** @type {Asset***REMOVED*** */
      compilation.getAsset(name);
      const eTag = cache.getLazyHashedEtag(source);
      const cacheItem = cache.getItemCache(name, eTag);
      const output = await cacheItem.getPromise();

      if (!output) {
        numberOfAssetsForMinify += 1;
      ***REMOVED***

      return {
        name,
        info,
        inputSource: source,
        output,
        cacheItem
      ***REMOVED***;
    ***REMOVED***));

    if (assetsForMinify.length === 0) {
      return;
    ***REMOVED***
    /** @type {undefined | (() => MinimizerWorker<T>)***REMOVED*** */


    let getWorker;
    /** @type {undefined | MinimizerWorker<T>***REMOVED*** */

    let initializedWorker;
    /** @type {undefined | number***REMOVED*** */

    let numberOfWorkers;

    if (optimizeOptions.availableNumberOfCores > 0) {
      // Do not create unnecessary workers when the number of files is less than the available cores, it saves memory
      numberOfWorkers = Math.min(numberOfAssetsForMinify, optimizeOptions.availableNumberOfCores);

      getWorker = () => {
        if (initializedWorker) {
          return initializedWorker;
        ***REMOVED***

        initializedWorker =
        /** @type {MinimizerWorker<T>***REMOVED*** */
        new Worker(require.resolve("./minify"), {
          numWorkers: numberOfWorkers,
          enableWorkerThreads: true
        ***REMOVED***); // https://github.com/facebook/jest/issues/8872#issuecomment-524822081

        const workerStdout = initializedWorker.getStdout();

        if (workerStdout) {
          workerStdout.on("data", chunk => process.stdout.write(chunk));
        ***REMOVED***

        const workerStderr = initializedWorker.getStderr();

        if (workerStderr) {
          workerStderr.on("data", chunk => process.stderr.write(chunk));
        ***REMOVED***

        return initializedWorker;
      ***REMOVED***;
    ***REMOVED***

    const {
      SourceMapSource,
      RawSource
    ***REMOVED*** = compiler.webpack.sources;
    const scheduledTasks = [];

    for (const asset of assetsForMinify) {
      scheduledTasks.push(async () => {
        const {
          name,
          inputSource,
          cacheItem
        ***REMOVED*** = asset;
        let {
          output
        ***REMOVED*** = asset;

        if (!output) {
          let input;
          /** @type {RawSourceMap | undefined***REMOVED*** */

          let inputSourceMap;
          const {
            source: sourceFromInputSource,
            map
          ***REMOVED*** = inputSource.sourceAndMap();
          input = sourceFromInputSource;

          if (map) {
            if (!CssMinimizerPlugin.isSourceMap(map)) {
              compilation.warnings.push(
              /** @type {WebpackError***REMOVED*** */
              new Error(`${name***REMOVED*** contains invalid source map`));
            ***REMOVED*** else {
              inputSourceMap =
              /** @type {RawSourceMap***REMOVED*** */
              map;
            ***REMOVED***
          ***REMOVED***

          if (Buffer.isBuffer(input)) {
            input = input.toString();
          ***REMOVED***
          /**
           * @type {InternalOptions<T>***REMOVED***
           */


          const options = {
            name,
            input,
            inputSourceMap,
            minimizer: {
              implementation: this.options.minimizer.implementation,
              options: this.options.minimizer.options
            ***REMOVED***
          ***REMOVED***;
          let result;

          try {
            result = await (getWorker ? getWorker().transform(serialize(options)) : minify(options));
          ***REMOVED*** catch (error) {
            const hasSourceMap = inputSourceMap && CssMinimizerPlugin.isSourceMap(inputSourceMap);
            compilation.errors.push(
            /** @type {WebpackError***REMOVED*** */
            CssMinimizerPlugin.buildError(
            /** @type {any***REMOVED*** */
            error, name, hasSourceMap ? new SourceMapConsumer(
            /** @type {RawSourceMap***REMOVED*** */
            inputSourceMap) : // eslint-disable-next-line no-undefined
            undefined, // eslint-disable-next-line no-undefined
            hasSourceMap ? compilation.requestShortener : undefined));
            return;
          ***REMOVED***

          output = {
            warnings: [],
            errors: []
          ***REMOVED***;

          for (const item of result.outputs) {
            if (item.map) {
              let originalSource;
              let innerSourceMap;

              if (output.source) {
                ({
                  source: originalSource,
                  map: innerSourceMap
                ***REMOVED*** = output.source.sourceAndMap());
              ***REMOVED*** else {
                originalSource = input;
                innerSourceMap = inputSourceMap;
              ***REMOVED*** // TODO need API for merging source maps in `webpack-source`


              output.source = new SourceMapSource(item.code, name, item.map, originalSource, innerSourceMap, true);
            ***REMOVED*** else {
              output.source = new RawSource(item.code);
            ***REMOVED***
          ***REMOVED***

          if (result.errors && result.errors.length > 0) {
            const hasSourceMap = inputSourceMap && CssMinimizerPlugin.isSourceMap(inputSourceMap);

            for (const error of result.errors) {
              output.warnings.push(CssMinimizerPlugin.buildError(error, name, hasSourceMap ? new SourceMapConsumer(
              /** @type {RawSourceMap***REMOVED*** */
              inputSourceMap) : // eslint-disable-next-line no-undefined
              undefined, // eslint-disable-next-line no-undefined
              hasSourceMap ? compilation.requestShortener : undefined));
            ***REMOVED***
          ***REMOVED***

          if (result.warnings && result.warnings.length > 0) {
            const hasSourceMap = inputSourceMap && CssMinimizerPlugin.isSourceMap(inputSourceMap);

            for (const warning of result.warnings) {
              const buildWarning = CssMinimizerPlugin.buildWarning(warning, name, this.options.warningsFilter, hasSourceMap ? new SourceMapConsumer(
              /** @type {RawSourceMap***REMOVED*** */
              inputSourceMap) : // eslint-disable-next-line no-undefined
              undefined, // eslint-disable-next-line no-undefined
              hasSourceMap ? compilation.requestShortener : undefined);

              if (buildWarning) {
                output.warnings.push(buildWarning);
              ***REMOVED***
            ***REMOVED***
          ***REMOVED***

          await cacheItem.storePromise({
            source: output.source,
            warnings: output.warnings,
            errors: output.errors
          ***REMOVED***);
        ***REMOVED***

        if (output.warnings && output.warnings.length > 0) {
          for (const warning of output.warnings) {
            compilation.warnings.push(warning);
          ***REMOVED***
        ***REMOVED***

        if (output.errors && output.errors.length > 0) {
          for (const error of output.errors) {
            compilation.errors.push(error);
          ***REMOVED***
        ***REMOVED***

        const newInfo = {
          minimized: true
        ***REMOVED***;
        const {
          source
        ***REMOVED*** = output;
        compilation.updateAsset(name, source, newInfo);
      ***REMOVED***);
    ***REMOVED***

    const limit = getWorker && numberOfAssetsForMinify > 0 ?
    /** @type {number***REMOVED*** */
    numberOfWorkers : scheduledTasks.length;
    await throttleAll(limit, scheduledTasks);

    if (initializedWorker) {
      await initializedWorker.end();
    ***REMOVED***
  ***REMOVED***
  /**
   * @param {Compiler***REMOVED*** compiler
   * @returns {void***REMOVED***
   */


  apply(compiler) {
    const pluginName = this.constructor.name;
    const availableNumberOfCores = CssMinimizerPlugin.getAvailableNumberOfCores(this.options.parallel);
    compiler.hooks.compilation.tap(pluginName, compilation => {
      compilation.hooks.processAssets.tapPromise({
        name: pluginName,
        stage: compiler.webpack.Compilation.PROCESS_ASSETS_STAGE_OPTIMIZE_SIZE,
        additionalAssets: true
      ***REMOVED***, assets => this.optimize(compiler, compilation, assets, {
        availableNumberOfCores
      ***REMOVED***));
      compilation.hooks.statsPrinter.tap(pluginName, stats => {
        stats.hooks.print.for("asset.info.minimized").tap("css-minimizer-webpack-plugin", (minimized, {
          green,
          formatFlag
        ***REMOVED***) => // eslint-disable-next-line no-undefined
        minimized ?
        /** @type {Function***REMOVED*** */
        green(
        /** @type {Function***REMOVED*** */
        formatFlag("minimized")) : "");
      ***REMOVED***);
    ***REMOVED***);
  ***REMOVED***

***REMOVED***

CssMinimizerPlugin.cssnanoMinify = cssnanoMinify;
CssMinimizerPlugin.cssoMinify = cssoMinify;
CssMinimizerPlugin.cleanCssMinify = cleanCssMinify;
CssMinimizerPlugin.esbuildMinify = esbuildMinify;
CssMinimizerPlugin.parcelCssMinify = parcelCssMinify;
module.exports = CssMinimizerPlugin;