/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const parseJson = require("json-parse-even-better-errors");
const DelegatedModuleFactoryPlugin = require("./DelegatedModuleFactoryPlugin");
const ExternalModuleFactoryPlugin = require("./ExternalModuleFactoryPlugin");
const WebpackError = require("./WebpackError");
const DelegatedSourceDependency = require("./dependencies/DelegatedSourceDependency");
const createSchemaValidation = require("./util/create-schema-validation");
const makePathsRelative = require("./util/identifier").makePathsRelative;

/** @typedef {import("../declarations/WebpackOptions").Externals***REMOVED*** Externals */
/** @typedef {import("../declarations/plugins/DllReferencePlugin").DllReferencePluginOptions***REMOVED*** DllReferencePluginOptions */
/** @typedef {import("../declarations/plugins/DllReferencePlugin").DllReferencePluginOptionsContent***REMOVED*** DllReferencePluginOptionsContent */
/** @typedef {import("../declarations/plugins/DllReferencePlugin").DllReferencePluginOptionsManifest***REMOVED*** DllReferencePluginOptionsManifest */
/** @typedef {import("./Compiler")***REMOVED*** Compiler */
/** @typedef {import("./Compiler").CompilationParams***REMOVED*** CompilationParams */
/** @typedef {import("./util/fs").InputFileSystem***REMOVED*** InputFileSystem */

const validate = createSchemaValidation(
	require("../schemas/plugins/DllReferencePlugin.check.js"),
	() => require("../schemas/plugins/DllReferencePlugin.json"),
	{
		name: "Dll Reference Plugin",
		baseDataPath: "options"
	***REMOVED***
);

/** @typedef {{ path: string, data: DllReferencePluginOptionsManifest | undefined, error: Error | undefined ***REMOVED******REMOVED*** CompilationDataItem */

const PLUGIN_NAME = "DllReferencePlugin";

class DllReferencePlugin {
	/**
	 * @param {DllReferencePluginOptions***REMOVED*** options options object
	 */
	constructor(options) {
		validate(options);
		this.options = options;
		/** @type {WeakMap<CompilationParams, CompilationDataItem>***REMOVED*** */
		this._compilationData = new WeakMap();
	***REMOVED***

	/**
	 * Apply the plugin
	 * @param {Compiler***REMOVED*** compiler the compiler instance
	 * @returns {void***REMOVED***
	 */
	apply(compiler) {
		compiler.hooks.compilation.tap(
			PLUGIN_NAME,
			(compilation, { normalModuleFactory ***REMOVED***) => {
				compilation.dependencyFactories.set(
					DelegatedSourceDependency,
					normalModuleFactory
				);
			***REMOVED***
		);

		compiler.hooks.beforeCompile.tapAsync(PLUGIN_NAME, (params, callback) => {
			if ("manifest" in this.options) {
				const manifest = this.options.manifest;
				if (typeof manifest === "string") {
					/** @type {InputFileSystem***REMOVED*** */
					(compiler.inputFileSystem).readFile(manifest, (err, result) => {
						if (err) return callback(err);
						/** @type {CompilationDataItem***REMOVED*** */
						const data = {
							path: manifest,
							data: undefined,
							error: undefined
						***REMOVED***;
						// Catch errors parsing the manifest so that blank
						// or malformed manifest files don't kill the process.
						try {
							data.data = parseJson(
								/** @type {Buffer***REMOVED*** */ (result).toString("utf-8")
							);
						***REMOVED*** catch (parseErr) {
							// Store the error in the params so that it can
							// be added as a compilation error later on.
							const manifestPath = makePathsRelative(
								/** @type {string***REMOVED*** */ (compiler.options.context),
								manifest,
								compiler.root
							);
							data.error = new DllManifestError(
								manifestPath,
								/** @type {Error***REMOVED*** */ (parseErr).message
							);
						***REMOVED***
						this._compilationData.set(params, data);
						return callback();
					***REMOVED***);
					return;
				***REMOVED***
			***REMOVED***
			return callback();
		***REMOVED***);

		compiler.hooks.compile.tap(PLUGIN_NAME, params => {
			let name = this.options.name;
			let sourceType = this.options.sourceType;
			let resolvedContent =
				"content" in this.options ? this.options.content : undefined;
			if ("manifest" in this.options) {
				const manifestParameter = this.options.manifest;
				let manifest;
				if (typeof manifestParameter === "string") {
					const data =
						/** @type {CompilationDataItem***REMOVED*** */
						(this._compilationData.get(params));
					// If there was an error parsing the manifest
					// file, exit now because the error will be added
					// as a compilation error in the "compilation" hook.
					if (data.error) {
						return;
					***REMOVED***
					manifest = data.data;
				***REMOVED*** else {
					manifest = manifestParameter;
				***REMOVED***
				if (manifest) {
					if (!name) name = manifest.name;
					if (!sourceType) sourceType = manifest.type;
					if (!resolvedContent) resolvedContent = manifest.content;
				***REMOVED***
			***REMOVED***
			/** @type {Externals***REMOVED*** */
			const externals = {***REMOVED***;
			const source = `dll-reference ${name***REMOVED***`;
			externals[source] = /** @type {string***REMOVED*** */ (name);
			const normalModuleFactory = params.normalModuleFactory;
			new ExternalModuleFactoryPlugin(sourceType || "var", externals).apply(
				normalModuleFactory
			);
			new DelegatedModuleFactoryPlugin({
				source,
				type: this.options.type,
				scope: this.options.scope,
				context:
					/** @type {string***REMOVED*** */
					(this.options.context || compiler.options.context),
				content:
					/** @type {DllReferencePluginOptionsContent***REMOVED*** */
					(resolvedContent),
				extensions: this.options.extensions,
				associatedObjectForCache: compiler.root
			***REMOVED***).apply(normalModuleFactory);
		***REMOVED***);

		compiler.hooks.compilation.tap(PLUGIN_NAME, (compilation, params) => {
			if ("manifest" in this.options) {
				const manifest = this.options.manifest;
				if (typeof manifest === "string") {
					const data = /** @type {CompilationDataItem***REMOVED*** */ (
						this._compilationData.get(params)
					);
					// If there was an error parsing the manifest file, add the
					// error as a compilation error to make the compilation fail.
					if (data.error) {
						compilation.errors.push(
							/** @type {DllManifestError***REMOVED*** */ (data.error)
						);
					***REMOVED***
					compilation.fileDependencies.add(manifest);
				***REMOVED***
			***REMOVED***
		***REMOVED***);
	***REMOVED***
***REMOVED***

class DllManifestError extends WebpackError {
	/**
	 * @param {string***REMOVED*** filename filename of the manifest
	 * @param {string***REMOVED*** message error message
	 */
	constructor(filename, message) {
		super();

		this.name = "DllManifestError";
		this.message = `Dll manifest ${filename***REMOVED***\n${message***REMOVED***`;
	***REMOVED***
***REMOVED***

module.exports = DllReferencePlugin;
