// Generated by LiveScript 1.6.0
var apply, curry, flip, fix, over, memoize, toString$ = {***REMOVED***.toString;
apply = curry$(function(f, list){
  return f.apply(null, list);
***REMOVED***);
curry = function(f){
  return curry$(f);
***REMOVED***;
flip = curry$(function(f, x, y){
  return f(y, x);
***REMOVED***);
fix = function(f){
  return function(g){
    return function(){
      return f(g(g)).apply(null, arguments);
    ***REMOVED***;
  ***REMOVED***(function(g){
    return function(){
      return f(g(g)).apply(null, arguments);
    ***REMOVED***;
  ***REMOVED***);
***REMOVED***;
over = curry$(function(f, g, x, y){
  return f(g(x), g(y));
***REMOVED***);
memoize = function(f){
  var memo;
  memo = {***REMOVED***;
  return function(){
    var args, res$, i$, to$, key, arg;
    res$ = [];
    for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
      res$.push(arguments[i$]);
    ***REMOVED***
    args = res$;
    key = (function(){
      var i$, ref$, len$, results$ = [];
      for (i$ = 0, len$ = (ref$ = args).length; i$ < len$; ++i$) {
        arg = ref$[i$];
        results$.push(arg + toString$.call(arg).slice(8, -1));
      ***REMOVED***
      return results$;
    ***REMOVED***()).join('');
    return memo[key] = key in memo
      ? memo[key]
      : f.apply(null, args);
  ***REMOVED***;
***REMOVED***;
module.exports = {
  curry: curry,
  flip: flip,
  fix: fix,
  apply: apply,
  over: over,
  memoize: memoize
***REMOVED***;
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    ***REMOVED*** : f;
  ***REMOVED***;
  return _curry();
***REMOVED***