/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

const util = require("util");
const SortableSet = require("./util/SortableSet");
const {
	compareLocations,
	compareChunks,
	compareIterables
***REMOVED*** = require("./util/comparators");

/** @typedef {import("./AsyncDependenciesBlock")***REMOVED*** AsyncDependenciesBlock */
/** @typedef {import("./Chunk")***REMOVED*** Chunk */
/** @typedef {import("./ChunkGraph")***REMOVED*** ChunkGraph */
/** @typedef {import("./Dependency").DependencyLocation***REMOVED*** DependencyLocation */
/** @typedef {import("./Entrypoint")***REMOVED*** Entrypoint */
/** @typedef {import("./Module")***REMOVED*** Module */
/** @typedef {import("./ModuleGraph")***REMOVED*** ModuleGraph */

/** @typedef {{id: number***REMOVED******REMOVED*** HasId */
/** @typedef {{module: Module | null, loc: DependencyLocation, request: string***REMOVED******REMOVED*** OriginRecord */

/**
 * @typedef {object***REMOVED*** RawChunkGroupOptions
 * @property {number=***REMOVED*** preloadOrder
 * @property {number=***REMOVED*** prefetchOrder
 * @property {("low" | "high" | "auto")=***REMOVED*** fetchPriority
 */

/** @typedef {RawChunkGroupOptions & { name?: string | null ***REMOVED******REMOVED*** ChunkGroupOptions */

let debugId = 5000;

/**
 * @template T
 * @param {SortableSet<T>***REMOVED*** set set to convert to array.
 * @returns {T[]***REMOVED*** the array format of existing set
 */
const getArray = set => Array.from(set);

/**
 * A convenience method used to sort chunks based on their id's
 * @param {ChunkGroup***REMOVED*** a first sorting comparator
 * @param {ChunkGroup***REMOVED*** b second sorting comparator
 * @returns {1|0|-1***REMOVED*** a sorting index to determine order
 */
const sortById = (a, b) => {
	if (a.id < b.id) return -1;
	if (b.id < a.id) return 1;
	return 0;
***REMOVED***;

/**
 * @param {OriginRecord***REMOVED*** a the first comparator in sort
 * @param {OriginRecord***REMOVED*** b the second comparator in sort
 * @returns {1|-1|0***REMOVED*** returns sorting order as index
 */
const sortOrigin = (a, b) => {
	const aIdent = a.module ? a.module.identifier() : "";
	const bIdent = b.module ? b.module.identifier() : "";
	if (aIdent < bIdent) return -1;
	if (aIdent > bIdent) return 1;
	return compareLocations(a.loc, b.loc);
***REMOVED***;

class ChunkGroup {
	/**
	 * Creates an instance of ChunkGroup.
	 * @param {string | ChunkGroupOptions=***REMOVED*** options chunk group options passed to chunkGroup
	 */
	constructor(options) {
		if (typeof options === "string") {
			options = { name: options ***REMOVED***;
		***REMOVED*** else if (!options) {
			options = { name: undefined ***REMOVED***;
		***REMOVED***
		/** @type {number***REMOVED*** */
		this.groupDebugId = debugId++;
		this.options = /** @type {ChunkGroupOptions***REMOVED*** */ (options);
		/** @type {SortableSet<ChunkGroup>***REMOVED*** */
		this._children = new SortableSet(undefined, sortById);
		/** @type {SortableSet<ChunkGroup>***REMOVED*** */
		this._parents = new SortableSet(undefined, sortById);
		/** @type {SortableSet<ChunkGroup>***REMOVED*** */
		this._asyncEntrypoints = new SortableSet(undefined, sortById);
		this._blocks = new SortableSet();
		/** @type {Chunk[]***REMOVED*** */
		this.chunks = [];
		/** @type {OriginRecord[]***REMOVED*** */
		this.origins = [];
		/** Indices in top-down order */
		/**
		 * @private
		 * @type {Map<Module, number>***REMOVED***
		 */
		this._modulePreOrderIndices = new Map();
		/** Indices in bottom-up order */
		/**
		 * @private
		 * @type {Map<Module, number>***REMOVED***
		 */
		this._modulePostOrderIndices = new Map();
		/** @type {number | undefined***REMOVED*** */
		this.index = undefined;
	***REMOVED***

	/**
	 * when a new chunk is added to a chunkGroup, addingOptions will occur.
	 * @param {ChunkGroupOptions***REMOVED*** options the chunkGroup options passed to addOptions
	 * @returns {void***REMOVED***
	 */
	addOptions(options) {
		for (const _key of Object.keys(options)) {
			const key = /** @type {keyof ChunkGroupOptions***REMOVED*** */ (_key);
			if (this.options[key] === undefined) {
				/** @type {TODO***REMOVED*** */
				(this.options)[key] = options[key];
			***REMOVED*** else if (this.options[key] !== options[key]) {
				if (key.endsWith("Order")) {
					/** @type {TODO***REMOVED*** */
					(this.options)[key] = Math.max(
						/** @type {number***REMOVED*** */ (this.options[key]),
						/** @type {number***REMOVED*** */ (options[key])
					);
				***REMOVED*** else {
					throw new Error(
						`ChunkGroup.addOptions: No option merge strategy for ${key***REMOVED***`
					);
				***REMOVED***
			***REMOVED***
		***REMOVED***
	***REMOVED***

	/**
	 * returns the name of current ChunkGroup
	 * @returns {string | null | undefined***REMOVED*** returns the ChunkGroup name
	 */
	get name() {
		return this.options.name;
	***REMOVED***

	/**
	 * sets a new name for current ChunkGroup
	 * @param {string | undefined***REMOVED*** value the new name for ChunkGroup
	 * @returns {void***REMOVED***
	 */
	set name(value) {
		this.options.name = value;
	***REMOVED***

	/* istanbul ignore next */
	/**
	 * get a uniqueId for ChunkGroup, made up of its member Chunk debugId's
	 * @returns {string***REMOVED*** a unique concatenation of chunk debugId's
	 */
	get debugId() {
		return Array.from(this.chunks, x => x.debugId).join("+");
	***REMOVED***

	/**
	 * get a unique id for ChunkGroup, made up of its member Chunk id's
	 * @returns {string***REMOVED*** a unique concatenation of chunk ids
	 */
	get id() {
		return Array.from(this.chunks, x => x.id).join("+");
	***REMOVED***

	/**
	 * Performs an unshift of a specific chunk
	 * @param {Chunk***REMOVED*** chunk chunk being unshifted
	 * @returns {boolean***REMOVED*** returns true if attempted chunk shift is accepted
	 */
	unshiftChunk(chunk) {
		const oldIdx = this.chunks.indexOf(chunk);
		if (oldIdx > 0) {
			this.chunks.splice(oldIdx, 1);
			this.chunks.unshift(chunk);
		***REMOVED*** else if (oldIdx < 0) {
			this.chunks.unshift(chunk);
			return true;
		***REMOVED***
		return false;
	***REMOVED***

	/**
	 * inserts a chunk before another existing chunk in group
	 * @param {Chunk***REMOVED*** chunk Chunk being inserted
	 * @param {Chunk***REMOVED*** before Placeholder/target chunk marking new chunk insertion point
	 * @returns {boolean***REMOVED*** return true if insertion was successful
	 */
	insertChunk(chunk, before) {
		const oldIdx = this.chunks.indexOf(chunk);
		const idx = this.chunks.indexOf(before);
		if (idx < 0) {
			throw new Error("before chunk not found");
		***REMOVED***
		if (oldIdx >= 0 && oldIdx > idx) {
			this.chunks.splice(oldIdx, 1);
			this.chunks.splice(idx, 0, chunk);
		***REMOVED*** else if (oldIdx < 0) {
			this.chunks.splice(idx, 0, chunk);
			return true;
		***REMOVED***
		return false;
	***REMOVED***

	/**
	 * add a chunk into ChunkGroup. Is pushed on or prepended
	 * @param {Chunk***REMOVED*** chunk chunk being pushed into ChunkGroupS
	 * @returns {boolean***REMOVED*** returns true if chunk addition was successful.
	 */
	pushChunk(chunk) {
		const oldIdx = this.chunks.indexOf(chunk);
		if (oldIdx >= 0) {
			return false;
		***REMOVED***
		this.chunks.push(chunk);
		return true;
	***REMOVED***

	/**
	 * @param {Chunk***REMOVED*** oldChunk chunk to be replaced
	 * @param {Chunk***REMOVED*** newChunk New chunk that will be replaced with
	 * @returns {boolean | undefined***REMOVED*** returns true if the replacement was successful
	 */
	replaceChunk(oldChunk, newChunk) {
		const oldIdx = this.chunks.indexOf(oldChunk);
		if (oldIdx < 0) return false;
		const newIdx = this.chunks.indexOf(newChunk);
		if (newIdx < 0) {
			this.chunks[oldIdx] = newChunk;
			return true;
		***REMOVED***
		if (newIdx < oldIdx) {
			this.chunks.splice(oldIdx, 1);
			return true;
		***REMOVED*** else if (newIdx !== oldIdx) {
			this.chunks[oldIdx] = newChunk;
			this.chunks.splice(newIdx, 1);
			return true;
		***REMOVED***
	***REMOVED***

	/**
	 * @param {Chunk***REMOVED*** chunk chunk to remove
	 * @returns {boolean***REMOVED*** returns true if chunk was removed
	 */
	removeChunk(chunk) {
		const idx = this.chunks.indexOf(chunk);
		if (idx >= 0) {
			this.chunks.splice(idx, 1);
			return true;
		***REMOVED***
		return false;
	***REMOVED***

	/**
	 * @returns {boolean***REMOVED*** true, when this chunk group will be loaded on initial page load
	 */
	isInitial() {
		return false;
	***REMOVED***

	/**
	 * @param {ChunkGroup***REMOVED*** group chunk group to add
	 * @returns {boolean***REMOVED*** returns true if chunk group was added
	 */
	addChild(group) {
		const size = this._children.size;
		this._children.add(group);
		return size !== this._children.size;
	***REMOVED***

	/**
	 * @returns {ChunkGroup[]***REMOVED*** returns the children of this group
	 */
	getChildren() {
		return this._children.getFromCache(getArray);
	***REMOVED***

	getNumberOfChildren() {
		return this._children.size;
	***REMOVED***

	get childrenIterable() {
		return this._children;
	***REMOVED***

	/**
	 * @param {ChunkGroup***REMOVED*** group the chunk group to remove
	 * @returns {boolean***REMOVED*** returns true if the chunk group was removed
	 */
	removeChild(group) {
		if (!this._children.has(group)) {
			return false;
		***REMOVED***

		this._children.delete(group);
		group.removeParent(this);
		return true;
	***REMOVED***

	/**
	 * @param {ChunkGroup***REMOVED*** parentChunk the parent group to be added into
	 * @returns {boolean***REMOVED*** returns true if this chunk group was added to the parent group
	 */
	addParent(parentChunk) {
		if (!this._parents.has(parentChunk)) {
			this._parents.add(parentChunk);
			return true;
		***REMOVED***
		return false;
	***REMOVED***

	/**
	 * @returns {ChunkGroup[]***REMOVED*** returns the parents of this group
	 */
	getParents() {
		return this._parents.getFromCache(getArray);
	***REMOVED***

	getNumberOfParents() {
		return this._parents.size;
	***REMOVED***

	/**
	 * @param {ChunkGroup***REMOVED*** parent the parent group
	 * @returns {boolean***REMOVED*** returns true if the parent group contains this group
	 */
	hasParent(parent) {
		return this._parents.has(parent);
	***REMOVED***

	get parentsIterable() {
		return this._parents;
	***REMOVED***

	/**
	 * @param {ChunkGroup***REMOVED*** chunkGroup the parent group
	 * @returns {boolean***REMOVED*** returns true if this group has been removed from the parent
	 */
	removeParent(chunkGroup) {
		if (this._parents.delete(chunkGroup)) {
			chunkGroup.removeChild(this);
			return true;
		***REMOVED***
		return false;
	***REMOVED***

	/**
	 * @param {Entrypoint***REMOVED*** entrypoint entrypoint to add
	 * @returns {boolean***REMOVED*** returns true if entrypoint was added
	 */
	addAsyncEntrypoint(entrypoint) {
		const size = this._asyncEntrypoints.size;
		this._asyncEntrypoints.add(entrypoint);
		return size !== this._asyncEntrypoints.size;
	***REMOVED***

	get asyncEntrypointsIterable() {
		return this._asyncEntrypoints;
	***REMOVED***

	/**
	 * @returns {Array<AsyncDependenciesBlock>***REMOVED*** an array containing the blocks
	 */
	getBlocks() {
		return this._blocks.getFromCache(getArray);
	***REMOVED***

	getNumberOfBlocks() {
		return this._blocks.size;
	***REMOVED***

	/**
	 * @param {AsyncDependenciesBlock***REMOVED*** block block
	 * @returns {boolean***REMOVED*** true, if block exists
	 */
	hasBlock(block) {
		return this._blocks.has(block);
	***REMOVED***

	/**
	 * @returns {Iterable<AsyncDependenciesBlock>***REMOVED*** blocks
	 */
	get blocksIterable() {
		return this._blocks;
	***REMOVED***

	/**
	 * @param {AsyncDependenciesBlock***REMOVED*** block a block
	 * @returns {boolean***REMOVED*** false, if block was already added
	 */
	addBlock(block) {
		if (!this._blocks.has(block)) {
			this._blocks.add(block);
			return true;
		***REMOVED***
		return false;
	***REMOVED***

	/**
	 * @param {Module | null***REMOVED*** module origin module
	 * @param {DependencyLocation***REMOVED*** loc location of the reference in the origin module
	 * @param {string***REMOVED*** request request name of the reference
	 * @returns {void***REMOVED***
	 */
	addOrigin(module, loc, request) {
		this.origins.push({
			module,
			loc,
			request
		***REMOVED***);
	***REMOVED***

	/**
	 * @returns {string[]***REMOVED*** the files contained this chunk group
	 */
	getFiles() {
		const files = new Set();

		for (const chunk of this.chunks) {
			for (const file of chunk.files) {
				files.add(file);
			***REMOVED***
		***REMOVED***

		return Array.from(files);
	***REMOVED***

	/**
	 * @returns {void***REMOVED***
	 */
	remove() {
		// cleanup parents
		for (const parentChunkGroup of this._parents) {
			// remove this chunk from its parents
			parentChunkGroup._children.delete(this);

			// cleanup "sub chunks"
			for (const chunkGroup of this._children) {
				/**
				 * remove this chunk as "intermediary" and connect
				 * it "sub chunks" and parents directly
				 */
				// add parent to each "sub chunk"
				chunkGroup.addParent(parentChunkGroup);
				// add "sub chunk" to parent
				parentChunkGroup.addChild(chunkGroup);
			***REMOVED***
		***REMOVED***

		/**
		 * we need to iterate again over the children
		 * to remove this from the child's parents.
		 * This can not be done in the above loop
		 * as it is not guaranteed that `this._parents` contains anything.
		 */
		for (const chunkGroup of this._children) {
			// remove this as parent of every "sub chunk"
			chunkGroup._parents.delete(this);
		***REMOVED***

		// remove chunks
		for (const chunk of this.chunks) {
			chunk.removeGroup(this);
		***REMOVED***
	***REMOVED***

	sortItems() {
		this.origins.sort(sortOrigin);
	***REMOVED***

	/**
	 * Sorting predicate which allows current ChunkGroup to be compared against another.
	 * Sorting values are based off of number of chunks in ChunkGroup.
	 * @param {ChunkGraph***REMOVED*** chunkGraph the chunk graph
	 * @param {ChunkGroup***REMOVED*** otherGroup the chunkGroup to compare this against
	 * @returns {-1|0|1***REMOVED*** sort position for comparison
	 */
	compareTo(chunkGraph, otherGroup) {
		if (this.chunks.length > otherGroup.chunks.length) return -1;
		if (this.chunks.length < otherGroup.chunks.length) return 1;
		return compareIterables(compareChunks(chunkGraph))(
			this.chunks,
			otherGroup.chunks
		);
	***REMOVED***

	/**
	 * @param {ModuleGraph***REMOVED*** moduleGraph the module graph
	 * @param {ChunkGraph***REMOVED*** chunkGraph the chunk graph
	 * @returns {Record<string, ChunkGroup[]>***REMOVED*** mapping from children type to ordered list of ChunkGroups
	 */
	getChildrenByOrders(moduleGraph, chunkGraph) {
		/** @type {Map<string, {order: number, group: ChunkGroup***REMOVED***[]>***REMOVED*** */
		const lists = new Map();
		for (const childGroup of this._children) {
			for (const key of Object.keys(childGroup.options)) {
				if (key.endsWith("Order")) {
					const name = key.slice(0, key.length - "Order".length);
					let list = lists.get(name);
					if (list === undefined) {
						lists.set(name, (list = []));
					***REMOVED***
					list.push({
						order:
							/** @type {number***REMOVED*** */
							(
								childGroup.options[/** @type {keyof ChunkGroupOptions***REMOVED*** */ (key)]
							),
						group: childGroup
					***REMOVED***);
				***REMOVED***
			***REMOVED***
		***REMOVED***
		/** @type {Record<string, ChunkGroup[]>***REMOVED*** */
		const result = Object.create(null);
		for (const [name, list] of lists) {
			list.sort((a, b) => {
				const cmp = b.order - a.order;
				if (cmp !== 0) return cmp;
				return a.group.compareTo(chunkGraph, b.group);
			***REMOVED***);
			result[name] = list.map(i => i.group);
		***REMOVED***
		return result;
	***REMOVED***

	/**
	 * Sets the top-down index of a module in this ChunkGroup
	 * @param {Module***REMOVED*** module module for which the index should be set
	 * @param {number***REMOVED*** index the index of the module
	 * @returns {void***REMOVED***
	 */
	setModulePreOrderIndex(module, index) {
		this._modulePreOrderIndices.set(module, index);
	***REMOVED***

	/**
	 * Gets the top-down index of a module in this ChunkGroup
	 * @param {Module***REMOVED*** module the module
	 * @returns {number | undefined***REMOVED*** index
	 */
	getModulePreOrderIndex(module) {
		return this._modulePreOrderIndices.get(module);
	***REMOVED***

	/**
	 * Sets the bottom-up index of a module in this ChunkGroup
	 * @param {Module***REMOVED*** module module for which the index should be set
	 * @param {number***REMOVED*** index the index of the module
	 * @returns {void***REMOVED***
	 */
	setModulePostOrderIndex(module, index) {
		this._modulePostOrderIndices.set(module, index);
	***REMOVED***

	/**
	 * Gets the bottom-up index of a module in this ChunkGroup
	 * @param {Module***REMOVED*** module the module
	 * @returns {number | undefined***REMOVED*** index
	 */
	getModulePostOrderIndex(module) {
		return this._modulePostOrderIndices.get(module);
	***REMOVED***

	/* istanbul ignore next */
	checkConstraints() {
		const chunk = this;
		for (const child of chunk._children) {
			if (!child._parents.has(chunk)) {
				throw new Error(
					`checkConstraints: child missing parent ${chunk.debugId***REMOVED*** -> ${child.debugId***REMOVED***`
				);
			***REMOVED***
		***REMOVED***
		for (const parentChunk of chunk._parents) {
			if (!parentChunk._children.has(chunk)) {
				throw new Error(
					`checkConstraints: parent missing child ${parentChunk.debugId***REMOVED*** <- ${chunk.debugId***REMOVED***`
				);
			***REMOVED***
		***REMOVED***
	***REMOVED***
***REMOVED***

ChunkGroup.prototype.getModuleIndex = util.deprecate(
	ChunkGroup.prototype.getModulePreOrderIndex,
	"ChunkGroup.getModuleIndex was renamed to getModulePreOrderIndex",
	"DEP_WEBPACK_CHUNK_GROUP_GET_MODULE_INDEX"
);

ChunkGroup.prototype.getModuleIndex2 = util.deprecate(
	ChunkGroup.prototype.getModulePostOrderIndex,
	"ChunkGroup.getModuleIndex2 was renamed to getModulePostOrderIndex",
	"DEP_WEBPACK_CHUNK_GROUP_GET_MODULE_INDEX_2"
);

module.exports = ChunkGroup;
