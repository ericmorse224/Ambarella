/**
 * @fileoverview Enforce usage of onBlur over onChange on select menus for accessibility.
 * @author Ethan Cohen
 */

// -----------------------------------------------------------------------------
// Requirements
// -----------------------------------------------------------------------------

import { RuleTester ***REMOVED*** from 'eslint';
import parserOptionsMapper from '../../__util__/parserOptionsMapper';
import parsers from '../../__util__/helpers/parsers';
import rule from '../../../src/rules/no-onchange';

// -----------------------------------------------------------------------------
// Tests
// -----------------------------------------------------------------------------

const ruleTester = new RuleTester();

const expectedError = {
  message: 'onBlur must be used instead of onchange, unless absolutely necessary and it causes no negative consequences for keyboard only or screen reader users.',
  type: 'JSXOpeningElement',
***REMOVED***;

const componentsSettings = {
  'jsx-a11y': {
    components: {
      CustomOption: 'option',
      Input: 'input',
    ***REMOVED***,
  ***REMOVED***,
***REMOVED***;

ruleTester.run('no-onchange', rule, {
  valid: parsers.all([].concat(
    { code: '<select onBlur={() => {***REMOVED******REMOVED*** />;' ***REMOVED***,
    { code: '<select onBlur={handleOnBlur***REMOVED*** />;' ***REMOVED***,
    { code: '<option />;' ***REMOVED***,
    { code: '<option onBlur={() => {***REMOVED******REMOVED*** onChange={() => {***REMOVED******REMOVED*** />;' ***REMOVED***,
    { code: '<option {...props***REMOVED*** />' ***REMOVED***,
    { code: '<input onChange={() => {***REMOVED******REMOVED*** />;' ***REMOVED***,
    { code: '<input onChange={handleOnChange***REMOVED*** />;' ***REMOVED***,
    { code: '<input />;' ***REMOVED***,
    { code: '<input onChange={() => {***REMOVED******REMOVED*** onChange={() => {***REMOVED******REMOVED*** />;' ***REMOVED***,
    { code: '<input {...props***REMOVED*** />' ***REMOVED***,
    { code: '<Input onChange={() => {***REMOVED******REMOVED*** />;', settings: componentsSettings ***REMOVED***,
    { code: '<CustomOption onChange={() => {***REMOVED******REMOVED*** />' ***REMOVED***,
  )).map(parserOptionsMapper),
  invalid: parsers.all([].concat(
    { code: '<select onChange={() => {***REMOVED******REMOVED*** />;', errors: [expectedError] ***REMOVED***,
    { code: '<select onChange={handleOnChange***REMOVED*** />;', errors: [expectedError] ***REMOVED***,
    { code: '<option onChange={() => {***REMOVED******REMOVED*** />', errors: [expectedError] ***REMOVED***,
    { code: '<option onChange={() => {***REMOVED******REMOVED*** {...props***REMOVED*** />', errors: [expectedError] ***REMOVED***,
    { code: '<CustomOption onChange={() => {***REMOVED******REMOVED*** />;', errors: [expectedError], settings: componentsSettings ***REMOVED***,
  )).map(parserOptionsMapper),
***REMOVED***);
