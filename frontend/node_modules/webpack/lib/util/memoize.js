/*
	MIT License http://www.opensource.org/licenses/mit-license.php
*/

"use strict";

/**
 * @template T
 * @typedef {() => T***REMOVED*** FunctionReturning
 */

/**
 * @template T
 * @param {FunctionReturning<T>***REMOVED*** fn memorized function
 * @returns {FunctionReturning<T>***REMOVED*** new function
 */
const memoize = fn => {
	let cache = false;
	/** @type {T | undefined***REMOVED*** */
	let result;
	return () => {
		if (cache) {
			return /** @type {T***REMOVED*** */ (result);
		***REMOVED***

		result = fn();
		cache = true;
		// Allow to clean up memory for fn
		// and all dependent resources
		/** @type {FunctionReturning<T> | undefined***REMOVED*** */
		(fn) = undefined;
		return /** @type {T***REMOVED*** */ (result);
	***REMOVED***;
***REMOVED***;

module.exports = memoize;
