{{# def.definitions ***REMOVED******REMOVED***
{{# def.errors ***REMOVED******REMOVED***
{{# def.setupKeyword ***REMOVED******REMOVED***

{{## def._validateRef:_v:
  {{? it.opts.passContext ***REMOVED******REMOVED***
    {{=_v***REMOVED******REMOVED***.call(this,
  {{??***REMOVED******REMOVED***
    {{=_v***REMOVED******REMOVED***(
  {{?***REMOVED******REMOVED***
    {{=$data***REMOVED******REMOVED***, {{# def.dataPath ***REMOVED******REMOVED***{{# def.passParentData ***REMOVED******REMOVED***, rootData)
#***REMOVED******REMOVED***

{{ var $async, $refCode; ***REMOVED******REMOVED***
{{? $schema == '#' || $schema == '#/' ***REMOVED******REMOVED***
  {{
    if (it.isRoot) {
      $async = it.async;
      $refCode = 'validate';
    ***REMOVED*** else {
      $async = it.root.schema.$async === true;
      $refCode = 'root.refVal[0]';
    ***REMOVED***
  ***REMOVED******REMOVED***
{{??***REMOVED******REMOVED***
  {{ var $refVal = it.resolveRef(it.baseId, $schema, it.isRoot); ***REMOVED******REMOVED***
  {{? $refVal === undefined ***REMOVED******REMOVED***
    {{ var $message = it.MissingRefError.message(it.baseId, $schema); ***REMOVED******REMOVED***
    {{? it.opts.missingRefs == 'fail' ***REMOVED******REMOVED***
      {{ it.logger.error($message); ***REMOVED******REMOVED***
      {{# def.error:'$ref' ***REMOVED******REMOVED***
      {{? $breakOnError ***REMOVED******REMOVED*** if (false) { {{?***REMOVED******REMOVED***
    {{?? it.opts.missingRefs == 'ignore' ***REMOVED******REMOVED***
      {{ it.logger.warn($message); ***REMOVED******REMOVED***
      {{? $breakOnError ***REMOVED******REMOVED*** if (true) { {{?***REMOVED******REMOVED***
    {{??***REMOVED******REMOVED***
      {{ throw new it.MissingRefError(it.baseId, $schema, $message); ***REMOVED******REMOVED***
    {{?***REMOVED******REMOVED***
  {{?? $refVal.inline ***REMOVED******REMOVED***
    {{# def.setupNextLevel ***REMOVED******REMOVED***
    {{
      $it.schema = $refVal.schema;
      $it.schemaPath = '';
      $it.errSchemaPath = $schema;
    ***REMOVED******REMOVED***
    {{ var $code = it.validate($it).replace(/validate\.schema/g, $refVal.code); ***REMOVED******REMOVED***
    {{= $code ***REMOVED******REMOVED***
    {{? $breakOnError***REMOVED******REMOVED***
      if ({{=$nextValid***REMOVED******REMOVED***) {
    {{?***REMOVED******REMOVED***
  {{??***REMOVED******REMOVED***
    {{
      $async = $refVal.$async === true || (it.async && $refVal.$async !== false);
      $refCode = $refVal.code;
    ***REMOVED******REMOVED***
  {{?***REMOVED******REMOVED***
{{?***REMOVED******REMOVED***

{{? $refCode ***REMOVED******REMOVED***
  {{# def.beginDefOut***REMOVED******REMOVED***
    {{# def._validateRef:$refCode ***REMOVED******REMOVED***
  {{# def.storeDefOut:__callValidate ***REMOVED******REMOVED***

  {{? $async ***REMOVED******REMOVED***
    {{ if (!it.async) throw new Error('async schema referenced by sync schema'); ***REMOVED******REMOVED***
    {{? $breakOnError ***REMOVED******REMOVED*** var {{=$valid***REMOVED******REMOVED***; {{?***REMOVED******REMOVED***
    try {
      await {{=__callValidate***REMOVED******REMOVED***;
      {{? $breakOnError ***REMOVED******REMOVED*** {{=$valid***REMOVED******REMOVED*** = true; {{?***REMOVED******REMOVED***
    ***REMOVED*** catch (e) {
      if (!(e instanceof ValidationError)) throw e;
      if (vErrors === null) vErrors = e.errors;
      else vErrors = vErrors.concat(e.errors);
      errors = vErrors.length;
      {{? $breakOnError ***REMOVED******REMOVED*** {{=$valid***REMOVED******REMOVED*** = false; {{?***REMOVED******REMOVED***
    ***REMOVED***
    {{? $breakOnError ***REMOVED******REMOVED*** if ({{=$valid***REMOVED******REMOVED***) { {{?***REMOVED******REMOVED***
  {{??***REMOVED******REMOVED***
    if (!{{=__callValidate***REMOVED******REMOVED***) {
      if (vErrors === null) vErrors = {{=$refCode***REMOVED******REMOVED***.errors;
      else vErrors = vErrors.concat({{=$refCode***REMOVED******REMOVED***.errors);
      errors = vErrors.length;
    ***REMOVED*** {{? $breakOnError ***REMOVED******REMOVED*** else { {{?***REMOVED******REMOVED***
  {{?***REMOVED******REMOVED***
{{?***REMOVED******REMOVED***
