/*
	MIT License http://www.opensource.org/licenses/mit-license.php
*/

"use strict";

const { DEFAULTS ***REMOVED*** = require("../config/defaults");
const memoize = require("./memoize");

/** @typedef {import("../serialization/BinaryMiddleware").MEASURE_END_OPERATION_TYPE***REMOVED*** MEASURE_END_OPERATION */
/** @typedef {import("../serialization/BinaryMiddleware").MEASURE_START_OPERATION_TYPE***REMOVED*** MEASURE_START_OPERATION */
/** @typedef {typeof import("../util/Hash")***REMOVED*** Hash */
/** @typedef {import("../util/fs").IntermediateFileSystem***REMOVED*** IntermediateFileSystem */

/**
 * @template D, S, C
 * @typedef {import("../serialization/Serializer")<D, S, C>***REMOVED*** Serializer
 */

const getBinaryMiddleware = memoize(() =>
	require("../serialization/BinaryMiddleware")
);
const getObjectMiddleware = memoize(() =>
	require("../serialization/ObjectMiddleware")
);
const getSingleItemMiddleware = memoize(() =>
	require("../serialization/SingleItemMiddleware")
);
const getSerializer = memoize(() => require("../serialization/Serializer"));
const getSerializerMiddleware = memoize(() =>
	require("../serialization/SerializerMiddleware")
);

const getBinaryMiddlewareInstance = memoize(
	() => new (getBinaryMiddleware())()
);

const registerSerializers = memoize(() => {
	require("./registerExternalSerializer");

	// Load internal paths with a relative require
	// This allows bundling all internal serializers
	const internalSerializables = require("./internalSerializables");
	getObjectMiddleware().registerLoader(/^webpack\/lib\//, req => {
		const loader =
			internalSerializables[
				/** @type {keyof import("./internalSerializables")***REMOVED*** */
				(req.slice("webpack/lib/".length))
			];
		if (loader) {
			loader();
		***REMOVED*** else {
			// eslint-disable-next-line no-console
			console.warn(`${req***REMOVED*** not found in internalSerializables`);
		***REMOVED***
		return true;
	***REMOVED***);
***REMOVED***);

/**
 * @type {Serializer<EXPECTED_ANY, EXPECTED_ANY, EXPECTED_ANY>***REMOVED***
 */
let buffersSerializer;

// Expose serialization API
module.exports = {
	get register() {
		return getObjectMiddleware().register;
	***REMOVED***,
	get registerLoader() {
		return getObjectMiddleware().registerLoader;
	***REMOVED***,
	get registerNotSerializable() {
		return getObjectMiddleware().registerNotSerializable;
	***REMOVED***,
	get NOT_SERIALIZABLE() {
		return getObjectMiddleware().NOT_SERIALIZABLE;
	***REMOVED***,
	/** @type {MEASURE_START_OPERATION***REMOVED*** */
	get MEASURE_START_OPERATION() {
		return getBinaryMiddleware().MEASURE_START_OPERATION;
	***REMOVED***,
	/** @type {MEASURE_END_OPERATION***REMOVED*** */
	get MEASURE_END_OPERATION() {
		return getBinaryMiddleware().MEASURE_END_OPERATION;
	***REMOVED***,
	get buffersSerializer() {
		if (buffersSerializer !== undefined) return buffersSerializer;
		registerSerializers();
		const Serializer = getSerializer();
		const binaryMiddleware = getBinaryMiddlewareInstance();
		const SerializerMiddleware = getSerializerMiddleware();
		const SingleItemMiddleware = getSingleItemMiddleware();
		return /** @type {Serializer<EXPECTED_ANY, EXPECTED_ANY, EXPECTED_ANY>***REMOVED*** */ (
			buffersSerializer = new Serializer([
				new SingleItemMiddleware(),
				new (getObjectMiddleware())(context => {
					if ("write" in context) {
						context.writeLazy = value => {
							context.write(
								SerializerMiddleware.createLazy(value, binaryMiddleware)
							);
						***REMOVED***;
					***REMOVED***
				***REMOVED***, DEFAULTS.HASH_FUNCTION),
				binaryMiddleware
			])
		);
	***REMOVED***,
	/**
	 * @template D, S, C
	 * @param {IntermediateFileSystem***REMOVED*** fs filesystem
	 * @param {string | Hash***REMOVED*** hashFunction hash function to use
	 * @returns {Serializer<D, S, C>***REMOVED*** file serializer
	 */
	createFileSerializer: (fs, hashFunction) => {
		registerSerializers();
		const Serializer = getSerializer();
		const FileMiddleware = require("../serialization/FileMiddleware");
		const fileMiddleware = new FileMiddleware(fs, hashFunction);
		const binaryMiddleware = getBinaryMiddlewareInstance();
		const SerializerMiddleware = getSerializerMiddleware();
		const SingleItemMiddleware = getSingleItemMiddleware();
		return /** @type {Serializer<D, S, C>***REMOVED*** */ (
			new Serializer([
				new SingleItemMiddleware(),
				new (getObjectMiddleware())(context => {
					if ("write" in context) {
						context.writeLazy = value => {
							context.write(
								SerializerMiddleware.createLazy(value, binaryMiddleware)
							);
						***REMOVED***;
						context.writeSeparate = (value, options) => {
							const lazy = SerializerMiddleware.createLazy(
								value,
								fileMiddleware,
								options
							);
							context.write(lazy);
							return lazy;
						***REMOVED***;
					***REMOVED***
				***REMOVED***, hashFunction),
				binaryMiddleware,
				fileMiddleware
			])
		);
	***REMOVED***
***REMOVED***;
