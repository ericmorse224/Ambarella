"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
***REMOVED***);
exports.default = void 0;
var _helperPluginUtils = require("@babel/helper-plugin-utils");
var _default = exports.default = (0, _helperPluginUtils.declare)((api, options) => {
  api.assertVersion("^7.0.0-0 || >8.0.0-alpha <8.0.0-beta");
  let {
    version
  ***REMOVED*** = options;
  {
    const {
      legacy
    ***REMOVED*** = options;
    if (legacy !== undefined) {
      if (typeof legacy !== "boolean") {
        throw new Error(".legacy must be a boolean.");
      ***REMOVED***
      if (version !== undefined) {
        throw new Error("You can either use the .legacy or the .version option, not both.");
      ***REMOVED***
    ***REMOVED***
    if (version === undefined) {
      version = legacy ? "legacy" : "2018-09";
    ***REMOVED*** else if (version !== "2023-11" && version !== "2023-05" && version !== "2023-01" && version !== "2022-03" && version !== "2021-12" && version !== "2018-09" && version !== "legacy") {
      throw new Error("Unsupported decorators version: " + version);
    ***REMOVED***
    var {
      decoratorsBeforeExport
    ***REMOVED*** = options;
    if (decoratorsBeforeExport === undefined) {
      if (version === "2021-12" || version === "2022-03") {
        decoratorsBeforeExport = false;
      ***REMOVED*** else if (version === "2018-09") {
        throw new Error("The decorators plugin, when .version is '2018-09' or not specified," + " requires a 'decoratorsBeforeExport' option, whose value must be a boolean.");
      ***REMOVED***
    ***REMOVED*** else {
      if (version === "legacy" || version === "2022-03" || version === "2023-01") {
        throw new Error(`'decoratorsBeforeExport' can't be used with ${version***REMOVED*** decorators.`);
      ***REMOVED***
      if (typeof decoratorsBeforeExport !== "boolean") {
        throw new Error("'decoratorsBeforeExport' must be a boolean.");
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***
  return {
    name: "syntax-decorators",
    manipulateOptions({
      generatorOpts
    ***REMOVED***, parserOpts) {
      if (version === "legacy") {
        parserOpts.plugins.push("decorators-legacy");
      ***REMOVED*** else {
        if (version === "2023-01" || version === "2023-05" || version === "2023-11") {
          parserOpts.plugins.push(["decorators", {
            allowCallParenthesized: false
          ***REMOVED***], "decoratorAutoAccessors");
        ***REMOVED*** else if (version === "2022-03") {
          parserOpts.plugins.push(["decorators", {
            decoratorsBeforeExport: false,
            allowCallParenthesized: false
          ***REMOVED***], "decoratorAutoAccessors");
        ***REMOVED*** else if (version === "2021-12") {
          parserOpts.plugins.push(["decorators", {
            decoratorsBeforeExport
          ***REMOVED***], "decoratorAutoAccessors");
          generatorOpts.decoratorsBeforeExport = decoratorsBeforeExport;
        ***REMOVED*** else if (version === "2018-09") {
          parserOpts.plugins.push(["decorators", {
            decoratorsBeforeExport
          ***REMOVED***]);
          generatorOpts.decoratorsBeforeExport = decoratorsBeforeExport;
        ***REMOVED***
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***;
***REMOVED***);

//# sourceMappingURL=index.js.map
