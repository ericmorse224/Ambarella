/// <reference types="node" />
export type IncomingMessage = import("../index.js").IncomingMessage;
export type ServerResponse = import("../index.js").ServerResponse;
export type ExpectedRequest = {
  get: (name: string) => string | undefined;
***REMOVED***;
export type ExpectedResponse = {
  get: (name: string) => string | string[] | undefined;
  set: (name: string, value: number | string | string[]) => void;
  status: (status: number) => void;
  send: (data: any) => void;
***REMOVED***;
/** @typedef {import("../index.js").IncomingMessage***REMOVED*** IncomingMessage */
/** @typedef {import("../index.js").ServerResponse***REMOVED*** ServerResponse */
/**
 * @typedef {Object***REMOVED*** ExpectedRequest
 * @property {(name: string) => string | undefined***REMOVED*** get
 */
/**
 * @typedef {Object***REMOVED*** ExpectedResponse
 * @property {(name: string) => string | string[] | undefined***REMOVED*** get
 * @property {(name: string, value: number | string | string[]) => void***REMOVED*** set
 * @property {(status: number) => void***REMOVED*** status
 * @property {(data: any) => void***REMOVED*** send
 */
/**
 * @template {ServerResponse***REMOVED*** Response
 * @param {Response***REMOVED*** res
 * @returns {string[]***REMOVED***
 */
export function getHeaderNames<
  Response_1 extends import("../index.js").ServerResponse
>(res: Response_1): string[];
/**
 * @template {IncomingMessage***REMOVED*** Request
 * @param {Request***REMOVED*** req
 * @param {string***REMOVED*** name
 * @returns {string | undefined***REMOVED***
 */
export function getHeaderFromRequest<
  Request_1 extends import("http").IncomingMessage
>(req: Request_1, name: string): string | undefined;
/**
 * @template {ServerResponse***REMOVED*** Response
 * @param {Response***REMOVED*** res
 * @param {string***REMOVED*** name
 * @returns {number | string | string[] | undefined***REMOVED***
 */
export function getHeaderFromResponse<
  Response_1 extends import("../index.js").ServerResponse
>(res: Response_1, name: string): number | string | string[] | undefined;
/**
 * @template {ServerResponse***REMOVED*** Response
 * @param {Response***REMOVED*** res
 * @param {string***REMOVED*** name
 * @param {number | string | string[]***REMOVED*** value
 * @returns {void***REMOVED***
 */
export function setHeaderForResponse<
  Response_1 extends import("../index.js").ServerResponse
>(res: Response_1, name: string, value: number | string | string[]): void;
/**
 * @template {ServerResponse***REMOVED*** Response
 * @param {Response***REMOVED*** res
 * @param {number***REMOVED*** code
 */
export function setStatusCode<
  Response_1 extends import("../index.js").ServerResponse
>(res: Response_1, code: number): void;
/**
 * @template {IncomingMessage***REMOVED*** Request
 * @template {ServerResponse***REMOVED*** Response
 * @param {Request***REMOVED*** req
 * @param {Response***REMOVED*** res
 * @param {string | Buffer | import("fs").ReadStream***REMOVED*** bufferOtStream
 * @param {number***REMOVED*** byteLength
 */
export function send<
  Request_1 extends import("http").IncomingMessage,
  Response_1 extends import("../index.js").ServerResponse
>(
  req: Request_1,
  res: Response_1,
  bufferOtStream: string | Buffer | import("fs").ReadStream,
  byteLength: number
): void;
/**
 * @template {IncomingMessage***REMOVED*** Request
 * @template {ServerResponse***REMOVED*** Response
 * @param {Request***REMOVED*** req response
 * @param {Response***REMOVED*** res response
 * @param {number***REMOVED*** status status
 * @returns {void***REMOVED***
 */
export function sendError<
  Request_1 extends import("http").IncomingMessage,
  Response_1 extends import("../index.js").ServerResponse
>(req: Request_1, res: Response_1, status: number): void;
