"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; ***REMOVED***; ***REMOVED*** else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; ***REMOVED***; ***REMOVED*** return _typeof(obj); ***REMOVED***

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); ***REMOVED*** ***REMOVED***

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); ***REMOVED*** ***REMOVED***

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; ***REMOVED***

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); ***REMOVED*** subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true ***REMOVED*** ***REMOVED***); if (superClass) _setPrototypeOf(subClass, superClass); ***REMOVED***

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; ***REMOVED***; return _setPrototypeOf(o, p); ***REMOVED***

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); ***REMOVED*** else { result = Super.apply(this, arguments); ***REMOVED*** return _possibleConstructorReturn(this, result); ***REMOVED***; ***REMOVED***

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; ***REMOVED*** return _assertThisInitialized(self); ***REMOVED***

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); ***REMOVED*** return self; ***REMOVED***

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {***REMOVED***)); return true; ***REMOVED*** catch (e) { return false; ***REMOVED*** ***REMOVED***

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); ***REMOVED***; return _getPrototypeOf(o); ***REMOVED***

// Generated by CoffeeScript 2.5.1
var DefaultLinePrependor, SpecialString, tools;
tools = require('../../../tools');
SpecialString = require('../../SpecialString');

module.exports = DefaultLinePrependor = function () {
  var self;

  var DefaultLinePrependor = /*#__PURE__*/function (_require) {
    _inherits(DefaultLinePrependor, _require);

    var _super = _createSuper(DefaultLinePrependor);

    function DefaultLinePrependor() {
      _classCallCheck(this, DefaultLinePrependor);

      return _super.apply(this, arguments);
    ***REMOVED***

    _createClass(DefaultLinePrependor, [{
      key: "_render",
      value: function _render(inherited, options) {
        var addToLeft, addToRight, alignment, bullet, char, charLen, diff, left, output, space, toWrite;

        if (this._lineNo === 0 && (bullet = this._config.bullet)) {
          char = bullet.char;
          charLen = new SpecialString(char).length;
          alignment = bullet.alignment;
          space = this._config.amount;
          toWrite = char;
          addToLeft = '';
          addToRight = '';

          if (space > charLen) {
            diff = space - charLen;

            if (alignment === 'right') {
              addToLeft = self.pad(diff);
            ***REMOVED*** else if (alignment === 'left') {
              addToRight = self.pad(diff);
            ***REMOVED*** else if (alignment === 'center') {
              left = Math.round(diff / 2);
              addToLeft = self.pad(left);
              addToRight = self.pad(diff - left);
            ***REMOVED*** else {
              throw Error("Unknown alignment `".concat(alignment, "`"));
            ***REMOVED***
          ***REMOVED***

          output = addToLeft + char + addToRight;
        ***REMOVED*** else {
          output = self.pad(this._config.amount);
        ***REMOVED***

        return inherited + output;
      ***REMOVED***
    ***REMOVED***], [{
      key: "pad",
      value: function pad(howMuch) {
        return tools.repeatString(" ", howMuch);
      ***REMOVED***
    ***REMOVED***]);

    return DefaultLinePrependor;
  ***REMOVED***(require('./_LinePrependor'));

  ;
  self = DefaultLinePrependor;
  return DefaultLinePrependor;
***REMOVED***.call(void 0);