/*
	MIT License http://www.opensource.org/licenses/mit-license.php
*/

"use strict";

const { SyncWaterfallHook ***REMOVED*** = require("tapable");
const Compilation = require("../Compilation");
const RuntimeGlobals = require("../RuntimeGlobals");
const Template = require("../Template");
const HelperRuntimeModule = require("./HelperRuntimeModule");

/** @typedef {import("../Chunk")***REMOVED*** Chunk */
/** @typedef {import("../Compiler")***REMOVED*** Compiler */

/**
 * @typedef {object***REMOVED*** LoadScriptCompilationHooks
 * @property {SyncWaterfallHook<[string, Chunk]>***REMOVED*** createScript
 */

/** @type {WeakMap<Compilation, LoadScriptCompilationHooks>***REMOVED*** */
const compilationHooksMap = new WeakMap();

class LoadScriptRuntimeModule extends HelperRuntimeModule {
	/**
	 * @param {Compilation***REMOVED*** compilation the compilation
	 * @returns {LoadScriptCompilationHooks***REMOVED*** hooks
	 */
	static getCompilationHooks(compilation) {
		if (!(compilation instanceof Compilation)) {
			throw new TypeError(
				"The 'compilation' argument must be an instance of Compilation"
			);
		***REMOVED***
		let hooks = compilationHooksMap.get(compilation);
		if (hooks === undefined) {
			hooks = {
				createScript: new SyncWaterfallHook(["source", "chunk"])
			***REMOVED***;
			compilationHooksMap.set(compilation, hooks);
		***REMOVED***
		return hooks;
	***REMOVED***

	/**
	 * @param {boolean=***REMOVED*** withCreateScriptUrl use create script url for trusted types
	 * @param {boolean=***REMOVED*** withFetchPriority use `fetchPriority` attribute
	 */
	constructor(withCreateScriptUrl, withFetchPriority) {
		super("load script");
		this._withCreateScriptUrl = withCreateScriptUrl;
		this._withFetchPriority = withFetchPriority;
	***REMOVED***

	/**
	 * @returns {string | null***REMOVED*** runtime code
	 */
	generate() {
		const compilation = /** @type {Compilation***REMOVED*** */ (this.compilation);
		const { runtimeTemplate, outputOptions ***REMOVED*** = compilation;
		const {
			scriptType,
			chunkLoadTimeout: loadTimeout,
			crossOriginLoading,
			uniqueName,
			charset
		***REMOVED*** = outputOptions;
		const fn = RuntimeGlobals.loadScript;

		const { createScript ***REMOVED*** =
			LoadScriptRuntimeModule.getCompilationHooks(compilation);

		const code = Template.asString([
			"script = document.createElement('script');",
			scriptType ? `script.type = ${JSON.stringify(scriptType)***REMOVED***;` : "",
			charset ? "script.charset = 'utf-8';" : "",
			`script.timeout = ${/** @type {number***REMOVED*** */ (loadTimeout) / 1000***REMOVED***;`,
			`if (${RuntimeGlobals.scriptNonce***REMOVED***) {`,
			Template.indent(
				`script.setAttribute("nonce", ${RuntimeGlobals.scriptNonce***REMOVED***);`
			),
			"***REMOVED***",
			uniqueName
				? 'script.setAttribute("data-webpack", dataWebpackPrefix + key);'
				: "",
			this._withFetchPriority
				? Template.asString([
						"if(fetchPriority) {",
						Template.indent(
							'script.setAttribute("fetchpriority", fetchPriority);'
						),
						"***REMOVED***"
					])
				: "",
			`script.src = ${
				this._withCreateScriptUrl
					? `${RuntimeGlobals.createScriptUrl***REMOVED***(url)`
					: "url"
			***REMOVED***;`,
			crossOriginLoading
				? crossOriginLoading === "use-credentials"
					? 'script.crossOrigin = "use-credentials";'
					: Template.asString([
							"if (script.src.indexOf(window.location.origin + '/') !== 0) {",
							Template.indent(
								`script.crossOrigin = ${JSON.stringify(crossOriginLoading)***REMOVED***;`
							),
							"***REMOVED***"
						])
				: ""
		]);

		return Template.asString([
			"var inProgress = {***REMOVED***;",
			uniqueName
				? `var dataWebpackPrefix = ${JSON.stringify(`${uniqueName***REMOVED***:`)***REMOVED***;`
				: "// data-webpack is not used as build has no uniqueName",
			"// loadScript function to load a script via script tag",
			`${fn***REMOVED*** = ${runtimeTemplate.basicFunction(
				`url, done, key, chunkId${
					this._withFetchPriority ? ", fetchPriority" : ""
				***REMOVED***`,
				[
					"if(inProgress[url]) { inProgress[url].push(done); return; ***REMOVED***",
					"var script, needAttach;",
					"if(key !== undefined) {",
					Template.indent([
						'var scripts = document.getElementsByTagName("script");',
						"for(var i = 0; i < scripts.length; i++) {",
						Template.indent([
							"var s = scripts[i];",
							`if(s.getAttribute("src") == url${
								uniqueName
									? ' || s.getAttribute("data-webpack") == dataWebpackPrefix + key'
									: ""
							***REMOVED***) { script = s; break; ***REMOVED***`
						]),
						"***REMOVED***"
					]),
					"***REMOVED***",
					"if(!script) {",
					Template.indent([
						"needAttach = true;",
						createScript.call(code, /** @type {Chunk***REMOVED*** */ (this.chunk))
					]),
					"***REMOVED***",
					"inProgress[url] = [done];",
					`var onScriptComplete = ${runtimeTemplate.basicFunction(
						"prev, event",
						Template.asString([
							"// avoid mem leaks in IE.",
							"script.onerror = script.onload = null;",
							"clearTimeout(timeout);",
							"var doneFns = inProgress[url];",
							"delete inProgress[url];",
							"script.parentNode && script.parentNode.removeChild(script);",
							`doneFns && doneFns.forEach(${runtimeTemplate.returningFunction(
								"fn(event)",
								"fn"
							)***REMOVED***);`,
							"if(prev) return prev(event);"
						])
					)***REMOVED***`,
					`var timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script ***REMOVED***), ${loadTimeout***REMOVED***);`,
					"script.onerror = onScriptComplete.bind(null, script.onerror);",
					"script.onload = onScriptComplete.bind(null, script.onload);",
					"needAttach && document.head.appendChild(script);"
				]
			)***REMOVED***;`
		]);
	***REMOVED***
***REMOVED***

module.exports = LoadScriptRuntimeModule;
