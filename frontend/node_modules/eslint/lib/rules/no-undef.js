/**
 * @fileoverview Rule to flag references to undeclared variables.
 * @author Mark Macdonald
 */
"use strict";

//------------------------------------------------------------------------------
// Helpers
//------------------------------------------------------------------------------

/**
 * Checks if the given node is the argument of a typeof operator.
 * @param {ASTNode***REMOVED*** node The AST node being checked.
 * @returns {boolean***REMOVED*** Whether or not the node is the argument of a typeof operator.
 */
function hasTypeOfOperator(node) {
	const parent = node.parent;

	return parent.type === "UnaryExpression" && parent.operator === "typeof";
***REMOVED***

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

/** @type {import('../types').Rule.RuleModule***REMOVED*** */
module.exports = {
	meta: {
		type: "problem",

		defaultOptions: [
			{
				typeof: false,
			***REMOVED***,
		],

		docs: {
			description:
				"Disallow the use of undeclared variables unless mentioned in `/*global */` comments",
			recommended: true,
			url: "https://eslint.org/docs/latest/rules/no-undef",
		***REMOVED***,

		schema: [
			{
				type: "object",
				properties: {
					typeof: {
						type: "boolean",
					***REMOVED***,
				***REMOVED***,
				additionalProperties: false,
			***REMOVED***,
		],
		messages: {
			undef: "'{{name***REMOVED******REMOVED***' is not defined.",
		***REMOVED***,
	***REMOVED***,

	create(context) {
		const [{ typeof: considerTypeOf ***REMOVED***] = context.options;
		const sourceCode = context.sourceCode;

		return {
			"Program:exit"(node) {
				const globalScope = sourceCode.getScope(node);

				globalScope.through.forEach(ref => {
					const identifier = ref.identifier;

					if (!considerTypeOf && hasTypeOfOperator(identifier)) {
						return;
					***REMOVED***

					context.report({
						node: identifier,
						messageId: "undef",
						data: identifier,
					***REMOVED***);
				***REMOVED***);
			***REMOVED***,
		***REMOVED***;
	***REMOVED***,
***REMOVED***;
