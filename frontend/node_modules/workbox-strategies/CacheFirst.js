/*
  Copyright 2018 Google LLC

  Use of this source code is governed by an MIT-style
  license that can be found in the LICENSE file or at
  https://opensource.org/licenses/MIT.
*/
import { assert ***REMOVED*** from 'workbox-core/_private/assert.js';
import { logger ***REMOVED*** from 'workbox-core/_private/logger.js';
import { WorkboxError ***REMOVED*** from 'workbox-core/_private/WorkboxError.js';
import { Strategy ***REMOVED*** from './Strategy.js';
import { messages ***REMOVED*** from './utils/messages.js';
import './_version.js';
/**
 * An implementation of a [cache-first](https://developer.chrome.com/docs/workbox/caching-strategies-overview/#cache-first-falling-back-to-network)
 * request strategy.
 *
 * A cache first strategy is useful for assets that have been revisioned,
 * such as URLs like `/styles/example.a8f5f1.css`, since they
 * can be cached for long periods of time.
 *
 * If the network request fails, and there is no cache match, this will throw
 * a `WorkboxError` exception.
 *
 * @extends workbox-strategies.Strategy
 * @memberof workbox-strategies
 */
class CacheFirst extends Strategy {
    /**
     * @private
     * @param {Request|string***REMOVED*** request A request to run this strategy for.
     * @param {workbox-strategies.StrategyHandler***REMOVED*** handler The event that
     *     triggered the request.
     * @return {Promise<Response>***REMOVED***
     */
    async _handle(request, handler) {
        const logs = [];
        if (process.env.NODE_ENV !== 'production') {
            assert.isInstance(request, Request, {
                moduleName: 'workbox-strategies',
                className: this.constructor.name,
                funcName: 'makeRequest',
                paramName: 'request',
            ***REMOVED***);
        ***REMOVED***
        let response = await handler.cacheMatch(request);
        let error = undefined;
        if (!response) {
            if (process.env.NODE_ENV !== 'production') {
                logs.push(`No response found in the '${this.cacheName***REMOVED***' cache. ` +
                    `Will respond with a network request.`);
            ***REMOVED***
            try {
                response = await handler.fetchAndCachePut(request);
            ***REMOVED***
            catch (err) {
                if (err instanceof Error) {
                    error = err;
                ***REMOVED***
            ***REMOVED***
            if (process.env.NODE_ENV !== 'production') {
                if (response) {
                    logs.push(`Got response from network.`);
                ***REMOVED***
                else {
                    logs.push(`Unable to get a response from the network.`);
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***
        else {
            if (process.env.NODE_ENV !== 'production') {
                logs.push(`Found a cached response in the '${this.cacheName***REMOVED***' cache.`);
            ***REMOVED***
        ***REMOVED***
        if (process.env.NODE_ENV !== 'production') {
            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));
            for (const log of logs) {
                logger.log(log);
            ***REMOVED***
            messages.printFinalResponse(response);
            logger.groupEnd();
        ***REMOVED***
        if (!response) {
            throw new WorkboxError('no-response', { url: request.url, error ***REMOVED***);
        ***REMOVED***
        return response;
    ***REMOVED***
***REMOVED***
export { CacheFirst ***REMOVED***;
