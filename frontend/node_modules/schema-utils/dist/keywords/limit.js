"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
***REMOVED***);
exports.default = void 0;
/** @typedef {import("ajv").default***REMOVED*** Ajv */
/** @typedef {import("ajv").Code***REMOVED*** Code */
/** @typedef {import("ajv").Name***REMOVED*** Name */
/** @typedef {import("ajv").KeywordErrorDefinition***REMOVED*** KeywordErrorDefinition */

/**
 * @param {Ajv***REMOVED*** ajv
 * @returns {Ajv***REMOVED***
 */
function addLimitKeyword(ajv) {
  // eslint-disable-next-line global-require
  const {
    _,
    str,
    KeywordCxt,
    nil,
    Name
  ***REMOVED*** = require("ajv");

  /**
   * @param {Code | Name***REMOVED*** x
   * @returns {Code | Name***REMOVED***
   */
  function par(x) {
    return x instanceof Name ? x : _`(${x***REMOVED***)`;
  ***REMOVED***

  /**
   * @param {Code***REMOVED*** op
   * @returns {function(Code, Code): Code***REMOVED***
   */
  function mappend(op) {
    return (x, y) => x === nil ? y : y === nil ? x : _`${par(x)***REMOVED*** ${op***REMOVED*** ${par(y)***REMOVED***`;
  ***REMOVED***
  const orCode = mappend(_`||`);

  // boolean OR (||) expression with the passed arguments
  /**
   * @param {...Code***REMOVED*** args
   * @returns {Code***REMOVED***
   */
  function or(...args) {
    return args.reduce(orCode);
  ***REMOVED***

  /**
   * @param {string | number***REMOVED*** key
   * @returns {Code***REMOVED***
   */
  function getProperty(key) {
    return _`[${key***REMOVED***]`;
  ***REMOVED***
  const keywords = {
    formatMaximum: {
      okStr: "<=",
      ok: _`<=`,
      fail: _`>`
    ***REMOVED***,
    formatMinimum: {
      okStr: ">=",
      ok: _`>=`,
      fail: _`<`
    ***REMOVED***,
    formatExclusiveMaximum: {
      okStr: "<",
      ok: _`<`,
      fail: _`>=`
    ***REMOVED***,
    formatExclusiveMinimum: {
      okStr: ">",
      ok: _`>`,
      fail: _`<=`
    ***REMOVED***
  ***REMOVED***;

  /** @type {KeywordErrorDefinition***REMOVED*** */
  const error = {
    message: ({
      keyword,
      schemaCode
    ***REMOVED***) => str`should be ${keywords[(/** @type {keyof typeof keywords***REMOVED*** */keyword)].okStr***REMOVED*** ${schemaCode***REMOVED***`,
    params: ({
      keyword,
      schemaCode
    ***REMOVED***) => _`{comparison: ${keywords[(/** @type {keyof typeof keywords***REMOVED*** */keyword)].okStr***REMOVED***, limit: ${schemaCode***REMOVED******REMOVED***`
  ***REMOVED***;
  for (const keyword of Object.keys(keywords)) {
    ajv.addKeyword({
      keyword,
      type: "string",
      schemaType: keyword.startsWith("formatExclusive") ? ["string", "boolean"] : ["string", "number"],
      $data: true,
      error,
      code(cxt) {
        const {
          gen,
          data,
          schemaCode,
          keyword,
          it
        ***REMOVED*** = cxt;
        const {
          opts,
          self
        ***REMOVED*** = it;
        if (!opts.validateFormats) return;
        const fCxt = new KeywordCxt(it, /** @type {any***REMOVED*** */
        self.RULES.all.format.definition, "format");

        /**
         * @param {Name***REMOVED*** fmt
         * @returns {Code***REMOVED***
         */
        function compareCode(fmt) {
          return _`${fmt***REMOVED***.compare(${data***REMOVED***, ${schemaCode***REMOVED***) ${keywords[(/** @type {keyof typeof keywords***REMOVED*** */keyword)].fail***REMOVED*** 0`;
        ***REMOVED***
        function validate$DataFormat() {
          const fmts = gen.scopeValue("formats", {
            ref: self.formats,
            code: opts.code.formats
          ***REMOVED***);
          const fmt = gen.const("fmt", _`${fmts***REMOVED***[${fCxt.schemaCode***REMOVED***]`);
          cxt.fail$data(or(_`typeof ${fmt***REMOVED*** != "object"`, _`${fmt***REMOVED*** instanceof RegExp`, _`typeof ${fmt***REMOVED***.compare != "function"`, compareCode(fmt)));
        ***REMOVED***
        function validateFormat() {
          const format = fCxt.schema;
          const fmtDef = self.formats[format];
          if (!fmtDef || fmtDef === true) {
            return;
          ***REMOVED***
          if (typeof fmtDef !== "object" || fmtDef instanceof RegExp || typeof fmtDef.compare !== "function") {
            throw new Error(`"${keyword***REMOVED***": format "${format***REMOVED***" does not define "compare" function`);
          ***REMOVED***
          const fmt = gen.scopeValue("formats", {
            key: format,
            ref: fmtDef,
            code: opts.code.formats ? _`${opts.code.formats***REMOVED***${getProperty(format)***REMOVED***` : undefined
          ***REMOVED***);
          cxt.fail$data(compareCode(fmt));
        ***REMOVED***
        if (fCxt.$data) {
          validate$DataFormat();
        ***REMOVED*** else {
          validateFormat();
        ***REMOVED***
      ***REMOVED***,
      dependencies: ["format"]
    ***REMOVED***);
  ***REMOVED***
  return ajv;
***REMOVED***
var _default = exports.default = addLimitKeyword;